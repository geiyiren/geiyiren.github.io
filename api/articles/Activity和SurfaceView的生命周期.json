{"title":"Activity和SurfaceView的生命周期","slug":"Activity和SurfaceView的生命周期","date":"2023-02-10T16:47:00.000Z","updated":"2023-11-24T15:15:00.982Z","comments":true,"path":"api/articles/Activity和SurfaceView的生命周期.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_surfaceView.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_lifecycle.png"],"content":"<p>当用户浏览、退出和返回到您的应用时，您应用中的 Activity 实例会在其生命周期的不同状态间转换。Activity 类会提供许多回调，这些回调会让 Activity 知晓某个状态已经更改：系统正在创建、停止或恢复某个 Activity，或者正在销毁该 Activity 所在的进程。</p>\n<p>在生命周期回调方法中，您可以声明用户离开和再次进入 Activity 时 Activity 的行为方式。例如，如果您正构建流媒体视频播放器，当用户切换至另一应用时，您可能要暂停视频或终止网络连接。当用户返回时，您可以重新连接网络并允许用户从同一位置继续播放视频。换言之，每个回调都支持您执行适合给定状态变更的特定作业。在合适的时间执行正确的作业，并妥善处理转换，这将提升应用的稳健性和性能。例如，良好的生命周期回调实现有助于防止应用出现以下问题：</p>\n<ul>\n<li>当用户在使用应用时接听来电，或切换至另一应用时崩溃。</li>\n<li>当用户未主动使用它时，消耗宝贵的系统资源。</li>\n<li>当用户离开应用并在稍后返回时，丢失用户的进度。</li>\n<li>当屏幕在横向和纵向之间旋转时，崩溃或丢失用户的进度。</li>\n</ul>\n<h1 id=\"Activity-生命周期概念\"><a href=\"#Activity-生命周期概念\" class=\"headerlink\" title=\"Activity 生命周期概念\"></a>Activity 生命周期概念</h1><p>为了在 Activity 生命周期的各个阶段之间导航转换，Activity 类提供六个核心回调：onCreate()、onStart()、onResume()、onPause()、onStop() 和 onDestroy()。当 Activity 进入新状态时，系统会调用其中每个回调。</p>\n<p>下图是对此范例的直观展现。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_surfaceView.png\">  </p>\n<p>当用户开始离开 Activity 时，系统会调用方法来销毁该 Activity。在某些情况下，此销毁只是部分销毁；Activity 仍然驻留在内存中（例如当用户切换至另一应用时），并且仍然可以返回到前台。如果用户返回到该 Activity，Activity 会从用户离开时的位置继续运行。除了少数例外，应用在后台运行时会受到限制，无法启动 Activity。</p>\n<p>系统终止给定进程及其中 Activity 的可能性取决于当时 Activity 的状态。Activity 状态和从内存中弹出 会更详细地介绍状态与弹出漏洞之间的关系。</p>\n<p>根据 Activity 的复杂程度，您可能不需要实现所有生命周期方法。但是，请务必了解每个方法，并实现能够确保应用按用户预期方式运行的方法，这非常重要。</p>\n<blockquote>\n<p>具体细节参考：<a href=\"https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java\">https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java</a></p>\n</blockquote>\n<h1 id=\"Activity和SurfaceView的生命周期\"><a href=\"#Activity和SurfaceView的生命周期\" class=\"headerlink\" title=\"Activity和SurfaceView的生命周期\"></a>Activity和SurfaceView的生命周期</h1><ul>\n<li><p>程序打开<br>Activity 调用顺序:<code>onCreate()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceCreated()</code>-&gt;<code>surfaceChanged()</code>  </p>\n</li>\n<li><p>程序关闭（按 BACK 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code>-&gt;<code>onDestory()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p>\n</li>\n<li><p>程序切到后台（按 HOME 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p>\n</li>\n<li><p>程序切到前台<br>Activity 调用顺序: <code>onRestart()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceChanged()</code>-&gt;<code>surfaceCreated()</code>  </p>\n</li>\n<li><p>屏幕锁定（挂断键或锁定屏幕）<br>Activity 调用顺序: <code>onPause()</code><br>SurfaceView 什么方法都不调用  </p>\n</li>\n<li><p>屏幕解锁<br>Activity 调用顺序:<code>onResume()</code><br>SurfaceView 什么方法都不调用</p>\n</li>\n</ul>\n<blockquote>\n<p>总结SurfaceView在页面可见或者不可见时触发  </p>\n</blockquote>\n<p>示例图如下所示:  </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_lifecycle.png\"></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","more":"<p>当用户浏览、退出和返回到您的应用时，您应用中的 Activity 实例会在其生命周期的不同状态间转换。Activity 类会提供许多回调，这些回调会让 Activity 知晓某个状态已经更改：系统正在创建、停止或恢复某个 Activity，或者正在销毁该 Activity 所在的进程。</p>\n<p>在生命周期回调方法中，您可以声明用户离开和再次进入 Activity 时 Activity 的行为方式。例如，如果您正构建流媒体视频播放器，当用户切换至另一应用时，您可能要暂停视频或终止网络连接。当用户返回时，您可以重新连接网络并允许用户从同一位置继续播放视频。换言之，每个回调都支持您执行适合给定状态变更的特定作业。在合适的时间执行正确的作业，并妥善处理转换，这将提升应用的稳健性和性能。例如，良好的生命周期回调实现有助于防止应用出现以下问题：</p>\n<ul>\n<li>当用户在使用应用时接听来电，或切换至另一应用时崩溃。</li>\n<li>当用户未主动使用它时，消耗宝贵的系统资源。</li>\n<li>当用户离开应用并在稍后返回时，丢失用户的进度。</li>\n<li>当屏幕在横向和纵向之间旋转时，崩溃或丢失用户的进度。</li>\n</ul>\n<h1 id=\"Activity-生命周期概念\"><a href=\"#Activity-生命周期概念\" class=\"headerlink\" title=\"Activity 生命周期概念\"></a>Activity 生命周期概念</h1><p>为了在 Activity 生命周期的各个阶段之间导航转换，Activity 类提供六个核心回调：onCreate()、onStart()、onResume()、onPause()、onStop() 和 onDestroy()。当 Activity 进入新状态时，系统会调用其中每个回调。</p>\n<p>下图是对此范例的直观展现。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_surfaceView.png\">  </p>\n<p>当用户开始离开 Activity 时，系统会调用方法来销毁该 Activity。在某些情况下，此销毁只是部分销毁；Activity 仍然驻留在内存中（例如当用户切换至另一应用时），并且仍然可以返回到前台。如果用户返回到该 Activity，Activity 会从用户离开时的位置继续运行。除了少数例外，应用在后台运行时会受到限制，无法启动 Activity。</p>\n<p>系统终止给定进程及其中 Activity 的可能性取决于当时 Activity 的状态。Activity 状态和从内存中弹出 会更详细地介绍状态与弹出漏洞之间的关系。</p>\n<p>根据 Activity 的复杂程度，您可能不需要实现所有生命周期方法。但是，请务必了解每个方法，并实现能够确保应用按用户预期方式运行的方法，这非常重要。</p>\n<blockquote>\n<p>具体细节参考：<a href=\"https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java\">https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java</a></p>\n</blockquote>\n<h1 id=\"Activity和SurfaceView的生命周期\"><a href=\"#Activity和SurfaceView的生命周期\" class=\"headerlink\" title=\"Activity和SurfaceView的生命周期\"></a>Activity和SurfaceView的生命周期</h1><ul>\n<li><p>程序打开<br>Activity 调用顺序:<code>onCreate()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceCreated()</code>-&gt;<code>surfaceChanged()</code>  </p>\n</li>\n<li><p>程序关闭（按 BACK 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code>-&gt;<code>onDestory()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p>\n</li>\n<li><p>程序切到后台（按 HOME 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p>\n</li>\n<li><p>程序切到前台<br>Activity 调用顺序: <code>onRestart()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceChanged()</code>-&gt;<code>surfaceCreated()</code>  </p>\n</li>\n<li><p>屏幕锁定（挂断键或锁定屏幕）<br>Activity 调用顺序: <code>onPause()</code><br>SurfaceView 什么方法都不调用  </p>\n</li>\n<li><p>屏幕解锁<br>Activity 调用顺序:<code>onResume()</code><br>SurfaceView 什么方法都不调用</p>\n</li>\n</ul>\n<blockquote>\n<p>总结SurfaceView在页面可见或者不可见时触发  </p>\n</blockquote>\n<p>示例图如下所示:  </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_lifecycle.png\"></p>\n","categories":[{"name":"android","path":"api/categories/android.json"}],"tags":[{"name":"android","path":"api/tags/android.json"},{"name":"activity","path":"api/tags/activity.json"},{"name":"surfaceView","path":"api/tags/surfaceView.json"}]}