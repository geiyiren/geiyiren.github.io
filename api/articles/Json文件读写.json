{"title":"Json文件读写","slug":"Json文件读写","date":"2022-12-14T16:47:00.000Z","updated":"2023-11-24T15:25:15.590Z","comments":true,"path":"api/articles/Json文件读写.json","excerpt":null,"covers":["https://github.com/geiyiren/MyBlogFile1/blob/other/json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/json.hpp"],"content":"<h1 id=\"java读写Json文件\"><a href=\"#java读写Json文件\" class=\"headerlink\" title=\"java读写Json文件\"></a>java读写Json文件</h1><h2 id=\"json格式介绍\"><a href=\"#json格式介绍\" class=\"headerlink\" title=\"json格式介绍\"></a>json格式介绍</h2><p>json与xml相比, 对数据的描述性比XML较差,但是数据体积小,传递速度更快.  </p>\n<p>json数据的书写格式是”名称:值对”,比如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;Name&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;John&quot;</span>                        <span class=\"comment\">//name为名称,值对为&quot;john&quot;字符串</span></span><br></pre></td></tr></table></figure>\n<p>值对类型共分为:  </p>\n<ul>\n<li>数字（整数或浮点数）</li>\n<li>字符串（在双引号中）</li>\n<li>逻辑值（true 或 false）</li>\n<li>数组（在方括号[]中）</li>\n<li>对象（在花括号{}中）</li>\n<li>null<br>当然数组也可以包含多对象:  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;employees&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;John&quot;</span> <span class=\"punctuation\">,</span> <span class=\"attr\">&quot;Age&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">19</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Anna&quot;</span> <span class=\"punctuation\">,</span> <span class=\"attr\">&quot;Age&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">22</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Peter&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;Age&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">23</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n表示”employees”对象中有3个对象数组(每个对象数组表示一条员工信息),其中并列的数据都必须用逗号”,”隔开.</li>\n</ul>\n<h2 id=\"json文件读写示例\"><a href=\"#json文件读写示例\" class=\"headerlink\" title=\"json文件读写示例\"></a>json文件读写示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fibocom.multicamera;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">carParameter</span>  <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> on_TrajectoryLine;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> on_BSD;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> on_Bright;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> scale_size; <span class=\"comment\">// 缩放</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> car_length;<span class=\"comment\">//车辆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> car_width;<span class=\"comment\">//车辆宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> suspension_front;<span class=\"comment\">//前悬挂</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> suspension_back;<span class=\"comment\">//后悬挂</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AvmSetParm</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String jsonFileName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> carParameter <span class=\"title function_\">readJson</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            carParameter carParm=<span class=\"keyword\">new</span> <span class=\"title class_\">carParameter</span>();</span><br><span class=\"line\">            <span class=\"type\">char</span> cbuf[] = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">10000</span>];</span><br><span class=\"line\">            <span class=\"type\">InputStreamReader</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(jsonFileName)),<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span>input.read(cbuf);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">            <span class=\"comment\">//1.构造一个json对象</span></span><br><span class=\"line\">            <span class=\"type\">JSONObject</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(text.substring(text.indexOf(<span class=\"string\">&quot;&#123;&quot;</span>)));   <span class=\"comment\">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取数组</span></span><br><span class=\"line\">            <span class=\"type\">JSONArray</span> <span class=\"variable\">dataArr</span> <span class=\"operator\">=</span> obj.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">JSONObject</span> <span class=\"variable\">carParameterObj</span> <span class=\"operator\">=</span>dataArr.getJSONObject(<span class=\"number\">3</span>);</span><br><span class=\"line\">            JSONObject carParameter=carParameterObj.getJSONObject(<span class=\"string\">&quot;carParameter&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            carParm.car_length=carParameter.getInt(<span class=\"string\">&quot;car_length&quot;</span>);</span><br><span class=\"line\">            carParm.car_width=carParameter.getInt(<span class=\"string\">&quot;car_width&quot;</span>);</span><br><span class=\"line\">            carParm.suspension_front=carParameter.getInt(<span class=\"string\">&quot;suspension_front&quot;</span>);</span><br><span class=\"line\">            carParm.suspension_back=carParameter.getInt(<span class=\"string\">&quot;suspension_back&quot;</span>);</span><br><span class=\"line\">            carParm.scale_size=carParameter.getDouble(<span class=\"string\">&quot;scale_size&quot;</span>);</span><br><span class=\"line\">            carParm.on_Bright=carParameter.getInt(<span class=\"string\">&quot;BE_Switch&quot;</span>);</span><br><span class=\"line\">            carParm.on_BSD=carParameter.getInt(<span class=\"string\">&quot;BSD_Switch&quot;</span>);</span><br><span class=\"line\">            carParm.on_TrajectoryLine=carParameter.getInt(<span class=\"string\">&quot;TrajectoryLine_Switch&quot;</span>);</span><br><span class=\"line\">            input.close();</span><br><span class=\"line\"></span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;car_length:&quot;</span>+carParm.car_length);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;car_width:&quot;</span>+carParm.car_width);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;suspension_front:&quot;</span>+carParm.suspension_front);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;suspension_back:&quot;</span>+carParm.suspension_back);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;scale_size:&quot;</span>+carParm.scale_size);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> carParm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeJson</span><span class=\"params\">(carParameter carParm)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> cbuf[] = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        <span class=\"type\">InputStreamReader</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(jsonFileName)),<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span>input.read(cbuf);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        <span class=\"comment\">//1.构造一个json对象</span></span><br><span class=\"line\">        <span class=\"type\">JSONObject</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(text.substring(text.indexOf(<span class=\"string\">&quot;&#123;&quot;</span>)));   <span class=\"comment\">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取数组</span></span><br><span class=\"line\">        <span class=\"type\">JSONArray</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> obj.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">JSONObject</span> <span class=\"variable\">carParameterObj</span> <span class=\"operator\">=</span>data.getJSONObject(<span class=\"number\">3</span>);</span><br><span class=\"line\">        JSONObject carParameter=carParameterObj.getJSONObject(<span class=\"string\">&quot;carParameter&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;car_length&quot;</span>,carParm.car_length);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;car_width&quot;</span>,carParm.car_width);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;suspension_front&quot;</span>,carParm.suspension_front);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;suspension_back&quot;</span>,carParm.suspension_back);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;BE_Switch&quot;</span>,carParm.on_Bright);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;BSD_Switch&quot;</span>,carParm.on_BSD);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;TrajectoryLine_Switch&quot;</span>,carParm.on_TrajectoryLine);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;car_length&quot;</span>+carParm.car_length);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;car_width&quot;</span>+carParm.car_width);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;suspension_front&quot;</span>+carParm.suspension_front);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;suspension_back&quot;</span>+carParm.suspension_back);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;BE_Switch&quot;</span>+carParm.on_Bright);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;BSD_Switch&quot;</span>+carParm.on_BSD);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;TrajectoryLine_Switch&quot;</span>+carParm.on_TrajectoryLine);</span><br><span class=\"line\"></span><br><span class=\"line\">        carParameterObj.put(<span class=\"string\">&quot;carParameter&quot;</span>,carParameter);</span><br><span class=\"line\">        data.put(<span class=\"number\">3</span>,carParameterObj);</span><br><span class=\"line\">        obj.put(<span class=\"string\">&quot;data&quot;</span>,data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">osw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(jsonFileName),<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        osw.write(obj.toString(<span class=\"number\">4</span>));</span><br><span class=\"line\">        osw.flush();<span class=\"comment\">//清空缓冲区，强制输出数据</span></span><br><span class=\"line\">        osw.close();<span class=\"comment\">//关闭输出流</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"c-读写Json文件\"><a href=\"#c-读写Json文件\" class=\"headerlink\" title=\"c++读写Json文件\"></a>c++读写Json文件</h1><ul>\n<li><p>模板函数定义</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 从文本中加载json</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam R json类型</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam T 自动推断的字符串类型</span></span><br><span class=\"line\"><span class=\"comment\"> * @param config json字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * @return R</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> R, <span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> R <span class=\"title\">LoadJsonFromText</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;config)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// static_assert(JsonHasParse&lt;R&gt;::value,</span></span><br><span class=\"line\">    <span class=\"comment\">//               &quot;error: the type must has static method [parse].&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// nlohmann json</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> R::<span class=\"built_in\">parse</span>(config, <span class=\"literal\">nullptr</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 通用类型</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam R</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam T</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam U</span></span><br><span class=\"line\"><span class=\"comment\"> * @param config</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val</span></span><br><span class=\"line\"><span class=\"comment\"> * @return R</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> R, <span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> R <span class=\"title\">OptionalContain</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;config, <span class=\"type\">const</span> U &amp;key, <span class=\"type\">const</span> R &amp;val, JsonGenericType)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config.<span class=\"built_in\">count</span>(key) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config.<span class=\"built_in\">at</span>(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span><span class=\"string\">&quot;json.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> nlohmann::json;</span><br><span class=\"line\">std::string config= <span class=\"string\">&quot;example.jsonc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> json_config = <span class=\"built_in\">LoadJsonFromText</span>&lt;json&gt;(config);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;vs_config = json_config[<span class=\"string\">&quot;video_source&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> width  = vs_config[<span class=\"string\">&quot;width&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> height = vs_config[<span class=\"string\">&quot;height&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> width1  = json_config[<span class=\"string\">&quot;video_source&quot;</span>][<span class=\"string\">&quot;width&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> height1 = json_config[<span class=\"string\">&quot;video_source&quot;</span>][<span class=\"string\">&quot;height&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">json_config[<span class=\"string\">&quot;video_source&quot;</span>][<span class=\"string\">&quot;width&quot;</span>]  = <span class=\"number\">720</span>;</span><br><span class=\"line\">json_config[<span class=\"string\">&quot;video_source&quot;</span>][<span class=\"string\">&quot;height&quot;</span>] = <span class=\"number\">480</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将jsonc文件转换为string</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;json_config_str = json_config.<span class=\"built_in\">dump</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;fake_config = vs_config[<span class=\"string\">&quot;fake&quot;</span>];</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> fake_enable = ac::<span class=\"built_in\">OptionalContain</span>(fake_config, <span class=\"string\">&quot;enable&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>json.hpp</code><br><img src=\"https://github.com/geiyiren/MyBlogFile1/blob/other/json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/json.hpp\" alt=\"json.hpp\"></p>\n</li>\n<li><p><code>example.jsonc</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // 当前配置文件的版本，此版本用于兼容性处理</span><br><span class=\"line\">    &quot;version&quot;: &quot;1.0.0.0&quot;,</span><br><span class=\"line\">    &quot;camera_id&quot;: &quot;camera_1&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;video_source&quot;: &#123;</span><br><span class=\"line\">        &quot;width&quot; : 1280,                        // 需要设置为平台相应的分辨率</span><br><span class=\"line\">        &quot;height&quot;: 720,</span><br><span class=\"line\">        &quot;format&quot;: &quot;kRGB888&quot;,                  // 内部自行生成, 这里实际上无效</span><br><span class=\"line\">        &quot;device&quot;: &quot;/dev/video0&quot;,</span><br><span class=\"line\">        &quot;fps&quot;   : 20,</span><br><span class=\"line\">        &quot;connect&quot;: true,                      // true：把回调的图像送入算法； false：不给算法送入图像。</span><br><span class=\"line\">                                              // 这个选项对假视频源依然有效</span><br><span class=\"line\">        &quot;fake&quot;: &#123;</span><br><span class=\"line\">            &quot;enable&quot;: false,                  // true表示启用假视频源</span><br><span class=\"line\">            &quot;img&quot;: &quot;assets/ssd_test_img.jpg&quot;, // 使用这张图片来冒充，注意仅支持jpg格式图片，且最好是720或1080P图像</span><br><span class=\"line\">            &quot;out_fmt&quot;: &quot;kYUV422SP&quot;            // 假视频源的输出格式（模拟输出的视频格式）</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>参考连接： <a href=\"https://cloud.tencent.com/developer/article/1556944\">https://cloud.tencent.com/developer/article/1556944</a></p>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","more":"<h1 id=\"java读写Json文件\"><a href=\"#java读写Json文件\" class=\"headerlink\" title=\"java读写Json文件\"></a>java读写Json文件</h1><h2 id=\"json格式介绍\"><a href=\"#json格式介绍\" class=\"headerlink\" title=\"json格式介绍\"></a>json格式介绍</h2><p>json与xml相比, 对数据的描述性比XML较差,但是数据体积小,传递速度更快.  </p>\n<p>json数据的书写格式是”名称:值对”,比如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;Name&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;John&quot;</span>                        <span class=\"comment\">//name为名称,值对为&quot;john&quot;字符串</span></span><br></pre></td></tr></table></figure>\n<p>值对类型共分为:  </p>\n<ul>\n<li>数字（整数或浮点数）</li>\n<li>字符串（在双引号中）</li>\n<li>逻辑值（true 或 false）</li>\n<li>数组（在方括号[]中）</li>\n<li>对象（在花括号{}中）</li>\n<li>null<br>当然数组也可以包含多对象:  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;employees&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;John&quot;</span> <span class=\"punctuation\">,</span> <span class=\"attr\">&quot;Age&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">19</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Anna&quot;</span> <span class=\"punctuation\">,</span> <span class=\"attr\">&quot;Age&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">22</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Peter&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;Age&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">23</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n表示”employees”对象中有3个对象数组(每个对象数组表示一条员工信息),其中并列的数据都必须用逗号”,”隔开.</li>\n</ul>\n<h2 id=\"json文件读写示例\"><a href=\"#json文件读写示例\" class=\"headerlink\" title=\"json文件读写示例\"></a>json文件读写示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fibocom.multicamera;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">carParameter</span>  <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> on_TrajectoryLine;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> on_BSD;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> on_Bright;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> scale_size; <span class=\"comment\">// 缩放</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> car_length;<span class=\"comment\">//车辆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> car_width;<span class=\"comment\">//车辆宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> suspension_front;<span class=\"comment\">//前悬挂</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> suspension_back;<span class=\"comment\">//后悬挂</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AvmSetParm</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String jsonFileName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> carParameter <span class=\"title function_\">readJson</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            carParameter carParm=<span class=\"keyword\">new</span> <span class=\"title class_\">carParameter</span>();</span><br><span class=\"line\">            <span class=\"type\">char</span> cbuf[] = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">10000</span>];</span><br><span class=\"line\">            <span class=\"type\">InputStreamReader</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(jsonFileName)),<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span>input.read(cbuf);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">            <span class=\"comment\">//1.构造一个json对象</span></span><br><span class=\"line\">            <span class=\"type\">JSONObject</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(text.substring(text.indexOf(<span class=\"string\">&quot;&#123;&quot;</span>)));   <span class=\"comment\">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取数组</span></span><br><span class=\"line\">            <span class=\"type\">JSONArray</span> <span class=\"variable\">dataArr</span> <span class=\"operator\">=</span> obj.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">JSONObject</span> <span class=\"variable\">carParameterObj</span> <span class=\"operator\">=</span>dataArr.getJSONObject(<span class=\"number\">3</span>);</span><br><span class=\"line\">            JSONObject carParameter=carParameterObj.getJSONObject(<span class=\"string\">&quot;carParameter&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            carParm.car_length=carParameter.getInt(<span class=\"string\">&quot;car_length&quot;</span>);</span><br><span class=\"line\">            carParm.car_width=carParameter.getInt(<span class=\"string\">&quot;car_width&quot;</span>);</span><br><span class=\"line\">            carParm.suspension_front=carParameter.getInt(<span class=\"string\">&quot;suspension_front&quot;</span>);</span><br><span class=\"line\">            carParm.suspension_back=carParameter.getInt(<span class=\"string\">&quot;suspension_back&quot;</span>);</span><br><span class=\"line\">            carParm.scale_size=carParameter.getDouble(<span class=\"string\">&quot;scale_size&quot;</span>);</span><br><span class=\"line\">            carParm.on_Bright=carParameter.getInt(<span class=\"string\">&quot;BE_Switch&quot;</span>);</span><br><span class=\"line\">            carParm.on_BSD=carParameter.getInt(<span class=\"string\">&quot;BSD_Switch&quot;</span>);</span><br><span class=\"line\">            carParm.on_TrajectoryLine=carParameter.getInt(<span class=\"string\">&quot;TrajectoryLine_Switch&quot;</span>);</span><br><span class=\"line\">            input.close();</span><br><span class=\"line\"></span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;car_length:&quot;</span>+carParm.car_length);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;car_width:&quot;</span>+carParm.car_width);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;suspension_front:&quot;</span>+carParm.suspension_front);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;suspension_back:&quot;</span>+carParm.suspension_back);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>,<span class=\"string\">&quot;scale_size:&quot;</span>+carParm.scale_size);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> carParm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeJson</span><span class=\"params\">(carParameter carParm)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> cbuf[] = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        <span class=\"type\">InputStreamReader</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(jsonFileName)),<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span>input.read(cbuf);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        <span class=\"comment\">//1.构造一个json对象</span></span><br><span class=\"line\">        <span class=\"type\">JSONObject</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(text.substring(text.indexOf(<span class=\"string\">&quot;&#123;&quot;</span>)));   <span class=\"comment\">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取数组</span></span><br><span class=\"line\">        <span class=\"type\">JSONArray</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> obj.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">JSONObject</span> <span class=\"variable\">carParameterObj</span> <span class=\"operator\">=</span>data.getJSONObject(<span class=\"number\">3</span>);</span><br><span class=\"line\">        JSONObject carParameter=carParameterObj.getJSONObject(<span class=\"string\">&quot;carParameter&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;car_length&quot;</span>,carParm.car_length);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;car_width&quot;</span>,carParm.car_width);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;suspension_front&quot;</span>,carParm.suspension_front);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;suspension_back&quot;</span>,carParm.suspension_back);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;BE_Switch&quot;</span>,carParm.on_Bright);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;BSD_Switch&quot;</span>,carParm.on_BSD);</span><br><span class=\"line\">        carParameter.put(<span class=\"string\">&quot;TrajectoryLine_Switch&quot;</span>,carParm.on_TrajectoryLine);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;car_length&quot;</span>+carParm.car_length);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;car_width&quot;</span>+carParm.car_width);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;suspension_front&quot;</span>+carParm.suspension_front);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;suspension_back&quot;</span>+carParm.suspension_back);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;BE_Switch&quot;</span>+carParm.on_Bright);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;BSD_Switch&quot;</span>+carParm.on_BSD);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;AvmSetParm&quot;</span>, <span class=\"string\">&quot;TrajectoryLine_Switch&quot;</span>+carParm.on_TrajectoryLine);</span><br><span class=\"line\"></span><br><span class=\"line\">        carParameterObj.put(<span class=\"string\">&quot;carParameter&quot;</span>,carParameter);</span><br><span class=\"line\">        data.put(<span class=\"number\">3</span>,carParameterObj);</span><br><span class=\"line\">        obj.put(<span class=\"string\">&quot;data&quot;</span>,data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">osw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(jsonFileName),<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        osw.write(obj.toString(<span class=\"number\">4</span>));</span><br><span class=\"line\">        osw.flush();<span class=\"comment\">//清空缓冲区，强制输出数据</span></span><br><span class=\"line\">        osw.close();<span class=\"comment\">//关闭输出流</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"c-读写Json文件\"><a href=\"#c-读写Json文件\" class=\"headerlink\" title=\"c++读写Json文件\"></a>c++读写Json文件</h1><ul>\n<li><p>模板函数定义</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 从文本中加载json</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam R json类型</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam T 自动推断的字符串类型</span></span><br><span class=\"line\"><span class=\"comment\"> * @param config json字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * @return R</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> R, <span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> R <span class=\"title\">LoadJsonFromText</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;config)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// static_assert(JsonHasParse&lt;R&gt;::value,</span></span><br><span class=\"line\">    <span class=\"comment\">//               &quot;error: the type must has static method [parse].&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// nlohmann json</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> R::<span class=\"built_in\">parse</span>(config, <span class=\"literal\">nullptr</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 通用类型</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam R</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam T</span></span><br><span class=\"line\"><span class=\"comment\"> * @tparam U</span></span><br><span class=\"line\"><span class=\"comment\"> * @param config</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val</span></span><br><span class=\"line\"><span class=\"comment\"> * @return R</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> R, <span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> R <span class=\"title\">OptionalContain</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;config, <span class=\"type\">const</span> U &amp;key, <span class=\"type\">const</span> R &amp;val, JsonGenericType)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config.<span class=\"built_in\">count</span>(key) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config.<span class=\"built_in\">at</span>(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span><span class=\"string\">&quot;json.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> nlohmann::json;</span><br><span class=\"line\">std::string config= <span class=\"string\">&quot;example.jsonc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> json_config = <span class=\"built_in\">LoadJsonFromText</span>&lt;json&gt;(config);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;vs_config = json_config[<span class=\"string\">&quot;video_source&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> width  = vs_config[<span class=\"string\">&quot;width&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> height = vs_config[<span class=\"string\">&quot;height&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> width1  = json_config[<span class=\"string\">&quot;video_source&quot;</span>][<span class=\"string\">&quot;width&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> height1 = json_config[<span class=\"string\">&quot;video_source&quot;</span>][<span class=\"string\">&quot;height&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">json_config[<span class=\"string\">&quot;video_source&quot;</span>][<span class=\"string\">&quot;width&quot;</span>]  = <span class=\"number\">720</span>;</span><br><span class=\"line\">json_config[<span class=\"string\">&quot;video_source&quot;</span>][<span class=\"string\">&quot;height&quot;</span>] = <span class=\"number\">480</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将jsonc文件转换为string</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;json_config_str = json_config.<span class=\"built_in\">dump</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;fake_config = vs_config[<span class=\"string\">&quot;fake&quot;</span>];</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> fake_enable = ac::<span class=\"built_in\">OptionalContain</span>(fake_config, <span class=\"string\">&quot;enable&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>json.hpp</code><br><img src=\"https://github.com/geiyiren/MyBlogFile1/blob/other/json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/json.hpp\" alt=\"json.hpp\"></p>\n</li>\n<li><p><code>example.jsonc</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // 当前配置文件的版本，此版本用于兼容性处理</span><br><span class=\"line\">    &quot;version&quot;: &quot;1.0.0.0&quot;,</span><br><span class=\"line\">    &quot;camera_id&quot;: &quot;camera_1&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;video_source&quot;: &#123;</span><br><span class=\"line\">        &quot;width&quot; : 1280,                        // 需要设置为平台相应的分辨率</span><br><span class=\"line\">        &quot;height&quot;: 720,</span><br><span class=\"line\">        &quot;format&quot;: &quot;kRGB888&quot;,                  // 内部自行生成, 这里实际上无效</span><br><span class=\"line\">        &quot;device&quot;: &quot;/dev/video0&quot;,</span><br><span class=\"line\">        &quot;fps&quot;   : 20,</span><br><span class=\"line\">        &quot;connect&quot;: true,                      // true：把回调的图像送入算法； false：不给算法送入图像。</span><br><span class=\"line\">                                              // 这个选项对假视频源依然有效</span><br><span class=\"line\">        &quot;fake&quot;: &#123;</span><br><span class=\"line\">            &quot;enable&quot;: false,                  // true表示启用假视频源</span><br><span class=\"line\">            &quot;img&quot;: &quot;assets/ssd_test_img.jpg&quot;, // 使用这张图片来冒充，注意仅支持jpg格式图片，且最好是720或1080P图像</span><br><span class=\"line\">            &quot;out_fmt&quot;: &quot;kYUV422SP&quot;            // 假视频源的输出格式（模拟输出的视频格式）</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>参考连接： <a href=\"https://cloud.tencent.com/developer/article/1556944\">https://cloud.tencent.com/developer/article/1556944</a></p>\n</blockquote>\n","categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"json文件","path":"api/tags/json文件.json"}]}