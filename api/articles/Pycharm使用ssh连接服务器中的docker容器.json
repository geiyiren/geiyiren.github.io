{"title":"Pycharm使用ssh连接服务器中的docker容器","slug":"Pycharm使用ssh连接服务器中的docker容器","date":"2022-11-23T20:59:07.000Z","updated":"2023-11-26T08:54:56.890Z","comments":true,"path":"api/articles/Pycharm使用ssh连接服务器中的docker容器.json","excerpt":null,"covers":["https://i.loli.net/2021/05/21/YMm8PE6Hd9ySQ2h.png","https://i.loli.net/2021/05/21/z4dMrhtOH8xvZCR.png","https://i.loli.net/2021/06/10/TYq9sIE2aRfdyGC.png","https://i.loli.net/2021/05/21/yigpdXIMG5QTaLw.png","https://i.loli.net/2021/05/21/mQJGDp1xaB6EjO9.png","https://i.loli.net/2021/05/21/htdvCb2qlnOas1Y.png","https://i.loli.net/2021/05/21/O3yU6kINc9AT8ea.png","https://i.loli.net/2021/05/21/bH5aVPAMXDIz42j.png","https://i.loli.net/2021/06/10/BH7mE9diJMrcWCp.png","https://i.loli.net/2021/05/21/jDGmP8npQtaFCY7.png"],"content":"<h2 id=\"1-拉取cuda、cudnn的docker镜像\"><a href=\"#1-拉取cuda、cudnn的docker镜像\" class=\"headerlink\" title=\"1.拉取cuda、cudnn的docker镜像\"></a>1.拉取cuda、cudnn的docker镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-新建并启动交互式容器\"><a href=\"#2-新建并启动交互式容器\" class=\"headerlink\" title=\"2.新建并启动交互式容器\"></a>2.新建并启动交互式容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name tensorflow1.2.1-gpu -v /home/docker_share/:/home/ -p 2201:22 --gpus all nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<p>–name ：设置新容器的名称为tensorflow1.2.1-gpu</p>\n<p>-v ：设置文件映射，将宿主机的文件&#x2F;home&#x2F;docker_share&#x2F;映射到该容器的&#x2F;home&#x2F;目录下</p>\n<p>-p ：设置容器的端口与宿主机的端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></p>\n<p>–gpus all 许容器使用所有GPU</p>\n<p>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：容器的依赖镜像</p>\n<p>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</p>\n<p>注释：</p>\n<p>为了构建有序且规范的端口映射关系，这里设置一个默认规则用于设置容器的端口与宿主机的端口映射：主机端口固定，容器端口以主机端口为起始位依次排开</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">容器端口</span>\t<span class=\"string\">主机端口</span></span><br><span class=\"line\"><span class=\"number\">2201\t\t</span><span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">2202\t\t</span><span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-进入容器后修改容器的root密码\"><a href=\"#3-进入容器后修改容器的root密码\" class=\"headerlink\" title=\"3.进入容器后修改容器的root密码\"></a>3.进入容器后修改容器的root密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置用户名为root,密码为passwd(将其该为自己想要的密码)</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;root:passwd&#x27;</span> | chpasswd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-安装openssh-server并启动\"><a href=\"#4-安装openssh-server并启动\" class=\"headerlink\" title=\"4.安装openssh-server并启动\"></a>4.安装openssh-server并启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#更新源</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\">apt-get -y update</span><br><span class=\"line\"><span class=\"comment\"># 安装openssh-server</span></span><br><span class=\"line\">apt-get install openssh-server</span><br><span class=\"line\"><span class=\"comment\"># 启动之前需手动创建/var/run/sshd，不然启动sshd的时候会报错</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/run/sshd</span><br><span class=\"line\"><span class=\"comment\"># sshd以守护进程运行</span></span><br><span class=\"line\">/usr/sbin/sshd -D &amp;</span><br><span class=\"line\"><span class=\"comment\"># 安装netstat，查看sshd是否监听22端口</span></span><br><span class=\"line\">apt-get install net-tools</span><br><span class=\"line\">netstat -apn | grep ssh</span><br><span class=\"line\"><span class=\"comment\"># 显示如下</span></span><br><span class=\"line\"><span class=\"comment\"># root@a78aa2e72670:/# netstat -apn | grep ssh</span></span><br><span class=\"line\"><span class=\"comment\"># tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1266/sshd</span></span><br><span class=\"line\"><span class=\"comment\"># tcp6       0      0 :::22                   :::*                    LISTEN      1266/sshd</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-ssh登录设置\"><a href=\"#5-ssh登录设置\" class=\"headerlink\" title=\"5.ssh登录设置\"></a>5.ssh登录设置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成ssh key</span></span><br><span class=\"line\">ssh-keygen -t rsa </span><br><span class=\"line\"><span class=\"comment\"># 然后提示的设置用默认设置，一直回车即可</span></span><br><span class=\"line\"><span class=\"comment\"># 修改sshd-config允许root登陆</span></span><br><span class=\"line\">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>检查下面的命令是否被注释，会后面的参数是否为yes，若没有该命令需要在文件尾部新增该命令以允许root用户使用ssh登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitRootLogin <span class=\"built_in\">yes</span> <span class=\"comment\"># 约在28行：将PermitRootLogin prohibit-password改为PermitRootLogin yes</span></span><br></pre></td></tr></table></figure>\n\n<p>修改完sshd-config之后需要重启sshd服务:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 找到sshd的进程pid</span></span><br><span class=\"line\">ps -aux | grep ssh</span><br><span class=\"line\"><span class=\"comment\"># 杀掉sshd的进程pid</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 sshd的进程pid号</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">/usr/sbin/sshd -D &amp;</span><br><span class=\"line\"><span class=\"comment\"># 再次查看</span></span><br><span class=\"line\">ps -aux | grep ssh</span><br></pre></td></tr></table></figure>\n\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@a78aa2e72670:/<span class=\"comment\"># ps -aux | grep ssh</span></span><br><span class=\"line\">root      1266  0.0  0.0  65512  5468 pts/0    S    01:14   0:00 /usr/sbin/sshd -D</span><br><span class=\"line\">root      1301  0.0  0.0  11284   932 pts/0    S+   01:18   0:00 grep --color=auto ssh</span><br><span class=\"line\">root@a78aa2e72670:/<span class=\"comment\"># kill -9 1266</span></span><br><span class=\"line\">root@a78aa2e72670:/<span class=\"comment\"># /usr/sbin/sshd -D &amp;</span></span><br><span class=\"line\">[2] 1302</span><br><span class=\"line\">[1]   Killed                  /usr/sbin/sshd -D</span><br><span class=\"line\">root@a78aa2e72670:/<span class=\"comment\"># ps -aux | grep ssh</span></span><br><span class=\"line\">root      1302  0.0  0.0  65512  5756 pts/0    S    01:19   0:00 /usr/sbin/sshd -D</span><br><span class=\"line\">root      1304  0.0  0.0  11284   944 pts/0    S+   01:19   0:00 grep --color=auto ssh</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-退出容器，但不要停止容器，并进行连接测试\"><a href=\"#6-退出容器，但不要停止容器，并进行连接测试\" class=\"headerlink\" title=\"6.退出容器，但不要停止容器，并进行连接测试\"></a>6.退出容器，但不要停止容器，并进行连接测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在主机登录，需要输入的root密码为前面设置的root密码</span></span><br><span class=\"line\">ssh root@localhost -p 8080 <span class=\"comment\"># 8080为刚开始创建容器时候设置的主机端口映射，与容器的22端口形成映射</span></span><br><span class=\"line\"><span class=\"comment\"># 在其他机器上可以使用以下命令登陆，假设宿主机ip为10.12.11.xx</span></span><br><span class=\"line\">ssh root@10.12.11.xx -p 8080</span><br></pre></td></tr></table></figure>\n\n<p>这里如果提示：ssh_exchange_identification: read: Connection reset by peer</p>\n<p>则：可能是容器的 sshd服务未开启，再次进入容器重启sshd服务即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/sshd -D &amp;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># ps -aux | grep ssh</span></span><br><span class=\"line\">root        32  0.0  0.0  11284   932 pts/1    S+   03:43   0:00 grep --color=auto ssh</span><br><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># /usr/sbin/sshd -D &amp;</span></span><br><span class=\"line\">[1] 33</span><br><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># ps -aux | grep ssh</span></span><br><span class=\"line\">root        33  0.0  0.0  65512  5420 pts/1    S    03:43   0:00 /usr/sbin/sshd -D</span><br><span class=\"line\">root        35  0.0  0.0  11284   936 pts/1    S+   03:43   0:00 grep --color=auto ssh</span><br></pre></td></tr></table></figure>\n\n<p>注释：配置完成后可以将容器保存为镜像</p>\n<p>docker commit -a “提交的镜像作者名称” -m “提交时的说明文字” 容器ID或容器名称  保存镜像名称:标签</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1</span></span><br><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># docker images mymysql:v1</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mymysql             v1                  37af1236adef        15 seconds ago      329 MB</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7-配置pycharm并连接docker容器\"><a href=\"#7-配置pycharm并连接docker容器\" class=\"headerlink\" title=\"7.配置pycharm并连接docker容器\"></a>7.配置pycharm并连接docker容器</h2><p>参考网址：<a href=\"https://blog.csdn.net/Thanours/article/details/109265315\">点我查看</a></p>\n<p>在 Tools &gt;&gt;&gt; Deployment &gt;&gt;&gt; Configuration选项中新建 SFTP 连接：</p>\n<p><img src=\"https://i.loli.net/2021/05/21/YMm8PE6Hd9ySQ2h.png\"></p>\n<img src=\"https://i.loli.net/2021/05/21/z4dMrhtOH8xvZCR.png\"/>\n\n<p><img src=\"https://i.loli.net/2021/06/10/TYq9sIE2aRfdyGC.png\"></p>\n<ul>\n<li>路径映射(本地程序文件目录与docker文件目录的映射)：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/yigpdXIMG5QTaLw.png\"></p>\n<ul>\n<li>同步本地代码数据到docker容器中：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/mQJGDp1xaB6EjO9.png\"></p>\n<ul>\n<li>上传完代码数据后， 需要选择设置python编译器：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/htdvCb2qlnOas1Y.png\"></p>\n<p><img src=\"https://i.loli.net/2021/05/21/O3yU6kINc9AT8ea.png\"></p>\n<p><img src=\"https://i.loli.net/2021/05/21/bH5aVPAMXDIz42j.png\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/BH7mE9diJMrcWCp.png\"></p>\n<ul>\n<li>设置好python解释器就可以run代码了：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/jDGmP8npQtaFCY7.png\"></p>\n<p>这里要注意一下，代码所要的运行环境还需要在docker容器安装配置好，比如我这里需要pytorch环境以及python代码运行所需的依赖库都已经在docker容器中通过pip安装好了。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","more":"<h2 id=\"1-拉取cuda、cudnn的docker镜像\"><a href=\"#1-拉取cuda、cudnn的docker镜像\" class=\"headerlink\" title=\"1.拉取cuda、cudnn的docker镜像\"></a>1.拉取cuda、cudnn的docker镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-新建并启动交互式容器\"><a href=\"#2-新建并启动交互式容器\" class=\"headerlink\" title=\"2.新建并启动交互式容器\"></a>2.新建并启动交互式容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name tensorflow1.2.1-gpu -v /home/docker_share/:/home/ -p 2201:22 --gpus all nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<p>–name ：设置新容器的名称为tensorflow1.2.1-gpu</p>\n<p>-v ：设置文件映射，将宿主机的文件&#x2F;home&#x2F;docker_share&#x2F;映射到该容器的&#x2F;home&#x2F;目录下</p>\n<p>-p ：设置容器的端口与宿主机的端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></p>\n<p>–gpus all 许容器使用所有GPU</p>\n<p>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：容器的依赖镜像</p>\n<p>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</p>\n<p>注释：</p>\n<p>为了构建有序且规范的端口映射关系，这里设置一个默认规则用于设置容器的端口与宿主机的端口映射：主机端口固定，容器端口以主机端口为起始位依次排开</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">容器端口</span>\t<span class=\"string\">主机端口</span></span><br><span class=\"line\"><span class=\"number\">2201\t\t</span><span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">2202\t\t</span><span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-进入容器后修改容器的root密码\"><a href=\"#3-进入容器后修改容器的root密码\" class=\"headerlink\" title=\"3.进入容器后修改容器的root密码\"></a>3.进入容器后修改容器的root密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置用户名为root,密码为passwd(将其该为自己想要的密码)</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;root:passwd&#x27;</span> | chpasswd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-安装openssh-server并启动\"><a href=\"#4-安装openssh-server并启动\" class=\"headerlink\" title=\"4.安装openssh-server并启动\"></a>4.安装openssh-server并启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#更新源</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\">apt-get -y update</span><br><span class=\"line\"><span class=\"comment\"># 安装openssh-server</span></span><br><span class=\"line\">apt-get install openssh-server</span><br><span class=\"line\"><span class=\"comment\"># 启动之前需手动创建/var/run/sshd，不然启动sshd的时候会报错</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/run/sshd</span><br><span class=\"line\"><span class=\"comment\"># sshd以守护进程运行</span></span><br><span class=\"line\">/usr/sbin/sshd -D &amp;</span><br><span class=\"line\"><span class=\"comment\"># 安装netstat，查看sshd是否监听22端口</span></span><br><span class=\"line\">apt-get install net-tools</span><br><span class=\"line\">netstat -apn | grep ssh</span><br><span class=\"line\"><span class=\"comment\"># 显示如下</span></span><br><span class=\"line\"><span class=\"comment\"># root@a78aa2e72670:/# netstat -apn | grep ssh</span></span><br><span class=\"line\"><span class=\"comment\"># tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1266/sshd</span></span><br><span class=\"line\"><span class=\"comment\"># tcp6       0      0 :::22                   :::*                    LISTEN      1266/sshd</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-ssh登录设置\"><a href=\"#5-ssh登录设置\" class=\"headerlink\" title=\"5.ssh登录设置\"></a>5.ssh登录设置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成ssh key</span></span><br><span class=\"line\">ssh-keygen -t rsa </span><br><span class=\"line\"><span class=\"comment\"># 然后提示的设置用默认设置，一直回车即可</span></span><br><span class=\"line\"><span class=\"comment\"># 修改sshd-config允许root登陆</span></span><br><span class=\"line\">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>检查下面的命令是否被注释，会后面的参数是否为yes，若没有该命令需要在文件尾部新增该命令以允许root用户使用ssh登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitRootLogin <span class=\"built_in\">yes</span> <span class=\"comment\"># 约在28行：将PermitRootLogin prohibit-password改为PermitRootLogin yes</span></span><br></pre></td></tr></table></figure>\n\n<p>修改完sshd-config之后需要重启sshd服务:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 找到sshd的进程pid</span></span><br><span class=\"line\">ps -aux | grep ssh</span><br><span class=\"line\"><span class=\"comment\"># 杀掉sshd的进程pid</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 sshd的进程pid号</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">/usr/sbin/sshd -D &amp;</span><br><span class=\"line\"><span class=\"comment\"># 再次查看</span></span><br><span class=\"line\">ps -aux | grep ssh</span><br></pre></td></tr></table></figure>\n\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@a78aa2e72670:/<span class=\"comment\"># ps -aux | grep ssh</span></span><br><span class=\"line\">root      1266  0.0  0.0  65512  5468 pts/0    S    01:14   0:00 /usr/sbin/sshd -D</span><br><span class=\"line\">root      1301  0.0  0.0  11284   932 pts/0    S+   01:18   0:00 grep --color=auto ssh</span><br><span class=\"line\">root@a78aa2e72670:/<span class=\"comment\"># kill -9 1266</span></span><br><span class=\"line\">root@a78aa2e72670:/<span class=\"comment\"># /usr/sbin/sshd -D &amp;</span></span><br><span class=\"line\">[2] 1302</span><br><span class=\"line\">[1]   Killed                  /usr/sbin/sshd -D</span><br><span class=\"line\">root@a78aa2e72670:/<span class=\"comment\"># ps -aux | grep ssh</span></span><br><span class=\"line\">root      1302  0.0  0.0  65512  5756 pts/0    S    01:19   0:00 /usr/sbin/sshd -D</span><br><span class=\"line\">root      1304  0.0  0.0  11284   944 pts/0    S+   01:19   0:00 grep --color=auto ssh</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-退出容器，但不要停止容器，并进行连接测试\"><a href=\"#6-退出容器，但不要停止容器，并进行连接测试\" class=\"headerlink\" title=\"6.退出容器，但不要停止容器，并进行连接测试\"></a>6.退出容器，但不要停止容器，并进行连接测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在主机登录，需要输入的root密码为前面设置的root密码</span></span><br><span class=\"line\">ssh root@localhost -p 8080 <span class=\"comment\"># 8080为刚开始创建容器时候设置的主机端口映射，与容器的22端口形成映射</span></span><br><span class=\"line\"><span class=\"comment\"># 在其他机器上可以使用以下命令登陆，假设宿主机ip为10.12.11.xx</span></span><br><span class=\"line\">ssh root@10.12.11.xx -p 8080</span><br></pre></td></tr></table></figure>\n\n<p>这里如果提示：ssh_exchange_identification: read: Connection reset by peer</p>\n<p>则：可能是容器的 sshd服务未开启，再次进入容器重启sshd服务即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/sshd -D &amp;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># ps -aux | grep ssh</span></span><br><span class=\"line\">root        32  0.0  0.0  11284   932 pts/1    S+   03:43   0:00 grep --color=auto ssh</span><br><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># /usr/sbin/sshd -D &amp;</span></span><br><span class=\"line\">[1] 33</span><br><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># ps -aux | grep ssh</span></span><br><span class=\"line\">root        33  0.0  0.0  65512  5420 pts/1    S    03:43   0:00 /usr/sbin/sshd -D</span><br><span class=\"line\">root        35  0.0  0.0  11284   936 pts/1    S+   03:43   0:00 grep --color=auto ssh</span><br></pre></td></tr></table></figure>\n\n<p>注释：配置完成后可以将容器保存为镜像</p>\n<p>docker commit -a “提交的镜像作者名称” -m “提交时的说明文字” 容器ID或容器名称  保存镜像名称:标签</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1</span></span><br><span class=\"line\">root@dc627a3adc4d:/<span class=\"comment\"># docker images mymysql:v1</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mymysql             v1                  37af1236adef        15 seconds ago      329 MB</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7-配置pycharm并连接docker容器\"><a href=\"#7-配置pycharm并连接docker容器\" class=\"headerlink\" title=\"7.配置pycharm并连接docker容器\"></a>7.配置pycharm并连接docker容器</h2><p>参考网址：<a href=\"https://blog.csdn.net/Thanours/article/details/109265315\">点我查看</a></p>\n<p>在 Tools &gt;&gt;&gt; Deployment &gt;&gt;&gt; Configuration选项中新建 SFTP 连接：</p>\n<p><img src=\"https://i.loli.net/2021/05/21/YMm8PE6Hd9ySQ2h.png\"></p>\n<img src=\"https://i.loli.net/2021/05/21/z4dMrhtOH8xvZCR.png\"/>\n\n<p><img src=\"https://i.loli.net/2021/06/10/TYq9sIE2aRfdyGC.png\"></p>\n<ul>\n<li>路径映射(本地程序文件目录与docker文件目录的映射)：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/yigpdXIMG5QTaLw.png\"></p>\n<ul>\n<li>同步本地代码数据到docker容器中：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/mQJGDp1xaB6EjO9.png\"></p>\n<ul>\n<li>上传完代码数据后， 需要选择设置python编译器：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/htdvCb2qlnOas1Y.png\"></p>\n<p><img src=\"https://i.loli.net/2021/05/21/O3yU6kINc9AT8ea.png\"></p>\n<p><img src=\"https://i.loli.net/2021/05/21/bH5aVPAMXDIz42j.png\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/BH7mE9diJMrcWCp.png\"></p>\n<ul>\n<li>设置好python解释器就可以run代码了：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/jDGmP8npQtaFCY7.png\"></p>\n<p>这里要注意一下，代码所要的运行环境还需要在docker容器安装配置好，比如我这里需要pytorch环境以及python代码运行所需的依赖库都已经在docker容器中通过pip安装好了。</p>\n","categories":[{"name":"docker","path":"api/categories/docker.json"}],"tags":[{"name":"ubuntu","path":"api/tags/ubuntu.json"},{"name":"深度学习","path":"api/tags/深度学习.json"},{"name":"Pycharm","path":"api/tags/Pycharm.json"},{"name":"docker","path":"api/tags/docker.json"}]}