{"title":"C++对象优化","slug":"c++对象优化","date":"2023-05-29T19:20:00.000Z","updated":"2023-11-24T15:10:46.424Z","comments":true,"path":"api/articles/c++对象优化.json","excerpt":null,"covers":null,"content":"<h1 id=\"对象使用过程中背后调用了哪些方法\"><a href=\"#对象使用过程中背后调用了哪些方法\" class=\"headerlink\" title=\"对象使用过程中背后调用了哪些方法\"></a>对象使用过程中背后调用了哪些方法</h1><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> a=<span class=\"number\">10</span>):<span class=\"built_in\">ma</span>(a)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(int)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;~Test()&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Test</span> (<span class=\"type\">const</span> Test &amp;t):<span class=\"built_in\">ma</span>(t.ma)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test (const Test &amp;t)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Test &amp;t)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;operator=&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\tma = t.ma;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> ma;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 1 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest t1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 2 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t2</span><span class=\"params\">(t1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 3 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest t3 = t1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 4 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest t4 = <span class=\"built_in\">Test</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 5 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt4 = t2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 6 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt4 = <span class=\"built_in\">Test</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 7 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt4 = (Test)<span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 8 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt4 = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 9 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"comment\">//Test *p = &amp;Test(40;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 10 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"type\">const</span> Test &amp;ref = <span class=\"built_in\">Test</span>(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 1 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">--- 2 ---</span><br><span class=\"line\">Test (const Test &amp;t)</span><br><span class=\"line\">--- 3 ---</span><br><span class=\"line\">Test (const Test &amp;t)</span><br><span class=\"line\">--- 4 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">--- 5 ---</span><br><span class=\"line\">operator=</span><br><span class=\"line\">--- 6 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">operator=</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 7 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">operator=</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 8 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">operator=</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 9 ---</span><br><span class=\"line\">--- 10 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><ul>\n<li>1\t<br>正常使用构造函数生成t1，传入参数有默认值</li>\n<li>2\t<br>常见的拷贝构造</li>\n<li>3\t<br>拷贝构造</li>\n<li>4\t<br>C++编译器对于对象构造的优化，用临时对象生成新对象的时候，临时对象就不产生了，直接构造新对象，因此这里等价于直接调用常规构造函数，不调用拷贝构造\t\t<br>Test(20)显式生成临时对象，生存周期为所在语句\t\t<br>因此这里的Test t4 &#x3D; Test(20);等价于Test t4(20);\t\t</li>\n<li>5\t<br>调用了赋值运算符重载函数</li>\n<li>6\t\t<br>使用临时对象为已经存在的对象赋值，这时临时对象需要生成，要不无法赋值，显式生成临时对象</li>\n<li>7\t\t<br>把30强制转换为Test，然后将int 转换为 Test(int)，这时就要看这个类有没有输入为int的构造函数，进而调用。这时临时对象需要生成，要不无法赋值，显式生成临时对象</li>\n<li>8\t<br>把30强制转换为Test，然后将int 转换为 Test(int)，这时就要看这个类有没有输入为int的构造函数，进而调用。这时临时对象需要生成，要不无法赋值，隐式生成临时对象</li>\n<li>9\t<br>这里的临时对象需要生成，且出了语句临时对象就会调用析构函数，因此这里说明使用指针指向临时对象是不安全的，因此这里直接运行是报错的，无法获取右值的地址</li>\n<li>10\t<br>这里的临时对象需要生成，且出了语句临时对象不会调用析构函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> a=<span class=\"number\">5</span>, <span class=\"type\">int</span> b = <span class=\"number\">5</span>) : <span class=\"built_in\">ma</span>(a),<span class=\"built_in\">mb</span>(b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(int, int)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;~Test()&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">const</span> Test &amp;src) : <span class=\"built_in\">ma</span>(src.ma), <span class=\"built_in\">mb</span>(src.mb)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(const Test &amp;)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest <span class=\"keyword\">operator</span> = (<span class=\"type\">const</span> Test &amp;src)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tma = src.ma;</span><br><span class=\"line\">\t\tmb = src.mb;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;operator = &quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> ma;</span><br><span class=\"line\">\t<span class=\"type\">int</span> mb;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 3 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t2</span><span class=\"params\">(<span class=\"number\">20</span>,<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 4 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest t3 = t2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 5 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"type\">static</span> Test t4 = <span class=\"built_in\">Test</span>(<span class=\"number\">30</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 6 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt2 = <span class=\"built_in\">Test</span>(<span class=\"number\">40</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 7 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt2 = (Test)(<span class=\"number\">50</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 8 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt2 = <span class=\"number\">60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 9 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest *p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Test</span>(<span class=\"number\">70</span>,<span class=\"number\">70</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 10 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest *p2 = <span class=\"keyword\">new</span> Test[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 11 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"comment\">// Test *p3 = &amp;Test(80,80);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 12 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"type\">const</span> Test &amp;p4 = <span class=\"built_in\">Test</span>(<span class=\"number\">90</span>,<span class=\"number\">90</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p1;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> [] p2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">t5</span><span class=\"params\">(<span class=\"number\">100</span>,<span class=\"number\">100</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test(int, int)</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 3 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 4 ---</span><br><span class=\"line\">Test(const Test &amp;)</span><br><span class=\"line\">--- 5 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 6 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">operator = </span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 7 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">operator = </span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 8 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">operator = </span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 9 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 10 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 11 ---</span><br><span class=\"line\">--- 12 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h2><ul>\n<li>5<br>使用临时构造同类型新对象的时候，临时对象被优化，类似于上文的第4项</li>\n<li>7<br>逗号表达式的值为最后一个参数的值，即:t2 &#x3D; (Test)(50);这里将50进行了强制类型转换。编译器就会去找有没有带一个整型输入的构造函数去实现。</li>\n<li>11<br>不能使用指针指向临时对象，临时对象使用后析构。</li>\n<li>12<br>使用引用变量指向临时对象，相当于给临时对象起了一个别名，引用对象销毁时，临时对象才会析构。</li>\n</ul>\n<h1 id=\"函数调用过程中对象背后调用了哪些方法\"><a href=\"#函数调用过程中对象背后调用了哪些方法\" class=\"headerlink\" title=\"函数调用过程中对象背后调用了哪些方法\"></a>函数调用过程中对象背后调用了哪些方法</h1><h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> data =<span class=\"number\">10</span>):<span class=\"built_in\">ma</span>(data)&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(int)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>()&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;~Test&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">const</span> Test &amp;t):<span class=\"built_in\">ma</span>(t.ma)&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(const Test &amp;)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Test&amp;t)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;operator=&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\tma=t.ma;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;<span class=\"keyword\">return</span> ma;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> ma;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">GetObject</span><span class=\"params\">(Test t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> val=t.<span class=\"built_in\">getData</span>();</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">tmp</span><span class=\"params\">(val)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest t1;</span><br><span class=\"line\">\tTest t2;</span><br><span class=\"line\">\tt2=<span class=\"built_in\">GetObject</span>(t1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test(int)</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">=== 1 ===</span><br><span class=\"line\">Test(const Test &amp;)</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">operator=</span><br><span class=\"line\">~Test</span><br><span class=\"line\">~Test</span><br><span class=\"line\">~Test</span><br><span class=\"line\">~Test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>Test(int)<br>调用默认构造函数</li>\n<li>Test(int)<br>调用默认构造函数</li>\n<li>Test(const Test &amp;)<br>执行<code>GetObject(t1)</code>时需要将实参t1传递给<code>GetObject(Test t)</code>函数的形参<code>t</code>,这里是不能是直接的赋值，应该是初始化，即:要默认调用构造函数(拷贝构造函数)，因此这里实际是调用了<code>Test(const Test &amp;)</code>函数。</li>\n<li>Test(int)<br>这里是<code>GetObject(Test t)</code>函数内部调用了默认构造函数</li>\n<li>operator&#x3D;<br>由于<code>GetObject(Test t)</code>函数内部的<code>tmp</code>变量在函数结束后就会被释放没有办法再把参数传递出去，因此这里其实也在调用构造函数，需要构造一个临时变量，使用函数重载进行值传递</li>\n<li>~Test<br>依次执行临时对象的析构</li>\n<li>~Test<br>依次执行临时对象的析构</li>\n<li>~Test<br>依次执行临时对象的析构</li>\n<li>~Test<br>依次执行临时对象的析构</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","more":"<h1 id=\"对象使用过程中背后调用了哪些方法\"><a href=\"#对象使用过程中背后调用了哪些方法\" class=\"headerlink\" title=\"对象使用过程中背后调用了哪些方法\"></a>对象使用过程中背后调用了哪些方法</h1><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> a=<span class=\"number\">10</span>):<span class=\"built_in\">ma</span>(a)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(int)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;~Test()&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Test</span> (<span class=\"type\">const</span> Test &amp;t):<span class=\"built_in\">ma</span>(t.ma)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test (const Test &amp;t)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Test &amp;t)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;operator=&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\tma = t.ma;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> ma;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 1 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest t1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 2 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t2</span><span class=\"params\">(t1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 3 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest t3 = t1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 4 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest t4 = <span class=\"built_in\">Test</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 5 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt4 = t2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 6 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt4 = <span class=\"built_in\">Test</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 7 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt4 = (Test)<span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 8 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt4 = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 9 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"comment\">//Test *p = &amp;Test(40;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 10 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"type\">const</span> Test &amp;ref = <span class=\"built_in\">Test</span>(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 1 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">--- 2 ---</span><br><span class=\"line\">Test (const Test &amp;t)</span><br><span class=\"line\">--- 3 ---</span><br><span class=\"line\">Test (const Test &amp;t)</span><br><span class=\"line\">--- 4 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">--- 5 ---</span><br><span class=\"line\">operator=</span><br><span class=\"line\">--- 6 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">operator=</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 7 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">operator=</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 8 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">operator=</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 9 ---</span><br><span class=\"line\">--- 10 ---</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><ul>\n<li>1\t<br>正常使用构造函数生成t1，传入参数有默认值</li>\n<li>2\t<br>常见的拷贝构造</li>\n<li>3\t<br>拷贝构造</li>\n<li>4\t<br>C++编译器对于对象构造的优化，用临时对象生成新对象的时候，临时对象就不产生了，直接构造新对象，因此这里等价于直接调用常规构造函数，不调用拷贝构造\t\t<br>Test(20)显式生成临时对象，生存周期为所在语句\t\t<br>因此这里的Test t4 &#x3D; Test(20);等价于Test t4(20);\t\t</li>\n<li>5\t<br>调用了赋值运算符重载函数</li>\n<li>6\t\t<br>使用临时对象为已经存在的对象赋值，这时临时对象需要生成，要不无法赋值，显式生成临时对象</li>\n<li>7\t\t<br>把30强制转换为Test，然后将int 转换为 Test(int)，这时就要看这个类有没有输入为int的构造函数，进而调用。这时临时对象需要生成，要不无法赋值，显式生成临时对象</li>\n<li>8\t<br>把30强制转换为Test，然后将int 转换为 Test(int)，这时就要看这个类有没有输入为int的构造函数，进而调用。这时临时对象需要生成，要不无法赋值，隐式生成临时对象</li>\n<li>9\t<br>这里的临时对象需要生成，且出了语句临时对象就会调用析构函数，因此这里说明使用指针指向临时对象是不安全的，因此这里直接运行是报错的，无法获取右值的地址</li>\n<li>10\t<br>这里的临时对象需要生成，且出了语句临时对象不会调用析构函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> a=<span class=\"number\">5</span>, <span class=\"type\">int</span> b = <span class=\"number\">5</span>) : <span class=\"built_in\">ma</span>(a),<span class=\"built_in\">mb</span>(b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(int, int)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;~Test()&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">const</span> Test &amp;src) : <span class=\"built_in\">ma</span>(src.ma), <span class=\"built_in\">mb</span>(src.mb)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(const Test &amp;)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest <span class=\"keyword\">operator</span> = (<span class=\"type\">const</span> Test &amp;src)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tma = src.ma;</span><br><span class=\"line\">\t\tmb = src.mb;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;operator = &quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> ma;</span><br><span class=\"line\">\t<span class=\"type\">int</span> mb;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 3 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t2</span><span class=\"params\">(<span class=\"number\">20</span>,<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 4 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest t3 = t2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 5 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"type\">static</span> Test t4 = <span class=\"built_in\">Test</span>(<span class=\"number\">30</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 6 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt2 = <span class=\"built_in\">Test</span>(<span class=\"number\">40</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 7 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt2 = (Test)(<span class=\"number\">50</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 8 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tt2 = <span class=\"number\">60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 9 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest *p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Test</span>(<span class=\"number\">70</span>,<span class=\"number\">70</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 10 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tTest *p2 = <span class=\"keyword\">new</span> Test[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 11 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"comment\">// Test *p3 = &amp;Test(80,80);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;--- 12 ---&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"type\">const</span> Test &amp;p4 = <span class=\"built_in\">Test</span>(<span class=\"number\">90</span>,<span class=\"number\">90</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p1;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> [] p2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">t5</span><span class=\"params\">(<span class=\"number\">100</span>,<span class=\"number\">100</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test(int, int)</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 3 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 4 ---</span><br><span class=\"line\">Test(const Test &amp;)</span><br><span class=\"line\">--- 5 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 6 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">operator = </span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 7 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">operator = </span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 8 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">operator = </span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">--- 9 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 10 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">--- 11 ---</span><br><span class=\"line\">--- 12 ---</span><br><span class=\"line\">Test(int, int)</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br><span class=\"line\">~Test()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h2><ul>\n<li>5<br>使用临时构造同类型新对象的时候，临时对象被优化，类似于上文的第4项</li>\n<li>7<br>逗号表达式的值为最后一个参数的值，即:t2 &#x3D; (Test)(50);这里将50进行了强制类型转换。编译器就会去找有没有带一个整型输入的构造函数去实现。</li>\n<li>11<br>不能使用指针指向临时对象，临时对象使用后析构。</li>\n<li>12<br>使用引用变量指向临时对象，相当于给临时对象起了一个别名，引用对象销毁时，临时对象才会析构。</li>\n</ul>\n<h1 id=\"函数调用过程中对象背后调用了哪些方法\"><a href=\"#函数调用过程中对象背后调用了哪些方法\" class=\"headerlink\" title=\"函数调用过程中对象背后调用了哪些方法\"></a>函数调用过程中对象背后调用了哪些方法</h1><h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> data =<span class=\"number\">10</span>):<span class=\"built_in\">ma</span>(data)&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(int)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>()&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;~Test&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">const</span> Test &amp;t):<span class=\"built_in\">ma</span>(t.ma)&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;Test(const Test &amp;)&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Test&amp;t)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;operator=&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\tma=t.ma;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;<span class=\"keyword\">return</span> ma;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> ma;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">GetObject</span><span class=\"params\">(Test t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> val=t.<span class=\"built_in\">getData</span>();</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">tmp</span><span class=\"params\">(val)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest t1;</span><br><span class=\"line\">\tTest t2;</span><br><span class=\"line\">\tt2=<span class=\"built_in\">GetObject</span>(t1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test(int)</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">=== 1 ===</span><br><span class=\"line\">Test(const Test &amp;)</span><br><span class=\"line\">Test(int)</span><br><span class=\"line\">operator=</span><br><span class=\"line\">~Test</span><br><span class=\"line\">~Test</span><br><span class=\"line\">~Test</span><br><span class=\"line\">~Test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>Test(int)<br>调用默认构造函数</li>\n<li>Test(int)<br>调用默认构造函数</li>\n<li>Test(const Test &amp;)<br>执行<code>GetObject(t1)</code>时需要将实参t1传递给<code>GetObject(Test t)</code>函数的形参<code>t</code>,这里是不能是直接的赋值，应该是初始化，即:要默认调用构造函数(拷贝构造函数)，因此这里实际是调用了<code>Test(const Test &amp;)</code>函数。</li>\n<li>Test(int)<br>这里是<code>GetObject(Test t)</code>函数内部调用了默认构造函数</li>\n<li>operator&#x3D;<br>由于<code>GetObject(Test t)</code>函数内部的<code>tmp</code>变量在函数结束后就会被释放没有办法再把参数传递出去，因此这里其实也在调用构造函数，需要构造一个临时变量，使用函数重载进行值传递</li>\n<li>~Test<br>依次执行临时对象的析构</li>\n<li>~Test<br>依次执行临时对象的析构</li>\n<li>~Test<br>依次执行临时对象的析构</li>\n<li>~Test<br>依次执行临时对象的析构</li>\n</ul>\n","categories":[{"name":"C++","path":"api/categories/C++.json"}],"tags":[{"name":"C++","path":"api/tags/C++.json"},{"name":"对象优化","path":"api/tags/对象优化.json"},{"name":"c++课程","path":"api/tags/c++课程.json"}]}