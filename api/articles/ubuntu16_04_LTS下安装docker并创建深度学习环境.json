{"title":"ubuntu 16.04 LTS下安装docker并创建深度学习环境","slug":"ubuntu16_04_LTS下安装docker并创建深度学习环境","date":"2022-11-23T21:00:13.000Z","updated":"2023-11-26T09:07:54.736Z","comments":true,"path":"api/articles/ubuntu16_04_LTS下安装docker并创建深度学习环境.json","excerpt":null,"covers":["https://i.loli.net/2021/05/21/PEoKmlhbcXisCWt.png"],"content":"<h2 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1.安装docker\"></a>1.安装docker</h2><p>ubuntu下安装docker的官方教程：<a href=\"https://docs.docker.com/engine/install/ubuntu/\">点我查看</a></p>\n<p>ubuntu下安装参考教程：<a href=\"https://yeasy.gitbook.io/docker_practice/install/ubuntu\">点我查看</a></p>\n<h3 id=\"1-1卸载旧版本\"><a href=\"#1-1卸载旧版本\" class=\"headerlink\" title=\"1.1卸载旧版本\"></a>1.1卸载旧版本</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2使用apt安装\"><a href=\"#1-2使用apt安装\" class=\"headerlink\" title=\"1.2使用apt安装\"></a>1.2使用apt安装</h3><p>官网提供多种安装方式，这里使用apt安装</p>\n<p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install <span class=\"string\">\\</span></span><br><span class=\"line\">    apt-transport-https <span class=\"string\">\\</span></span><br><span class=\"line\">    ca-certificates <span class=\"string\">\\</span></span><br><span class=\"line\">    curl <span class=\"string\">\\</span></span><br><span class=\"line\">    gnupg <span class=\"string\">\\</span></span><br><span class=\"line\">    lsb-release</span><br></pre></td></tr></table></figure>\n\n<p>添加docker密匙：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/docker-ce/</span>linux<span class=\"regexp\">/ubuntu/g</span>pg | sudo gpg --dearmor -o <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/keyrings/</span>docker-archive-keyring.gpg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 官方密匙</span></span><br><span class=\"line\">curl -fsSL https:<span class=\"regexp\">//</span>download.docker.com<span class=\"regexp\">/linux/u</span>buntu<span class=\"regexp\">/gpg | sudo gpg --dearmor -o /u</span>sr<span class=\"regexp\">/share/</span>keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们需要向 <code>sources.list</code> 中添加 Docker 软件源：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  $(lsb_release -cs) stable&quot;</span> | sudo tee <span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>docker.list &gt; <span class=\"regexp\">/dev/</span><span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 官方源</span><br><span class=\"line\">echo \\</span><br><span class=\"line\">   <span class=\"string\">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   $(lsb_release -cs) stable&quot;</span> | sudo tee <span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>docker.list &gt; <span class=\"regexp\">/dev/</span><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>以上命令会添加稳定版本的 Docker APT 镜像源，如果需要测试版本的 Docker 请将 stable 改为 test。</p>\n<p>安装docker:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install docker-<span class=\"keyword\">ce</span> docker-<span class=\"keyword\">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3配置阿里云镜像加速器\"><a href=\"#1-3配置阿里云镜像加速器\" class=\"headerlink\" title=\"1.3配置阿里云镜像加速器\"></a>1.3配置阿里云镜像加速器</h3><p>参考网址：<a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\">点我查看</a></p>\n<p>需要个人注册阿里云账号并开启容器镜像服务，该服务免费。</p>\n<p>然后查看镜像加速地址，例如我的镜像加速地址为：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"regexp\">//</span>znrurdgu.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure>\n\n<p>注意：这里需要是自己的镜像加速器，否则没有权限访问。</p>\n<p>执行如下命令配置docker：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成配置文件</span></span><br><span class=\"line\">docker-machine ssh default</span><br><span class=\"line\"><span class=\"comment\"># 设置加速器地址：</span></span><br><span class=\"line\"><span class=\"comment\"># sed -i &quot;s|EXTRA_ARGS=&#x27;|EXTRA_ARGS=&#x27;--registry-mirror=自己的镜像加速地址|g&quot; /var/lib/boot2docker/profile</span></span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s|EXTRA_ARGS=&#x27;|EXTRA_ARGS=&#x27;--registry-mirror=https://znrurdgu.mirror.aliyuncs.com|g&quot;</span> <span class=\"regexp\">/var/</span>lib<span class=\"regexp\">/boot2docker/</span>profile</span><br><span class=\"line\"><span class=\"comment\"># 退出docker</span></span><br><span class=\"line\"><span class=\"keyword\">exit</span></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">docker-machine restart default</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n\n<p>查看docker信息后，可以发现 Registory mirrors 项的内容为刚刚设置的阿里云镜像地址。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p <span class=\"regexp\">/etc/</span>docker</span><br><span class=\"line\">sudo tee <span class=\"regexp\">/etc/</span>docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://znrurdgu.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-安装-nvidia-docker\"><a href=\"#2-安装-nvidia-docker\" class=\"headerlink\" title=\"2.安装 nvidia-docker\"></a>2.安装 nvidia-docker</h2><p>docker 默认是不支持在容器内 GPU 加速的，NVIDIA 官方做了个工具箱来支持容器内 GPU 加速运算，这大大方便了深度学习开发者。</p>\n<p>官方教程：<a href=\"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installing-on-ubuntu-and-debian\">点我查看</a></p>\n<p>参考教程：<a href=\"https://blog.csdn.net/zhouchen1998/article/details/110679750\">点我查看</a></p>\n<p>依次执行如下命令即可：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">distribution=$(. <span class=\"regexp\">/etc/</span>os-release;echo <span class=\"variable\">$ID</span><span class=\"variable\">$VERSION_ID</span>) \\</span><br><span class=\"line\">   &amp;&amp; curl -s -L https:<span class=\"regexp\">//</span>nvidia.github.io<span class=\"regexp\">/nvidia-docker/g</span>pgkey | sudo apt-key add - \\</span><br><span class=\"line\">   &amp;&amp; curl -s -L https:<span class=\"regexp\">//</span>nvidia.github.io<span class=\"regexp\">/nvidia-docker/</span><span class=\"variable\">$distribution</span><span class=\"regexp\">/nvidia-docker.list | sudo tee /</span>etc<span class=\"regexp\">/apt/</span>sources.list.d/nvidia-docker.list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl -s -L https:<span class=\"regexp\">//</span>nvidia.github.io<span class=\"regexp\">/nvidia-container-runtime/</span>experimental<span class=\"regexp\">/$distribution/</span>nvidia-container-runtime.list | sudo tee <span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>nvidia-container-runtime.list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install -y nvidia-docker2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-拉取cuda、cudnn的镜像\"><a href=\"#3-拉取cuda、cudnn的镜像\" class=\"headerlink\" title=\"3.拉取cuda、cudnn的镜像\"></a>3.拉取cuda、cudnn的镜像</h2><p>docker hub地址：<a href=\"https://hub.docker.com/r/nvidia/cuda\">点我查看</a></p>\n<p>官网给出多个版本可供拉取，这里使用cuda:10.0-cudnn7-devel-ubuntu16.04</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> pull nvidia/cuda:<span class=\"number\">10</span>.<span class=\"number\">0</span>-cudnn7-devel-ubuntu16.<span class=\"number\">04</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-新建容器\"><a href=\"#4-新建容器\" class=\"headerlink\" title=\"4.新建容器\"></a>4.新建容器</h2><p>容器与镜像的关系好比：镜像为C++中的类，而容器为镜像的实例话，这里基于拉去的cuda:10.0-cudnn7-devel-ubuntu16.04镜像创建一个新的容器并进入容器中：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> container run --name pytorch1.<span class=\"number\">1</span>-gpu -it --gpus <span class=\"literal\">all</span>  nvidia/cuda:<span class=\"number\">10</span>.<span class=\"number\">0</span>-cudnn7-devel-ubuntu16.<span class=\"number\">04</span> /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ul>\n<li>docker container run：容器启动命令，同时会新建一个容器，因此该命令是在新建容器时使用</li>\n<li>–name ：后的参数为新建容器的名称</li>\n<li>-it：其实是 -i -t 的缩写，该参数使得容器具备交互性并与终端进行连接，将shell切换至终端</li>\n<li>–gpu all：表示允许容器使用宿主机的所有GPU</li>\n<li>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：创建新的容器所基于的镜像名称</li>\n<li>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</li>\n</ul>\n<p>以该命令创建并进入容器后，该容器就具有了nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04镜像的配置，相当于实现了“实例话”</p>\n<p>退出该容器后，可以使用以下命令进行查看：</p>\n<ul>\n<li>查看正在运行的容器：</li>\n</ul>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">container</span> <span class=\"keyword\">ls</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看容器运行历史：</li>\n</ul>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">container</span> <span class=\"keyword\">ls</span> -a</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到刚才运行的容器pytorch1.1-gpu的信息。</p>\n<h3 id=\"4-1-重启容器\"><a href=\"#4-1-重启容器\" class=\"headerlink\" title=\"4.1.重启容器\"></a>4.1.重启容器</h3><p>docker container start + 容器名或容器ID，启动一个已经完成创建并停止运行的容器：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> container start pytorch1.<span class=\"number\">1</span>-gpu</span><br></pre></td></tr></table></figure>\n\n<p>查看正在运行的容器：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">container</span> <span class=\"keyword\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>docker container exec   命令用于进入正在运行的容器：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it pytorch1.<span class=\"number\">1</span>-gpu <span class=\"regexp\">/bin/</span>bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2停止容器\"><a href=\"#4-2停止容器\" class=\"headerlink\" title=\"4.2停止容器\"></a>4.2停止容器</h3><p>docker container stop   用于停止正在运行的容器：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> container stop pytorch1.<span class=\"number\">1</span>-gpu</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3删除容器\"><a href=\"#4-3删除容器\" class=\"headerlink\" title=\"4.3删除容器\"></a>4.3删除容器</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">container</span> rm  待删除的容器命令或ID</span><br></pre></td></tr></table></figure>\n\n<p>注意：删除容器之前需要停止容器，避免报错。</p>\n<h2 id=\"5-安装常用工具\"><a href=\"#5-安装常用工具\" class=\"headerlink\" title=\"5.安装常用工具\"></a>5.安装常用工具</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install git -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装vim</span></span><br><span class=\"line\">apt install vim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装cmake</span></span><br><span class=\"line\">apt install cmake</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装updatedb</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install mlocate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装wget</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install wget</span><br><span class=\"line\"><span class=\"comment\"># 安装curl</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install curl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-在容器中安装python\"><a href=\"#6-在容器中安装python\" class=\"headerlink\" title=\"6.在容器中安装python\"></a>6.在容器中安装python</h2><p>新建的容器默认没有python或pip、vim等工具，除非新建容器时将这些包一并装入，因此需要手动安装一些需要的包。新的容器中 apt-get 或 apt 命令是可以使用的：</p>\n<p>参考网站：<a href=\"https://www.digitalocean.com/community/questions/unable-to-install-pyhton-3-7-version-on-ubuntu-16-04-error-couldn-t-find-any-package-by-regex-python3-7\">点我查看</a></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#更新源</span><br><span class=\"line\">apt <span class=\"keyword\">update</span></span><br><span class=\"line\"></span><br><span class=\"line\">#安装<span class=\"keyword\">python</span>依赖</span><br><span class=\"line\">apt install software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\">#添加源</span><br><span class=\"line\"><span class=\"built_in\">add</span>-apt-repository <span class=\"keyword\">pp</span><span class=\"variable\">a:deadsnakes</span>/ppa</span><br><span class=\"line\"></span><br><span class=\"line\">#更新源</span><br><span class=\"line\">apt <span class=\"keyword\">update</span></span><br><span class=\"line\"></span><br><span class=\"line\">#安装<span class=\"keyword\">python</span></span><br><span class=\"line\">apt install <span class=\"keyword\">python3</span>.<span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">#查看<span class=\"keyword\">python</span>版本</span><br><span class=\"line\"><span class=\"keyword\">python</span> --<span class=\"keyword\">version</span> 或 <span class=\"keyword\">python</span> -V</span><br><span class=\"line\"><span class=\"keyword\">python3</span> --<span class=\"keyword\">version</span> 或 <span class=\"keyword\">python3</span> -V</span><br></pre></td></tr></table></figure>\n\n<p>安装完python3.7可能需要修改默认python指向才能正常使用python3.7：</p>\n<p>参考网站：<a href=\"https://blog.csdn.net/qq_33188180/article/details/109723636\">点我查看</a></p>\n<p>查看默认python指向：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l <span class=\"regexp\">/usr/</span>bin | <span class=\"keyword\">grep</span> python </span><br></pre></td></tr></table></figure>\n\n<p>删除原有python软连接：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm <span class=\"regexp\">/usr/</span>bin/python</span><br></pre></td></tr></table></figure>\n\n<p>建立python到新的软链接python3.7：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/python3.7  /u</span>sr<span class=\"regexp\">/bin/</span>python</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-在容器中安装pip\"><a href=\"#7-在容器中安装pip\" class=\"headerlink\" title=\"7.在容器中安装pip\"></a>7.在容器中安装pip</h2><p>这里也有个小坑！如果你写的是python3-pip 执行安装后，如果系统自带了python3.5，其实pip这时是装在了python3.5环境下了！！正确的指定方式，应该把小版本号也加上！</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"built_in\">get</span> install python3.7-pip</span><br></pre></td></tr></table></figure>\n\n<p>但是执行上述命令可能会报错，如果报错需要安装下面的方法添加pip安装源：</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">curl</span> <span class=\"string\">https</span>://<span class=\"string\">bootstrap</span>.<span class=\"string\">pypa</span>.<span class=\"string\">io</span>/<span class=\"built_in\">get-pip.py</span> -<span class=\"string\">o</span> <span class=\"built_in\">get-pip.py</span></span><br></pre></td></tr></table></figure>\n\n<p>由于上面已经将python指向了python3，因此下面直接使用python安装即可，否者要使用python3安装：</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">python</span> <span class=\"built_in\">get-pip.py</span> <span class=\"built_in\">--force-reinstall</span></span><br></pre></td></tr></table></figure>\n\n<p>查看pip位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> pip</span><br></pre></td></tr></table></figure>\n\n<p>我在安装后显示安装在：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip</p>\n<p>建立pip软链接：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>pip <span class=\"regexp\">/usr/</span>bin/pip</span><br></pre></td></tr></table></figure>\n\n<p>注意：第一个地址  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip  为  which pip  的显示地址</p>\n<p>查看pip版本：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip -V 或 pip <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure>\n\n<p>我的显示位置为：pip 20.3.4 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages&#x2F;pip (python 3.7)</p>\n<p>至此，python将指向python3.7，pip将指向python 3.7的pip 20.3.4，实现python和pip的版本对应，且目标容器内二者都是唯一存在，不需要再使用python3和pip3调用python3的对应版本，这样使用pip安装的包将默认存放在  &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages  中。</p>\n<h2 id=\"8-安装PyTorch\"><a href=\"#8-安装PyTorch\" class=\"headerlink\" title=\"8.安装PyTorch\"></a>8.安装PyTorch</h2><p>最新版本安装方法：<a href=\"https://pytorch.org/get-started/locally/\">点我查看</a></p>\n<p>历史版本安装方法：<a href=\"https://pytorch.org/get-started/previous-versions/\">点我查看</a></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">pip</span> install torch==<span class=\"number\">1</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span> torchvision==<span class=\"number\">0</span>.<span class=\"number\">3</span>.<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-安装eigen3\"><a href=\"#9-安装eigen3\" class=\"headerlink\" title=\"9.安装eigen3\"></a>9.安装eigen3</h2><p>参考网址：<a href=\"https://blog.csdn.net/xiangxianghehe/article/details/81236299?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control\">点我查看</a></p>\n<h3 id=\"9-1安装依赖\"><a href=\"#9-1安装依赖\" class=\"headerlink\" title=\"9.1安装依赖\"></a>9.1安装依赖</h3><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"built_in\">get</span> install libopenblas-<span class=\"built_in\">dev</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install --no-install-recommends libboost1<span class=\"number\">.58</span>-<span class=\"built_in\">all</span>-<span class=\"built_in\">dev</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install libx11-<span class=\"built_in\">dev</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install libgl1-mesa-<span class=\"built_in\">dev</span> </span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install libglu1-mesa-<span class=\"built_in\">dev</span> </span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install freeglut3-<span class=\"built_in\">dev</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install doxygen</span><br><span class=\"line\">wget https:<span class=\"comment\">//nchc.dl.sourceforge.net/project/glew/glew/2.1.0/glew-2.1.0.tgz --no-check-certificate</span></span><br><span class=\"line\">tar -xzvf glew<span class=\"number\">-2.1</span><span class=\"number\">.0</span>.tgz</span><br><span class=\"line\">cd glew<span class=\"number\">-2.1</span><span class=\"number\">.0</span>/</span><br><span class=\"line\">make </span><br><span class=\"line\">make install</span><br><span class=\"line\">ldconfig -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2安装Eigen3-3-5\"><a href=\"#9-2安装Eigen3-3-5\" class=\"headerlink\" title=\"9.2安装Eigen3.3.5\"></a>9.2安装Eigen3.3.5</h3><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">wget</span> https://github.com/eigenteam/eigen-git-mirror/archive/<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>.tar.gz</span><br><span class=\"line\"><span class=\"attribute\">tar</span> -xzvf <span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>.tar.gz </span><br><span class=\"line\"><span class=\"attribute\">mv</span> eigen-git-mirror-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/ eigen-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/</span><br><span class=\"line\"><span class=\"attribute\">cd</span> eigen-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/</span><br><span class=\"line\"><span class=\"attribute\">mkdir</span> build</span><br><span class=\"line\"><span class=\"attribute\">cd</span> build</span><br><span class=\"line\"><span class=\"attribute\">cmake</span> ..</span><br><span class=\"line\"><span class=\"attribute\">make</span></span><br><span class=\"line\"><span class=\"attribute\">make</span> install </span><br><span class=\"line\"><span class=\"attribute\">ldconfig</span> -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-3测试\"><a href=\"#9-3测试\" class=\"headerlink\" title=\"9.3测试\"></a>9.3测试</h3><p>在容器中创建测试文件夹：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir install_test</span><br></pre></td></tr></table></figure>\n\n<p>在宿主机上创建如下文件：</p>\n<ul>\n<li>CMakeLists.txt</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cmake_minimum_required</span>( VERSION <span class=\"number\">2.8</span> )</span><br><span class=\"line\"><span class=\"built_in\">project</span>(useEigen)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>( CMAKE_BUILD_TYPE &quot;Release&quot; )</span><br><span class=\"line\"><span class=\"built_in\">set</span>( CMAKE_CXX_FLAGS &quot;-O3&quot; )</span><br><span class=\"line\"><span class=\"built_in\">set</span>( CMAKE_CXX_FLAGS &quot;-std=c++<span class=\"number\">11</span>&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加Eigen头文件</span><br><span class=\"line\"><span class=\"built_in\">include_directories</span>( &quot;/usr/local/include/eigen3&quot; )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">add_executable</span>(useEigen  main.cpp)</span><br><span class=\"line\"><span class=\"built_in\">find_package</span>(Eigen3 REQUIRED)</span><br><span class=\"line\"><span class=\"built_in\">target_link_libraries</span>($&#123;PROJECT_NAME&#125;  $&#123;EIGEN3_LIBS&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.cpp</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Eigen/Core&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Eigen/Dense&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Eigen/Geometry&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Eigen/StdVector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.rotation vector to  rotation matrix</span></span><br><span class=\"line\">    <span class=\"function\">Eigen::AngleAxisd <span class=\"title\">rotationVector</span><span class=\"params\">(M_PI/<span class=\"number\">4</span>,Eigen::Vector3d(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span></span>;</span><br><span class=\"line\">    Eigen::Matrix3d rotationMatrix=Eigen::Matrix3d::<span class=\"built_in\">Identity</span>();</span><br><span class=\"line\">    rotationMatrix=rotationVector.<span class=\"built_in\">toRotationMatrix</span>();</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;rotationMatrix \\n&quot;</span>&lt;&lt;rotationMatrix&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.rotation vector to quaterniond</span></span><br><span class=\"line\">    Eigen::Quaterniond q=Eigen::<span class=\"built_in\">Quaterniond</span>( rotationVector );</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;rotation quaternion \\n&quot;</span>&lt;&lt;q.<span class=\"built_in\">coeffs</span>()&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.rotaion vector to eulerAngles</span></span><br><span class=\"line\">    Eigen::Vector3d eulerAngle=rotationVector.<span class=\"built_in\">matrix</span>().<span class=\"built_in\">eulerAngles</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;eulerAngle roll pitch yaw\\n&quot;</span>&lt;&lt;<span class=\"number\">180</span>*eulerAngle/M_PI&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将宿主机上的两个文件拷贝至容器中的install_test里进行测试：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> cp CMakeLists.txt pytorch1.<span class=\"number\">1</span>-gpu:/home/eigen-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/install_test</span><br><span class=\"line\"><span class=\"attribute\">docker</span> cp main.cpp  pytorch1.<span class=\"number\">1</span>-gpu:/home/eigen-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/install_test</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> install_test</span><br><span class=\"line\">cmake  .</span><br><span class=\"line\">make</span><br><span class=\"line\">./useEigen</span><br></pre></td></tr></table></figure>\n\n<p>若显示结果如下，则说明测试成功。</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotationMatrix </span><br><span class=\"line\"> <span class=\"number\">0.707107</span> -<span class=\"number\">0.707107</span>         <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0.707107</span>  <span class=\"number\">0.707107</span>         <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">1</span></span><br><span class=\"line\">rotation quaternion </span><br><span class=\"line\">       <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0.382683</span></span><br><span class=\"line\"> <span class=\"number\">0.92388</span></span><br><span class=\"line\">eulerAngle roll pitch yaw</span><br><span class=\"line\">-<span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">45</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-安装tensorflow\"><a href=\"#10-安装tensorflow\" class=\"headerlink\" title=\"10.安装tensorflow\"></a>10.安装tensorflow</h2><ul>\n<li>tensorflow与cuda的版本对应关系</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/PEoKmlhbcXisCWt.png\"></p>\n<p>安装命令：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">pip</span> install tensorflow-gpu==<span class=\"number\">2</span>.<span class=\"number\">0</span> -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>\n\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","more":"<h2 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1.安装docker\"></a>1.安装docker</h2><p>ubuntu下安装docker的官方教程：<a href=\"https://docs.docker.com/engine/install/ubuntu/\">点我查看</a></p>\n<p>ubuntu下安装参考教程：<a href=\"https://yeasy.gitbook.io/docker_practice/install/ubuntu\">点我查看</a></p>\n<h3 id=\"1-1卸载旧版本\"><a href=\"#1-1卸载旧版本\" class=\"headerlink\" title=\"1.1卸载旧版本\"></a>1.1卸载旧版本</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2使用apt安装\"><a href=\"#1-2使用apt安装\" class=\"headerlink\" title=\"1.2使用apt安装\"></a>1.2使用apt安装</h3><p>官网提供多种安装方式，这里使用apt安装</p>\n<p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install <span class=\"string\">\\</span></span><br><span class=\"line\">    apt-transport-https <span class=\"string\">\\</span></span><br><span class=\"line\">    ca-certificates <span class=\"string\">\\</span></span><br><span class=\"line\">    curl <span class=\"string\">\\</span></span><br><span class=\"line\">    gnupg <span class=\"string\">\\</span></span><br><span class=\"line\">    lsb-release</span><br></pre></td></tr></table></figure>\n\n<p>添加docker密匙：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/docker-ce/</span>linux<span class=\"regexp\">/ubuntu/g</span>pg | sudo gpg --dearmor -o <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/keyrings/</span>docker-archive-keyring.gpg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 官方密匙</span></span><br><span class=\"line\">curl -fsSL https:<span class=\"regexp\">//</span>download.docker.com<span class=\"regexp\">/linux/u</span>buntu<span class=\"regexp\">/gpg | sudo gpg --dearmor -o /u</span>sr<span class=\"regexp\">/share/</span>keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们需要向 <code>sources.list</code> 中添加 Docker 软件源：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  $(lsb_release -cs) stable&quot;</span> | sudo tee <span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>docker.list &gt; <span class=\"regexp\">/dev/</span><span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 官方源</span><br><span class=\"line\">echo \\</span><br><span class=\"line\">   <span class=\"string\">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   $(lsb_release -cs) stable&quot;</span> | sudo tee <span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>docker.list &gt; <span class=\"regexp\">/dev/</span><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>以上命令会添加稳定版本的 Docker APT 镜像源，如果需要测试版本的 Docker 请将 stable 改为 test。</p>\n<p>安装docker:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install docker-<span class=\"keyword\">ce</span> docker-<span class=\"keyword\">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3配置阿里云镜像加速器\"><a href=\"#1-3配置阿里云镜像加速器\" class=\"headerlink\" title=\"1.3配置阿里云镜像加速器\"></a>1.3配置阿里云镜像加速器</h3><p>参考网址：<a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\">点我查看</a></p>\n<p>需要个人注册阿里云账号并开启容器镜像服务，该服务免费。</p>\n<p>然后查看镜像加速地址，例如我的镜像加速地址为：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"regexp\">//</span>znrurdgu.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure>\n\n<p>注意：这里需要是自己的镜像加速器，否则没有权限访问。</p>\n<p>执行如下命令配置docker：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成配置文件</span></span><br><span class=\"line\">docker-machine ssh default</span><br><span class=\"line\"><span class=\"comment\"># 设置加速器地址：</span></span><br><span class=\"line\"><span class=\"comment\"># sed -i &quot;s|EXTRA_ARGS=&#x27;|EXTRA_ARGS=&#x27;--registry-mirror=自己的镜像加速地址|g&quot; /var/lib/boot2docker/profile</span></span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s|EXTRA_ARGS=&#x27;|EXTRA_ARGS=&#x27;--registry-mirror=https://znrurdgu.mirror.aliyuncs.com|g&quot;</span> <span class=\"regexp\">/var/</span>lib<span class=\"regexp\">/boot2docker/</span>profile</span><br><span class=\"line\"><span class=\"comment\"># 退出docker</span></span><br><span class=\"line\"><span class=\"keyword\">exit</span></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">docker-machine restart default</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n\n<p>查看docker信息后，可以发现 Registory mirrors 项的内容为刚刚设置的阿里云镜像地址。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p <span class=\"regexp\">/etc/</span>docker</span><br><span class=\"line\">sudo tee <span class=\"regexp\">/etc/</span>docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://znrurdgu.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-安装-nvidia-docker\"><a href=\"#2-安装-nvidia-docker\" class=\"headerlink\" title=\"2.安装 nvidia-docker\"></a>2.安装 nvidia-docker</h2><p>docker 默认是不支持在容器内 GPU 加速的，NVIDIA 官方做了个工具箱来支持容器内 GPU 加速运算，这大大方便了深度学习开发者。</p>\n<p>官方教程：<a href=\"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installing-on-ubuntu-and-debian\">点我查看</a></p>\n<p>参考教程：<a href=\"https://blog.csdn.net/zhouchen1998/article/details/110679750\">点我查看</a></p>\n<p>依次执行如下命令即可：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">distribution=$(. <span class=\"regexp\">/etc/</span>os-release;echo <span class=\"variable\">$ID</span><span class=\"variable\">$VERSION_ID</span>) \\</span><br><span class=\"line\">   &amp;&amp; curl -s -L https:<span class=\"regexp\">//</span>nvidia.github.io<span class=\"regexp\">/nvidia-docker/g</span>pgkey | sudo apt-key add - \\</span><br><span class=\"line\">   &amp;&amp; curl -s -L https:<span class=\"regexp\">//</span>nvidia.github.io<span class=\"regexp\">/nvidia-docker/</span><span class=\"variable\">$distribution</span><span class=\"regexp\">/nvidia-docker.list | sudo tee /</span>etc<span class=\"regexp\">/apt/</span>sources.list.d/nvidia-docker.list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl -s -L https:<span class=\"regexp\">//</span>nvidia.github.io<span class=\"regexp\">/nvidia-container-runtime/</span>experimental<span class=\"regexp\">/$distribution/</span>nvidia-container-runtime.list | sudo tee <span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>nvidia-container-runtime.list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install -y nvidia-docker2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-拉取cuda、cudnn的镜像\"><a href=\"#3-拉取cuda、cudnn的镜像\" class=\"headerlink\" title=\"3.拉取cuda、cudnn的镜像\"></a>3.拉取cuda、cudnn的镜像</h2><p>docker hub地址：<a href=\"https://hub.docker.com/r/nvidia/cuda\">点我查看</a></p>\n<p>官网给出多个版本可供拉取，这里使用cuda:10.0-cudnn7-devel-ubuntu16.04</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> pull nvidia/cuda:<span class=\"number\">10</span>.<span class=\"number\">0</span>-cudnn7-devel-ubuntu16.<span class=\"number\">04</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-新建容器\"><a href=\"#4-新建容器\" class=\"headerlink\" title=\"4.新建容器\"></a>4.新建容器</h2><p>容器与镜像的关系好比：镜像为C++中的类，而容器为镜像的实例话，这里基于拉去的cuda:10.0-cudnn7-devel-ubuntu16.04镜像创建一个新的容器并进入容器中：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> container run --name pytorch1.<span class=\"number\">1</span>-gpu -it --gpus <span class=\"literal\">all</span>  nvidia/cuda:<span class=\"number\">10</span>.<span class=\"number\">0</span>-cudnn7-devel-ubuntu16.<span class=\"number\">04</span> /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ul>\n<li>docker container run：容器启动命令，同时会新建一个容器，因此该命令是在新建容器时使用</li>\n<li>–name ：后的参数为新建容器的名称</li>\n<li>-it：其实是 -i -t 的缩写，该参数使得容器具备交互性并与终端进行连接，将shell切换至终端</li>\n<li>–gpu all：表示允许容器使用宿主机的所有GPU</li>\n<li>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：创建新的容器所基于的镜像名称</li>\n<li>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</li>\n</ul>\n<p>以该命令创建并进入容器后，该容器就具有了nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04镜像的配置，相当于实现了“实例话”</p>\n<p>退出该容器后，可以使用以下命令进行查看：</p>\n<ul>\n<li>查看正在运行的容器：</li>\n</ul>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">container</span> <span class=\"keyword\">ls</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看容器运行历史：</li>\n</ul>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">container</span> <span class=\"keyword\">ls</span> -a</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到刚才运行的容器pytorch1.1-gpu的信息。</p>\n<h3 id=\"4-1-重启容器\"><a href=\"#4-1-重启容器\" class=\"headerlink\" title=\"4.1.重启容器\"></a>4.1.重启容器</h3><p>docker container start + 容器名或容器ID，启动一个已经完成创建并停止运行的容器：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> container start pytorch1.<span class=\"number\">1</span>-gpu</span><br></pre></td></tr></table></figure>\n\n<p>查看正在运行的容器：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">container</span> <span class=\"keyword\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>docker container exec   命令用于进入正在运行的容器：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it pytorch1.<span class=\"number\">1</span>-gpu <span class=\"regexp\">/bin/</span>bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2停止容器\"><a href=\"#4-2停止容器\" class=\"headerlink\" title=\"4.2停止容器\"></a>4.2停止容器</h3><p>docker container stop   用于停止正在运行的容器：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> container stop pytorch1.<span class=\"number\">1</span>-gpu</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3删除容器\"><a href=\"#4-3删除容器\" class=\"headerlink\" title=\"4.3删除容器\"></a>4.3删除容器</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">container</span> rm  待删除的容器命令或ID</span><br></pre></td></tr></table></figure>\n\n<p>注意：删除容器之前需要停止容器，避免报错。</p>\n<h2 id=\"5-安装常用工具\"><a href=\"#5-安装常用工具\" class=\"headerlink\" title=\"5.安装常用工具\"></a>5.安装常用工具</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install git -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装vim</span></span><br><span class=\"line\">apt install vim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装cmake</span></span><br><span class=\"line\">apt install cmake</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装updatedb</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install mlocate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装wget</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install wget</span><br><span class=\"line\"><span class=\"comment\"># 安装curl</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install curl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-在容器中安装python\"><a href=\"#6-在容器中安装python\" class=\"headerlink\" title=\"6.在容器中安装python\"></a>6.在容器中安装python</h2><p>新建的容器默认没有python或pip、vim等工具，除非新建容器时将这些包一并装入，因此需要手动安装一些需要的包。新的容器中 apt-get 或 apt 命令是可以使用的：</p>\n<p>参考网站：<a href=\"https://www.digitalocean.com/community/questions/unable-to-install-pyhton-3-7-version-on-ubuntu-16-04-error-couldn-t-find-any-package-by-regex-python3-7\">点我查看</a></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#更新源</span><br><span class=\"line\">apt <span class=\"keyword\">update</span></span><br><span class=\"line\"></span><br><span class=\"line\">#安装<span class=\"keyword\">python</span>依赖</span><br><span class=\"line\">apt install software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\">#添加源</span><br><span class=\"line\"><span class=\"built_in\">add</span>-apt-repository <span class=\"keyword\">pp</span><span class=\"variable\">a:deadsnakes</span>/ppa</span><br><span class=\"line\"></span><br><span class=\"line\">#更新源</span><br><span class=\"line\">apt <span class=\"keyword\">update</span></span><br><span class=\"line\"></span><br><span class=\"line\">#安装<span class=\"keyword\">python</span></span><br><span class=\"line\">apt install <span class=\"keyword\">python3</span>.<span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">#查看<span class=\"keyword\">python</span>版本</span><br><span class=\"line\"><span class=\"keyword\">python</span> --<span class=\"keyword\">version</span> 或 <span class=\"keyword\">python</span> -V</span><br><span class=\"line\"><span class=\"keyword\">python3</span> --<span class=\"keyword\">version</span> 或 <span class=\"keyword\">python3</span> -V</span><br></pre></td></tr></table></figure>\n\n<p>安装完python3.7可能需要修改默认python指向才能正常使用python3.7：</p>\n<p>参考网站：<a href=\"https://blog.csdn.net/qq_33188180/article/details/109723636\">点我查看</a></p>\n<p>查看默认python指向：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l <span class=\"regexp\">/usr/</span>bin | <span class=\"keyword\">grep</span> python </span><br></pre></td></tr></table></figure>\n\n<p>删除原有python软连接：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm <span class=\"regexp\">/usr/</span>bin/python</span><br></pre></td></tr></table></figure>\n\n<p>建立python到新的软链接python3.7：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/python3.7  /u</span>sr<span class=\"regexp\">/bin/</span>python</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-在容器中安装pip\"><a href=\"#7-在容器中安装pip\" class=\"headerlink\" title=\"7.在容器中安装pip\"></a>7.在容器中安装pip</h2><p>这里也有个小坑！如果你写的是python3-pip 执行安装后，如果系统自带了python3.5，其实pip这时是装在了python3.5环境下了！！正确的指定方式，应该把小版本号也加上！</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"built_in\">get</span> install python3.7-pip</span><br></pre></td></tr></table></figure>\n\n<p>但是执行上述命令可能会报错，如果报错需要安装下面的方法添加pip安装源：</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">curl</span> <span class=\"string\">https</span>://<span class=\"string\">bootstrap</span>.<span class=\"string\">pypa</span>.<span class=\"string\">io</span>/<span class=\"built_in\">get-pip.py</span> -<span class=\"string\">o</span> <span class=\"built_in\">get-pip.py</span></span><br></pre></td></tr></table></figure>\n\n<p>由于上面已经将python指向了python3，因此下面直接使用python安装即可，否者要使用python3安装：</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">python</span> <span class=\"built_in\">get-pip.py</span> <span class=\"built_in\">--force-reinstall</span></span><br></pre></td></tr></table></figure>\n\n<p>查看pip位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> pip</span><br></pre></td></tr></table></figure>\n\n<p>我在安装后显示安装在：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip</p>\n<p>建立pip软链接：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>pip <span class=\"regexp\">/usr/</span>bin/pip</span><br></pre></td></tr></table></figure>\n\n<p>注意：第一个地址  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip  为  which pip  的显示地址</p>\n<p>查看pip版本：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip -V 或 pip <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure>\n\n<p>我的显示位置为：pip 20.3.4 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages&#x2F;pip (python 3.7)</p>\n<p>至此，python将指向python3.7，pip将指向python 3.7的pip 20.3.4，实现python和pip的版本对应，且目标容器内二者都是唯一存在，不需要再使用python3和pip3调用python3的对应版本，这样使用pip安装的包将默认存放在  &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages  中。</p>\n<h2 id=\"8-安装PyTorch\"><a href=\"#8-安装PyTorch\" class=\"headerlink\" title=\"8.安装PyTorch\"></a>8.安装PyTorch</h2><p>最新版本安装方法：<a href=\"https://pytorch.org/get-started/locally/\">点我查看</a></p>\n<p>历史版本安装方法：<a href=\"https://pytorch.org/get-started/previous-versions/\">点我查看</a></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">pip</span> install torch==<span class=\"number\">1</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span> torchvision==<span class=\"number\">0</span>.<span class=\"number\">3</span>.<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-安装eigen3\"><a href=\"#9-安装eigen3\" class=\"headerlink\" title=\"9.安装eigen3\"></a>9.安装eigen3</h2><p>参考网址：<a href=\"https://blog.csdn.net/xiangxianghehe/article/details/81236299?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control\">点我查看</a></p>\n<h3 id=\"9-1安装依赖\"><a href=\"#9-1安装依赖\" class=\"headerlink\" title=\"9.1安装依赖\"></a>9.1安装依赖</h3><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"built_in\">get</span> install libopenblas-<span class=\"built_in\">dev</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install --no-install-recommends libboost1<span class=\"number\">.58</span>-<span class=\"built_in\">all</span>-<span class=\"built_in\">dev</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install libx11-<span class=\"built_in\">dev</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install libgl1-mesa-<span class=\"built_in\">dev</span> </span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install libglu1-mesa-<span class=\"built_in\">dev</span> </span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install freeglut3-<span class=\"built_in\">dev</span></span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install doxygen</span><br><span class=\"line\">wget https:<span class=\"comment\">//nchc.dl.sourceforge.net/project/glew/glew/2.1.0/glew-2.1.0.tgz --no-check-certificate</span></span><br><span class=\"line\">tar -xzvf glew<span class=\"number\">-2.1</span><span class=\"number\">.0</span>.tgz</span><br><span class=\"line\">cd glew<span class=\"number\">-2.1</span><span class=\"number\">.0</span>/</span><br><span class=\"line\">make </span><br><span class=\"line\">make install</span><br><span class=\"line\">ldconfig -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2安装Eigen3-3-5\"><a href=\"#9-2安装Eigen3-3-5\" class=\"headerlink\" title=\"9.2安装Eigen3.3.5\"></a>9.2安装Eigen3.3.5</h3><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">wget</span> https://github.com/eigenteam/eigen-git-mirror/archive/<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>.tar.gz</span><br><span class=\"line\"><span class=\"attribute\">tar</span> -xzvf <span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>.tar.gz </span><br><span class=\"line\"><span class=\"attribute\">mv</span> eigen-git-mirror-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/ eigen-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/</span><br><span class=\"line\"><span class=\"attribute\">cd</span> eigen-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/</span><br><span class=\"line\"><span class=\"attribute\">mkdir</span> build</span><br><span class=\"line\"><span class=\"attribute\">cd</span> build</span><br><span class=\"line\"><span class=\"attribute\">cmake</span> ..</span><br><span class=\"line\"><span class=\"attribute\">make</span></span><br><span class=\"line\"><span class=\"attribute\">make</span> install </span><br><span class=\"line\"><span class=\"attribute\">ldconfig</span> -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-3测试\"><a href=\"#9-3测试\" class=\"headerlink\" title=\"9.3测试\"></a>9.3测试</h3><p>在容器中创建测试文件夹：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir install_test</span><br></pre></td></tr></table></figure>\n\n<p>在宿主机上创建如下文件：</p>\n<ul>\n<li>CMakeLists.txt</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cmake_minimum_required</span>( VERSION <span class=\"number\">2.8</span> )</span><br><span class=\"line\"><span class=\"built_in\">project</span>(useEigen)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>( CMAKE_BUILD_TYPE &quot;Release&quot; )</span><br><span class=\"line\"><span class=\"built_in\">set</span>( CMAKE_CXX_FLAGS &quot;-O3&quot; )</span><br><span class=\"line\"><span class=\"built_in\">set</span>( CMAKE_CXX_FLAGS &quot;-std=c++<span class=\"number\">11</span>&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加Eigen头文件</span><br><span class=\"line\"><span class=\"built_in\">include_directories</span>( &quot;/usr/local/include/eigen3&quot; )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">add_executable</span>(useEigen  main.cpp)</span><br><span class=\"line\"><span class=\"built_in\">find_package</span>(Eigen3 REQUIRED)</span><br><span class=\"line\"><span class=\"built_in\">target_link_libraries</span>($&#123;PROJECT_NAME&#125;  $&#123;EIGEN3_LIBS&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.cpp</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Eigen/Core&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Eigen/Dense&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Eigen/Geometry&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Eigen/StdVector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.rotation vector to  rotation matrix</span></span><br><span class=\"line\">    <span class=\"function\">Eigen::AngleAxisd <span class=\"title\">rotationVector</span><span class=\"params\">(M_PI/<span class=\"number\">4</span>,Eigen::Vector3d(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span></span>;</span><br><span class=\"line\">    Eigen::Matrix3d rotationMatrix=Eigen::Matrix3d::<span class=\"built_in\">Identity</span>();</span><br><span class=\"line\">    rotationMatrix=rotationVector.<span class=\"built_in\">toRotationMatrix</span>();</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;rotationMatrix \\n&quot;</span>&lt;&lt;rotationMatrix&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.rotation vector to quaterniond</span></span><br><span class=\"line\">    Eigen::Quaterniond q=Eigen::<span class=\"built_in\">Quaterniond</span>( rotationVector );</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;rotation quaternion \\n&quot;</span>&lt;&lt;q.<span class=\"built_in\">coeffs</span>()&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.rotaion vector to eulerAngles</span></span><br><span class=\"line\">    Eigen::Vector3d eulerAngle=rotationVector.<span class=\"built_in\">matrix</span>().<span class=\"built_in\">eulerAngles</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;eulerAngle roll pitch yaw\\n&quot;</span>&lt;&lt;<span class=\"number\">180</span>*eulerAngle/M_PI&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将宿主机上的两个文件拷贝至容器中的install_test里进行测试：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> cp CMakeLists.txt pytorch1.<span class=\"number\">1</span>-gpu:/home/eigen-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/install_test</span><br><span class=\"line\"><span class=\"attribute\">docker</span> cp main.cpp  pytorch1.<span class=\"number\">1</span>-gpu:/home/eigen-<span class=\"number\">3</span>.<span class=\"number\">3</span>.<span class=\"number\">5</span>/install_test</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> install_test</span><br><span class=\"line\">cmake  .</span><br><span class=\"line\">make</span><br><span class=\"line\">./useEigen</span><br></pre></td></tr></table></figure>\n\n<p>若显示结果如下，则说明测试成功。</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotationMatrix </span><br><span class=\"line\"> <span class=\"number\">0.707107</span> -<span class=\"number\">0.707107</span>         <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0.707107</span>  <span class=\"number\">0.707107</span>         <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">1</span></span><br><span class=\"line\">rotation quaternion </span><br><span class=\"line\">       <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0.382683</span></span><br><span class=\"line\"> <span class=\"number\">0.92388</span></span><br><span class=\"line\">eulerAngle roll pitch yaw</span><br><span class=\"line\">-<span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">45</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-安装tensorflow\"><a href=\"#10-安装tensorflow\" class=\"headerlink\" title=\"10.安装tensorflow\"></a>10.安装tensorflow</h2><ul>\n<li>tensorflow与cuda的版本对应关系</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/21/PEoKmlhbcXisCWt.png\"></p>\n<p>安装命令：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">pip</span> install tensorflow-gpu==<span class=\"number\">2</span>.<span class=\"number\">0</span> -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"docker","path":"api/categories/docker.json"}],"tags":[{"name":"深度学习","path":"api/tags/深度学习.json"},{"name":"docker","path":"api/tags/docker.json"},{"name":"Ubuntu","path":"api/tags/Ubuntu.json"}]}