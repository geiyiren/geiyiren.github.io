{"title":"函数参数传递之引用与指针","slug":"函数参数传递之引用与指针","date":"2022-11-12T08:59:07.000Z","updated":"2023-11-24T15:15:00.986Z","comments":true,"path":"api/articles/函数参数传递之引用与指针.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/no.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/kuangtu.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes2.png"],"content":"<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><h2 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h2><p><strong>形参是实参的拷贝</strong>，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参-&gt;形参），参数的值只能传入，不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递。</p>\n<h2 id=\"指针传递\"><a href=\"#指针传递\" class=\"headerlink\" title=\"指针传递\"></a>指针传递</h2><p><strong>形参为指向实参地址的指针</strong>，当对形参的指向操作时，就相当于对实参本身进行的操作</p>\n<h2 id=\"引用传递\"><a href=\"#引用传递\" class=\"headerlink\" title=\"引用传递\"></a>引用传递</h2><p><strong>形参相当于是实参的“别名”</strong>，对形参的操作其实就是对实参的操作，在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p>\n<p>引用引入了对象的一个同义词。定义引用的表示方法与定义指针相似，只是用“&amp;”代替了“*”。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Point <span class=\"title\">pt1</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">Point &amp;pt2=pt1; </span><br></pre></td></tr></table></figure>\n<p>定义了pt2为pt1的引用。通过这样的定义，pt1和pt2表示同一对象。需要特别强调的是引用并不产生对象的副本，仅仅是对象的同义词。因此，当下面的语句执行后：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pt1.offset（<span class=\"number\">2</span>，<span class=\"number\">2</span>）；</span><br></pre></td></tr></table></figure>\n<p>pt1和pt2都具有（12，12）的值。<br>引用必须在定义时马上被初始化，因为它必须是某个东西的同义词。你不能先定义一个引用后才<br>初始化它。例如下面语句是非法的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point &amp;pt3；</span><br><span class=\"line\">pt3=pt1；</span><br></pre></td></tr></table></figure>\n<h1 id=\"引用传递和指针传递的区别与联系\"><a href=\"#引用传递和指针传递的区别与联系\" class=\"headerlink\" title=\"引用传递和指针传递的区别与联系\"></a>引用传递和指针传递的区别与联系</h1><h2 id=\"引用的规则\"><a href=\"#引用的规则\" class=\"headerlink\" title=\"引用的规则\"></a>引用的规则</h2><ul>\n<li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。 </li>\n<li>不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）。 </li>\n<li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li>\n</ul>\n<h2 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h2><p>-都是地址的概念：指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><ul>\n<li><p>指针是一个实体，而引用仅是个别名；</p>\n</li>\n<li><p>引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p>\n</li>\n<li><p>引用没有const，指针有const，const的指针不可变；（具体指没有int&amp; const a这种形式，而const int&amp; a是有 的， 前者指引用本身即别名不可以改变，这是当然的，所以不需要这种形式，后者指引用所指的值不可以改变）</p>\n</li>\n<li><p>引用不能为空，指针可以为空；</p>\n</li>\n<li><p>“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p>\n</li>\n<li><p>指针和引用的自增(++)运算意义不一样；</p>\n</li>\n<li><p>引用是类型安全的，而指针不是 (引用比指针多了类型检查</p>\n</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>从概念上讲，<strong>指针从本质上讲就是存放变量地址的一个变量</strong>，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p>\n<p>而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p>\n<p>在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</p>\n<p>指针传递参数本质上是值传递的方式，它所传递的是一个地址值。<em>值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（这里是在说实参指针本身的地址值不会变）</em></p>\n<p>而在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时<strong>存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量</strong>。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p>\n<p><strong>引用传递和指针传递是不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针传递的参数，如果改变被调函数中的指针地址，它将影响不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量，那就得使用指向指针的指针，或者指针引用。</strong></p>\n<p>为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p>\n<p>程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为<strong>指针变量的地址值</strong>，指针变量中的值为其指向变量的地址；而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改.</p>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><p>使用引用传递参数和使用指针传递参数都可传递变量的地址，但对于int,float等占用内存较少，其作为函数参数时一般使用引用传递参数；而对于结构体而言一般采用指针传递结构体变量的地址。</p>\n<h1 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h1><h2 id=\"传递可变参数\"><a href=\"#传递可变参数\" class=\"headerlink\" title=\"传递可变参数\"></a>传递可变参数</h2><p>传统的c中，函数在调用时参数是通过值来传递的，这就是说函数的参数不具备返回值的能力。所以在传统的c中，如果需要函数的参数具有返回值的能力，往往是通过指针来实现的。比如，实现两整数变量值交换的c程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_int</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    temp=*a;</span><br><span class=\"line\">    a=*b;</span><br><span class=\"line\">    *b=temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用引用机制后，以上程序的c++版本为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_int</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    temp=a;</span><br><span class=\"line\">    a=b;</span><br><span class=\"line\">    b=temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用该函数的c++方法为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap_int,y); </span><br></pre></td></tr></table></figure>\n<p>c++自动把x,y的地址作为参数传递给swap_int函数。</p>\n<h2 id=\"给函数传递大型对象\"><a href=\"#给函数传递大型对象\" class=\"headerlink\" title=\"给函数传递大型对象\"></a>给函数传递大型对象</h2><p>当大型对象被传递给函数时，使用引用参数可使参数传递效率得到提高，因为引用并不产生对象的副本，也就是参数传递时，对象无须复制。下面的例子定义了一个有限整数集合的类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> maxCard=<span class=\"number\">100</span>;</span><br><span class=\"line\">Class Set</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> elems[maxCard]; <span class=\"comment\">// 集和中的元素，maxCard 表示集合中元素个数的最大值。</span></span><br><span class=\"line\">    <span class=\"type\">int</span> card; <span class=\"comment\">// 集合中元素的个数。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Set</span> () &#123;card=<span class=\"number\">0</span>;&#125; <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> Set <span class=\"keyword\">operator</span> * (Set ,Set ) ; <span class=\"comment\">//重载运算符号*，用于计算集合的交集 用对象作为传值参数</span></span><br><span class=\"line\">    <span class=\"comment\">// friend Set operator * (Set &amp; ,Set &amp; ) 重载运算符号*，用于计算集合的交集 用对象的引用作为传值参数</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先考虑集合交集的实现</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set <span class=\"keyword\">operator</span> *( Set Set1,Set Set2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Set res;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;Set1.card;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&gt;Set2.card;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Set1.elems[i]==Set2.elems[j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res.elems[res.card++]=Set1.elems[i];</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于重载运算符不能对指针单独操作，我们必须把运算数声明为 Set 类型而不是 Set * 。每次使用*做交集运算时，整个集合都被复制，这样效率很低。我们可以用引用来避免这种情况。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set <span class=\"keyword\">operator</span> *( Set &amp;Set1,Set &amp;Set2)</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    Set res;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;Set1.card;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&gt;Set2.card;++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Set1.elems[i]==Set2.elems[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res.elems[res.card++]=Set1.elems[i];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用返回值\"><a href=\"#引用返回值\" class=\"headerlink\" title=\"引用返回值\"></a>引用返回值</h2><p>如果一个函数返回了引用，那么该函数的调用也可以被赋值。这里有一函数，它拥有两个引用参数并返回一个双精度数的引用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> &amp;<span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">double</span> &amp;d1,<span class=\"type\">double</span> &amp;d2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d1&gt;d2?d1:d2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于max()函数返回一个对双精度数的引用，那么我们就可以用max() 来对其中较大的双精度数加1：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span>(x,y)+=<span class=\"number\">1.0</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二级指针\"><a href=\"#二级指针\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>在函数的使用过程中，我们都明白传指针和传引用会使实参的值发生改变。那么能够通过传指针改变指针所指向的地址吗？<br>在解决这个问题之前，也许我们应该先了解指针非常容易混淆的三个属性：</p>\n<ul>\n<li>指针变量地址（&amp;p）</li>\n<li>指针变量指向的地址（p，存储数据的地址）</li>\n<li>指针变量指向的地址的值（*p）</li>\n</ul>\n<p>当我们将指针变量与其它变量比较之后就会发现，指针变量同其它变量是相似的，只是多了最后一种操作。比如一个int类型的变量,<code>int x=5;</code>,<code>&amp;x</code>取出存储<code>5</code>这个数据的地址，同样，<code>&amp;p</code>也是存储指针的地址，<code>p</code>就是这个地址里面保存的值，也就是指向的地址。只是与其它变量不同的是，它除了这两种操作之外，还有一个解引用操作符<code>*p</code>去获取指针变量指向的地址里面保存的值。</p>\n<h2 id=\"指针引用\"><a href=\"#指针引用\" class=\"headerlink\" title=\"指针引用\"></a>指针引用</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make</span><span class=\"params\">(<span class=\"type\">int</span> *pp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pp=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">66</span>); <span class=\"comment\">//试图改变p指向的地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> a=<span class=\"number\">5</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> *p=&amp;a; <span class=\"comment\">//指针变量指向一个int类型的地址</span></span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;&amp;a&lt;&lt;<span class=\"string\">&quot;value:&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;p&lt;&lt;<span class=\"string\">&quot;value:&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class=\"line\">     <span class=\"built_in\">make</span>(p);</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;p&lt;&lt;<span class=\"string\">&quot;value:&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：我们这里虽然使用的是传指针，但是却不是直接改变指针变量指向的地址的值，却是想通过改变指针变量指向的地址来修改它的值，显然这样失败了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/no.png\"></p>\n<p>如果我们希望在函数里面修改指针变量存储的地址而不是它的值，这个时候就需要指针引用了。类似于普通变量传入变量引用，我们也传入一个指针引用，在函数里面，你可以将pp认为和p都是这个指针变量（&amp;p&#x3D;&#x3D;&amp;pp），不似传入指针参数的时候形参和实参的变量（&amp;p！&#x3D;&amp;pp）地址不一样。此时我们操作pp的值就是更改了p的值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make</span><span class=\"params\">(<span class=\"type\">int</span> *&amp;pp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pp=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">66</span>); <span class=\"comment\">//改变p指向的地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：当我们修改传入参数为指针的引用的时候就可以修改指针变量所指向的地址了，可以看见，传入指针引用可以修改指针变量的值（p）和指向的值（*p）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes.png\"></p>\n<h2 id=\"二级指针-1\"><a href=\"#二级指针-1\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h2><p>指向指针的指针变量称为二级指针。<br>如果pp是一个二级指针，那么有如下属性：</p>\n<ul>\n<li>二级指针的地址（&amp;pp）</li>\n<li>二级指针的地址保存的地址（pp）</li>\n<li>二级指针的地址保存的地址，该地址里面保存的地址（*pp）</li>\n<li>二级指针的地址保存的地址，该地址里面保存的地址里面的数据（**pp）</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/kuangtu.png\"> </p>\n<p>除了上面传入指针引用改变一级指针指向的地址以外，我们还可以通过传入一个二级指针去修改它对应的一级指针指向的地址，同样达到了修改指针变量的效果。二级指针的指向的地址存储的值就是一级指针指向的地址。对一级指针变量解引用得到的是指针指向的地址存储的数据，二级指针变量解引用得到的也是该二级指针指向的地址存储的地址值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make</span><span class=\"params\">(<span class=\"type\">int</span> **pp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> * p=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">66</span>);</span><br><span class=\"line\">    *pp=p; <span class=\"comment\">//二级指针的解引用被赋值需要得到一个一级指针变量，上图中二级指针的示意图中*pp=p</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> a=<span class=\"number\">5</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> *q=&amp;a;</span><br><span class=\"line\">     <span class=\"type\">int</span> **pp=&amp;q;</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;&amp;pp&lt;&lt;<span class=\"string\">&quot;  &quot;</span>&lt;&lt;pp&lt;&lt;<span class=\"string\">&quot;    &quot;</span>&lt;&lt;&amp;q&lt;&lt;<span class=\"string\">&quot;   &quot;</span>&lt;&lt;q&lt;&lt;<span class=\"string\">&quot;       value:&quot;</span>&lt;&lt;*q&lt;&lt;endl;</span><br><span class=\"line\">     <span class=\"built_in\">make</span>(pp);</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;&amp;pp&lt;&lt;<span class=\"string\">&quot;  &quot;</span>&lt;&lt;pp&lt;&lt;<span class=\"string\">&quot;    &quot;</span>&lt;&lt;&amp;q&lt;&lt;<span class=\"string\">&quot;   &quot;</span>&lt;&lt;q&lt;&lt;<span class=\"string\">&quot;       value:&quot;</span>&lt;&lt;*q&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：通过对二级指针的解引用赋值成功修改了一级指针指向的地址。如果仅仅在make函数里面对**pp&#x3D;66;操作，那么所有的地址不会改变，仅仅会改变值为66。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes2.png\"></p>\n<h1 id=\"各种类型的函数参数传递\"><a href=\"#各种类型的函数参数传递\" class=\"headerlink\" title=\"各种类型的函数参数传递\"></a>各种类型的函数参数传递</h1><h2 id=\"声明-h\"><a href=\"#声明-h\" class=\"headerlink\" title=\"声明.h\"></a>声明.h</h2><figure class=\"highlight c\"><figcaption><span>++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结构体数组   (in_ldc)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getLdc</span><span class=\"params\">(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS])</span>;</span><br><span class=\"line\"><span class=\"comment\">// cv::Mat  (in_MatK)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getMatK</span><span class=\"params\">(cv::Mat *in_MatK)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 内存块(map)  (in_BEMap)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getBEMap</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span> *&amp;in_BEMap)</span>;</span><br><span class=\"line\"><span class=\"comment\">// cv::Rect数组 (in_BESetRoi)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getBESetRoi</span><span class=\"params\">(cv::Rect *in_BESetRoi)</span>;</span><br><span class=\"line\"><span class=\"comment\">// cv::Mat 数组 (in_wide_angle_map)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getWideAngleMap</span><span class=\"params\">(<span class=\"type\">float</span> **in_wide_angle_map)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 整数 (in_wide_angle_width,in_wide_angle_height)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getWideAngleSize</span><span class=\"params\">(<span class=\"type\">int</span> &amp;in_wide_angle_width, <span class=\"type\">int</span> &amp;in_wide_angle_height)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义-cpp\"><a href=\"#定义-cpp\" class=\"headerlink\" title=\"定义.cpp\"></a>定义.cpp</h2><ul>\n<li><p>结构体数组</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> distCenterX;</span><br><span class=\"line\">    <span class=\"type\">float</span> distCenterY;</span><br><span class=\"line\">    <span class=\"type\">float</span> distFocalLength;</span><br><span class=\"line\">    <span class=\"type\">float</span> distFocalLengthInv;</span><br><span class=\"line\">    <span class=\"type\">float</span> *lut_d2u;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> lut_d2u_indMax;</span><br><span class=\"line\">    <span class=\"type\">float</span> lut_d2u_step;</span><br><span class=\"line\">    <span class=\"type\">float</span> lut_d2u_stepInv;</span><br><span class=\"line\">    <span class=\"type\">float</span> *lut_u2d;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> lut_u2d_indMax;</span><br><span class=\"line\">    <span class=\"type\">float</span> lut_u2d_step;</span><br><span class=\"line\">    <span class=\"type\">float</span> lut_u2d_stepInv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">bool</span> if_get_matrix = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    cv::Mat intrinsics = cv::<span class=\"built_in\">Mat</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>, CV_32FC1, cv::Scalar::<span class=\"built_in\">all</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">    cv::Mat distortionCoeff = cv::<span class=\"built_in\">Mat</span>(<span class=\"number\">4</span>, <span class=\"number\">1</span>, CV_32FC1, cv::Scalar::<span class=\"built_in\">all</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125; TLensDistortionCorrection;</span><br><span class=\"line\">TLensDistortionCorrection TLdc[NUM_CAMERAS];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ParametersInit::getLdc</span><span class=\"params\">(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        in_ldc[i] = TLdc[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">short</span> *BEMap = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BEMap = (<span class=\"type\">unsigned</span> <span class=\"type\">short</span> *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>) * BEGetRoiSize * <span class=\"number\">2</span> * <span class=\"number\">2</span> * <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getBEMap</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span> *&amp;in_BEMap)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    in_BEMap = BEMap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cv::Rect</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> rect_index = <span class=\"number\">0</span>; rect_index &lt; <span class=\"number\">4</span>; rect_index++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BESetRoi[rect_index] = cv::<span class=\"built_in\">Rect</span>(BE_set_roi[rect_index * <span class=\"number\">4</span> + <span class=\"number\">0</span>], BE_set_roi[rect_index * <span class=\"number\">4</span> + <span class=\"number\">1</span>],</span><br><span class=\"line\">                                        BE_set_roi[rect_index * <span class=\"number\">4</span> + <span class=\"number\">2</span>], BE_set_roi[rect_index * <span class=\"number\">4</span> + <span class=\"number\">3</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getBESetRoi</span><span class=\"params\">(cv::Rect *in_BESetRoi)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        in_BESetRoi[i] = BESetRoi[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>cv::Mat []</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> *wideAngleViewMap[NUM_CAMERAS] = &#123;<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> index = <span class=\"number\">0</span>; index &lt; NUM_CAMERAS; index++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wideAngleViewMap[index] = (<span class=\"type\">float</span> *)<span class=\"built_in\">malloc</span>(wideAngle_width * wideAngle_height * <span class=\"number\">3</span> / <span class=\"number\">2</span> * <span class=\"number\">2</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ParametersInit::getWideAngleMap</span><span class=\"params\">(<span class=\"type\">float</span> **in_wide_angle_map)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wideAngleViewMap[i] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            in_wide_angle_map[i] = wideAngleViewMap[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">LOGI</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;getWideAngleMap failed!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>int</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> wideAngle_width = <span class=\"number\">720</span>; <span class=\"comment\">//广角视图的尺寸，需要为偶数</span></span><br><span class=\"line\"><span class=\"type\">int</span> wideAngle_height = <span class=\"number\">720</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ParametersInit::getWideAngleSize</span><span class=\"params\">(<span class=\"type\">int</span> &amp;in_wide_angle_width, <span class=\"type\">int</span> &amp;in_wide_angle_height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    in_wide_angle_width = wideAngle_width;</span><br><span class=\"line\">    in_wide_angle_height = wideAngle_height;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用-cpp\"><a href=\"#使用-cpp\" class=\"headerlink\" title=\"使用.cpp\"></a>使用.cpp</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">TLensDistortionCorrection m_ldc[NUM_CAMERAS];</span><br><span class=\"line\"><span class=\"built_in\">getLdc</span>(my_avm_bsd.m_ldc);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">cv::Mat m_MatK[NUM_CAMERAS];</span><br><span class=\"line\"><span class=\"built_in\">getMatK</span>(my_avm_bsd.m_MatK);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">short</span> *BE_Map;</span><br><span class=\"line\"><span class=\"built_in\">getBEMap</span>(my_BB_YUV.BE_Map);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">cv::Rect BE_SetRoi[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">getBESetRoi</span>(my_BB_YUV.BE_SetRoi);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"type\">float</span> *wide_angle_map[NUM_CAMERAS] = &#123;<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">getWideAngleMap</span>(g_avm_set-&gt;wide_angle_map);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"type\">int</span> m_wideAngle_width;</span><br><span class=\"line\"><span class=\"type\">int</span> m_wideAngle_height;</span><br><span class=\"line\"><span class=\"built_in\">getWideAngleSize</span>(g_avm_set-&gt;m_wideAngle_width, g_avm_set-&gt;m_wideAngle_height);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h1><ul>\n<li><a href=\"https://www.pudn.com/news/62615ba10e75e420124071b2.html\">C++中引用传递与指针传递区别（进一步整理）</a> </li>\n<li><a href=\"https://blog.csdn.net/qq_32483145/article/details/52901230\">二级指针和指针引用函数传参（C++）</a></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","more":"<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><h2 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h2><p><strong>形参是实参的拷贝</strong>，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参-&gt;形参），参数的值只能传入，不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递。</p>\n<h2 id=\"指针传递\"><a href=\"#指针传递\" class=\"headerlink\" title=\"指针传递\"></a>指针传递</h2><p><strong>形参为指向实参地址的指针</strong>，当对形参的指向操作时，就相当于对实参本身进行的操作</p>\n<h2 id=\"引用传递\"><a href=\"#引用传递\" class=\"headerlink\" title=\"引用传递\"></a>引用传递</h2><p><strong>形参相当于是实参的“别名”</strong>，对形参的操作其实就是对实参的操作，在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p>\n<p>引用引入了对象的一个同义词。定义引用的表示方法与定义指针相似，只是用“&amp;”代替了“*”。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Point <span class=\"title\">pt1</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">Point &amp;pt2=pt1; </span><br></pre></td></tr></table></figure>\n<p>定义了pt2为pt1的引用。通过这样的定义，pt1和pt2表示同一对象。需要特别强调的是引用并不产生对象的副本，仅仅是对象的同义词。因此，当下面的语句执行后：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pt1.offset（<span class=\"number\">2</span>，<span class=\"number\">2</span>）；</span><br></pre></td></tr></table></figure>\n<p>pt1和pt2都具有（12，12）的值。<br>引用必须在定义时马上被初始化，因为它必须是某个东西的同义词。你不能先定义一个引用后才<br>初始化它。例如下面语句是非法的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point &amp;pt3；</span><br><span class=\"line\">pt3=pt1；</span><br></pre></td></tr></table></figure>\n<h1 id=\"引用传递和指针传递的区别与联系\"><a href=\"#引用传递和指针传递的区别与联系\" class=\"headerlink\" title=\"引用传递和指针传递的区别与联系\"></a>引用传递和指针传递的区别与联系</h1><h2 id=\"引用的规则\"><a href=\"#引用的规则\" class=\"headerlink\" title=\"引用的规则\"></a>引用的规则</h2><ul>\n<li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。 </li>\n<li>不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）。 </li>\n<li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li>\n</ul>\n<h2 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h2><p>-都是地址的概念：指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><ul>\n<li><p>指针是一个实体，而引用仅是个别名；</p>\n</li>\n<li><p>引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p>\n</li>\n<li><p>引用没有const，指针有const，const的指针不可变；（具体指没有int&amp; const a这种形式，而const int&amp; a是有 的， 前者指引用本身即别名不可以改变，这是当然的，所以不需要这种形式，后者指引用所指的值不可以改变）</p>\n</li>\n<li><p>引用不能为空，指针可以为空；</p>\n</li>\n<li><p>“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p>\n</li>\n<li><p>指针和引用的自增(++)运算意义不一样；</p>\n</li>\n<li><p>引用是类型安全的，而指针不是 (引用比指针多了类型检查</p>\n</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>从概念上讲，<strong>指针从本质上讲就是存放变量地址的一个变量</strong>，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p>\n<p>而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p>\n<p>在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</p>\n<p>指针传递参数本质上是值传递的方式，它所传递的是一个地址值。<em>值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（这里是在说实参指针本身的地址值不会变）</em></p>\n<p>而在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时<strong>存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量</strong>。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p>\n<p><strong>引用传递和指针传递是不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针传递的参数，如果改变被调函数中的指针地址，它将影响不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量，那就得使用指向指针的指针，或者指针引用。</strong></p>\n<p>为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p>\n<p>程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为<strong>指针变量的地址值</strong>，指针变量中的值为其指向变量的地址；而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改.</p>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><p>使用引用传递参数和使用指针传递参数都可传递变量的地址，但对于int,float等占用内存较少，其作为函数参数时一般使用引用传递参数；而对于结构体而言一般采用指针传递结构体变量的地址。</p>\n<h1 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h1><h2 id=\"传递可变参数\"><a href=\"#传递可变参数\" class=\"headerlink\" title=\"传递可变参数\"></a>传递可变参数</h2><p>传统的c中，函数在调用时参数是通过值来传递的，这就是说函数的参数不具备返回值的能力。所以在传统的c中，如果需要函数的参数具有返回值的能力，往往是通过指针来实现的。比如，实现两整数变量值交换的c程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_int</span><span class=\"params\">(<span class=\"type\">int</span> *a,<span class=\"type\">int</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    temp=*a;</span><br><span class=\"line\">    a=*b;</span><br><span class=\"line\">    *b=temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用引用机制后，以上程序的c++版本为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_int</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a,<span class=\"type\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    temp=a;</span><br><span class=\"line\">    a=b;</span><br><span class=\"line\">    b=temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用该函数的c++方法为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap_int,y); </span><br></pre></td></tr></table></figure>\n<p>c++自动把x,y的地址作为参数传递给swap_int函数。</p>\n<h2 id=\"给函数传递大型对象\"><a href=\"#给函数传递大型对象\" class=\"headerlink\" title=\"给函数传递大型对象\"></a>给函数传递大型对象</h2><p>当大型对象被传递给函数时，使用引用参数可使参数传递效率得到提高，因为引用并不产生对象的副本，也就是参数传递时，对象无须复制。下面的例子定义了一个有限整数集合的类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> maxCard=<span class=\"number\">100</span>;</span><br><span class=\"line\">Class Set</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> elems[maxCard]; <span class=\"comment\">// 集和中的元素，maxCard 表示集合中元素个数的最大值。</span></span><br><span class=\"line\">    <span class=\"type\">int</span> card; <span class=\"comment\">// 集合中元素的个数。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Set</span> () &#123;card=<span class=\"number\">0</span>;&#125; <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> Set <span class=\"keyword\">operator</span> * (Set ,Set ) ; <span class=\"comment\">//重载运算符号*，用于计算集合的交集 用对象作为传值参数</span></span><br><span class=\"line\">    <span class=\"comment\">// friend Set operator * (Set &amp; ,Set &amp; ) 重载运算符号*，用于计算集合的交集 用对象的引用作为传值参数</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先考虑集合交集的实现</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set <span class=\"keyword\">operator</span> *( Set Set1,Set Set2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Set res;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;Set1.card;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&gt;Set2.card;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Set1.elems[i]==Set2.elems[j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res.elems[res.card++]=Set1.elems[i];</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于重载运算符不能对指针单独操作，我们必须把运算数声明为 Set 类型而不是 Set * 。每次使用*做交集运算时，整个集合都被复制，这样效率很低。我们可以用引用来避免这种情况。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set <span class=\"keyword\">operator</span> *( Set &amp;Set1,Set &amp;Set2)</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    Set res;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;Set1.card;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&gt;Set2.card;++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Set1.elems[i]==Set2.elems[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res.elems[res.card++]=Set1.elems[i];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用返回值\"><a href=\"#引用返回值\" class=\"headerlink\" title=\"引用返回值\"></a>引用返回值</h2><p>如果一个函数返回了引用，那么该函数的调用也可以被赋值。这里有一函数，它拥有两个引用参数并返回一个双精度数的引用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> &amp;<span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">double</span> &amp;d1,<span class=\"type\">double</span> &amp;d2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d1&gt;d2?d1:d2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于max()函数返回一个对双精度数的引用，那么我们就可以用max() 来对其中较大的双精度数加1：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span>(x,y)+=<span class=\"number\">1.0</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二级指针\"><a href=\"#二级指针\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>在函数的使用过程中，我们都明白传指针和传引用会使实参的值发生改变。那么能够通过传指针改变指针所指向的地址吗？<br>在解决这个问题之前，也许我们应该先了解指针非常容易混淆的三个属性：</p>\n<ul>\n<li>指针变量地址（&amp;p）</li>\n<li>指针变量指向的地址（p，存储数据的地址）</li>\n<li>指针变量指向的地址的值（*p）</li>\n</ul>\n<p>当我们将指针变量与其它变量比较之后就会发现，指针变量同其它变量是相似的，只是多了最后一种操作。比如一个int类型的变量,<code>int x=5;</code>,<code>&amp;x</code>取出存储<code>5</code>这个数据的地址，同样，<code>&amp;p</code>也是存储指针的地址，<code>p</code>就是这个地址里面保存的值，也就是指向的地址。只是与其它变量不同的是，它除了这两种操作之外，还有一个解引用操作符<code>*p</code>去获取指针变量指向的地址里面保存的值。</p>\n<h2 id=\"指针引用\"><a href=\"#指针引用\" class=\"headerlink\" title=\"指针引用\"></a>指针引用</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make</span><span class=\"params\">(<span class=\"type\">int</span> *pp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pp=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">66</span>); <span class=\"comment\">//试图改变p指向的地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> a=<span class=\"number\">5</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> *p=&amp;a; <span class=\"comment\">//指针变量指向一个int类型的地址</span></span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;&amp;a&lt;&lt;<span class=\"string\">&quot;value:&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;p&lt;&lt;<span class=\"string\">&quot;value:&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class=\"line\">     <span class=\"built_in\">make</span>(p);</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;p&lt;&lt;<span class=\"string\">&quot;value:&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：我们这里虽然使用的是传指针，但是却不是直接改变指针变量指向的地址的值，却是想通过改变指针变量指向的地址来修改它的值，显然这样失败了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/no.png\"></p>\n<p>如果我们希望在函数里面修改指针变量存储的地址而不是它的值，这个时候就需要指针引用了。类似于普通变量传入变量引用，我们也传入一个指针引用，在函数里面，你可以将pp认为和p都是这个指针变量（&amp;p&#x3D;&#x3D;&amp;pp），不似传入指针参数的时候形参和实参的变量（&amp;p！&#x3D;&amp;pp）地址不一样。此时我们操作pp的值就是更改了p的值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make</span><span class=\"params\">(<span class=\"type\">int</span> *&amp;pp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pp=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">66</span>); <span class=\"comment\">//改变p指向的地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：当我们修改传入参数为指针的引用的时候就可以修改指针变量所指向的地址了，可以看见，传入指针引用可以修改指针变量的值（p）和指向的值（*p）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes.png\"></p>\n<h2 id=\"二级指针-1\"><a href=\"#二级指针-1\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h2><p>指向指针的指针变量称为二级指针。<br>如果pp是一个二级指针，那么有如下属性：</p>\n<ul>\n<li>二级指针的地址（&amp;pp）</li>\n<li>二级指针的地址保存的地址（pp）</li>\n<li>二级指针的地址保存的地址，该地址里面保存的地址（*pp）</li>\n<li>二级指针的地址保存的地址，该地址里面保存的地址里面的数据（**pp）</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/kuangtu.png\"> </p>\n<p>除了上面传入指针引用改变一级指针指向的地址以外，我们还可以通过传入一个二级指针去修改它对应的一级指针指向的地址，同样达到了修改指针变量的效果。二级指针的指向的地址存储的值就是一级指针指向的地址。对一级指针变量解引用得到的是指针指向的地址存储的数据，二级指针变量解引用得到的也是该二级指针指向的地址存储的地址值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make</span><span class=\"params\">(<span class=\"type\">int</span> **pp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> * p=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">66</span>);</span><br><span class=\"line\">    *pp=p; <span class=\"comment\">//二级指针的解引用被赋值需要得到一个一级指针变量，上图中二级指针的示意图中*pp=p</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> a=<span class=\"number\">5</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> *q=&amp;a;</span><br><span class=\"line\">     <span class=\"type\">int</span> **pp=&amp;q;</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;&amp;pp&lt;&lt;<span class=\"string\">&quot;  &quot;</span>&lt;&lt;pp&lt;&lt;<span class=\"string\">&quot;    &quot;</span>&lt;&lt;&amp;q&lt;&lt;<span class=\"string\">&quot;   &quot;</span>&lt;&lt;q&lt;&lt;<span class=\"string\">&quot;       value:&quot;</span>&lt;&lt;*q&lt;&lt;endl;</span><br><span class=\"line\">     <span class=\"built_in\">make</span>(pp);</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;address:&quot;</span>&lt;&lt;&amp;pp&lt;&lt;<span class=\"string\">&quot;  &quot;</span>&lt;&lt;pp&lt;&lt;<span class=\"string\">&quot;    &quot;</span>&lt;&lt;&amp;q&lt;&lt;<span class=\"string\">&quot;   &quot;</span>&lt;&lt;q&lt;&lt;<span class=\"string\">&quot;       value:&quot;</span>&lt;&lt;*q&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：通过对二级指针的解引用赋值成功修改了一级指针指向的地址。如果仅仅在make函数里面对**pp&#x3D;66;操作，那么所有的地址不会改变，仅仅会改变值为66。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes2.png\"></p>\n<h1 id=\"各种类型的函数参数传递\"><a href=\"#各种类型的函数参数传递\" class=\"headerlink\" title=\"各种类型的函数参数传递\"></a>各种类型的函数参数传递</h1><h2 id=\"声明-h\"><a href=\"#声明-h\" class=\"headerlink\" title=\"声明.h\"></a>声明.h</h2><figure class=\"highlight c\"><figcaption><span>++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结构体数组   (in_ldc)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getLdc</span><span class=\"params\">(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS])</span>;</span><br><span class=\"line\"><span class=\"comment\">// cv::Mat  (in_MatK)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getMatK</span><span class=\"params\">(cv::Mat *in_MatK)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 内存块(map)  (in_BEMap)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getBEMap</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span> *&amp;in_BEMap)</span>;</span><br><span class=\"line\"><span class=\"comment\">// cv::Rect数组 (in_BESetRoi)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getBESetRoi</span><span class=\"params\">(cv::Rect *in_BESetRoi)</span>;</span><br><span class=\"line\"><span class=\"comment\">// cv::Mat 数组 (in_wide_angle_map)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getWideAngleMap</span><span class=\"params\">(<span class=\"type\">float</span> **in_wide_angle_map)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 整数 (in_wide_angle_width,in_wide_angle_height)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getWideAngleSize</span><span class=\"params\">(<span class=\"type\">int</span> &amp;in_wide_angle_width, <span class=\"type\">int</span> &amp;in_wide_angle_height)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义-cpp\"><a href=\"#定义-cpp\" class=\"headerlink\" title=\"定义.cpp\"></a>定义.cpp</h2><ul>\n<li><p>结构体数组</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> distCenterX;</span><br><span class=\"line\">    <span class=\"type\">float</span> distCenterY;</span><br><span class=\"line\">    <span class=\"type\">float</span> distFocalLength;</span><br><span class=\"line\">    <span class=\"type\">float</span> distFocalLengthInv;</span><br><span class=\"line\">    <span class=\"type\">float</span> *lut_d2u;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> lut_d2u_indMax;</span><br><span class=\"line\">    <span class=\"type\">float</span> lut_d2u_step;</span><br><span class=\"line\">    <span class=\"type\">float</span> lut_d2u_stepInv;</span><br><span class=\"line\">    <span class=\"type\">float</span> *lut_u2d;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> lut_u2d_indMax;</span><br><span class=\"line\">    <span class=\"type\">float</span> lut_u2d_step;</span><br><span class=\"line\">    <span class=\"type\">float</span> lut_u2d_stepInv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">bool</span> if_get_matrix = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    cv::Mat intrinsics = cv::<span class=\"built_in\">Mat</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>, CV_32FC1, cv::Scalar::<span class=\"built_in\">all</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">    cv::Mat distortionCoeff = cv::<span class=\"built_in\">Mat</span>(<span class=\"number\">4</span>, <span class=\"number\">1</span>, CV_32FC1, cv::Scalar::<span class=\"built_in\">all</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125; TLensDistortionCorrection;</span><br><span class=\"line\">TLensDistortionCorrection TLdc[NUM_CAMERAS];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ParametersInit::getLdc</span><span class=\"params\">(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        in_ldc[i] = TLdc[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">short</span> *BEMap = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BEMap = (<span class=\"type\">unsigned</span> <span class=\"type\">short</span> *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>) * BEGetRoiSize * <span class=\"number\">2</span> * <span class=\"number\">2</span> * <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getBEMap</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span> *&amp;in_BEMap)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    in_BEMap = BEMap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cv::Rect</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> rect_index = <span class=\"number\">0</span>; rect_index &lt; <span class=\"number\">4</span>; rect_index++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BESetRoi[rect_index] = cv::<span class=\"built_in\">Rect</span>(BE_set_roi[rect_index * <span class=\"number\">4</span> + <span class=\"number\">0</span>], BE_set_roi[rect_index * <span class=\"number\">4</span> + <span class=\"number\">1</span>],</span><br><span class=\"line\">                                        BE_set_roi[rect_index * <span class=\"number\">4</span> + <span class=\"number\">2</span>], BE_set_roi[rect_index * <span class=\"number\">4</span> + <span class=\"number\">3</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getBESetRoi</span><span class=\"params\">(cv::Rect *in_BESetRoi)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        in_BESetRoi[i] = BESetRoi[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>cv::Mat []</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> *wideAngleViewMap[NUM_CAMERAS] = &#123;<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> index = <span class=\"number\">0</span>; index &lt; NUM_CAMERAS; index++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wideAngleViewMap[index] = (<span class=\"type\">float</span> *)<span class=\"built_in\">malloc</span>(wideAngle_width * wideAngle_height * <span class=\"number\">3</span> / <span class=\"number\">2</span> * <span class=\"number\">2</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ParametersInit::getWideAngleMap</span><span class=\"params\">(<span class=\"type\">float</span> **in_wide_angle_map)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wideAngleViewMap[i] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            in_wide_angle_map[i] = wideAngleViewMap[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">LOGI</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;getWideAngleMap failed!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>int</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> wideAngle_width = <span class=\"number\">720</span>; <span class=\"comment\">//广角视图的尺寸，需要为偶数</span></span><br><span class=\"line\"><span class=\"type\">int</span> wideAngle_height = <span class=\"number\">720</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ParametersInit::getWideAngleSize</span><span class=\"params\">(<span class=\"type\">int</span> &amp;in_wide_angle_width, <span class=\"type\">int</span> &amp;in_wide_angle_height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    in_wide_angle_width = wideAngle_width;</span><br><span class=\"line\">    in_wide_angle_height = wideAngle_height;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用-cpp\"><a href=\"#使用-cpp\" class=\"headerlink\" title=\"使用.cpp\"></a>使用.cpp</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">TLensDistortionCorrection m_ldc[NUM_CAMERAS];</span><br><span class=\"line\"><span class=\"built_in\">getLdc</span>(my_avm_bsd.m_ldc);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">cv::Mat m_MatK[NUM_CAMERAS];</span><br><span class=\"line\"><span class=\"built_in\">getMatK</span>(my_avm_bsd.m_MatK);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">short</span> *BE_Map;</span><br><span class=\"line\"><span class=\"built_in\">getBEMap</span>(my_BB_YUV.BE_Map);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">cv::Rect BE_SetRoi[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">getBESetRoi</span>(my_BB_YUV.BE_SetRoi);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"type\">float</span> *wide_angle_map[NUM_CAMERAS] = &#123;<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">getWideAngleMap</span>(g_avm_set-&gt;wide_angle_map);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"type\">int</span> m_wideAngle_width;</span><br><span class=\"line\"><span class=\"type\">int</span> m_wideAngle_height;</span><br><span class=\"line\"><span class=\"built_in\">getWideAngleSize</span>(g_avm_set-&gt;m_wideAngle_width, g_avm_set-&gt;m_wideAngle_height);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h1><ul>\n<li><a href=\"https://www.pudn.com/news/62615ba10e75e420124071b2.html\">C++中引用传递与指针传递区别（进一步整理）</a> </li>\n<li><a href=\"https://blog.csdn.net/qq_32483145/article/details/52901230\">二级指针和指针引用函数传参（C++）</a></li>\n</ul>\n","categories":[{"name":"C++","path":"api/categories/C++.json"}],"tags":[{"name":"C++","path":"api/tags/C++.json"},{"name":"函数参数传递","path":"api/tags/函数参数传递.json"},{"name":"引用与指针","path":"api/tags/引用与指针.json"}]}