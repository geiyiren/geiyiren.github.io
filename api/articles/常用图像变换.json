{"title":"常用图像变换","slug":"常用图像变换","date":"2023-09-20T11:00:00.000Z","updated":"2023-11-26T08:56:20.898Z","comments":true,"path":"api/articles/常用图像变换.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/df2fe5f21358787937bf255254be8820.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6b29fcd3560f6d0db69c76561679ee41.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/28953503336881d61c9b80472ab7a96f.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/60951e8e70e0276c13faa177bc76695e.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0d6668004a819e172f8c6ac9ca7d8864.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8b39caf08ec08e1441b49cd645c20e63.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fcbca0d7334a7df27f68aad79fcc65fd.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4bbcac92cf2200b7e9865fa07d1e73c3.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4f8310d681cc934306a65da7641bb029.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/aa5e50980c5e180aa26224402a463e6e.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4693bd3b37c710f59bbc5155dd0bcba2.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5e779f81df404e04a55ad2c946aed599.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/e1040dba7d87a8279fac9a8ee3ef6b64.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0112ba5cf3ed3070df2c9b16a0977592.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/593c901c84ab56cf201b071ea784d283.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1c55f47f42310736e8d18d997a3a688f.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/2d9e26acd785f952e36ead506de2d417.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/38c2d8927c01a06858a43fe180df10bf.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a1bdbc0eb00b913a9ec23e1a92074091.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ce8be3b8d534d31b2192bcbc583e3a81.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/645bf3d7e15e69e8a183a1be8755b91f.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/57a9929d24923ac6eb7581731ccfe3e6.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7c71e1a5dbcf76e3543a33c99c3171cc.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c002438d0c0f30cdbb142c65c99ef72b.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ecfb0ef920f80807ce2f9227c6aeff55.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5a59ba2712377bcb27bd960e2a078dba.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/784946d7aeaf0b77e4b5e91eb85e0e78.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ab3ff1d293450f796c8a04a36468a708.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6a0cdceaaeabedb67171931925741dac.jpeg","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8f225713814103dc0d3d5d279921a18e.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7d8730b23f213a652c7831c05825b3b7.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fa31e394765b87121758996872f7340e.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ea2695d35ac1024134b00751cfad39a0.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/b7807a8872366727b6299499d28345f5.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/f3a9b01ac3248215c5904b2b87d9c74f.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a821cb9a522abf758657aeab932fd8dc.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4543df1de58c719a6be4c04ca947624b.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/eb3e8f28d45e99d9ba53eefb2d2a8d4b.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d10563806f7a6f97c687a2b74f4e4543.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1f0d3bb10e87bd6e364a92c8e5406a41.png","https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png"],"content":"<h1 id=\"形态学变换\"><a href=\"#形态学变换\" class=\"headerlink\" title=\"形态学变换\"></a>形态学变换</h1><p>形态学变换是一组用于图像处理中的数学操作，用于改变图像中物体的形状、大小和结构。这些操作通常用于处理二值图像（黑白图像），用于分割图像中的物体、去除噪声、查找轮廓等，最初是为了分析和处理二值图像中的形状、结构和特征而开发的。</p>\n<h2 id=\"腐蚀与膨胀\"><a href=\"#腐蚀与膨胀\" class=\"headerlink\" title=\"腐蚀与膨胀\"></a>腐蚀与膨胀</h2><p>与卷积操作类似(嗯… 什么是卷积…<a href=\"https://setosa.io/ev/image-kernels/\">点我查看</a>),假设有图像A和结构元素B,结构元素B在A上面移动,其中B定义其中心为锚点，计算B覆盖下A的最大像素值用来替换锚点的像素，其中B作为结构体可以是任意形状。随着锚点在图像上的移动，结构B就可对图像上的每个像素进行处理。</p>\n<p>膨胀操作用于扩大图像中的白色区域，即通过结构元素的移动来扩展白色像素。如果结构元素的中心覆盖了至少一个白色像素，则中心位置的像素被置为白色。膨胀操作通常用于填充空洞、连接断开的对象和扩展物体。腐蚀和膨胀是数学形态学最基本的变换。</p>\n<p>图像膨胀主要针对的是阈值化后的图像。图像膨胀类似于“领域被扩张”，将图像中的高亮区域或白色部分进行扩增粗化，其运行结果图比原图的高亮区域更大。其原理是：将核在原始图像中进行遍历，然后将原始图像遍历到的像素点的值与自定义卷积核(全为1的二维矩阵)得值进行与运算，像素点与对应核一 一对应进行与，当卷积核对应的元素值只要有一个为1时，设置卷积核中心值的像素点为1，如果全为0，,则其值设置为0。</p>\n<p>图像腐蚀主要针对的是阈值化后的图像。图像腐蚀类似于“领域被蚕食”，将图像中的高亮区域或白色部分进行缩减细化，其运行结果图比原图的高亮区域更小。其原理是：将核在原始图像中进行遍历，然后将原始图像遍历到的像素点的值与自定义卷积核(全为1的二维矩阵)得值进行与运算，像素点与对应核一 一对应进行与，当卷积核对应的元素值均为1时，设置卷积核中心值的像素点为1，否则其值设置为0</p>\n<p>一头雾水，直接看图…</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/df2fe5f21358787937bf255254be8820.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6b29fcd3560f6d0db69c76561679ee41.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>腐蚀变换</strong></td>\n<td><strong>原图</strong></td>\n<td><strong>膨胀变换</strong></td>\n</tr>\n</tbody></table>\n<p>注：卷积核的大小为5×5。</p>\n<p><strong>腐蚀就是使得“白色”区域变小，膨胀就是使得“白色”区域变大。</strong></p>\n<h2 id=\"开运算与闭运算\"><a href=\"#开运算与闭运算\" class=\"headerlink\" title=\"开运算与闭运算\"></a>开运算与闭运算</h2><p>开运算是将腐蚀（Erosion）操作和膨胀（Dilation）操作依次应用于图像的操作。首先执行腐蚀操作，然后再执行膨胀操作。开运算通常用于以下情况：</p>\n<ul>\n<li>去除小的噪声和斑点：通过腐蚀操作可以缩小小的白色区域，然后通过膨胀操作将它们恢复到原始大小，从而去除小的噪声和斑点。</li>\n<li>分离连接的物体：开运算可以分离连接在一起的物体，使它们变得更远离彼此。</li>\n</ul>\n<p>闭运算是将膨胀（Dilation）操作和腐蚀（Erosion）操作依次应用于图像的操作。首先执行膨胀操作，然后再执行腐蚀操作。闭运算通常用于以下情况：</p>\n<ul>\n<li>填充物体内的小孔：通过膨胀操作可以填充物体内的小孔，然后通过腐蚀操作来还原物体的大小。</li>\n<li>连接断开的物体：闭运算可以连接断开的物体，使它们相互接触。</li>\n</ul>\n<p>在图像分割中，开运算可以分离相邻物体，闭运算可用于连接物体。在光学字符识别（OCR）中，开运算可用于去除文本字符之间的干扰，闭运算可用于连接字符的笔画。在医学影像中，这些操作可用于处理X射线图像或CT扫描图像中的结构。</p>\n<p>一头雾水，直接看图…</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/28953503336881d61c9b80472ab7a96f.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png\" alt=\"原始图像\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/60951e8e70e0276c13faa177bc76695e.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>开运算</strong></td>\n<td><strong>原图</strong></td>\n<td><strong>闭运算</strong></td>\n</tr>\n</tbody></table>\n<p>注：卷积核的大小为5×5。</p>\n<p>嗯… 有啥区别…. 因为开运算和闭运算都是腐蚀和膨胀相结合的，无非是顺序不同，因此，对于上述图像的影响不大。</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0d6668004a819e172f8c6ac9ca7d8864.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8b39caf08ec08e1441b49cd645c20e63.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>开运算</strong></td>\n<td><strong>原图</strong></td>\n<td><strong>闭运算</strong></td>\n</tr>\n</tbody></table>\n<p><strong>开运算就是填充白色空洞，闭运算就是断开黑色连接，开运算和闭运算都基本保持图像原来的尺寸和形状。</strong></p>\n<h2 id=\"形态学梯度\"><a href=\"#形态学梯度\" class=\"headerlink\" title=\"形态学梯度\"></a>形态学梯度</h2><p>形态学梯度通过计算图像中每个像素点的亮度变化程度来实现，从而可以突出物体的边界。形态学梯度操作通常对二值图像或灰度图像进行处理。</p>\n<p>形态学梯度操作通常通过以下公式来计算每个像素的梯度值：</p>\n<p>Gradient(x,y)&#x3D;Dilation(x,y)-Erosion(x,y)</p>\n<p>Dilation(x,y) 表示对图像进行膨胀操作，Erosion(x,y) 表示对图像进行腐蚀操作。这意味着形态学梯度是膨胀图像和腐蚀图像之间的差异。这种操作突出了物体的边缘，因为边缘像素的值在膨胀和腐蚀之间产生最大的变化。形态学梯度的应用如下：</p>\n<ul>\n<li>边缘检测：形态学梯度可用于检测图像中的边缘，使其成为图像处理中常用的边缘检测工具。在边缘检测中，物体边界通常是感兴趣的区域，形态学梯度可以帮助找到这些边界。</li>\n<li>物体分割：形态学梯度可以用于分割图像中的不同物体，因为它可以突出物体之间的边界。这在计算机视觉和图像分析中非常有用。</li>\n<li>纹理分析：在纹理分析中，形态学梯度可以用于检测和描述图像中的纹理特征，从而有助于分类和识别任务。</li>\n<li>图像增强：形态学梯度操作可以增强图像中物体的轮廓和边缘，使它们更清晰可见，这在图像改进和可视化中很有用。</li>\n<li>医学影像处理：在医学图像中，形态学梯度可以用于检测血管、骨骼和组织的边界，从而帮助医生进行诊断。</li>\n</ul>\n<p>对图像进行形态学梯度计算时的效果如下：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fcbca0d7334a7df27f68aad79fcc65fd.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>形态学梯</strong></td>\n</tr>\n</tbody></table>\n<p>通过上图可以看出，形态学梯度对图像的边缘检测具有明显的效果。</p>\n<h2 id=\"顶帽与黑帽\"><a href=\"#顶帽与黑帽\" class=\"headerlink\" title=\"顶帽与黑帽\"></a>顶帽与黑帽</h2><p>顶帽和黑帽是形态学图像处理中的两种操作，它们分别用于突出图像中的亮区域和暗区域，常用于图像增强和特征提取。顶帽操作是原始图像与开运算的结果之差。开运算通常用于去除图像中的噪声或连接分散的物体，因此顶帽操作可以突出图像中的小亮区域或物体的细节。顶帽操作通常用于以下情况：</p>\n<ul>\n<li>亮物体检测：当亮物体与背景的亮度差异很小时，顶帽操作可以突出这些亮物体。</li>\n<li>纹理分析：用于分析图像中的纹理和细节。</li>\n<li>图像增强：可以增强图像中的细节，使其更清晰可见。</li>\n</ul>\n<p>黑帽操作是闭运算的结果与原始图像之差。闭运算通常用于填充物体内的小孔或连接物体，因此黑帽操作可以突出图像中的小暗区域或物体的细节。黑帽操作通常用于以下情况：</p>\n<ul>\n<li>暗物体检测：当暗物体与背景的亮度差异很小时，黑帽操作可以突出这些暗物体。</li>\n<li>小孔填充：用于填充物体内的小孔或裂缝，以还原物体的形状。</li>\n<li>图像增强：可以增强图像中的细节，特别是暗区域的细节。</li>\n</ul>\n<p>应用示例：</p>\n<ul>\n<li>医学影像：顶帽和黑帽操作可用于医学影像中的病变检测和血管分析。</li>\n<li>工业检测：在制造业中，它们可用于检测产品表面上的缺陷或微小的瑕疵。</li>\n<li>纹理分析：用于纹理分析和纹理特征提取，例如在图像分类或图像检索中。</li>\n<li>数字图像处理：常用于数字图像处理中的各种图像增强和预处理任务。</li>\n</ul>\n<p>总之，顶帽和黑帽操作是形态学图像处理中的两种重要工具，可以帮助突出图像中的亮暗区域和细节，用于不同的图像分析和增强任务。选择适当的操作取决于具体的应用场景和目标。</p>\n<p>一头雾水，直接看图…</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4bbcac92cf2200b7e9865fa07d1e73c3.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4f8310d681cc934306a65da7641bb029.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>顶帽</strong></td>\n<td><strong>原图</strong></td>\n<td><strong>黑帽</strong></td>\n</tr>\n</tbody></table>\n<p>结合开运算和闭运算，就可以看出顶帽和黑帽操作与之的关系，但是具体应用起来是什么样子的呢？看下图：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/aa5e50980c5e180aa26224402a463e6e.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4693bd3b37c710f59bbc5155dd0bcba2.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5e779f81df404e04a55ad2c946aed599.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>闭运算</strong></td>\n<td><strong>黑帽</strong></td>\n</tr>\n</tbody></table>\n<p>| <img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/e1040dba7d87a8279fac9a8ee3ef6b64.png\"> | <strong><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/3e16fd13019d0bd17319d5190ca46760.png\"></strong> | <img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d565b8b1a2af708a41f010d0b6f7e810.png\"> |<br>| <strong>原图</strong>                                                | <strong>开运算</strong>                                                | <strong>顶帽</strong>                                            |</p>\n<p><strong>顶帽操作是原始图像与开运算的结果之差。黑帽操作是闭运算的结果与原始图像之差。</strong></p>\n<h1 id=\"几何变换\"><a href=\"#几何变换\" class=\"headerlink\" title=\"几何变换\"></a>几何变换</h1><p>几何变换是数字图像处理领域中的关键概念，用于改变图像的几何结构和外观，而不涉及像素值的修改。这些变换允许我们对图像进行缩放、旋转、平移、拉伸和扭曲等操作，以满足特定的需求和应用场景。几何变换在图像处理中有广泛的应用，从简单的尺寸调整到复杂的场景校正和特效添加。它们为我们提供了强大的工具，用于改善图像质量、分析图像内容以及实现各种计算机视觉任务。无论是医学影像分析、自动驾驶、视频游戏还是艺术创作，几何变换都是不可或缺的工具，为图像处理和计算机视觉领域的不断发展提供了关键支持。</p>\n<h2 id=\"仿射变换\"><a href=\"#仿射变换\" class=\"headerlink\" title=\"仿射变换\"></a>仿射变换</h2><p>仿射变换是指在向量空间中进行一次线性变换(乘以一个矩阵)并加上一个平移(加上一个向量)，变换为另一个向量空间的过程。在有限维的情况下，每个仿射变换可以由一个矩阵A和一个向量b给出，它可以写作A和一个附加的列b。一个仿射变换对应于一个矩阵和一个向量的乘法，而仿射变换的复合对应于普通的矩阵乘法，只要加入一个额外的行到矩阵的底下，这一行全部是0除了最右边是一个1，而列向量的底下要加上一个1.</p>\n<p>仿射变换描述了一种二维仿射变换的功能，它是一种二维坐标之间的线性变换，保持二维图形的“平直性”(即变换后直线还是直线，圆弧还是圆弧)和“平行性”(其实是保持二维图形间的相对位置关系不变，平行线还是平行线，而直线上的点位置顺序不变，另特别注意向量间夹角可能会发生变化)。仿射变换可以通过一系列的原子变换的复合来实现包括：平移(Translation)、缩放(Scale)、翻转(Flip)、旋转(Rotation)和错切(Shear).</p>\n<p>事实上，仿射变换代表的是两幅图之间的关系，我们通常使用2x3矩阵来表示仿射变换如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0112ba5cf3ed3070df2c9b16a0977592.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/593c901c84ab56cf201b071ea784d283.png\"></p>\n<p>考虑到我们要使用矩阵A和B对二维向量X&#x3D;[x,y]T做变换，所以也能表示为下列形式：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1c55f47f42310736e8d18d997a3a688f.png\"></p>\n<p>得到如下效果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/2d9e26acd785f952e36ead506de2d417.png\"></p>\n<p>从上面解释中我们得知仿射变换表示的就是两幅图片的一种联系，关于这种联系的信息大致可以从以下两种场景获得。</p>\n<p>a. 我们已知X和T而且我们知道他们是有联系的，接下来的工作就是求解矩阵M</p>\n<p>b. 我们一致M和X要求得T,我们只需要应用算式T&#x3D;M.X即可。对于这种联系的信息可以用矩阵M清晰的表达(即给出明确的2x3矩阵)或者也可以用两幅图片点之间几何关系来表达。</p>\n<p>因为矩阵M联系着两幅图片，我们以其表示两图中各三点直接的联系为例，如下:</p>\n<p>点1,2和3(在图一中形成一个三角)与图二中三个点一一映射，仍然形成三角形，但形状已经大大改变。如果我们能通过这样两组三点求出仿射变换（你能选择自己喜欢的点），接下来我们就能把仿射变换应用到图像中所有的点。</p>\n<p>对实际的图像进行仿射变换的效果如下：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/38c2d8927c01a06858a43fe180df10bf.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a1bdbc0eb00b913a9ec23e1a92074091.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>仿射变换</strong></td>\n</tr>\n</tbody></table>\n<p><strong>仿射变换是将矩形变换成平行四边形，变换后各边依旧平行。</strong></p>\n<h2 id=\"透视变换\"><a href=\"#透视变换\" class=\"headerlink\" title=\"透视变换\"></a>透视变换</h2><p>透视变换不能保证物体形状的“平行性”。仿射变换是透视变换的特殊形式。透视变换是将一个平面投影到另一个平面，简单理解就是把一张图片投影到另一张图片，求的是同一张图片到它的投影图片之间的变换。透视变换是将成像投影到一个新的视平面，也称作投影映射。如图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ce8be3b8d534d31b2192bcbc583e3a81.png\"></p>\n<p>透视变换原理如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/645bf3d7e15e69e8a183a1be8755b91f.png\"></p>\n<p>上述公式中， (<em>u</em>,<em>v</em>) 代表原始图像坐标， (<em>x</em>,<em>y</em>) 为经过透视变换的图片坐标，其中变换矩阵为3×3 形式。进而可以得到：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/57a9929d24923ac6eb7581731ccfe3e6.png\"></p>\n<p>在原图上取4点坐标与新图对应，相当于列出方程组，解出变换矩阵。通过变换矩阵，在输入原图像坐标的情况下，可以直接求解新图平面坐标。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7c71e1a5dbcf76e3543a33c99c3171cc.png\"></p>\n<p>其中， (<em>x</em>,<em>y</em>)是原图坐标，<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c002438d0c0f30cdbb142c65c99ef72b.png\" alt=\"\" style=\"max-height: 1.5em;\"></span>是变换后的坐标；<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c03622f9b4a0db4e9018790e5490f206.png\" alt=\"\" style=\"max-height: 1.5em;\"></span> 为旋转量，<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/a057b24fb85fb51287d74dba2baef71c.png\" alt=\"\" style=\"max-height: 1.5em;\"></span>  为平移量。因为透视变换是非线性的，所以不能齐次性表示；透视变换矩阵为3×3。透视变换的方程组有8个未知数，所以要求解就需要找到4组映射点，四个点就刚好确定了一个三维空间。</p>\n<p>利用透视变换常常进行图像的“摆正”，示例如下：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ecfb0ef920f80807ce2f9227c6aeff55.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5a59ba2712377bcb27bd960e2a078dba.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>透视变换</strong></td>\n</tr>\n</tbody></table>\n<p><strong>透视变换用于将一个二维平面上的图像从一种视角或投影方式转换为另一种视角或投影方式的方法。它的主要目的是消除或校正由于观察角度或位置变化引起的投影畸变，以便更准确地分析或呈现图像中的对象。</strong></p>\n<h1 id=\"去畸变\"><a href=\"#去畸变\" class=\"headerlink\" title=\"去畸变\"></a>去畸变</h1><p>这里重点介绍鱼眼相机为例展开介绍。首先，鱼眼镜头为什么可以获得比普通镜头更大的视野范围呢，他们两者之间的差别在哪？</p>\n<p>其实，我们平常接触的大多数镜头都可以近似看做针孔相机模型，该模型下，光线沿直线传播，像与物之间是相似的，或者更严格地用数学语言来说，像与物之间是经过了透视变换（Perspective Transform）。在透视变换下，直线经过变换仍是直线，曲线经过变换仍是曲线，两直线交点经过变换仍是两直线相交的点等。正因为投影变换保持了很多几何性质不变，所以我们看照片是能够与原场景联系起来的，照片与原场景之间存在某些相似的特性。那么鱼眼镜头为什么可以获得比普通镜头更大的视野范围呢，他们两者之间的差别在哪？</p>\n<p>从某种意义上来说，相机镜头所起的作用，就是做了一个数学变换，将物空间变换为像空间，成像平面就是在像空间内切了一刀，截取了一个平面，成为拍下的照片。</p>\n<p>但基于针孔相机模型的镜头存在一个缺陷——光线始终沿直线传播使得镜头难以捕捉位于边缘的物体。如下图所示，对于同样长度的红色箭头，越靠近边缘的经过镜头成像后就变得越长，而实际上我们底片的尺寸是有限的，所以极端接近边缘的物体普通的镜头就无法成像记录了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/784946d7aeaf0b77e4b5e91eb85e0e78.png\"></p>\n<p>于是人们想到的水下的鱼。由于水的折射率比空气大，光线从空气进入水中，折射角比入射角更小，并且入射角越大，这个变小的程度也越大。由于这个特性，使得在水中向上看时，能一眼看到整个水面上的这个半球形空间，整个空间的影像都背扭曲、压缩到了一个半顶角约为48°的锥形内。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ab3ff1d293450f796c8a04a36468a708.png\"></p>\n<p>在这个锥形空间内部，是来自水面上的空间的光线，在这个锥形外部，是来自水面下景色的反射。也就是说，在水下向上看，在一个圈之外，只能看到水底的景色；所有水面上的景色，都被压缩在一个圈内，如下图所示。鱼眼镜头也是人们根据这种特性发明的，另外，鱼眼镜头的前镜片直径很短，且呈抛物状像前部凸出，与鱼的眼睛十分相似，“鱼眼镜头”因此而得名。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6a0cdceaaeabedb67171931925741dac.jpeg\"></p>\n<p>鱼眼镜头一般是由十几个不同的透镜组合而成的，如下图所示，在成像的过程中，入射光线经过不同程度的折射，投影到尺寸有限的成像平面上，使得鱼眼镜头与普通镜头相比起来拥有了更大的视野范围。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8f225713814103dc0d3d5d279921a18e.png\"></p>\n<p>在研究鱼眼相机成像时，可以将上面的镜头组简化为一个球面，如下图所示，<em>O1-XcYcZc</em>为相机坐标系，O2-xy为成像平面。现实世界有一点P,入射角θ，如果按照普通相机的针孔相机模型，入射光线PO1经过镜头之后不改变路线,P、O1、<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png\" alt=\"\" style=\"max-height: 1.5em;\"></span>三点共线，<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png\" alt=\"\" style=\"max-height: 1.5em;\"></span>为P的像点，但是对于鱼眼相机，入射光线PO1经过镜头后会发生折射，因此P的像点为<em>p</em>，极坐标表示为（r，φ）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7d8730b23f213a652c7831c05825b3b7.png\"></p>\n<p>根据投影函数的不同，鱼眼相机的设计模型大致能被分为五种：透视投影（即针孔相机模型）、等积投影、等距投影、体视投影、正交投影。而实际的镜头因为各种原因并不会精确的符合投影模型，为了方便鱼眼相机的标定，一般取r关于θ泰勒展开式的前5项来近似鱼眼镜头的实际投影函数：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fa31e394765b87121758996872f7340e.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ea2695d35ac1024134b00751cfad39a0.png\"></p>\n<p>假设相机坐标系下有一点P(x,y,z)，点P(x,y,z)如果按照针孔相机模型投影，则不存在畸变，像点为P0(a,b)。不妨假设f&#x3D;1（最终可以求得rd 和r的比值与f无关）,可求得P0 点坐标y以及入射角θ：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/b7807a8872366727b6299499d28345f5.png\"></p>\n<p>由于畸变的存在，像点到图像中心的距离r被压缩成rd,实际的像点位置为p’(x’,y),有|Op’|&#x3D;rd,|OP0|&#x3D;r。结合等距投影函数有：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/f3a9b01ac3248215c5904b2b87d9c74f.png\"></p>\n<p>因为f&#x3D;1，θd 的一次项系数k0 可以为1，最终可以得到OpenCV中使用的鱼眼相机模型：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a821cb9a522abf758657aeab932fd8dc.png\"></p>\n<p>由相似三角形原理：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4543df1de58c719a6be4c04ca947624b.png\"></p>\n<p>所以就求得了畸变后点p’ 的坐标为：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/eb3e8f28d45e99d9ba53eefb2d2a8d4b.png\"></p>\n<p>最后利用相机内参将像平面的点转换到像素坐标系就得到了最终图像上的点：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d10563806f7a6f97c687a2b74f4e4543.png\"></p>\n<p>鱼眼相机拍摄的图像去畸变后的效果如下所示：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1f0d3bb10e87bd6e364a92c8e5406a41.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>去畸变图像</strong></td>\n</tr>\n</tbody></table>\n<p><strong>可以看出去畸变图像的视野相比与原始图像视野范围有所减小，但物体更贴近实际尺寸。</strong></p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><ul>\n<li><p>code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span>  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 腐蚀变换</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyErode</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// ;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_ERODE, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;腐蚀变换&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;腐蚀变换.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 膨胀变换</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyDilate</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_DILATE, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;膨胀变换&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;膨胀变换.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 开运算</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyOpen</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_OPEN, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;开运算&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;开运算.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 闭运算</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyClose</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_CLOSE, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;闭运算&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;闭运算.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 顶帽</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyTopHat</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_TOPHAT, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;顶帽&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;顶帽.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 黑帽</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyBlackHat</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_BLACKHAT, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;黑帽&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;黑帽.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 形态学梯度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyGradient</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_GRADIENT, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;形态学梯度&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;形态学梯度.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 仿射变换</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyAffine</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> scale_x = <span class=\"number\">0.7</span>;     <span class=\"comment\">// 水平缩放因子</span></span><br><span class=\"line\">    <span class=\"type\">float</span> scale_y = <span class=\"number\">0.3</span>;     <span class=\"comment\">// 垂直缩放因子</span></span><br><span class=\"line\">    <span class=\"type\">float</span> theta = CV_PI / <span class=\"number\">5</span>; <span class=\"comment\">// 旋转角度</span></span><br><span class=\"line\">    <span class=\"type\">float</span> tx = <span class=\"number\">100</span>;           <span class=\"comment\">// 水平平移量</span></span><br><span class=\"line\">    <span class=\"type\">float</span> ty = <span class=\"number\">30</span>;           <span class=\"comment\">// 垂直平移量</span></span><br><span class=\"line\">    <span class=\"type\">float</span> shear_x = <span class=\"number\">0.8</span>;     <span class=\"comment\">// X轴错切</span></span><br><span class=\"line\">    <span class=\"type\">float</span> shear_y = <span class=\"number\">0.2</span>;     <span class=\"comment\">// Y轴错切</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Mat warpMatrix = cv::Mat::<span class=\"built_in\">zeros</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, CV_32FC1);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>) = scale_x * <span class=\"built_in\">cos</span>(theta);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">1</span>) = -shear_y * scale_y * <span class=\"built_in\">sin</span>(theta);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">2</span>) = tx;</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">0</span>) = shear_x * scale_x * <span class=\"built_in\">sin</span>(theta);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">1</span>) = scale_y * <span class=\"built_in\">cos</span>(theta);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>) = ty;</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">warpAffine</span>(src_img, dst_img, warpMatrix, src_img.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;仿射变换&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;仿射变换.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标操作 自己准备结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ImageData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cv::Mat img;                <span class=\"comment\">// 目标图像 用于点击 确定坐标</span></span><br><span class=\"line\">    std::vector&lt;cv::Point2f&gt; points; <span class=\"comment\">// 存放原图的坐标 通过鼠标的点击进行存放</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//鼠标操作的回调函数:用于选择四个角的点（使用方法：从左上角开始顺时针选择四个点，选完之后回车操作）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mouseHundle</span><span class=\"params\">(<span class=\"type\">int</span> event,<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> flag,<span class=\"type\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 强制转换</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">ImageData</span> *d = (<span class=\"keyword\">struct</span> ImageData *)arg;</span><br><span class=\"line\">    <span class=\"comment\">// 如果按下的是鼠标左键</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event == cv::EVENT_LBUTTONDOWN)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用圆形来标记下鼠标按下左键标记的位置</span></span><br><span class=\"line\">        cv::<span class=\"built_in\">circle</span>(d-&gt;img, cv::<span class=\"built_in\">Point</span>(x, y), <span class=\"number\">3</span>, cv::<span class=\"built_in\">Scalar</span>(<span class=\"number\">255</span>), <span class=\"number\">3</span>, CV_AA); <span class=\"comment\">// 在图上标记,圆心为点击的位置</span></span><br><span class=\"line\">        cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;Image&quot;</span>, d-&gt;img);                                       <span class=\"comment\">// 原窗口上进行显示标记点</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;选择点%d: %d,%d...\\n&quot;</span>, (<span class=\"type\">int</span>)d-&gt;points.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>, x, y);</span><br><span class=\"line\">        <span class=\"comment\">// 透视变换 需要使用四个点的坐标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d-&gt;points.<span class=\"built_in\">size</span>() &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d-&gt;points.<span class=\"built_in\">push_back</span>(cv::<span class=\"built_in\">Point2f</span>(x, y)); <span class=\"comment\">// 把点击下来的坐标进行存储</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cv::<span class=\"built_in\">setMouseCallback</span>(<span class=\"string\">&quot;Image&quot;</span>, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>); <span class=\"comment\">// 取消鼠标回调</span></span><br><span class=\"line\">            cv::<span class=\"built_in\">destroyWindow</span>(<span class=\"string\">&quot;Image&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 透视变换</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyPerspectiveTF</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\"></span><br><span class=\"line\">    ImageData data;</span><br><span class=\"line\">    data.img = src_img.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::<span class=\"built_in\">namedWindow</span>(<span class=\"string\">&quot;Image&quot;</span>);</span><br><span class=\"line\">    cv::<span class=\"built_in\">setMouseCallback</span>(<span class=\"string\">&quot;Image&quot;</span>, mouseHundle, &amp;data);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;Image&quot;</span>, src_img);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请在图像上点击四个点，然后按任意键继续...\\n&quot;</span>);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Size dst_size = cv::<span class=\"built_in\">Size</span>(<span class=\"number\">190</span>, <span class=\"number\">260</span>); <span class=\"comment\">// 输出图像的尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;cv::Point2f&gt; outputPoints; <span class=\"comment\">// 输出图像上的对应点</span></span><br><span class=\"line\">    outputPoints.<span class=\"built_in\">emplace_back</span>(cv::<span class=\"built_in\">Point2f</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    outputPoints.<span class=\"built_in\">emplace_back</span>(cv::<span class=\"built_in\">Point2f</span>(dst_size.width, <span class=\"number\">0</span>));</span><br><span class=\"line\">    outputPoints.<span class=\"built_in\">emplace_back</span>(cv::<span class=\"built_in\">Point2f</span>(dst_size.width, dst_size.height));</span><br><span class=\"line\">    outputPoints.<span class=\"built_in\">emplace_back</span>(cv::<span class=\"built_in\">Point2f</span>(<span class=\"number\">0</span>, dst_size.height));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outputPoints.<span class=\"built_in\">size</span>() != <span class=\"number\">4</span> || data.points.<span class=\"built_in\">size</span>() != <span class=\"number\">4</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;请选择4个点即可&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cv::Mat perspectiveMatrix = cv::<span class=\"built_in\">getPerspectiveTransform</span>(data.points, outputPoints);</span><br><span class=\"line\">    cv::<span class=\"built_in\">warpPerspective</span>(src_img, dst_img, perspectiveMatrix, dst_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;透视变换&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;透视变换.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断参数输入是否正确</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;参数错误,请使用如下命令格式: &quot;</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&quot;[图像路径] [图像变换类型(1,2,3,...)] &quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mode = std::<span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;说明：\\n[0] 说明\\n[1] 图像腐蚀变换\\n[2] 图像膨胀变换\\n[3] 开运算\\n[4] 闭运算\\n[5] 顶帽\\n[6] 黑帽\\n[7] 形态学梯度\\n[8] 仿射变换\\n[9] 透视变换\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获得图像</span></span><br><span class=\"line\">    cv::Mat img = cv::<span class=\"built_in\">imread</span>(argv[<span class=\"number\">1</span>], cv::IMREAD_GRAYSCALE);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;原始图像&quot;</span>, img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;原始图像.png&quot;</span>, img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (mode)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;图像腐蚀变换...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyErode</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;图像膨胀变换...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyDilate</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;开运算...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyOpen</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;闭运算...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyClose</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;顶帽...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyTopHat</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;黑帽...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyBlackHat</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;形态学梯度...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyGradient</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;仿射变换...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyAffine</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;透视变换...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyPerspectiveTF</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ image_transform.cpp -o image_transform -lopencv_core -lopencv_highgui -lopencv_imgproc -lopencv_imgcodecs -lopencv_calib3d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./image_transform 图像路径 图像变换类型(1,2,3,...)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ol>\n<li><a href=\"https://blog.csdn.net/qq_16137569/article/details/112398976\">https://blog.csdn.net/qq_16137569/article/details/112398976</a></li>\n<li>数字图像处理（第四版）</li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","more":"<h1 id=\"形态学变换\"><a href=\"#形态学变换\" class=\"headerlink\" title=\"形态学变换\"></a>形态学变换</h1><p>形态学变换是一组用于图像处理中的数学操作，用于改变图像中物体的形状、大小和结构。这些操作通常用于处理二值图像（黑白图像），用于分割图像中的物体、去除噪声、查找轮廓等，最初是为了分析和处理二值图像中的形状、结构和特征而开发的。</p>\n<h2 id=\"腐蚀与膨胀\"><a href=\"#腐蚀与膨胀\" class=\"headerlink\" title=\"腐蚀与膨胀\"></a>腐蚀与膨胀</h2><p>与卷积操作类似(嗯… 什么是卷积…<a href=\"https://setosa.io/ev/image-kernels/\">点我查看</a>),假设有图像A和结构元素B,结构元素B在A上面移动,其中B定义其中心为锚点，计算B覆盖下A的最大像素值用来替换锚点的像素，其中B作为结构体可以是任意形状。随着锚点在图像上的移动，结构B就可对图像上的每个像素进行处理。</p>\n<p>膨胀操作用于扩大图像中的白色区域，即通过结构元素的移动来扩展白色像素。如果结构元素的中心覆盖了至少一个白色像素，则中心位置的像素被置为白色。膨胀操作通常用于填充空洞、连接断开的对象和扩展物体。腐蚀和膨胀是数学形态学最基本的变换。</p>\n<p>图像膨胀主要针对的是阈值化后的图像。图像膨胀类似于“领域被扩张”，将图像中的高亮区域或白色部分进行扩增粗化，其运行结果图比原图的高亮区域更大。其原理是：将核在原始图像中进行遍历，然后将原始图像遍历到的像素点的值与自定义卷积核(全为1的二维矩阵)得值进行与运算，像素点与对应核一 一对应进行与，当卷积核对应的元素值只要有一个为1时，设置卷积核中心值的像素点为1，如果全为0，,则其值设置为0。</p>\n<p>图像腐蚀主要针对的是阈值化后的图像。图像腐蚀类似于“领域被蚕食”，将图像中的高亮区域或白色部分进行缩减细化，其运行结果图比原图的高亮区域更小。其原理是：将核在原始图像中进行遍历，然后将原始图像遍历到的像素点的值与自定义卷积核(全为1的二维矩阵)得值进行与运算，像素点与对应核一 一对应进行与，当卷积核对应的元素值均为1时，设置卷积核中心值的像素点为1，否则其值设置为0</p>\n<p>一头雾水，直接看图…</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/df2fe5f21358787937bf255254be8820.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6b29fcd3560f6d0db69c76561679ee41.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>腐蚀变换</strong></td>\n<td><strong>原图</strong></td>\n<td><strong>膨胀变换</strong></td>\n</tr>\n</tbody></table>\n<p>注：卷积核的大小为5×5。</p>\n<p><strong>腐蚀就是使得“白色”区域变小，膨胀就是使得“白色”区域变大。</strong></p>\n<h2 id=\"开运算与闭运算\"><a href=\"#开运算与闭运算\" class=\"headerlink\" title=\"开运算与闭运算\"></a>开运算与闭运算</h2><p>开运算是将腐蚀（Erosion）操作和膨胀（Dilation）操作依次应用于图像的操作。首先执行腐蚀操作，然后再执行膨胀操作。开运算通常用于以下情况：</p>\n<ul>\n<li>去除小的噪声和斑点：通过腐蚀操作可以缩小小的白色区域，然后通过膨胀操作将它们恢复到原始大小，从而去除小的噪声和斑点。</li>\n<li>分离连接的物体：开运算可以分离连接在一起的物体，使它们变得更远离彼此。</li>\n</ul>\n<p>闭运算是将膨胀（Dilation）操作和腐蚀（Erosion）操作依次应用于图像的操作。首先执行膨胀操作，然后再执行腐蚀操作。闭运算通常用于以下情况：</p>\n<ul>\n<li>填充物体内的小孔：通过膨胀操作可以填充物体内的小孔，然后通过腐蚀操作来还原物体的大小。</li>\n<li>连接断开的物体：闭运算可以连接断开的物体，使它们相互接触。</li>\n</ul>\n<p>在图像分割中，开运算可以分离相邻物体，闭运算可用于连接物体。在光学字符识别（OCR）中，开运算可用于去除文本字符之间的干扰，闭运算可用于连接字符的笔画。在医学影像中，这些操作可用于处理X射线图像或CT扫描图像中的结构。</p>\n<p>一头雾水，直接看图…</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/28953503336881d61c9b80472ab7a96f.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png\" alt=\"原始图像\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/60951e8e70e0276c13faa177bc76695e.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>开运算</strong></td>\n<td><strong>原图</strong></td>\n<td><strong>闭运算</strong></td>\n</tr>\n</tbody></table>\n<p>注：卷积核的大小为5×5。</p>\n<p>嗯… 有啥区别…. 因为开运算和闭运算都是腐蚀和膨胀相结合的，无非是顺序不同，因此，对于上述图像的影响不大。</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0d6668004a819e172f8c6ac9ca7d8864.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8b39caf08ec08e1441b49cd645c20e63.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>开运算</strong></td>\n<td><strong>原图</strong></td>\n<td><strong>闭运算</strong></td>\n</tr>\n</tbody></table>\n<p><strong>开运算就是填充白色空洞，闭运算就是断开黑色连接，开运算和闭运算都基本保持图像原来的尺寸和形状。</strong></p>\n<h2 id=\"形态学梯度\"><a href=\"#形态学梯度\" class=\"headerlink\" title=\"形态学梯度\"></a>形态学梯度</h2><p>形态学梯度通过计算图像中每个像素点的亮度变化程度来实现，从而可以突出物体的边界。形态学梯度操作通常对二值图像或灰度图像进行处理。</p>\n<p>形态学梯度操作通常通过以下公式来计算每个像素的梯度值：</p>\n<p>Gradient(x,y)&#x3D;Dilation(x,y)-Erosion(x,y)</p>\n<p>Dilation(x,y) 表示对图像进行膨胀操作，Erosion(x,y) 表示对图像进行腐蚀操作。这意味着形态学梯度是膨胀图像和腐蚀图像之间的差异。这种操作突出了物体的边缘，因为边缘像素的值在膨胀和腐蚀之间产生最大的变化。形态学梯度的应用如下：</p>\n<ul>\n<li>边缘检测：形态学梯度可用于检测图像中的边缘，使其成为图像处理中常用的边缘检测工具。在边缘检测中，物体边界通常是感兴趣的区域，形态学梯度可以帮助找到这些边界。</li>\n<li>物体分割：形态学梯度可以用于分割图像中的不同物体，因为它可以突出物体之间的边界。这在计算机视觉和图像分析中非常有用。</li>\n<li>纹理分析：在纹理分析中，形态学梯度可以用于检测和描述图像中的纹理特征，从而有助于分类和识别任务。</li>\n<li>图像增强：形态学梯度操作可以增强图像中物体的轮廓和边缘，使它们更清晰可见，这在图像改进和可视化中很有用。</li>\n<li>医学影像处理：在医学图像中，形态学梯度可以用于检测血管、骨骼和组织的边界，从而帮助医生进行诊断。</li>\n</ul>\n<p>对图像进行形态学梯度计算时的效果如下：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fcbca0d7334a7df27f68aad79fcc65fd.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>形态学梯</strong></td>\n</tr>\n</tbody></table>\n<p>通过上图可以看出，形态学梯度对图像的边缘检测具有明显的效果。</p>\n<h2 id=\"顶帽与黑帽\"><a href=\"#顶帽与黑帽\" class=\"headerlink\" title=\"顶帽与黑帽\"></a>顶帽与黑帽</h2><p>顶帽和黑帽是形态学图像处理中的两种操作，它们分别用于突出图像中的亮区域和暗区域，常用于图像增强和特征提取。顶帽操作是原始图像与开运算的结果之差。开运算通常用于去除图像中的噪声或连接分散的物体，因此顶帽操作可以突出图像中的小亮区域或物体的细节。顶帽操作通常用于以下情况：</p>\n<ul>\n<li>亮物体检测：当亮物体与背景的亮度差异很小时，顶帽操作可以突出这些亮物体。</li>\n<li>纹理分析：用于分析图像中的纹理和细节。</li>\n<li>图像增强：可以增强图像中的细节，使其更清晰可见。</li>\n</ul>\n<p>黑帽操作是闭运算的结果与原始图像之差。闭运算通常用于填充物体内的小孔或连接物体，因此黑帽操作可以突出图像中的小暗区域或物体的细节。黑帽操作通常用于以下情况：</p>\n<ul>\n<li>暗物体检测：当暗物体与背景的亮度差异很小时，黑帽操作可以突出这些暗物体。</li>\n<li>小孔填充：用于填充物体内的小孔或裂缝，以还原物体的形状。</li>\n<li>图像增强：可以增强图像中的细节，特别是暗区域的细节。</li>\n</ul>\n<p>应用示例：</p>\n<ul>\n<li>医学影像：顶帽和黑帽操作可用于医学影像中的病变检测和血管分析。</li>\n<li>工业检测：在制造业中，它们可用于检测产品表面上的缺陷或微小的瑕疵。</li>\n<li>纹理分析：用于纹理分析和纹理特征提取，例如在图像分类或图像检索中。</li>\n<li>数字图像处理：常用于数字图像处理中的各种图像增强和预处理任务。</li>\n</ul>\n<p>总之，顶帽和黑帽操作是形态学图像处理中的两种重要工具，可以帮助突出图像中的亮暗区域和细节，用于不同的图像分析和增强任务。选择适当的操作取决于具体的应用场景和目标。</p>\n<p>一头雾水，直接看图…</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4bbcac92cf2200b7e9865fa07d1e73c3.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4f8310d681cc934306a65da7641bb029.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>顶帽</strong></td>\n<td><strong>原图</strong></td>\n<td><strong>黑帽</strong></td>\n</tr>\n</tbody></table>\n<p>结合开运算和闭运算，就可以看出顶帽和黑帽操作与之的关系，但是具体应用起来是什么样子的呢？看下图：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/aa5e50980c5e180aa26224402a463e6e.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4693bd3b37c710f59bbc5155dd0bcba2.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5e779f81df404e04a55ad2c946aed599.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>闭运算</strong></td>\n<td><strong>黑帽</strong></td>\n</tr>\n</tbody></table>\n<p>| <img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/e1040dba7d87a8279fac9a8ee3ef6b64.png\"> | <strong><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/3e16fd13019d0bd17319d5190ca46760.png\"></strong> | <img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d565b8b1a2af708a41f010d0b6f7e810.png\"> |<br>| <strong>原图</strong>                                                | <strong>开运算</strong>                                                | <strong>顶帽</strong>                                            |</p>\n<p><strong>顶帽操作是原始图像与开运算的结果之差。黑帽操作是闭运算的结果与原始图像之差。</strong></p>\n<h1 id=\"几何变换\"><a href=\"#几何变换\" class=\"headerlink\" title=\"几何变换\"></a>几何变换</h1><p>几何变换是数字图像处理领域中的关键概念，用于改变图像的几何结构和外观，而不涉及像素值的修改。这些变换允许我们对图像进行缩放、旋转、平移、拉伸和扭曲等操作，以满足特定的需求和应用场景。几何变换在图像处理中有广泛的应用，从简单的尺寸调整到复杂的场景校正和特效添加。它们为我们提供了强大的工具，用于改善图像质量、分析图像内容以及实现各种计算机视觉任务。无论是医学影像分析、自动驾驶、视频游戏还是艺术创作，几何变换都是不可或缺的工具，为图像处理和计算机视觉领域的不断发展提供了关键支持。</p>\n<h2 id=\"仿射变换\"><a href=\"#仿射变换\" class=\"headerlink\" title=\"仿射变换\"></a>仿射变换</h2><p>仿射变换是指在向量空间中进行一次线性变换(乘以一个矩阵)并加上一个平移(加上一个向量)，变换为另一个向量空间的过程。在有限维的情况下，每个仿射变换可以由一个矩阵A和一个向量b给出，它可以写作A和一个附加的列b。一个仿射变换对应于一个矩阵和一个向量的乘法，而仿射变换的复合对应于普通的矩阵乘法，只要加入一个额外的行到矩阵的底下，这一行全部是0除了最右边是一个1，而列向量的底下要加上一个1.</p>\n<p>仿射变换描述了一种二维仿射变换的功能，它是一种二维坐标之间的线性变换，保持二维图形的“平直性”(即变换后直线还是直线，圆弧还是圆弧)和“平行性”(其实是保持二维图形间的相对位置关系不变，平行线还是平行线，而直线上的点位置顺序不变，另特别注意向量间夹角可能会发生变化)。仿射变换可以通过一系列的原子变换的复合来实现包括：平移(Translation)、缩放(Scale)、翻转(Flip)、旋转(Rotation)和错切(Shear).</p>\n<p>事实上，仿射变换代表的是两幅图之间的关系，我们通常使用2x3矩阵来表示仿射变换如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0112ba5cf3ed3070df2c9b16a0977592.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/593c901c84ab56cf201b071ea784d283.png\"></p>\n<p>考虑到我们要使用矩阵A和B对二维向量X&#x3D;[x,y]T做变换，所以也能表示为下列形式：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1c55f47f42310736e8d18d997a3a688f.png\"></p>\n<p>得到如下效果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/2d9e26acd785f952e36ead506de2d417.png\"></p>\n<p>从上面解释中我们得知仿射变换表示的就是两幅图片的一种联系，关于这种联系的信息大致可以从以下两种场景获得。</p>\n<p>a. 我们已知X和T而且我们知道他们是有联系的，接下来的工作就是求解矩阵M</p>\n<p>b. 我们一致M和X要求得T,我们只需要应用算式T&#x3D;M.X即可。对于这种联系的信息可以用矩阵M清晰的表达(即给出明确的2x3矩阵)或者也可以用两幅图片点之间几何关系来表达。</p>\n<p>因为矩阵M联系着两幅图片，我们以其表示两图中各三点直接的联系为例，如下:</p>\n<p>点1,2和3(在图一中形成一个三角)与图二中三个点一一映射，仍然形成三角形，但形状已经大大改变。如果我们能通过这样两组三点求出仿射变换（你能选择自己喜欢的点），接下来我们就能把仿射变换应用到图像中所有的点。</p>\n<p>对实际的图像进行仿射变换的效果如下：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/38c2d8927c01a06858a43fe180df10bf.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a1bdbc0eb00b913a9ec23e1a92074091.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>仿射变换</strong></td>\n</tr>\n</tbody></table>\n<p><strong>仿射变换是将矩形变换成平行四边形，变换后各边依旧平行。</strong></p>\n<h2 id=\"透视变换\"><a href=\"#透视变换\" class=\"headerlink\" title=\"透视变换\"></a>透视变换</h2><p>透视变换不能保证物体形状的“平行性”。仿射变换是透视变换的特殊形式。透视变换是将一个平面投影到另一个平面，简单理解就是把一张图片投影到另一张图片，求的是同一张图片到它的投影图片之间的变换。透视变换是将成像投影到一个新的视平面，也称作投影映射。如图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ce8be3b8d534d31b2192bcbc583e3a81.png\"></p>\n<p>透视变换原理如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/645bf3d7e15e69e8a183a1be8755b91f.png\"></p>\n<p>上述公式中， (<em>u</em>,<em>v</em>) 代表原始图像坐标， (<em>x</em>,<em>y</em>) 为经过透视变换的图片坐标，其中变换矩阵为3×3 形式。进而可以得到：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/57a9929d24923ac6eb7581731ccfe3e6.png\"></p>\n<p>在原图上取4点坐标与新图对应，相当于列出方程组，解出变换矩阵。通过变换矩阵，在输入原图像坐标的情况下，可以直接求解新图平面坐标。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7c71e1a5dbcf76e3543a33c99c3171cc.png\"></p>\n<p>其中， (<em>x</em>,<em>y</em>)是原图坐标，<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c002438d0c0f30cdbb142c65c99ef72b.png\" alt=\"\" style=\"max-height: 1.5em;\"></span>是变换后的坐标；<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c03622f9b4a0db4e9018790e5490f206.png\" alt=\"\" style=\"max-height: 1.5em;\"></span> 为旋转量，<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/a057b24fb85fb51287d74dba2baef71c.png\" alt=\"\" style=\"max-height: 1.5em;\"></span>  为平移量。因为透视变换是非线性的，所以不能齐次性表示；透视变换矩阵为3×3。透视变换的方程组有8个未知数，所以要求解就需要找到4组映射点，四个点就刚好确定了一个三维空间。</p>\n<p>利用透视变换常常进行图像的“摆正”，示例如下：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ecfb0ef920f80807ce2f9227c6aeff55.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5a59ba2712377bcb27bd960e2a078dba.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>透视变换</strong></td>\n</tr>\n</tbody></table>\n<p><strong>透视变换用于将一个二维平面上的图像从一种视角或投影方式转换为另一种视角或投影方式的方法。它的主要目的是消除或校正由于观察角度或位置变化引起的投影畸变，以便更准确地分析或呈现图像中的对象。</strong></p>\n<h1 id=\"去畸变\"><a href=\"#去畸变\" class=\"headerlink\" title=\"去畸变\"></a>去畸变</h1><p>这里重点介绍鱼眼相机为例展开介绍。首先，鱼眼镜头为什么可以获得比普通镜头更大的视野范围呢，他们两者之间的差别在哪？</p>\n<p>其实，我们平常接触的大多数镜头都可以近似看做针孔相机模型，该模型下，光线沿直线传播，像与物之间是相似的，或者更严格地用数学语言来说，像与物之间是经过了透视变换（Perspective Transform）。在透视变换下，直线经过变换仍是直线，曲线经过变换仍是曲线，两直线交点经过变换仍是两直线相交的点等。正因为投影变换保持了很多几何性质不变，所以我们看照片是能够与原场景联系起来的，照片与原场景之间存在某些相似的特性。那么鱼眼镜头为什么可以获得比普通镜头更大的视野范围呢，他们两者之间的差别在哪？</p>\n<p>从某种意义上来说，相机镜头所起的作用，就是做了一个数学变换，将物空间变换为像空间，成像平面就是在像空间内切了一刀，截取了一个平面，成为拍下的照片。</p>\n<p>但基于针孔相机模型的镜头存在一个缺陷——光线始终沿直线传播使得镜头难以捕捉位于边缘的物体。如下图所示，对于同样长度的红色箭头，越靠近边缘的经过镜头成像后就变得越长，而实际上我们底片的尺寸是有限的，所以极端接近边缘的物体普通的镜头就无法成像记录了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/784946d7aeaf0b77e4b5e91eb85e0e78.png\"></p>\n<p>于是人们想到的水下的鱼。由于水的折射率比空气大，光线从空气进入水中，折射角比入射角更小，并且入射角越大，这个变小的程度也越大。由于这个特性，使得在水中向上看时，能一眼看到整个水面上的这个半球形空间，整个空间的影像都背扭曲、压缩到了一个半顶角约为48°的锥形内。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ab3ff1d293450f796c8a04a36468a708.png\"></p>\n<p>在这个锥形空间内部，是来自水面上的空间的光线，在这个锥形外部，是来自水面下景色的反射。也就是说，在水下向上看，在一个圈之外，只能看到水底的景色；所有水面上的景色，都被压缩在一个圈内，如下图所示。鱼眼镜头也是人们根据这种特性发明的，另外，鱼眼镜头的前镜片直径很短，且呈抛物状像前部凸出，与鱼的眼睛十分相似，“鱼眼镜头”因此而得名。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6a0cdceaaeabedb67171931925741dac.jpeg\"></p>\n<p>鱼眼镜头一般是由十几个不同的透镜组合而成的，如下图所示，在成像的过程中，入射光线经过不同程度的折射，投影到尺寸有限的成像平面上，使得鱼眼镜头与普通镜头相比起来拥有了更大的视野范围。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8f225713814103dc0d3d5d279921a18e.png\"></p>\n<p>在研究鱼眼相机成像时，可以将上面的镜头组简化为一个球面，如下图所示，<em>O1-XcYcZc</em>为相机坐标系，O2-xy为成像平面。现实世界有一点P,入射角θ，如果按照普通相机的针孔相机模型，入射光线PO1经过镜头之后不改变路线,P、O1、<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png\" alt=\"\" style=\"max-height: 1.5em;\"></span>三点共线，<span style=\"display: inline-block; vertical-align: middle;\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png\" alt=\"\" style=\"max-height: 1.5em;\"></span>为P的像点，但是对于鱼眼相机，入射光线PO1经过镜头后会发生折射，因此P的像点为<em>p</em>，极坐标表示为（r，φ）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7d8730b23f213a652c7831c05825b3b7.png\"></p>\n<p>根据投影函数的不同，鱼眼相机的设计模型大致能被分为五种：透视投影（即针孔相机模型）、等积投影、等距投影、体视投影、正交投影。而实际的镜头因为各种原因并不会精确的符合投影模型，为了方便鱼眼相机的标定，一般取r关于θ泰勒展开式的前5项来近似鱼眼镜头的实际投影函数：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fa31e394765b87121758996872f7340e.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ea2695d35ac1024134b00751cfad39a0.png\"></p>\n<p>假设相机坐标系下有一点P(x,y,z)，点P(x,y,z)如果按照针孔相机模型投影，则不存在畸变，像点为P0(a,b)。不妨假设f&#x3D;1（最终可以求得rd 和r的比值与f无关）,可求得P0 点坐标y以及入射角θ：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/b7807a8872366727b6299499d28345f5.png\"></p>\n<p>由于畸变的存在，像点到图像中心的距离r被压缩成rd,实际的像点位置为p’(x’,y),有|Op’|&#x3D;rd,|OP0|&#x3D;r。结合等距投影函数有：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/f3a9b01ac3248215c5904b2b87d9c74f.png\"></p>\n<p>因为f&#x3D;1，θd 的一次项系数k0 可以为1，最终可以得到OpenCV中使用的鱼眼相机模型：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a821cb9a522abf758657aeab932fd8dc.png\"></p>\n<p>由相似三角形原理：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4543df1de58c719a6be4c04ca947624b.png\"></p>\n<p>所以就求得了畸变后点p’ 的坐标为：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/eb3e8f28d45e99d9ba53eefb2d2a8d4b.png\"></p>\n<p>最后利用相机内参将像平面的点转换到像素坐标系就得到了最终图像上的点：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d10563806f7a6f97c687a2b74f4e4543.png\"></p>\n<p>鱼眼相机拍摄的图像去畸变后的效果如下所示：</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1f0d3bb10e87bd6e364a92c8e5406a41.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png\"><img src=\"https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>原图</strong></td>\n<td><strong>去畸变图像</strong></td>\n</tr>\n</tbody></table>\n<p><strong>可以看出去畸变图像的视野相比与原始图像视野范围有所减小，但物体更贴近实际尺寸。</strong></p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><ul>\n<li><p>code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span>  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 腐蚀变换</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyErode</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// ;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_ERODE, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;腐蚀变换&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;腐蚀变换.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 膨胀变换</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyDilate</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_DILATE, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;膨胀变换&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;膨胀变换.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 开运算</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyOpen</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_OPEN, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;开运算&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;开运算.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 闭运算</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyClose</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_CLOSE, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;闭运算&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;闭运算.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 顶帽</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyTopHat</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_TOPHAT, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;顶帽&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;顶帽.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 黑帽</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyBlackHat</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_BLACKHAT, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;黑帽&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;黑帽.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 形态学梯度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyGradient</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat my_struct = cv::<span class=\"built_in\">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class=\"built_in\">Size</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// 十字形结构元素;</span></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">morphologyEx</span>(src_img, dst_img, cv::MORPH_GRADIENT, my_struct);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;形态学梯度&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;形态学梯度.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 仿射变换</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyAffine</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> scale_x = <span class=\"number\">0.7</span>;     <span class=\"comment\">// 水平缩放因子</span></span><br><span class=\"line\">    <span class=\"type\">float</span> scale_y = <span class=\"number\">0.3</span>;     <span class=\"comment\">// 垂直缩放因子</span></span><br><span class=\"line\">    <span class=\"type\">float</span> theta = CV_PI / <span class=\"number\">5</span>; <span class=\"comment\">// 旋转角度</span></span><br><span class=\"line\">    <span class=\"type\">float</span> tx = <span class=\"number\">100</span>;           <span class=\"comment\">// 水平平移量</span></span><br><span class=\"line\">    <span class=\"type\">float</span> ty = <span class=\"number\">30</span>;           <span class=\"comment\">// 垂直平移量</span></span><br><span class=\"line\">    <span class=\"type\">float</span> shear_x = <span class=\"number\">0.8</span>;     <span class=\"comment\">// X轴错切</span></span><br><span class=\"line\">    <span class=\"type\">float</span> shear_y = <span class=\"number\">0.2</span>;     <span class=\"comment\">// Y轴错切</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Mat warpMatrix = cv::Mat::<span class=\"built_in\">zeros</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, CV_32FC1);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>) = scale_x * <span class=\"built_in\">cos</span>(theta);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">1</span>) = -shear_y * scale_y * <span class=\"built_in\">sin</span>(theta);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">2</span>) = tx;</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">0</span>) = shear_x * scale_x * <span class=\"built_in\">sin</span>(theta);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">1</span>) = scale_y * <span class=\"built_in\">cos</span>(theta);</span><br><span class=\"line\">    warpMatrix.<span class=\"built_in\">at</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>) = ty;</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\">    cv::<span class=\"built_in\">warpAffine</span>(src_img, dst_img, warpMatrix, src_img.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;仿射变换&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;仿射变换.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标操作 自己准备结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ImageData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cv::Mat img;                <span class=\"comment\">// 目标图像 用于点击 确定坐标</span></span><br><span class=\"line\">    std::vector&lt;cv::Point2f&gt; points; <span class=\"comment\">// 存放原图的坐标 通过鼠标的点击进行存放</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//鼠标操作的回调函数:用于选择四个角的点（使用方法：从左上角开始顺时针选择四个点，选完之后回车操作）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mouseHundle</span><span class=\"params\">(<span class=\"type\">int</span> event,<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> flag,<span class=\"type\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 强制转换</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">ImageData</span> *d = (<span class=\"keyword\">struct</span> ImageData *)arg;</span><br><span class=\"line\">    <span class=\"comment\">// 如果按下的是鼠标左键</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event == cv::EVENT_LBUTTONDOWN)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用圆形来标记下鼠标按下左键标记的位置</span></span><br><span class=\"line\">        cv::<span class=\"built_in\">circle</span>(d-&gt;img, cv::<span class=\"built_in\">Point</span>(x, y), <span class=\"number\">3</span>, cv::<span class=\"built_in\">Scalar</span>(<span class=\"number\">255</span>), <span class=\"number\">3</span>, CV_AA); <span class=\"comment\">// 在图上标记,圆心为点击的位置</span></span><br><span class=\"line\">        cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;Image&quot;</span>, d-&gt;img);                                       <span class=\"comment\">// 原窗口上进行显示标记点</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;选择点%d: %d,%d...\\n&quot;</span>, (<span class=\"type\">int</span>)d-&gt;points.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>, x, y);</span><br><span class=\"line\">        <span class=\"comment\">// 透视变换 需要使用四个点的坐标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d-&gt;points.<span class=\"built_in\">size</span>() &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d-&gt;points.<span class=\"built_in\">push_back</span>(cv::<span class=\"built_in\">Point2f</span>(x, y)); <span class=\"comment\">// 把点击下来的坐标进行存储</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cv::<span class=\"built_in\">setMouseCallback</span>(<span class=\"string\">&quot;Image&quot;</span>, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>); <span class=\"comment\">// 取消鼠标回调</span></span><br><span class=\"line\">            cv::<span class=\"built_in\">destroyWindow</span>(<span class=\"string\">&quot;Image&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description: 透视变换</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyPerspectiveTF</span><span class=\"params\">(cv::Mat input_image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cv::Mat src_img = input_image.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::Mat dst_img;</span><br><span class=\"line\"></span><br><span class=\"line\">    ImageData data;</span><br><span class=\"line\">    data.img = src_img.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">    cv::<span class=\"built_in\">namedWindow</span>(<span class=\"string\">&quot;Image&quot;</span>);</span><br><span class=\"line\">    cv::<span class=\"built_in\">setMouseCallback</span>(<span class=\"string\">&quot;Image&quot;</span>, mouseHundle, &amp;data);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;Image&quot;</span>, src_img);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请在图像上点击四个点，然后按任意键继续...\\n&quot;</span>);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Size dst_size = cv::<span class=\"built_in\">Size</span>(<span class=\"number\">190</span>, <span class=\"number\">260</span>); <span class=\"comment\">// 输出图像的尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;cv::Point2f&gt; outputPoints; <span class=\"comment\">// 输出图像上的对应点</span></span><br><span class=\"line\">    outputPoints.<span class=\"built_in\">emplace_back</span>(cv::<span class=\"built_in\">Point2f</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    outputPoints.<span class=\"built_in\">emplace_back</span>(cv::<span class=\"built_in\">Point2f</span>(dst_size.width, <span class=\"number\">0</span>));</span><br><span class=\"line\">    outputPoints.<span class=\"built_in\">emplace_back</span>(cv::<span class=\"built_in\">Point2f</span>(dst_size.width, dst_size.height));</span><br><span class=\"line\">    outputPoints.<span class=\"built_in\">emplace_back</span>(cv::<span class=\"built_in\">Point2f</span>(<span class=\"number\">0</span>, dst_size.height));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outputPoints.<span class=\"built_in\">size</span>() != <span class=\"number\">4</span> || data.points.<span class=\"built_in\">size</span>() != <span class=\"number\">4</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;请选择4个点即可&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cv::Mat perspectiveMatrix = cv::<span class=\"built_in\">getPerspectiveTransform</span>(data.points, outputPoints);</span><br><span class=\"line\">    cv::<span class=\"built_in\">warpPerspective</span>(src_img, dst_img, perspectiveMatrix, dst_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;透视变换&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;透视变换.png&quot;</span>, dst_img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断参数输入是否正确</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;参数错误,请使用如下命令格式: &quot;</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&quot;[图像路径] [图像变换类型(1,2,3,...)] &quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mode = std::<span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;说明：\\n[0] 说明\\n[1] 图像腐蚀变换\\n[2] 图像膨胀变换\\n[3] 开运算\\n[4] 闭运算\\n[5] 顶帽\\n[6] 黑帽\\n[7] 形态学梯度\\n[8] 仿射变换\\n[9] 透视变换\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获得图像</span></span><br><span class=\"line\">    cv::Mat img = cv::<span class=\"built_in\">imread</span>(argv[<span class=\"number\">1</span>], cv::IMREAD_GRAYSCALE);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;原始图像&quot;</span>, img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;原始图像.png&quot;</span>, img);</span><br><span class=\"line\">    cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (mode)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;图像腐蚀变换...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyErode</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;图像膨胀变换...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyDilate</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;开运算...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyOpen</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;闭运算...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyClose</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;顶帽...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyTopHat</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;黑帽...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyBlackHat</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;形态学梯度...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyGradient</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;仿射变换...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyAffine</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;透视变换...\\n&quot;</span>);</span><br><span class=\"line\">        ret = <span class=\"built_in\">MyPerspectiveTF</span>(img);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ image_transform.cpp -o image_transform -lopencv_core -lopencv_highgui -lopencv_imgproc -lopencv_imgcodecs -lopencv_calib3d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./image_transform 图像路径 图像变换类型(1,2,3,...)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ol>\n<li><a href=\"https://blog.csdn.net/qq_16137569/article/details/112398976\">https://blog.csdn.net/qq_16137569/article/details/112398976</a></li>\n<li>数字图像处理（第四版）</li>\n</ol>\n","categories":[{"name":"opencv","path":"api/categories/opencv.json"}],"tags":[{"name":"opencv","path":"api/tags/opencv.json"},{"name":"图像变换","path":"api/tags/图像变换.json"}]}