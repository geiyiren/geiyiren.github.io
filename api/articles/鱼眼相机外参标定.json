{"title":"鱼眼相机外参标定","slug":"鱼眼相机外参标定","date":"2023-05-29T19:20:00.000Z","updated":"2023-11-24T15:15:00.986Z","comments":true,"path":"api/articles/鱼眼相机外参标定.json","excerpt":null,"covers":null,"content":"<h1 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h1><p>待整理</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/603296375\">AVM环视系统——鱼眼相机去畸变算法</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 外参求解</span></span><br><span class=\"line\">std::vector&lt;cv::Point3f&gt; object_points;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(cv::<span class=\"built_in\">solvePnP</span>(object_points, image_points_undist_new, cam_K[cam_index], cv::<span class=\"built_in\">noArray</span>(), cam_R[cam_index], cam_T[cam_index],</span><br><span class=\"line\">                   <span class=\"literal\">false</span>, cv::SOLVEPNP_ITERATIVE)))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR: solvePnP cam_index[%d]\\n&quot;</span>, cam_index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">float</span> projection_error = <span class=\"built_in\">ComputeProjectionError</span>(object_points, image_points_undist_new, cam_K[cam_index], cam_R[cam_index], cam_T[cam_index]);</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;projection_error1: &quot;</span> &lt;&lt; projection_error &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"comment\">// 定义迭代终止条件：最大迭代次数为 100，收敛阈值为 0.001</span></span><br><span class=\"line\"><span class=\"function\">cv::TermCriteria <span class=\"title\">termCrit</span><span class=\"params\">(cv::TermCriteria::MAX_ITER | cv::TermCriteria::EPS, <span class=\"number\">200</span>, <span class=\"number\">0.001</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用 L-M（Levenberg-Marquardt） 算法进行迭代优化，不断减小重投影误差</span></span><br><span class=\"line\">cv::Mat RR = cam_R[cam_index].<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">cv::Mat TT = cam_R[cam_index].<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">cv::<span class=\"built_in\">solvePnPRefineLM</span>(object_points, image_points_undist_new, cam_K[cam_index], cv::<span class=\"built_in\">noArray</span>(), RR, TT, termCrit);</span><br><span class=\"line\"><span class=\"comment\">// 使用虚拟视觉伺服 (Virtual Visual Servoing)方法进行迭代优化，不断减小重投影误差</span></span><br><span class=\"line\"><span class=\"comment\">// cv::solvePnPRefineVVS(object_points, image_points_undist_new, cam_K[cam_index], cv::noArray(), RR, TT, termCrit);</span></span><br><span class=\"line\">cam_R[cam_index] = RR.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">cam_R[cam_index] = TT.<span class=\"built_in\">clone</span>();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 输入畸变图，输出去畸变图</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;Mat&#125; &amp;img_dist</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;Mat&#125; &amp;img_undist</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> TAvmCal::DistToUndistImage(cv::Mat img_dist, cv::Mat &amp;img_undist, <span class=\"keyword\">int</span> cam_index)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">// 新的相机内参矩阵和图像尺寸（可选）</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> scale = <span class=\"number\">2.5</span>;</span><br><span class=\"line\">    cv::Mat new_cam_K = cam_K[cam_index].clone();</span><br><span class=\"line\">    new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>) = new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>);     <span class=\"comment\">// fx</span></span><br><span class=\"line\">    new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">1</span>) = new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>);     <span class=\"comment\">// fy</span></span><br><span class=\"line\">    new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">2</span>) = new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>) * <span class=\"number\">5</span>; <span class=\"comment\">// cx</span></span><br><span class=\"line\">    new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>) = new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>) * <span class=\"number\">2</span>; <span class=\"comment\">// cy</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Size new_size = cv::Size(img_dist.size().width * scale, img_dist.size().height * scale);</span><br><span class=\"line\">    cv::fisheye::undistortImage(img_dist, img_undist, cam_K[cam_index], cam_D[cam_index], new_cam_K, new_size);</span><br><span class=\"line\">    cv::resize(img_undist, img_undist, img_dist.size());</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\">    cv::Mat mapx;</span><br><span class=\"line\">    cv::Mat mapy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算矫正图</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> point_u_tmp[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">float</span> point_d_tmp[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">float</span> scale = <span class=\"number\">2.5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset_x = <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset_y = <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w = img_dist.cols * scale;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = img_dist.rows * scale;</span><br><span class=\"line\">    mapx.create(h, w, CV_32FC1);</span><br><span class=\"line\">    mapy.create(h, w, CV_32FC1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> col = <span class=\"number\">0</span>; col &lt; w; col += <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> row = <span class=\"number\">0</span>; row &lt; h; row += <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 归一化</span></span><br><span class=\"line\">            std::vector&lt;cv::Point2d&gt; unDist_points(<span class=\"number\">1</span>);</span><br><span class=\"line\">            std::vector&lt;cv::Point2d&gt; dist_points(<span class=\"number\">1</span>);</span><br><span class=\"line\">            point_u_tmp[<span class=\"number\">0</span>] = col - offset_x;</span><br><span class=\"line\">            point_u_tmp[<span class=\"number\">1</span>] = row - offset_y;</span><br><span class=\"line\">            unDist_points[<span class=\"number\">0</span>].x = (point_u_tmp[<span class=\"number\">0</span>] - cam_K[cam_index].at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">2</span>)) / cam_K[cam_index].at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            unDist_points[<span class=\"number\">0</span>].y = (point_u_tmp[<span class=\"number\">1</span>] - cam_K[cam_index].at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>)) / cam_K[cam_index].at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            cv::fisheye::distortPoints(unDist_points, dist_points, cam_K[cam_index], cam_D[cam_index]);</span><br><span class=\"line\"></span><br><span class=\"line\">            mapx.at&lt;<span class=\"keyword\">float</span>&gt;(row, col) = dist_points[<span class=\"number\">0</span>].x;</span><br><span class=\"line\">            mapy.at&lt;<span class=\"keyword\">float</span>&gt;(row, col) = dist_points[<span class=\"number\">0</span>].y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::remap(img_dist, img_undist, mapx, mapy, cv::INTER_LINEAR);</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::resize(img_undist, img_undist, img_dist.size());</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">if</span>  SHOW_DETECT_PROCESS</span><br><span class=\"line\">    cv::imshow(<span class=\"string\">&quot;image_remap_fish&quot;</span>, img_undist);</span><br><span class=\"line\">    cv::waitKey(<span class=\"number\">0</span>);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 计算重投影误差(使用均方误差，RMS)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> TAvmCal::ComputeProjectionError(<span class=\"keyword\">const</span> std::vector&lt;cv::Point3f&gt; &amp;objectPoints,</span><br><span class=\"line\">                                      <span class=\"keyword\">const</span> std::vector&lt;cv::Point2f&gt; &amp;imagePoints,</span><br><span class=\"line\">                                      <span class=\"keyword\">const</span> cv::Mat &amp;cameraMatrix,</span><br><span class=\"line\">                                      <span class=\"keyword\">const</span> cv::Mat &amp;rvec,</span><br><span class=\"line\">                                      <span class=\"keyword\">const</span> cv::Mat &amp;tvec)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用估计的相机位姿将世界坐标系中的三维点投影到图像平面上</span></span><br><span class=\"line\">    std::vector&lt;cv::Point2f&gt; projectedPoints;</span><br><span class=\"line\">    cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, cv::noArray(), projectedPoints);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算重投影误差</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> RMS_Error = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (size_t i = <span class=\"number\">0</span>; i &lt; imagePoints.size(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> dx = projectedPoints[i].x - imagePoints[i].x;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> dy = projectedPoints[i].y - imagePoints[i].y;</span><br><span class=\"line\">        RMS_Error += (dx * dx + dy * dy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RMS_Error /= (<span class=\"keyword\">float</span>)imagePoints.size();</span><br><span class=\"line\">    RMS_Error = std::sqrt(RMS_Error);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回总的重投影误差</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> RMS_Error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","more":"<h1 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h1><p>待整理</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/603296375\">AVM环视系统——鱼眼相机去畸变算法</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 外参求解</span></span><br><span class=\"line\">std::vector&lt;cv::Point3f&gt; object_points;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(cv::<span class=\"built_in\">solvePnP</span>(object_points, image_points_undist_new, cam_K[cam_index], cv::<span class=\"built_in\">noArray</span>(), cam_R[cam_index], cam_T[cam_index],</span><br><span class=\"line\">                   <span class=\"literal\">false</span>, cv::SOLVEPNP_ITERATIVE)))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR: solvePnP cam_index[%d]\\n&quot;</span>, cam_index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">float</span> projection_error = <span class=\"built_in\">ComputeProjectionError</span>(object_points, image_points_undist_new, cam_K[cam_index], cam_R[cam_index], cam_T[cam_index]);</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;projection_error1: &quot;</span> &lt;&lt; projection_error &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"comment\">// 定义迭代终止条件：最大迭代次数为 100，收敛阈值为 0.001</span></span><br><span class=\"line\"><span class=\"function\">cv::TermCriteria <span class=\"title\">termCrit</span><span class=\"params\">(cv::TermCriteria::MAX_ITER | cv::TermCriteria::EPS, <span class=\"number\">200</span>, <span class=\"number\">0.001</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用 L-M（Levenberg-Marquardt） 算法进行迭代优化，不断减小重投影误差</span></span><br><span class=\"line\">cv::Mat RR = cam_R[cam_index].<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">cv::Mat TT = cam_R[cam_index].<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">cv::<span class=\"built_in\">solvePnPRefineLM</span>(object_points, image_points_undist_new, cam_K[cam_index], cv::<span class=\"built_in\">noArray</span>(), RR, TT, termCrit);</span><br><span class=\"line\"><span class=\"comment\">// 使用虚拟视觉伺服 (Virtual Visual Servoing)方法进行迭代优化，不断减小重投影误差</span></span><br><span class=\"line\"><span class=\"comment\">// cv::solvePnPRefineVVS(object_points, image_points_undist_new, cam_K[cam_index], cv::noArray(), RR, TT, termCrit);</span></span><br><span class=\"line\">cam_R[cam_index] = RR.<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">cam_R[cam_index] = TT.<span class=\"built_in\">clone</span>();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 输入畸变图，输出去畸变图</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;Mat&#125; &amp;img_dist</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;Mat&#125; &amp;img_undist</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> TAvmCal::DistToUndistImage(cv::Mat img_dist, cv::Mat &amp;img_undist, <span class=\"keyword\">int</span> cam_index)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">// 新的相机内参矩阵和图像尺寸（可选）</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> scale = <span class=\"number\">2.5</span>;</span><br><span class=\"line\">    cv::Mat new_cam_K = cam_K[cam_index].clone();</span><br><span class=\"line\">    new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>) = new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>);     <span class=\"comment\">// fx</span></span><br><span class=\"line\">    new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">1</span>) = new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>);     <span class=\"comment\">// fy</span></span><br><span class=\"line\">    new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">2</span>) = new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>) * <span class=\"number\">5</span>; <span class=\"comment\">// cx</span></span><br><span class=\"line\">    new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>) = new_cam_K.at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>) * <span class=\"number\">2</span>; <span class=\"comment\">// cy</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cv::Size new_size = cv::Size(img_dist.size().width * scale, img_dist.size().height * scale);</span><br><span class=\"line\">    cv::fisheye::undistortImage(img_dist, img_undist, cam_K[cam_index], cam_D[cam_index], new_cam_K, new_size);</span><br><span class=\"line\">    cv::resize(img_undist, img_undist, img_dist.size());</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\">    cv::Mat mapx;</span><br><span class=\"line\">    cv::Mat mapy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算矫正图</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> point_u_tmp[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">float</span> point_d_tmp[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">float</span> scale = <span class=\"number\">2.5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset_x = <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset_y = <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w = img_dist.cols * scale;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = img_dist.rows * scale;</span><br><span class=\"line\">    mapx.create(h, w, CV_32FC1);</span><br><span class=\"line\">    mapy.create(h, w, CV_32FC1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> col = <span class=\"number\">0</span>; col &lt; w; col += <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> row = <span class=\"number\">0</span>; row &lt; h; row += <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 归一化</span></span><br><span class=\"line\">            std::vector&lt;cv::Point2d&gt; unDist_points(<span class=\"number\">1</span>);</span><br><span class=\"line\">            std::vector&lt;cv::Point2d&gt; dist_points(<span class=\"number\">1</span>);</span><br><span class=\"line\">            point_u_tmp[<span class=\"number\">0</span>] = col - offset_x;</span><br><span class=\"line\">            point_u_tmp[<span class=\"number\">1</span>] = row - offset_y;</span><br><span class=\"line\">            unDist_points[<span class=\"number\">0</span>].x = (point_u_tmp[<span class=\"number\">0</span>] - cam_K[cam_index].at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">2</span>)) / cam_K[cam_index].at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            unDist_points[<span class=\"number\">0</span>].y = (point_u_tmp[<span class=\"number\">1</span>] - cam_K[cam_index].at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>)) / cam_K[cam_index].at&lt;<span class=\"keyword\">float</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            cv::fisheye::distortPoints(unDist_points, dist_points, cam_K[cam_index], cam_D[cam_index]);</span><br><span class=\"line\"></span><br><span class=\"line\">            mapx.at&lt;<span class=\"keyword\">float</span>&gt;(row, col) = dist_points[<span class=\"number\">0</span>].x;</span><br><span class=\"line\">            mapy.at&lt;<span class=\"keyword\">float</span>&gt;(row, col) = dist_points[<span class=\"number\">0</span>].y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::remap(img_dist, img_undist, mapx, mapy, cv::INTER_LINEAR);</span><br><span class=\"line\"></span><br><span class=\"line\">    cv::resize(img_undist, img_undist, img_dist.size());</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">if</span>  SHOW_DETECT_PROCESS</span><br><span class=\"line\">    cv::imshow(<span class=\"string\">&quot;image_remap_fish&quot;</span>, img_undist);</span><br><span class=\"line\">    cv::waitKey(<span class=\"number\">0</span>);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 计算重投影误差(使用均方误差，RMS)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: wangshuaiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> TAvmCal::ComputeProjectionError(<span class=\"keyword\">const</span> std::vector&lt;cv::Point3f&gt; &amp;objectPoints,</span><br><span class=\"line\">                                      <span class=\"keyword\">const</span> std::vector&lt;cv::Point2f&gt; &amp;imagePoints,</span><br><span class=\"line\">                                      <span class=\"keyword\">const</span> cv::Mat &amp;cameraMatrix,</span><br><span class=\"line\">                                      <span class=\"keyword\">const</span> cv::Mat &amp;rvec,</span><br><span class=\"line\">                                      <span class=\"keyword\">const</span> cv::Mat &amp;tvec)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用估计的相机位姿将世界坐标系中的三维点投影到图像平面上</span></span><br><span class=\"line\">    std::vector&lt;cv::Point2f&gt; projectedPoints;</span><br><span class=\"line\">    cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, cv::noArray(), projectedPoints);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算重投影误差</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> RMS_Error = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (size_t i = <span class=\"number\">0</span>; i &lt; imagePoints.size(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> dx = projectedPoints[i].x - imagePoints[i].x;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> dy = projectedPoints[i].y - imagePoints[i].y;</span><br><span class=\"line\">        RMS_Error += (dx * dx + dy * dy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RMS_Error /= (<span class=\"keyword\">float</span>)imagePoints.size();</span><br><span class=\"line\">    RMS_Error = std::sqrt(RMS_Error);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回总的重投影误差</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> RMS_Error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"鱼眼相机","path":"api/categories/鱼眼相机.json"}],"tags":[{"name":"C++","path":"api/tags/C++.json"},{"name":"鱼眼相机外参标定","path":"api/tags/鱼眼相机外参标定.json"}]}