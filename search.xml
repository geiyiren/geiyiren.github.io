<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>malloc申请内存访问时容易出现的访问越界问题</title>
      <link href="/2022/12/15/malloc-shen-qing-nei-cun-fang-wen-shi-rong-yi-chu-xian-de-fang-wen-yue-jie-wen-ti/"/>
      <url>/2022/12/15/malloc-shen-qing-nei-cun-fang-wen-shi-rong-yi-chu-xian-de-fang-wen-yue-jie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="malloc相关"><a href="#malloc相关" class="headerlink" title="malloc相关"></a>malloc相关</h1><h2 id="malloc申请内存访问bug"><a href="#malloc申请内存访问bug" class="headerlink" title="malloc申请内存访问bug"></a>malloc申请内存访问bug</h2><ul><li>在访问malloc申请的内存时，如果访问越界时不会提示错误，而是继续操作错误的内存块，这一类的错误较为隐秘。</li><li>例如：在构建图像变换的map映射表时，申请存放map映射关系的内存块的大小并不是输出图像对应的大小，而是输出图像大小的2倍，因此此时存储的是像素位置(x,y)的映射关系。  <pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;构建4路YUV鱼眼图像去畸变映射关系void dist2undist()&#123;    float point_u_tmp[2], point_d_tmp[2];    float sf &#x3D; 1.5;    int img_out_height &#x3D; 720 * img_out_h_scale;    int img_out_width &#x3D; 1280 * img_out_w_scale;    LOGI(1, &quot;dist2undist begin !,img_out size(%d,%d)&quot;, img_out_height, img_out_width);    for (int index &#x3D; 0; index &lt; NUM_CAMERAS; index++)    &#123;        &#x2F;&#x2F; 这里就是bug所在        undist_map[index] &#x3D; (float *)malloc(undistView_width * undistView_height * 3 &#x2F; 2 * 2 * sizeof(float));        if (undist_map[index] &#x3D;&#x3D; NULL)        &#123;            LOGI(1, &quot;undist_map malloc failed!&quot;);        &#125;        for (int i &#x3D; 0; i &lt; img_out_height; i +&#x3D; 1)        &#123;            for (int j &#x3D; 0; j &lt; img_out_width; j +&#x3D; 1)            &#123;                point_u_tmp[0] &#x3D; j &#x2F; img_out_w_scale;                point_u_tmp[1] &#x3D; i &#x2F; img_out_h_scale;                LDC_UndistToDistExt(&amp;ldc[0], point_u_tmp, point_d_tmp, sf);                undist_map[index][(i * img_out_width + j) * 2] &#x3D; point_d_tmp[0] * img_in_w_scale;                undist_map[index][(i * img_out_width + j) * 2 + 1] &#x3D; point_d_tmp[1] * img_in_h_scale;                if (!int(j % 2))                &#123;                    undist_map[index][(i &#x2F; 2 * img_out_width + j + img_out_width * img_out_height) * 2] &#x3D; int(point_d_tmp[0] * img_in_w_scale &#x2F; 2) * 2;                    undist_map[index][(i &#x2F; 2 * img_out_width + j + img_out_width * img_out_height) * 2 + 1] &#x3D; int(point_d_tmp[1] * img_in_h_scale &#x2F; 2) + 720 * img_in_h_scale;                    undist_map[index][(i &#x2F; 2 * img_out_width + j + img_out_width * img_out_height + 1) * 2] &#x3D; int(point_d_tmp[0] * img_in_w_scale &#x2F; 2) * 2 + 1;                    undist_map[index][(i &#x2F; 2 * img_out_width + j + img_out_width * img_out_height + 1) * 2 + 1] &#x3D; int(point_d_tmp[1] * img_in_h_scale &#x2F; 2) + 720 * img_in_h_scale;                &#125;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>如果 #18 行中申请内存为:<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">undist_map[index] &#x3D; (float *)malloc(undistView_width * undistView_height * 3 &#x2F; 2 * sizeof(float));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>那么，后面构建map映射关系时并不会出现越界访问提示，甚至后面如果不再申请内存块的情况下，继续越界访问undist_map中的内容也不会报错；但是，如果后面继续申请内存块来使用的时候，后续的内存块可能就会和undist_map内存冲突。</li></ul><hr><p><font color=Red><strong>总结</strong></font><br>使用malloc申请内存并访问时，注意访问是否越界，且访问越界不报错。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> malloc </tag>
            
            <tag> 内存访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/12/han-shu-can-shu-chuan-di-zhi-yin-yong-yu-zhi-zhen/readme/"/>
      <url>/2022/12/12/han-shu-can-shu-chuan-di-zhi-yin-yong-yu-zhi-zhen/readme/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2022/12/12/linux-chang-yong-ming-ling/"/>
      <url>/2022/12/12/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> 位置 <span class="token parameter variable">-name</span> <span class="token string">'名称'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="aiApp执行命令"><a href="#aiApp执行命令" class="headerlink" title="aiApp执行命令"></a>aiApp执行命令</h1><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-F</span> /mnt/data/log/ylog <span class="token operator">|</span> <span class="token function">grep</span> aiApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/data/hq/bin/hqsetprop ctl.start aiApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/data/hq/bin/hqsetprop ctl.stop aiApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/data/hq/bin/hqsetprop ctl.restart aiApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查看与转换YUV图像："><a href="#查看与转换YUV图像：" class="headerlink" title="查看与转换YUV图像："></a>查看与转换YUV图像：</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffplay <span class="token parameter variable">-pixel_format</span> nv12 <span class="token parameter variable">-f</span> rawvideo <span class="token parameter variable">-video_size</span> 240x576 stitch_view.yuvffmpeg <span class="token parameter variable">-pix_fmt</span> nv12 <span class="token parameter variable">-video_size</span> 1280x720 <span class="token parameter variable">-i</span> src_1.yuv <span class="token parameter variable">-y</span> src_1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="ubuntu终端查看历史命令"><a href="#ubuntu终端查看历史命令" class="headerlink" title="ubuntu终端查看历史命令"></a>ubuntu终端查看历史命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> some_command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查看cup限制"><a href="#查看cup限制" class="headerlink" title="查看cup限制"></a>查看cup限制</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> limit <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="1126关闭DNS验证"><a href="#1126关闭DNS验证" class="headerlink" title="1126关闭DNS验证"></a>1126关闭DNS验证</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/nsswitch.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注释 dns选项，如下所示：<blockquote><p>hosts:          files #dns<br>networks:       files #dns</p></blockquote></li></ul><h1 id="强制关闭窗口"><a href="#强制关闭窗口" class="headerlink" title="强制关闭窗口"></a>强制关闭窗口</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xkill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>然后移动鼠标点击需要关闭的窗口即可</li></ul><h1 id="修改aiapp的cpu限制"><a href="#修改aiapp的cpu限制" class="headerlink" title="修改aiapp的cpu限制"></a>修改aiapp的cpu限制</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /exapp/sh/run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改允许aiapp使用的cpu百分比 XX<blockquote><p>#……………aiApp…CPU………<br>&#x2F;data&#x2F;hq&#x2F;bin&#x2F;cpulimit -l XX -e aiApp &amp;</p></blockquote></li></ul><h1 id="本地gitlab库添加远程库信任"><a href="#本地gitlab库添加远程库信任" class="headerlink" title="本地gitlab库添加远程库信任"></a>本地gitlab库添加远程库信任</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--add</span> safe.directory /media/geiyiren/MyCode/AVM/avm_2d/master/avm_cpu_algo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="保存yuv-buf图像"><a href="#保存yuv-buf图像" class="headerlink" title="保存yuv buf图像"></a>保存yuv buf图像</h1><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">FILE *fp_dump &#x3D; fopen(&quot;bsd_1.yuv&quot;, &quot;wb+&quot;);if (fp_dump &#x3D;&#x3D; NULL)&#123;printf(&quot;fp_dump open fail\n&quot;);&#125;else&#123;printf(&quot;fp_dump cam  yuv open success\n&quot;);&#125;size_t bytes_write &#x3D; fwrite(p_yuv_buf[1], width * height * 3 &#x2F; 2 , 1, fp_dump);if (bytes_write &lt;&#x3D; 0)&#123;printf(&quot;write raw_stream fail !!!\n&quot;);&#125;fclose(fp_dump);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="批量将jpg转换为yuv"><a href="#批量将jpg转换为yuv" class="headerlink" title="批量将jpg转换为yuv"></a>批量将jpg转换为yuv</h1><pre><code>#! /bin/bashfiles=$(ls $folder)yuv=&quot;yuv&quot;for file in $filesdo  echo $&#123;file:0:13&#125;  file_name=$&#123;file:0:13&#125;  str=$file_name$yuv  ffmpeg -i $file -s 1280*720 -pix_fmt nv12 $strdone</code></pre><h1 id="abd-常用命令"><a href="#abd-常用命令" class="headerlink" title="abd 常用命令"></a>abd 常用命令</h1><h2 id="打开调试端口"><a href="#打开调试端口" class="headerlink" title="打开调试端口"></a>打开调试端口</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb tcpip <span class="token number">5555</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb connect <span class="token number">10.10</span>.200.140<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进入远程终端"><a href="#进入远程终端" class="headerlink" title="进入远程终端"></a>进入远程终端</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb kill-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb start-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重新挂载"><a href="#重新挂载" class="headerlink" title="重新挂载"></a>重新挂载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb remount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="安卓设备开启USB"><a href="#安卓设备开启USB" class="headerlink" title="安卓设备开启USB"></a>安卓设备开启USB</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setprop persist.otg.mode device<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程登录后使用上述命令</li></ul><h1 id="远程为安卓设备安装软件"><a href="#远程为安卓设备安装软件" class="headerlink" title="远程为安卓设备安装软件"></a>远程为安卓设备安装软件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb <span class="token function">install</span> Launcher3.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在本地执行上述命令</li></ul><h1 id="查看当前文件下所有文件大小"><a href="#查看当前文件下所有文件大小" class="headerlink" title="查看当前文件下所有文件大小"></a>查看当前文件下所有文件大小</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#以M为单位查看当前文件下所有文件的大小，包含隐藏文件</span><span class="token function">du</span> <span class="token parameter variable">-sm</span> .<span class="token punctuation">[</span><span class="token operator">!</span>.<span class="token punctuation">]</span>* * <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-hr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="查看磁盘剩余空间"><a href="#查看磁盘剩余空间" class="headerlink" title="查看磁盘剩余空间"></a>查看磁盘剩余空间</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-hl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="github访问加速"><a href="#github访问加速" class="headerlink" title="github访问加速"></a>github访问加速</h1><h2 id="查询IP"><a href="#查询IP" class="headerlink" title="查询IP"></a>查询IP</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github.global.ssl.fastly.net 网站IP</span><span class="token function">nslookup</span> github.global.ssl.fastly.net<span class="token comment">#github.com 网站IP</span><span class="token function">nslookup</span> github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更改host文件"><a href="#更改host文件" class="headerlink" title="更改host文件"></a>更改host文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将上述查询到的IP复制到对应位置</li></ul><h2 id="更新host文件"><a href="#更新host文件" class="headerlink" title="更新host文件"></a>更新host文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /etc/init.d/network-manager restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="BSD测试程序运行命令"><a href="#BSD测试程序运行命令" class="headerlink" title="BSD测试程序运行命令"></a>BSD测试程序运行命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#801-s(rv1126)测试BSD程序运行命令</span><span class="token builtin class-name">cd</span> /exapp/app./bsd_proc_test <span class="token parameter variable">-d</span> /dev/video0 <span class="token parameter variable">-w</span> <span class="token number">1280</span> <span class="token parameter variable">-h</span> <span class="token number">720</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="鸿鹄"><a href="#鸿鹄" class="headerlink" title="鸿鹄"></a>鸿鹄</h1><h2 id="鸿鹄设备常用命令"><a href="#鸿鹄设备常用命令" class="headerlink" title="鸿鹄设备常用命令"></a>鸿鹄设备常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#以root身份挂载</span>adb root <span class="token operator">&amp;&amp;</span> adb remount<span class="token comment">#推送apk</span><span class="token builtin class-name">cd</span> /media/geiyiren/MyCode/AVM/avm_gpu_algo/branch/MultiCameraDemo/avm_gpu_algo/app/build/outputs/apk/debugadb push MultiCameraDemo.apk /system/priv-app/MultiCameraDemo/<span class="token comment">#推送库文件</span><span class="token builtin class-name">cd</span> /media/geiyiren/MyCode/AVM/avm_gpu_algo/branch/AVM_BSD_honghu/avm_gpu_algo/libs/arm64-v8aadb push libavmjni.so /system/priv-app/MultiCameraDemo/lib/arm64/<span class="token comment">#查看log日志</span>adb shell logcat <span class="token operator">></span> log.txt<span class="token comment">#保存NATIVE_LOG日志(cpp端打印信息)</span>adb shell logcat <span class="token parameter variable">-s</span> NATIVE_LOG <span class="token operator">></span> log.txt<span class="token comment">#保存程序运行严重错误日志(一般程序异常退出时打印该log)</span>adb shell logcat *:F <span class="token operator">></span> log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="鸿鹄设备资源存储位置"><a href="#鸿鹄设备资源存储位置" class="headerlink" title="鸿鹄设备资源存储位置"></a>鸿鹄设备资源存储位置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">data└── gpu0------------    ├── calibrate    │   ├── **CALMAT.BIN**    │   └── **LENS.BIN**    └── shader        ├── **avm_3d_blend_lut.bin**        ├── **avm_3d_indices.bin**        ├── **avm_3d_lut.bin**        ├── car_model_line.fs        ├── car_model_line.vs        ├── car_model_test.fs        ├── car_model_test.vs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="鸿鹄Bug查询关键字"><a href="#鸿鹄Bug查询关键字" class="headerlink" title="鸿鹄Bug查询关键字"></a>鸿鹄Bug查询关键字</h2><table><thead><tr><th>关键字</th><th align="left">说明</th></tr></thead><tbody><tr><td>dlopen</td><td align="left">文件缺失标志</td></tr><tr><td>crash</td><td align="left">程序报错抛出异常标志</td></tr><tr><td>NATIVE_LOG</td><td align="left">AVM cpp端的打印</td></tr></tbody></table><h2 id="鸿鹄CPU占用与GPU占用查看"><a href="#鸿鹄CPU占用与GPU占用查看" class="headerlink" title="鸿鹄CPU占用与GPU占用查看"></a>鸿鹄CPU占用与GPU占用查看</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># adb登录后执行如下命令:</span><span class="token comment">## GPU</span><span class="token function">cat</span> /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage<span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token function">cat</span> /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage<span class="token comment">## CPU</span><span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更加详细的资源查看可参照：软件snapdragonprofiler_external_linux</p><p>Snapdragon Profiler是高通开发的用于调试分析高通Adreno GPU的一款桌面应用，支持Windows、MacOS 和 Linux 。在调试opengles应用程序上能发挥非常重要的作用。该工具能够捕捉CPU、GPU、DSP、内存、功率、网络连接和设备运行时的发热数据等，具有Realtime、Trace Capture、Snapshot Capture 三种模式。实时(Realtime)模式用于实时跟踪数据，跟踪(Trace Capture)模式用于跟踪事件和数据，默认最大值是10秒。快照(Snapshot Capture)模式用于捕获OpenGL ES应用程序的当前帧并可以进行调试，包括单步调试绘制指令，查看和编辑着色器、程序、纹理以及查看像素历史的能力。着色器代码是通过反编译得到，得到的代码跟原glsl代码基本一致，并且可以在截图后修改glsl进行调试。</p><p>作者：cain_huang<br>链接：<a href="https://www.jianshu.com/p/d8d1a231dada">https://www.jianshu.com/p/d8d1a231dada</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="ssh相关"><a href="#ssh相关" class="headerlink" title="ssh相关"></a>ssh相关</h1><h2 id="主机A免密登录主机B"><a href="#主机A免密登录主机B" class="headerlink" title="主机A免密登录主机B"></a>主机A免密登录主机B</h2><p>在主机A执行如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id 主机B的用户名@主机B的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="NEON优化相关函数"><a href="#NEON优化相关函数" class="headerlink" title="NEON优化相关函数"></a>NEON优化相关函数</h1><h2 id="internal-prefetch"><a href="#internal-prefetch" class="headerlink" title="internal::prefetch()"></a>internal::prefetch()</h2><p>作用：将数据放在缓存中</p><h2 id="vld1q"><a href="#vld1q" class="headerlink" title="vld1q()"></a>vld1q()</h2><p>作用：加载数据</p><p>例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">float32x4_t q0 &#x3D; vld1q_f32(d0); &#x2F;&#x2F; 加载 d0 地址起始的 4 个 float 数据到 q0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="internal-getRowPtr"><a href="#internal-getRowPtr" class="headerlink" title="internal::getRowPtr()"></a>internal::getRowPtr()</h2><p>例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">internal::getRowPtr(src0Base, src0Stride, y);  &#x2F;&#x2F;返回src0Base+src0Stride*y的地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++变量命名常用缩写表</title>
      <link href="/2022/12/12/c-bian-liang-ming-ming-chang-yong-suo-xie-biao/"/>
      <url>/2022/12/12/c-bian-liang-ming-ming-chang-yong-suo-xie-biao/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">全 称</th><th align="center">缩 写</th></tr></thead><tbody><tr><td align="center">Address</td><td align="center">addr</td></tr><tr><td align="center">Administrator</td><td align="center">adm</td></tr><tr><td align="center">average</td><td align="center">avg</td></tr><tr><td align="center">Application</td><td align="center">app</td></tr><tr><td align="center">Argument</td><td align="center">arg</td></tr><tr><td align="center">Database</td><td align="center">DB</td></tr><tr><td align="center">assemble</td><td align="center">asm</td></tr><tr><td align="center">Bitmap</td><td align="center">bmp</td></tr><tr><td align="center">back</td><td align="center">bk</td></tr><tr><td align="center">asynchronization</td><td align="center">asyn</td></tr><tr><td align="center">Button</td><td align="center">btn</td></tr><tr><td align="center">Buffer</td><td align="center">buf</td></tr><tr><td align="center">Calculate</td><td align="center">calc</td></tr><tr><td align="center">Character</td><td align="center">char</td></tr><tr><td align="center">Change</td><td align="center">chg</td></tr><tr><td align="center">Click</td><td align="center">clk</td></tr><tr><td align="center">color</td><td align="center">clr</td></tr><tr><td align="center">Command</td><td align="center">cmd</td></tr><tr><td align="center">Compare</td><td align="center">cmp</td></tr><tr><td align="center">Column</td><td align="center">col</td></tr><tr><td align="center">coordinates</td><td align="center">coord</td></tr><tr><td align="center">copy</td><td align="center">cpy</td></tr><tr><td align="center">Control</td><td align="center">ctl &#x2F; ctrl</td></tr><tr><td align="center">Current</td><td align="center">cur</td></tr><tr><td align="center">Cylinder</td><td align="center">cyl</td></tr><tr><td align="center">Debug</td><td align="center">dbg</td></tr><tr><td align="center">Double</td><td align="center">dbl</td></tr><tr><td align="center">Decrease</td><td align="center">dec</td></tr><tr><td align="center">default</td><td align="center">def</td></tr><tr><td align="center">Delete</td><td align="center">del</td></tr><tr><td align="center">Destination</td><td align="center">dest &#x2F; dst</td></tr><tr><td align="center">Device</td><td align="center">dev</td></tr><tr><td align="center">dictionary</td><td align="center">dict</td></tr><tr><td align="center">different</td><td align="center">diff</td></tr><tr><td align="center">directory</td><td align="center">dir</td></tr><tr><td align="center">Display</td><td align="center">disp</td></tr><tr><td align="center">Divide</td><td align="center">div</td></tr><tr><td align="center">Dialog</td><td align="center">dlg</td></tr><tr><td align="center">Document</td><td align="center">doc</td></tr><tr><td align="center">Driver</td><td align="center">drv</td></tr><tr><td align="center">Dynamic</td><td align="center">dyna</td></tr><tr><td align="center">Environment</td><td align="center">env</td></tr><tr><td align="center">error</td><td align="center">err</td></tr><tr><td align="center">Extend</td><td align="center">ex&#x2F;ext</td></tr><tr><td align="center">execute</td><td align="center">exec</td></tr><tr><td align="center">flag</td><td align="center">flg</td></tr><tr><td align="center">Frame</td><td align="center">frm</td></tr><tr><td align="center">Function</td><td align="center">func &#x2F; fn</td></tr><tr><td align="center">group</td><td align="center">grp</td></tr><tr><td align="center">Horizontal</td><td align="center">horz</td></tr><tr><td align="center">Index</td><td align="center">idx &#x2F; ndx</td></tr><tr><td align="center">Image</td><td align="center">img</td></tr><tr><td align="center">Implement</td><td align="center">Impl</td></tr><tr><td align="center">Increase</td><td align="center">inc</td></tr><tr><td align="center">Information</td><td align="center">info</td></tr><tr><td align="center">Initial&#x2F;Initialize&#x2F;Initialization</td><td align="center">init</td></tr><tr><td align="center">Insert</td><td align="center">ins</td></tr><tr><td align="center">Instance</td><td align="center">inst</td></tr><tr><td align="center">Interrupt</td><td align="center">INT &#x2F; intr</td></tr><tr><td align="center">Length</td><td align="center">len</td></tr><tr><td align="center">Library</td><td align="center">lib</td></tr><tr><td align="center">Link</td><td align="center">lnk</td></tr><tr><td align="center">logical</td><td align="center">log</td></tr><tr><td align="center">List</td><td align="center">lst</td></tr><tr><td align="center">maximum</td><td align="center">max</td></tr><tr><td align="center">Memory</td><td align="center">mem</td></tr><tr><td align="center">Manage &#x2F; Manager</td><td align="center">mgr &#x2F; man</td></tr><tr><td align="center">middle</td><td align="center">mid</td></tr><tr><td align="center">minimum</td><td align="center">min</td></tr><tr><td align="center">Message</td><td align="center">msg</td></tr><tr><td align="center">Multiply</td><td align="center">mul</td></tr><tr><td align="center">Number</td><td align="center">num</td></tr><tr><td align="center">Object</td><td align="center">obj</td></tr><tr><td align="center">Offset</td><td align="center">ofs</td></tr><tr><td align="center">Origin &#x2F; Original</td><td align="center">org</td></tr><tr><td align="center">Parameter</td><td align="center">param</td></tr><tr><td align="center">picture</td><td align="center">pic</td></tr><tr><td align="center">package</td><td align="center">pkg</td></tr><tr><td align="center">Point</td><td align="center">pnt &#x2F; pt</td></tr><tr><td align="center">Position</td><td align="center">pos</td></tr><tr><td align="center">previous</td><td align="center">pre &#x2F; prev</td></tr><tr><td align="center">program</td><td align="center">prg</td></tr><tr><td align="center">Print</td><td align="center">prn</td></tr><tr><td align="center">Process &#x2F; Procedure</td><td align="center">proc</td></tr><tr><td align="center">Properties</td><td align="center">prop</td></tr><tr><td align="center">Password</td><td align="center">psw</td></tr><tr><td align="center">Pointer</td><td align="center">ptr</td></tr><tr><td align="center">Public</td><td align="center">pub</td></tr><tr><td align="center">rect</td><td align="center">rc</td></tr><tr><td align="center">Reference</td><td align="center">ref</td></tr><tr><td align="center">Register</td><td align="center">reg</td></tr><tr><td align="center">request</td><td align="center">req</td></tr><tr><td align="center">Resource</td><td align="center">res</td></tr><tr><td align="center">return</td><td align="center">ret</td></tr><tr><td align="center">region</td><td align="center">rgn</td></tr><tr><td align="center">screen</td><td align="center">scr</td></tr><tr><td align="center">Second</td><td align="center">sec</td></tr><tr><td align="center">Segment</td><td align="center">seg</td></tr><tr><td align="center">Select</td><td align="center">sel</td></tr><tr><td align="center">Source</td><td align="center">src</td></tr><tr><td align="center">Standard</td><td align="center">std</td></tr><tr><td align="center">Storage</td><td align="center">stg</td></tr><tr><td align="center">Stream</td><td align="center">stm</td></tr><tr><td align="center">String</td><td align="center">str</td></tr><tr><td align="center">Subtract</td><td align="center">sub</td></tr><tr><td align="center">summation</td><td align="center">sum</td></tr><tr><td align="center">Server</td><td align="center">svr</td></tr><tr><td align="center">Synchronization</td><td align="center">sync</td></tr><tr><td align="center">System</td><td align="center">sys</td></tr><tr><td align="center">Table</td><td align="center">tbl</td></tr><tr><td align="center">Temporary</td><td align="center">temp &#x2F; tmp</td></tr><tr><td align="center">translate&#x2F;transation&#x2F;transparent</td><td align="center">tran &#x2F; trans</td></tr><tr><td align="center">Test</td><td align="center">tst</td></tr><tr><td align="center">text</td><td align="center">txt</td></tr><tr><td align="center">Unknown</td><td align="center">unk</td></tr><tr><td align="center">Update</td><td align="center">upd</td></tr><tr><td align="center">Upgrade</td><td align="center">upg</td></tr><tr><td align="center">Utility</td><td align="center">util</td></tr><tr><td align="center">Variable</td><td align="center">var</td></tr><tr><td align="center">Version</td><td align="center">ver</td></tr><tr><td align="center">Vertical</td><td align="center">vert</td></tr><tr><td align="center">Virus</td><td align="center">vir</td></tr><tr><td align="center">Window</td><td align="center">wnd</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 变量命名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 16.04 LTS下安装docker并创建深度学习环境</title>
      <link href="/2022/11/23/ubuntu-16-04-lts-xia-an-zhuang-docker-bing-chuang-jian-shen-du-xue-xi-huan-jing/"/>
      <url>/2022/11/23/ubuntu-16-04-lts-xia-an-zhuang-docker-bing-chuang-jian-shen-du-xue-xi-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h2><p>ubuntu下安装docker的官方教程：<a href="https://docs.docker.com/engine/install/ubuntu/">点我查看</a></p><p>ubuntu下安装参考教程：<a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu">点我查看</a></p><h3 id="1-1卸载旧版本"><a href="#1-1卸载旧版本" class="headerlink" title="1.1卸载旧版本"></a>1.1卸载旧版本</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt-get remove docker docker-engine docker.io containerd runc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2使用apt安装"><a href="#1-2使用apt安装" class="headerlink" title="1.2使用apt安装"></a>1.2使用apt安装</h3><p>官网提供多种安装方式，这里使用apt安装</p><p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg \    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加docker密匙：</p><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg# 官方密匙curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们需要向 <code>sources.list</code> 中添加 Docker 软件源：</p><pre class="line-numbers language-none"><code class="language-none">echo \  &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \  $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null# 官方源echo \   &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \   $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上命令会添加稳定版本的 Docker APT 镜像源，如果需要测试版本的 Docker 请将 stable 改为 test。</p><p>安装docker:</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3配置阿里云镜像加速器"><a href="#1-3配置阿里云镜像加速器" class="headerlink" title="1.3配置阿里云镜像加速器"></a>1.3配置阿里云镜像加速器</h3><p>参考网址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">点我查看</a></p><p>需要个人注册阿里云账号并开启容器镜像服务，该服务免费。</p><p>然后查看镜像加速地址，例如我的镜像加速地址为：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：这里需要是自己的镜像加速器，否则没有权限访问。</p><p>执行如下命令配置docker：</p><pre class="line-numbers language-none"><code class="language-none"># 生成配置文件docker-machine ssh default# 设置加速器地址：# sed -i &quot;s|EXTRA_ARGS&#x3D;&#39;|EXTRA_ARGS&#x3D;&#39;--registry-mirror&#x3D;自己的镜像加速地址|g&quot; &#x2F;var&#x2F;lib&#x2F;boot2docker&#x2F;profilesed -i &quot;s|EXTRA_ARGS&#x3D;&#39;|EXTRA_ARGS&#x3D;&#39;--registry-mirror&#x3D;https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com|g&quot; &#x2F;var&#x2F;lib&#x2F;boot2docker&#x2F;profile# 退出dockerexit# 重启docker-machine restart default# 查看docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看docker信息后，可以发现 Registory mirrors 项的内容为刚刚设置的阿里云镜像地址。</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-安装-nvidia-docker"><a href="#2-安装-nvidia-docker" class="headerlink" title="2.安装 nvidia-docker"></a>2.安装 nvidia-docker</h2><p>docker 默认是不支持在容器内 GPU 加速的，NVIDIA 官方做了个工具箱来支持容器内 GPU 加速运算，这大大方便了深度学习开发者。</p><p>官方教程：<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installing-on-ubuntu-and-debian">点我查看</a></p><p>参考教程：<a href="https://blog.csdn.net/zhouchen1998/article/details/110679750">点我查看</a></p><p>依次执行如下命令即可：</p><pre class="line-numbers language-none"><code class="language-none">distribution&#x3D;$(. &#x2F;etc&#x2F;os-release;echo $ID$VERSION_ID) \   &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add - \   &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$distribution&#x2F;nvidia-docker.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.listcurl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-container-runtime&#x2F;experimental&#x2F;$distribution&#x2F;nvidia-container-runtime.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-container-runtime.listsudo apt-get updatesudo apt-get install -y nvidia-docker2sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-拉取cuda、cudnn的镜像"><a href="#3-拉取cuda、cudnn的镜像" class="headerlink" title="3.拉取cuda、cudnn的镜像"></a>3.拉取cuda、cudnn的镜像</h2><p>docker hub地址：<a href="https://hub.docker.com/r/nvidia/cuda">点我查看</a></p><p>官网给出多个版本可供拉取，这里使用cuda:10.0-cudnn7-devel-ubuntu16.04</p><pre class="line-numbers language-none"><code class="language-none">docker pull nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-新建容器"><a href="#4-新建容器" class="headerlink" title="4.新建容器"></a>4.新建容器</h2><p>容器与镜像的关系好比：镜像为C++中的类，而容器为镜像的实例话，这里基于拉去的cuda:10.0-cudnn7-devel-ubuntu16.04镜像创建一个新的容器并进入容器中：</p><pre class="line-numbers language-none"><code class="language-none">docker container run --name pytorch1.1-gpu -it --gpus all  nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：</p><ul><li>docker container run：容器启动命令，同时会新建一个容器，因此该命令是在新建容器时使用</li><li>–name ：后的参数为新建容器的名称</li><li>-it：其实是 -i -t 的缩写，该参数使得容器具备交互性并与终端进行连接，将shell切换至终端</li><li>–gpu all：表示允许容器使用宿主机的所有GPU</li><li>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：创建新的容器所基于的镜像名称</li><li>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</li></ul><p>以该命令创建并进入容器后，该容器就具有了nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04镜像的配置，相当于实现了“实例话”</p><p>退出该容器后，可以使用以下命令进行查看：</p><ul><li>查看正在运行的容器：</li></ul><pre class="line-numbers language-none"><code class="language-none">docker container ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看容器运行历史：</li></ul><pre class="line-numbers language-none"><code class="language-none">docker container ls -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以看到刚才运行的容器pytorch1.1-gpu的信息。</p><h3 id="4-1-重启容器"><a href="#4-1-重启容器" class="headerlink" title="4.1.重启容器"></a>4.1.重启容器</h3><p>docker container start + 容器名或容器ID，启动一个已经完成创建并停止运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container start pytorch1.1-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker container exec   命令用于进入正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container exec -it pytorch1.1-gpu &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2停止容器"><a href="#4-2停止容器" class="headerlink" title="4.2停止容器"></a>4.2停止容器</h3><p>docker container stop   用于停止正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container stop pytorch1.1-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3删除容器"><a href="#4-3删除容器" class="headerlink" title="4.3删除容器"></a>4.3删除容器</h3><pre class="line-numbers language-none"><code class="language-none">docker container rm  待删除的容器命令或ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：删除容器之前需要停止容器，避免报错。</p><h2 id="5-安装常用工具"><a href="#5-安装常用工具" class="headerlink" title="5.安装常用工具"></a>5.安装常用工具</h2><pre class="line-numbers language-none"><code class="language-none"># 安装gitapt-get install git -y# 安装vimapt install vim# 安装cmakeapt install cmake# 安装updatedbapt-get install mlocate# 安装wgetapt-get install wget# 安装curlapt-get install curl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-在容器中安装python"><a href="#6-在容器中安装python" class="headerlink" title="6.在容器中安装python"></a>6.在容器中安装python</h2><p>新建的容器默认没有python或pip、vim等工具，除非新建容器时将这些包一并装入，因此需要手动安装一些需要的包。新的容器中 apt-get 或 apt 命令是可以使用的：</p><p>参考网站：<a href="https://www.digitalocean.com/community/questions/unable-to-install-pyhton-3-7-version-on-ubuntu-16-04-error-couldn-t-find-any-package-by-regex-python3-7">点我查看</a></p><pre class="line-numbers language-none"><code class="language-none">#更新源apt update#安装python依赖apt install software-properties-common#添加源add-apt-repository ppa:deadsnakes&#x2F;ppa#更新源apt update#安装pythonapt install python3.7#查看python版本python --version 或 python -Vpython3 --version 或 python3 -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装完python3.7可能需要修改默认python指向才能正常使用python3.7：</p><p>参考网站：<a href="https://blog.csdn.net/qq_33188180/article/details/109723636">点我查看</a></p><p>查看默认python指向：</p><pre class="line-numbers language-none"><code class="language-none">ls -l &#x2F;usr&#x2F;bin | grep python <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除原有python软连接：</p><pre class="line-numbers language-none"><code class="language-none">rm &#x2F;usr&#x2F;bin&#x2F;python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立python到新的软链接python3.7：</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;usr&#x2F;bin&#x2F;python3.7  &#x2F;usr&#x2F;bin&#x2F;python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-在容器中安装pip"><a href="#7-在容器中安装pip" class="headerlink" title="7.在容器中安装pip"></a>7.在容器中安装pip</h2><p>这里也有个小坑！如果你写的是python3-pip 执行安装后，如果系统自带了python3.5，其实pip这时是装在了python3.5环境下了！！正确的指定方式，应该把小版本号也加上！</p><pre class="line-numbers language-none"><code class="language-none">apt-get install python3.7-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是执行上述命令可能会报错，如果报错需要安装下面的方法添加pip安装源：</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py -o get-pip.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于上面已经将python指向了python3，因此下面直接使用python安装即可，否者要使用python3安装：</p><pre class="line-numbers language-none"><code class="language-none">python get-pip.py --force-reinstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看pip位置：</p><pre class="line-numbers language-none"><code class="language-none">which pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在安装后显示安装在：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip</p><p>建立pip软链接：</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip &#x2F;usr&#x2F;bin&#x2F;pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：第一个地址  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip  为  which pip  的显示地址</p><p>查看pip版本：</p><pre class="line-numbers language-none"><code class="language-none">pip -V 或 pip --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我的显示位置为：pip 20.3.4 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages&#x2F;pip (python 3.7)</p><p>至此，python将指向python3.7，pip将指向python 3.7的pip 20.3.4，实现python和pip的版本对应，且目标容器内二者都是唯一存在，不需要再使用python3和pip3调用python3的对应版本，这样使用pip安装的包将默认存放在  &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages  中。</p><h2 id="8-安装PyTorch"><a href="#8-安装PyTorch" class="headerlink" title="8.安装PyTorch"></a>8.安装PyTorch</h2><p>最新版本安装方法：<a href="https://pytorch.org/get-started/locally/">点我查看</a></p><p>历史版本安装方法：<a href="https://pytorch.org/get-started/previous-versions/">点我查看</a></p><pre class="line-numbers language-none"><code class="language-none">pip install torch&#x3D;&#x3D;1.1.0 torchvision&#x3D;&#x3D;0.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-安装eigen3"><a href="#9-安装eigen3" class="headerlink" title="9.安装eigen3"></a>9.安装eigen3</h2><p>参考网址：<a href="https://blog.csdn.net/xiangxianghehe/article/details/81236299?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control">点我查看</a></p><h3 id="9-1安装依赖"><a href="#9-1安装依赖" class="headerlink" title="9.1安装依赖"></a>9.1安装依赖</h3><pre class="line-numbers language-none"><code class="language-none">apt-get install libopenblas-devapt-get install --no-install-recommends libboost1.58-all-devapt-get install libx11-devapt-get install libgl1-mesa-dev apt-get install libglu1-mesa-dev apt-get install freeglut3-devapt-get install doxygenwget https:&#x2F;&#x2F;nchc.dl.sourceforge.net&#x2F;project&#x2F;glew&#x2F;glew&#x2F;2.1.0&#x2F;glew-2.1.0.tgz --no-check-certificatetar -xzvf glew-2.1.0.tgzcd glew-2.1.0&#x2F;make make installldconfig -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2安装Eigen3-3-5"><a href="#9-2安装Eigen3-3-5" class="headerlink" title="9.2安装Eigen3.3.5"></a>9.2安装Eigen3.3.5</h3><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;eigenteam&#x2F;eigen-git-mirror&#x2F;archive&#x2F;3.3.5.tar.gztar -xzvf 3.3.5.tar.gz mv eigen-git-mirror-3.3.5&#x2F; eigen-3.3.5&#x2F;cd eigen-3.3.5&#x2F;mkdir buildcd buildcmake ..makemake install ldconfig -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3测试"><a href="#9-3测试" class="headerlink" title="9.3测试"></a>9.3测试</h3><p>在容器中创建测试文件夹：</p><pre class="line-numbers language-none"><code class="language-none">mkdir install_test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在宿主机上创建如下文件：</p><ul><li>CMakeLists.txt</li></ul><pre class="line-numbers language-none"><code class="language-none">cmake_minimum_required( VERSION 2.8 )project(useEigen)set( CMAKE_BUILD_TYPE &quot;Release&quot; )set( CMAKE_CXX_FLAGS &quot;-O3&quot; )set( CMAKE_CXX_FLAGS &quot;-std&#x3D;c++11&quot;)# 添加Eigen头文件include_directories( &quot;&#x2F;usr&#x2F;local&#x2F;include&#x2F;eigen3&quot; )add_executable(useEigen  main.cpp)find_package(Eigen3 REQUIRED)target_link_libraries($&#123;PROJECT_NAME&#125;  $&#123;EIGEN3_LIBS&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main.cpp</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;vector&gt;#include &lt;Eigen&#x2F;Core&gt;#include &lt;Eigen&#x2F;Dense&gt;#include &lt;Eigen&#x2F;Geometry&gt;#include &lt;Eigen&#x2F;StdVector&gt;using namespace std;int main()&#123;    &#x2F;&#x2F;1.rotation vector to  rotation matrix    Eigen::AngleAxisd rotationVector(M_PI&#x2F;4,Eigen::Vector3d(0,0,1));    Eigen::Matrix3d rotationMatrix&#x3D;Eigen::Matrix3d::Identity();    rotationMatrix&#x3D;rotationVector.toRotationMatrix();    cout&lt;&lt;&quot;rotationMatrix \n&quot;&lt;&lt;rotationMatrix&lt;&lt;endl;    &#x2F;&#x2F;2.rotation vector to quaterniond    Eigen::Quaterniond q&#x3D;Eigen::Quaterniond( rotationVector );    cout&lt;&lt;&quot;rotation quaternion \n&quot;&lt;&lt;q.coeffs()&lt;&lt;endl;    &#x2F;&#x2F;3.rotaion vector to eulerAngles    Eigen::Vector3d eulerAngle&#x3D;rotationVector.matrix().eulerAngles(0,1,2);    cout&lt;&lt;&quot;eulerAngle roll pitch yaw\n&quot;&lt;&lt;180*eulerAngle&#x2F;M_PI&lt;&lt;endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将宿主机上的两个文件拷贝至容器中的install_test里进行测试：</p><pre class="line-numbers language-none"><code class="language-none">docker cp CMakeLists.txt pytorch1.1-gpu:&#x2F;home&#x2F;eigen-3.3.5&#x2F;install_testdocker cp main.cpp  pytorch1.1-gpu:&#x2F;home&#x2F;eigen-3.3.5&#x2F;install_test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">cd install_testcmake  .make.&#x2F;useEigen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若显示结果如下，则说明测试成功。</p><pre class="line-numbers language-none"><code class="language-none">rotationMatrix  0.707107 -0.707107         0 0.707107  0.707107         0        0         0         1rotation quaternion        0       00.382683 0.92388eulerAngle roll pitch yaw-0 045<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-安装tensorflow"><a href="#10-安装tensorflow" class="headerlink" title="10.安装tensorflow"></a>10.安装tensorflow</h2><ul><li>tensorflow与cuda的版本对应关系</li></ul><p><img src="https://i.loli.net/2021/05/21/PEoKmlhbcXisCWt.png"></p><p>安装命令：</p><pre class="line-numbers language-none"><code class="language-none">pip install tensorflow-gpu&#x3D;&#x3D;2.0 -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple --trusted-host pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> anaconda </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16-04-LTS：anaconda3安装</title>
      <link href="/2022/11/23/ubuntu16-04-lts-anaconda3-an-zhuang/"/>
      <url>/2022/11/23/ubuntu16-04-lts-anaconda3-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载清华源镜像文件"><a href="#1-下载清华源镜像文件" class="headerlink" title="1. 下载清华源镜像文件"></a>1. 下载清华源镜像文件</h1><p>网址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><p>版本：建议安装Anaconda3-5.2.0-Linux-x86_64.sh</p><h1 id="2-进入下载目录执行以下命令进行安装"><a href="#2-进入下载目录执行以下命令进行安装" class="headerlink" title="2. 进入下载目录执行以下命令进行安装"></a>2. 进入下载目录执行以下命令进行安装</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bash Anaconda3-5.2.0-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/05/16/9curYTMUWmveogb.png"></p><ul><li>一路按回车至底部，出现提示：是否接受安装协议时：回复yes:</li></ul><p><img src="https://i.loli.net/2021/05/16/JU2iRojd3vH4fsY.png"></p><ul><li>默认的路径为&#x2F;home&#x2F;username&#x2F;anaconda3，默认的话直接按ENTER即可，等待安装过程完成即可。</li></ul><p><img src="https://i.loli.net/2021/05/16/iVDa14zUNREPYKs.png"></p><ul><li>询问是否将Anaconda3加入到环境变量中，选：yes</li></ul><p><img src="https://i.loli.net/2021/05/16/DBj5P8VMTzgYu2s.png"></p><ul><li>默认的话直接按ENTER即可，等待安装过程完成即可。</li></ul><h1 id="3-检查是否安装成功"><a href="#3-检查是否安装成功" class="headerlink" title="3.检查是否安装成功"></a>3.检查是否安装成功</h1><p>  使用以下命令可以查看已经存在的conda虚拟环境</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">conda env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  使用以下命令可以查看conda的路径是否添加成功</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sudo gedit ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  使其立即生效，在终端执行：</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <strong>4.进入任意一个创建的虚拟环境里面检查python</strong></p><p>  在虚拟环境中输入以下命令：</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  会出现类似以下含有anaconda的字样：</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56) [GCC 7.2.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  如果没有出现以下字样，说明系统的python版本需要指定，使用以下命令：</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sudo gedit ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  在bashrc中添加一行：</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">alias python&#x3D;python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  (注意这里的python3是和安装的anaconda3对应的默认pyrhon对应的，可以在conda虚拟环境中的base环境中查看对应的python版本)</p><p>  然后激活bashrc</p>  <pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  这样就可以使用conda创建的虚拟环境对应的python。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16-04手动安装英伟达显卡驱动</title>
      <link href="/2022/11/23/ubuntu16-04-shou-dong-an-zhuang-ying-wei-da-xian-qia-qu-dong/"/>
      <url>/2022/11/23/ubuntu16-04-shou-dong-an-zhuang-ying-wei-da-xian-qia-qu-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-屏蔽开源驱动"><a href="#1-屏蔽开源驱动" class="headerlink" title="1.屏蔽开源驱动"></a>1.屏蔽开源驱动</h2><p>屏蔽开源驱动nouveau安装过程会询问是否屏蔽，手动屏蔽也有多种操作方式，可以使用如下方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit /etc/modprobe.d/blacklist.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后添加内容到最底段，要回车另起一行。添加的内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blacklist nouveau options nouveau <span class="token assign-left variable">modeset</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存再终端更新内核命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-initramfs <span class="token parameter variable">-u</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会出现如下警告，忽略即可：</p><img src="https://i.loli.net/2021/06/22/lkPBpOvA3MIsfXq.png" style="zoom:50%;" /><h2 id="2-下载驱动"><a href="#2-下载驱动" class="headerlink" title="2.下载驱动"></a>2.下载驱动</h2><p>然后，重启电脑。下载NVIDIA的驱动形如：NVIDIA-Linux-x86_64-384.run 下载网址为：<a href="https://www.geforce.cn/drivers%E3%80%82">https://www.geforce.cn/drivers。</a></p><p>在win10下的设备管理器中可以查看显卡的型号。型号为：NVIDIA GeForce GTX 1050 Ti电脑类型为：笔记本</p><p>所以手动搜索驱动程序时，应该这样选择：</p><p><img src="https://i.loli.net/2021/06/22/S69TiRpgEc3ydPk.png"></p><p>选择第一个驱动版本一般可以安装成功的，但不同电脑可能结果不同，安装失败的话还需要更换版本尝试安装。</p><p>下好的”.run”文件放在home ，目录下，最好将文件名称该为简单点的。</p><h2 id="3-进入root的命令行模型"><a href="#3-进入root的命令行模型" class="headerlink" title="3.进入root的命令行模型"></a>3.进入root的命令行模型</h2><p>安装驱动重启电脑，进入ubuntu高级模式，然后选择下图中的 root 选项：</p><img src="https://i.loli.net/2021/06/22/rnKMFl81T4giEUf.png" style="zoom:50%;" /><p>然后按”回车”：</p><img src="https://i.loli.net/2021/06/22/I1ZeWDCaTcEx5X2.png" style="zoom:50%;" /><h2 id="4-安装驱动"><a href="#4-安装驱动" class="headerlink" title="4.安装驱动"></a>4.安装驱动</h2><p>然后，按”回车”，进入系统目录。安装驱动程序，执行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭当前图形环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> lightdm stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为之前的后缀为”.run”的驱动文件放在home目录下，所以， 到驱动所在文件夹后 执行如下命令修改权限并运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> a+x NVIDIA-Linux-x86_64-xxx.run <span class="token function">sudo</span> <span class="token function">sh</span> NVIDIA-Linux-x86_64-xxx.run -no-opengl-files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后剩余步骤均为默认即可，直接回车执行下一步。</p><ul><li>提示”dkms”安装时，需要安装。</li><li>会提示有”32”字样，选择”OK”继续即可。</li></ul><p>最后重新启动图形环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> lightdm start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-查看是否安装成功"><a href="#5-查看是否安装成功" class="headerlink" title="5.查看是否安装成功"></a>5.查看是否安装成功</h2><p>检查安装是否成功并重启电脑，正常进入系统。</p><p>如果出现循环输入登录密码但是无法登录成功的情况，则为驱动版本和自己的电脑不匹配，需要下载其他显卡驱动版本尝试。</p><p>进一步检查，打开终端输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现如下所示信息，即为安装成功:</p><img src="https://i.loli.net/2021/06/22/gZB9FKjSl2T8wGV.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 显卡驱动安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10与ubuntu16-04-LTS双系统安装教程</title>
      <link href="/2022/11/23/win10-yu-ubuntu16-04-lts-shuang-xi-tong-an-zhuang-jiao-cheng/"/>
      <url>/2022/11/23/win10-yu-ubuntu16-04-lts-shuang-xi-tong-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建空闲分区"><a href="#1-创建空闲分区" class="headerlink" title="1.创建空闲分区"></a>1.创建空闲分区</h2><p>在win系统下，在”此电脑”→右键”管理“→“磁盘管理”→右键一个不用的磁盘并”格式化“→”删除卷“，分出一个状态为“未分配”的磁盘用于安装ubuntu16.04 LTS</p><h2 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2.开始安装"></a>2.开始安装</h2><p>插入具有ubuntu16.04 LTS系统的U盘开始安装系统</p><ul><li>选择系统语言，可以是中文或英文。如需要安装tensflow的话建议安装英文版本</li><li>选择安装类型为其它选项</li></ul><img src="https://i.loli.net/2021/06/22/9FEvKkQmATYq7Ip.jpg" style="zoom: 67%;" /><h2 id="3-双击空闲盘进行分区"><a href="#3-双击空闲盘进行分区" class="headerlink" title="3.双击空闲盘进行分区"></a>3.双击空闲盘进行分区</h2><h3 id="3-1-x2F-boot分区"><a href="#3-1-x2F-boot分区" class="headerlink" title="3.1   &#x2F;boot分区"></a>3.1   &#x2F;boot分区</h3><p>&#x2F;boot：这个就是实现你双系统的原因了，这个就是用于启动 ubuntu 的目录，里面会有系统的引导，这个文件其实只有几十兆，但是我们建议将其划分为 200M 文件格式为 ext4，这个分区必不可少，否则后果你懂得！</p><h3 id="3-2-swap分区"><a href="#3-2-swap分区" class="headerlink" title="3.2   swap分区"></a>3.2   swap分区</h3><p>swap:这个是 Linux 也就是 ubuntu 的交换区目录，这个一般的大小为内存的 2 倍左右， 主要是用来在电脑内存不足的情况下，系统会调用这片区域，来运行程序，我们可以将其分为 4G， 这个把ext4换成交换空间，英文swap</p><h3 id="3-3-x2F-分区"><a href="#3-3-x2F-分区" class="headerlink" title="3.3    &#x2F;分区"></a>3.3    &#x2F;分区</h3><p>&#x2F;:这是 linux 也就是 ubuntu 的根目录就一个反斜杠表示，相当于windows的C盘， 我们将其分为 10G，文件格式为 ext4，条件允许可以大一点，可以20G，毕竟ubuntu装软件默认是装在这里的，大一点可能会省去后面隐藏的麻烦。</p><h3 id="3-4-x2F-home分区"><a href="#3-4-x2F-home分区" class="headerlink" title="3.4   &#x2F;home分区"></a>3.4   &#x2F;home分区</h3><p>&#x2F;home:这是 ubuntu 的“其他盘”， 这个也可以说是我们的个人目录，相当于windows的其他盘，所以为了让我们自己的目录大一点，剩下的全分给它，文件格式为 ext4</p><img src="https://i.loli.net/2021/06/22/IZixlEy6FC8vRKn.png" style="zoom: 67%;" /><p>以上两步新建分区后的类似效果：</p><img src="https://i.loli.net/2021/06/22/KxGUtJWhYPMRS3p.png" style="zoom:67%;" /><h2 id="4-选择安装启动引导的设备"><a href="#4-选择安装启动引导的设备" class="headerlink" title="4.选择安装启动引导的设备"></a>4.选择安装启动引导的设备</h2><p>安装启动引导的设备：windows boot manager</p><img src="https://i.loli.net/2021/06/22/v2JbClS7IwjU46a.png" style="zoom:50%;" /><h2 id="5-自动安装"><a href="#5-自动安装" class="headerlink" title="5.自动安装"></a>5.自动安装</h2><img src="https://i.loli.net/2021/06/22/oMECN25eyXsIAKS.jpg" style="zoom: 50%;" /><img src="https://i.loli.net/2021/06/22/T7CP1BcVWb9wxIR.jpg" style="zoom:50%;" /><p>安装完成后可能显示画面模糊，这是因为没有安装显卡驱动，可以按照教程”Ubuntu16.04手动安装英伟达显卡驱动”安装即可</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手眼标定-Ros-Kinetic-Realsense-D435-AUBOi5-Ubuntu-16-04</title>
      <link href="/2022/11/23/shou-yan-biao-ding-ros-kinetic-realsense-d435-auboi5-ubuntu-16-04/"/>
      <url>/2022/11/23/shou-yan-biao-ding-ros-kinetic-realsense-d435-auboi5-ubuntu-16-04/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装AUBOi5的Moveit功能包"><a href="#1-安装AUBOi5的Moveit功能包" class="headerlink" title="1.安装AUBOi5的Moveit功能包"></a>1.安装AUBOi5的Moveit功能包</h2><h3 id="1-1环境配置"><a href="#1-1环境配置" class="headerlink" title="1.1环境配置"></a>1.1环境配置</h3><p>下载Move-it package</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载moveit_visual_tools</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit-visual-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载industrial_core package</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-industrial-core<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2建立ROS工作空间"><a href="#1-2建立ROS工作空间" class="headerlink" title="1.2建立ROS工作空间"></a>1.2建立ROS工作空间</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /opt/ros/kinetic/setup.bash<span class="token comment"># catkin_ws为工作空间名称</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/catkin_ws/src<span class="token builtin class-name">cd</span> ~/catkin_ws/catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-在-x2F-catkin-ws-x2F-src-目录中下载Moveit功能包，并编译"><a href="#1-2-在-x2F-catkin-ws-x2F-src-目录中下载Moveit功能包，并编译" class="headerlink" title="1.2 在  ~&#x2F;catkin_ws&#x2F;src  目录中下载Moveit功能包，并编译"></a>1.2 在  ~&#x2F;catkin_ws&#x2F;src  目录中下载Moveit功能包，并编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone https://github.com/lg609/aubo_robot.git<span class="token builtin class-name">cd</span> ~/catkin_ws/catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释：如果提示下列错误，则说明在安装Ros的时候没有安装Ros-moveit功能包：</p><p><img src="https://i.loli.net/2021/05/28/jShBMoz9apcKVXE.png"></p><p>解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：参考网址：<a href="https://github.com/tahsinkose/hector-moveit/issues/4">点我查看</a></p><h2 id="2-安装Realsense-D435相机驱动与功能包"><a href="#2-安装Realsense-D435相机驱动与功能包" class="headerlink" title="2.安装Realsense D435相机驱动与功能包"></a>2.安装Realsense D435相机驱动与功能包</h2><h3 id="2-1驱动安装"><a href="#2-1驱动安装" class="headerlink" title="2.1驱动安装"></a>2.1驱动安装</h3><p>官方安装教程：<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">点我查看</a></p><p>参考教程：<a href="https://zhuanlan.zhihu.com/p/93127918">点我查看</a></p><p>注册公匙：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE <span class="token operator">||</span> <span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加服务器至存储列表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb https://librealsense.intel.com/Debian/apt-repo xenial main"</span> <span class="token parameter variable">-u</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装所需库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dkms<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装功能包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dbg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动连接界面，进行测试，若可以看到相机图像则证明驱动安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">realsense-viewer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2功能包安装"><a href="#2-2功能包安装" class="headerlink" title="2.2功能包安装"></a>2.2功能包安装</h3><p>创建工作空间：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/catkin_ws/src <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ~/catkin_ws/src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载源码，并检查依赖:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token number">2.2</span>.7 https://github.com/IntelRealSense/realsense-ros.git <span class="token builtin class-name">cd</span> realsense-ros/realsense2_camera <span class="token function">git</span> checkout <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> tag <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-V</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-P</span> <span class="token string">"^\d+\.\d+\.\d+"</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-1</span><span class="token variable">`</span></span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-ddynamic-reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_wscatkin_make <span class="token parameter variable">-DCATKIN_ENABLE_TESTING</span><span class="token operator">=</span>False <span class="token parameter variable">-DCMAKE_BUILD_TYPE</span><span class="token operator">=</span>Release catkin_make <span class="token function">install</span> <span class="token builtin class-name">echo</span> <span class="token string">"source ~/catkin_ws/devel/setup.bash"</span> <span class="token operator">>></span> ~/.bashrc <span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，启动相机节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch realsense2_camera rs_camera.launch<span class="token comment"># 查看发布的话题</span>rostopic list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-安装ros-kinetic-visp依赖包"><a href="#3-安装ros-kinetic-visp依赖包" class="headerlink" title="3.安装ros-kinetic-visp依赖包"></a>3.安装ros-kinetic-visp依赖包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-visp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-安装aruco-ros二维码检测功能包"><a href="#4-安装aruco-ros二维码检测功能包" class="headerlink" title="4.安装aruco_ros二维码检测功能包"></a>4.安装aruco_ros二维码检测功能包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone <span class="token parameter variable">-b</span> kinetic-devel https://github.com/pal-robotics/aruco_ros.git<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-安装visp-hand2eye-calibration"><a href="#5-安装visp-hand2eye-calibration" class="headerlink" title="5.安装visp_hand2eye_calibration"></a>5.安装visp_hand2eye_calibration</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone <span class="token parameter variable">-b</span> kinetic-devel https://github.com/lagadic/vision_visp.git<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make <span class="token parameter variable">--pkg</span> visp_hand2eye_calibration<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-安装easy-handeye手眼标定功能包"><a href="#6-安装easy-handeye手眼标定功能包" class="headerlink" title="6.安装easy_handeye手眼标定功能包"></a>6.安装easy_handeye手眼标定功能包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone https://github.com/IFL-CAMP/easy_handeye<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-标定方法"><a href="#7-标定方法" class="headerlink" title="7.标定方法"></a>7.标定方法</h2><h3 id="7-1眼在手上-eye-in-hand标定方法"><a href="#7-1眼在手上-eye-in-hand标定方法" class="headerlink" title="7.1眼在手上 eye-in-hand标定方法"></a>7.1眼在手上 eye-in-hand标定方法</h3><h4 id="7-1-1修改launch文件"><a href="#7-1-1修改launch文件" class="headerlink" title="7.1.1修改launch文件"></a>7.1.1修改launch文件</h4><p>标定过程需启动 ur5 机械臂的相关节点，realsense 节点，aruco 节点，easy_handeye 节点，可以写一个 launch 文件同时启动上述节点，也可以分别启动。easy_handeye 包中给出了用一个 launch 文件实现的示例，在如下的目录中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch/ur5_kinect_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以在此基础上进行修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 launch 文件拷贝到 easy_handeye 功能包的 launch 目录中，顺便改个名字</span><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch<span class="token function">cp</span> ur5_kinect_calibration.launch ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_in_hand_calibration.launchgedit  ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_in_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改 launch 文件如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aubo_i5_kinect_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 169.254.3.20为AUBOi5机械臂的IP地址,根据实际情况修改 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_ip<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The IP address of the UR5 robot<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>169.254.3.20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_size<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Size of the ArUco marker used, in meters<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_id<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The ID of the ArUco marker used<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 1. start the Realsense435 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find realsense2_camera)/launch/rs_camera.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 2. start ArUco --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aruco_tracker<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aruco_ros<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>single<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera_info<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/color/camera_info<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/image<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/color/image_raw<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_is_rectified<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_size<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg marker_size)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_id<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg marker_id)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reference_frame<span class="token punctuation">"</span></span>    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_frame<span class="token punctuation">"</span></span>       <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_frame<span class="token punctuation">"</span></span>       <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_marker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 3. start the robot --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find aubo_i5_moveit_config)/launch/moveit_planning_execution.launch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 4. start easy_handeye --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find easy_handeye)/launch/calibrate.launch<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- true：相机安装在机械臂末端 false: 相机安装在机械臂外--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- tracking_base_frame 为相机坐标系 camera_color_frame --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_marker_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_marker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- robot_base_frame 为机器人基座坐标系 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- robot_effector_frame 为工具坐标系，即：与相机相连的关节名称 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrist3_Link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>freehand_robot_movement<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_velocity_scaling<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_acceleration_scaling<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>move_group<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manipulator_i5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2启动-launch-文件，开始标定"><a href="#7-1-2启动-launch-文件，开始标定" class="headerlink" title="7.1.2启动 launch 文件，开始标定"></a>7.1.2启动 launch 文件，开始标定</h4><p>启动 launch 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch easy_handeye eye_to_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功运行后，会同时打开三个界面：</p><img src="https://i.loli.net/2021/05/28/4Xmzb3hFrnd5R7c.jpg" alt="界面1" style="zoom:50%;" /><img src="https://i.loli.net/2021/05/28/Av7F6K9Gu8pfZs3.jpg"  alt="界面2" style="zoom: 67%;" /><p><img src="https://i.loli.net/2021/05/28/2ydewHu76InBqfs.jpg" alt="界面3"></p><p>在界面 2 中，点击菜单栏(菜单栏在屏幕左上角)的 Plugins -&gt; Visulization -&gt; Image View，选择 &#x2F;aruco_tracker&#x2F;result 话题，界面会如下所示：</p><img src="https://i.loli.net/2021/05/28/YTKPw46HouZGpk9.jpg" style="zoom: 50%;" /><h4 id="7-1-3标定步骤"><a href="#7-1-3标定步骤" class="headerlink" title="7.1.3标定步骤"></a>7.1.3标定步骤</h4><ol><li>手动调节机械臂，使 aruco 二维码移动至相机视野中心处附近，作为 home config。在界面 3 中，点击 check starting pose，若检查成功，界面会出现： 0&#x2F;17，ready to start</li><li>界面 3 中依次点击 Next Pose，Plan，Execute，机械臂会移动至新的位置，若二维码在相机视野范围内，且能检测成功，则进行下一步</li><li>界面 2 中点击 Take Sample，若 Samples 对话框中出现有效信息，说明第一个点标定成功</li><li>重复执行步骤 2 和步骤 3，直至 17 个点全部标定完毕</li><li>界面 2 中点击 Compute，则 Result 对话框中会出现结果</li><li>界面 2 中 Save，会将结果保存为一个 YAML 文件，路径为 <code>~/.ros/easy_handeye</code></li></ol><p><img src="https://i.loli.net/2021/05/28/gV9AWphbyU5mFlP.jpg"></p><h3 id="7-2眼在手外-eye-to-hand标定方法"><a href="#7-2眼在手外-eye-to-hand标定方法" class="headerlink" title="7.2眼在手外 eye-to-hand标定方法"></a>7.2眼在手外 eye-to-hand标定方法</h3><p>方法与“眼在手上”基本相同，需要修改一下 launch 文件，注意两个 launch 文件不要重名。</p><p>唯一修改的地方是 easy_handeye 功能包 calibrate.launch 文件中 “eye_on_hand” 参数改成 true，如下所示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 launch 文件拷贝到 easy_handeye 功能包的 launch 目录中，顺便改个名字</span><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch<span class="token function">cp</span> ur5_kinect_calibration.launch ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_to_hand_calibration.launchgedit  ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_to_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-将标定结果发送至TF树"><a href="#8-将标定结果发送至TF树" class="headerlink" title="8.将标定结果发送至TF树"></a>8.将标定结果发送至TF树</h2><p>easy_handeye 功能包提供了 publish.launch 文件，可以将标定好的 TF 发布出去</p><h3 id="8-1眼在手上eye-in-hand"><a href="#8-1眼在手上eye-in-hand" class="headerlink" title="8.1眼在手上eye-in-hand"></a>8.1眼在手上eye-in-hand</h3><p>修改publish.launch 文件,要修改 “namespace_prefix” 参数，与眼在手上标定 launch 文件中的 “namespace_prefix” 一致，这样才能找到标定好的 YAML 文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye-on-hand instead of eye-on-base<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ur5_realsense_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_hand<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_base<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--it is possible to override the link names saved in the yaml file in case of name clashes, for example--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--publish hand-eye calibration--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_effector_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg tracking_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg inverse)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(anon handeye_publisher)<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>easy_handeye<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish.py<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2眼在手外-eye-to-hand"><a href="#8-2眼在手外-eye-to-hand" class="headerlink" title="8.2眼在手外 eye-to-hand"></a>8.2眼在手外 eye-to-hand</h3><p>修改 “namespace_prefix” 外（同上），还要将 “eye_on_hand” 参数设为false</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye-on-hand instead of eye-on-base<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ur5_realsense_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_hand<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_base<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--it is possible to override the link names saved in the yaml file in case of name clashes, for example--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--publish hand-eye calibration--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_effector_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg tracking_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg inverse)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(anon handeye_publisher)<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>easy_handeye<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish.py<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9.测试"></a>9.测试</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启 publish.luanch 文件，以眼在手上为例</span>roslaunch easy_handeye publish.launch<span class="token comment"># 查看 TF（改成自己的工具坐标系与相机坐标系）</span>rosrun tf tf_echo /tool0_controller /camera_color_frame<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/05/28/BgCzvN85MxAsUJV.jpg"></p><p>注意：这里四元数的顺序是 [qx, qy, qz, qw]</p>]]></content>
      
      
      <categories>
          
          <category> Ros </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手眼标定 </tag>
            
            <tag> AUBOi5+Realsense D435 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm使用ssh连接服务器中的docker容器</title>
      <link href="/2022/11/23/pycharm-shi-yong-ssh-lian-jie-fu-wu-qi-zhong-de-docker-rong-qi/"/>
      <url>/2022/11/23/pycharm-shi-yong-ssh-lian-jie-fu-wu-qi-zhong-de-docker-rong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-拉取cuda、cudnn的docker镜像"><a href="#1-拉取cuda、cudnn的docker镜像" class="headerlink" title="1.拉取cuda、cudnn的docker镜像"></a>1.拉取cuda、cudnn的docker镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-新建并启动交互式容器"><a href="#2-新建并启动交互式容器" class="headerlink" title="2.新建并启动交互式容器"></a>2.新建并启动交互式容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> tensorflow1.2.1-gpu <span class="token parameter variable">-v</span> /home/docker_share/:/home/ <span class="token parameter variable">-p</span> <span class="token number">2201</span>:22 <span class="token parameter variable">--gpus</span> all nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：</p><p>–name ：设置新容器的名称为tensorflow1.2.1-gpu</p><p>-v ：设置文件映射，将宿主机的文件&#x2F;home&#x2F;docker_share&#x2F;映射到该容器的&#x2F;home&#x2F;目录下</p><p>-p ：设置容器的端口与宿主机的端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></p><p>–gpus all 许容器使用所有GPU</p><p>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：容器的依赖镜像</p><p>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</p><p>注释：</p><p>为了构建有序且规范的端口映射关系，这里设置一个默认规则用于设置容器的端口与宿主机的端口映射：主机端口固定，容器端口以主机端口为起始位依次排开</p><pre class="line-numbers language-none"><code class="language-none">容器端口主机端口220122220222<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-进入容器后修改容器的root密码"><a href="#3-进入容器后修改容器的root密码" class="headerlink" title="3.进入容器后修改容器的root密码"></a>3.进入容器后修改容器的root密码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置用户名为root,密码为passwd(将其该为自己想要的密码)</span><span class="token builtin class-name">echo</span> <span class="token string">'root:passwd'</span> <span class="token operator">|</span> chpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-安装openssh-server并启动"><a href="#4-安装openssh-server并启动" class="headerlink" title="4.安装openssh-server并启动"></a>4.安装openssh-server并启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新源</span><span class="token function">apt-get</span> update<span class="token comment">#或</span><span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token comment"># 安装openssh-server</span><span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span class="token comment"># 启动之前需手动创建/var/run/sshd，不然启动sshd的时候会报错</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/run/sshd<span class="token comment"># sshd以守护进程运行</span>/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span class="token comment"># 安装netstat，查看sshd是否监听22端口</span><span class="token function">apt-get</span> <span class="token function">install</span> net-tools<span class="token function">netstat</span> <span class="token parameter variable">-apn</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span class="token comment"># 显示如下</span><span class="token comment"># root@a78aa2e72670:/# netstat -apn | grep ssh</span><span class="token comment"># tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1266/sshd</span><span class="token comment"># tcp6       0      0 :::22                   :::*                    LISTEN      1266/sshd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-ssh登录设置"><a href="#5-ssh登录设置" class="headerlink" title="5.ssh登录设置"></a>5.ssh登录设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成ssh key</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token comment"># 然后提示的设置用默认设置，一直回车即可</span><span class="token comment"># 修改sshd-config允许root登陆</span><span class="token function">vim</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查下面的命令是否被注释，会后面的参数是否为yes，若没有该命令需要在文件尾部新增该命令以允许root用户使用ssh登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PermitRootLogin <span class="token function">yes</span> <span class="token comment"># 约在28行：将PermitRootLogin prohibit-password改为PermitRootLogin yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改完sshd-config之后需要重启sshd服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找到sshd的进程pid</span><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span class="token comment"># 杀掉sshd的进程pid</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> sshd的进程pid号<span class="token comment"># 重启</span>/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span class="token comment"># 再次查看</span><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a78aa2e72670:/<span class="token comment"># ps -aux | grep ssh</span>root      <span class="token number">1266</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5468</span> pts/0    S    01:14   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root      <span class="token number">1301</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">932</span> pts/0    S+   01:18   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span>root@a78aa2e72670:/<span class="token comment"># kill -9 1266</span>root@a78aa2e72670:/<span class="token comment"># /usr/sbin/sshd -D &amp;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">1302</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   Killed                  /usr/sbin/sshd <span class="token parameter variable">-D</span>root@a78aa2e72670:/<span class="token comment"># ps -aux | grep ssh</span>root      <span class="token number">1302</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5756</span> pts/0    S    01:19   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root      <span class="token number">1304</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">944</span> pts/0    S+   01:19   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-退出容器，但不要停止容器，并进行连接测试"><a href="#6-退出容器，但不要停止容器，并进行连接测试" class="headerlink" title="6.退出容器，但不要停止容器，并进行连接测试"></a>6.退出容器，但不要停止容器，并进行连接测试</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在主机登录，需要输入的root密码为前面设置的root密码</span><span class="token function">ssh</span> root@localhost <span class="token parameter variable">-p</span> <span class="token number">8080</span> <span class="token comment"># 8080为刚开始创建容器时候设置的主机端口映射，与容器的22端口形成映射</span><span class="token comment"># 在其他机器上可以使用以下命令登陆，假设宿主机ip为10.12.11.xx</span><span class="token function">ssh</span> root@10.12.11.xx <span class="token parameter variable">-p</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果提示：ssh_exchange_identification: read: Connection reset by peer</p><p>则：可能是容器的 sshd服务未开启，再次进入容器重启sshd服务即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@dc627a3adc4d:/<span class="token comment"># ps -aux | grep ssh</span>root        <span class="token number">32</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">932</span> pts/1    S+   03:43   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span>root@dc627a3adc4d:/<span class="token comment"># /usr/sbin/sshd -D &amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">33</span>root@dc627a3adc4d:/<span class="token comment"># ps -aux | grep ssh</span>root        <span class="token number">33</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5420</span> pts/1    S    03:43   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root        <span class="token number">35</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">936</span> pts/1    S+   03:43   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释：配置完成后可以将容器保存为镜像</p><p>docker commit -a “提交的镜像作者名称” -m “提交时的说明文字” 容器ID或容器名称  保存镜像名称:标签</p><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@dc627a3adc4d:/<span class="token comment"># docker commit -a "runoob.com" -m "my apache" a404c6c174a2  mymysql:v1</span>root@dc627a3adc4d:/<span class="token comment"># docker images mymysql:v1</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmymysql             v1                  37af1236adef        <span class="token number">15</span> seconds ago      <span class="token number">329</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-配置pycharm并连接docker容器"><a href="#7-配置pycharm并连接docker容器" class="headerlink" title="7.配置pycharm并连接docker容器"></a>7.配置pycharm并连接docker容器</h2><p>参考网址：<a href="https://blog.csdn.net/Thanours/article/details/109265315">点我查看</a></p><p>在 Tools &gt;&gt;&gt; Deployment &gt;&gt;&gt; Configuration选项中新建 SFTP 连接：</p><p><img src="https://i.loli.net/2021/05/21/YMm8PE6Hd9ySQ2h.png"></p><img src="https://i.loli.net/2021/05/21/z4dMrhtOH8xvZCR.png"/><p><img src="https://i.loli.net/2021/06/10/TYq9sIE2aRfdyGC.png"></p><ul><li>路径映射(本地程序文件目录与docker文件目录的映射)：</li></ul><p><img src="https://i.loli.net/2021/05/21/yigpdXIMG5QTaLw.png"></p><ul><li>同步本地代码数据到docker容器中：</li></ul><p><img src="https://i.loli.net/2021/05/21/mQJGDp1xaB6EjO9.png"></p><ul><li>上传完代码数据后， 需要选择设置python编译器：</li></ul><p><img src="https://i.loli.net/2021/05/21/htdvCb2qlnOas1Y.png"></p><p><img src="https://i.loli.net/2021/05/21/O3yU6kINc9AT8ea.png"></p><p><img src="https://i.loli.net/2021/05/21/bH5aVPAMXDIz42j.png"></p><p><img src="https://i.loli.net/2021/06/10/BH7mE9diJMrcWCp.png"></p><ul><li>设置好python解释器就可以run代码了：</li></ul><p><img src="https://i.loli.net/2021/05/21/jDGmP8npQtaFCY7.png"></p><p>这里要注意一下，代码所要的运行环境还需要在docker容器安装配置好，比如我这里需要pytorch环境以及python代码运行所需的依赖库都已经在docker容器中通过pip安装好了。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数参数传递之引用与指针</title>
      <link href="/2022/11/12/han-shu-can-shu-chuan-di-zhi-yin-yong-yu-zhi-zhen/"/>
      <url>/2022/11/12/han-shu-can-shu-chuan-di-zhi-yin-yong-yu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p><strong>形参是实参的拷贝</strong>，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参-&gt;形参），参数的值只能传入，不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递。</p><h2 id="指针传递"><a href="#指针传递" class="headerlink" title="指针传递"></a>指针传递</h2><p><strong>形参为指向实参地址的指针</strong>，当对形参的指向操作时，就相当于对实参本身进行的操作</p><h2 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h2><p><strong>形参相当于是实参的“别名”</strong>，对形参的操作其实就是对实参的操作，在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p><p>引用引入了对象的一个同义词。定义引用的表示方法与定义指针相似，只是用“&amp;”代替了“*”。例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Point pt1(10,10);Point &amp;pt2&#x3D;pt1; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义了pt2为pt1的引用。通过这样的定义，pt1和pt2表示同一对象。需要特别强调的是引用并不产生对象的副本，仅仅是对象的同义词。因此，当下面的语句执行后：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">pt1.offset（2，2）；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pt1和pt2都具有（12，12）的值。<br>引用必须在定义时马上被初始化，因为它必须是某个东西的同义词。你不能先定义一个引用后才<br>初始化它。例如下面语句是非法的：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Point &amp;pt3；pt3&#x3D;pt1；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="引用传递和指针传递的区别与联系"><a href="#引用传递和指针传递的区别与联系" class="headerlink" title="引用传递和指针传递的区别与联系"></a>引用传递和指针传递的区别与联系</h1><h2 id="引用的规则"><a href="#引用的规则" class="headerlink" title="引用的规则"></a>引用的规则</h2><ul><li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。 </li><li>不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）。 </li><li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li></ul><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>-都是地址的概念：指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li><p>指针是一个实体，而引用仅是个别名；</p></li><li><p>引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p></li><li><p>引用没有const，指针有const，const的指针不可变；（具体指没有int&amp; const a这种形式，而const int&amp; a是有 的， 前者指引用本身即别名不可以改变，这是当然的，所以不需要这种形式，后者指引用所指的值不可以改变）</p></li><li><p>引用不能为空，指针可以为空；</p></li><li><p>“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p></li><li><p>指针和引用的自增(++)运算意义不一样；</p></li><li><p>引用是类型安全的，而指针不是 (引用比指针多了类型检查</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从概念上讲，<strong>指针从本质上讲就是存放变量地址的一个变量</strong>，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p><p>而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p><p>在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</p><p>指针传递参数本质上是值传递的方式，它所传递的是一个地址值。<em>值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（这里是在说实参指针本身的地址值不会变）</em></p><p>而在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时<strong>存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量</strong>。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p><p><strong>引用传递和指针传递是不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针传递的参数，如果改变被调函数中的指针地址，它将影响不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量，那就得使用指向指针的指针，或者指针引用。</strong></p><p>为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p><p>程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为<strong>指针变量的地址值</strong>，指针变量中的值为其指向变量的地址；而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改.</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>使用引用传递参数和使用指针传递参数都可传递变量的地址，但对于int,float等占用内存较少，其作为函数参数时一般使用引用传递参数；而对于结构体而言一般采用指针传递结构体变量的地址。</p><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="传递可变参数"><a href="#传递可变参数" class="headerlink" title="传递可变参数"></a>传递可变参数</h2><p>传统的c中，函数在调用时参数是通过值来传递的，这就是说函数的参数不具备返回值的能力。所以在传统的c中，如果需要函数的参数具有返回值的能力，往往是通过指针来实现的。比如，实现两整数变量值交换的c程序如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void swap_int(int *a,int *b)&#123;    int temp;    temp&#x3D;*a;    a&#x3D;*b;    *b&#x3D;temp;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用引用机制后，以上程序的c++版本为：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void swap_int(int &amp;a,int &amp;b)&#123;    int temp;    temp&#x3D;a;    a&#x3D;b;    b&#x3D;temp;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用该函数的c++方法为：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">swap_int,y); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>c++自动把x,y的地址作为参数传递给swap_int函数。</p><h2 id="给函数传递大型对象"><a href="#给函数传递大型对象" class="headerlink" title="给函数传递大型对象"></a>给函数传递大型对象</h2><p>当大型对象被传递给函数时，使用引用参数可使参数传递效率得到提高，因为引用并不产生对象的副本，也就是参数传递时，对象无须复制。下面的例子定义了一个有限整数集合的类：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">const maxCard&#x3D;100;Class Set&#123;    int elems[maxCard]; &#x2F;&#x2F; 集和中的元素，maxCard 表示集合中元素个数的最大值。    int card; &#x2F;&#x2F; 集合中元素的个数。    public:    Set () &#123;card&#x3D;0;&#125; &#x2F;&#x2F;构造函数    friend Set operator * (Set ,Set ) ; &#x2F;&#x2F;重载运算符号*，用于计算集合的交集 用对象作为传值参数    &#x2F;&#x2F; friend Set operator * (Set &amp; ,Set &amp; ) 重载运算符号*，用于计算集合的交集 用对象的引用作为传值参数    ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先考虑集合交集的实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Set operator *( Set Set1,Set Set2)&#123;    Set res;    for(int i&#x3D;0;i&lt;Set1.card;++i)    &#123;        for(int j&#x3D;0;j&gt;Set2.card;++j)        &#123;            if(Set1.elems[i]&#x3D;&#x3D;Set2.elems[j])                &#123;                    res.elems[res.card++]&#x3D;Set1.elems[i];                    break;                &#125;        &#125;            &#125;    return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于重载运算符不能对指针单独操作，我们必须把运算数声明为 Set 类型而不是 Set * 。每次使用*做交集运算时，整个集合都被复制，这样效率很低。我们可以用引用来避免这种情况。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Set operator *( Set &amp;Set1,Set &amp;Set2)&#123;     Set res;    for(int i&#x3D;0;i&lt;Set1.card;++i)    &#123;        for(int j&#x3D;0;j&gt;Set2.card;++j)&#123;            if(Set1.elems[i]&#x3D;&#x3D;Set2.elems[j])            &#123;                res.elems[res.card++]&#x3D;Set1.elems[i];                break;            &#125;        &#125;                &#125;        return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用返回值"><a href="#引用返回值" class="headerlink" title="引用返回值"></a>引用返回值</h2><p>如果一个函数返回了引用，那么该函数的调用也可以被赋值。这里有一函数，它拥有两个引用参数并返回一个双精度数的引用：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">double &amp;max(double &amp;d1,double &amp;d2)&#123;    return d1&gt;d2?d1:d2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于max()函数返回一个对双精度数的引用，那么我们就可以用max() 来对其中较大的双精度数加1：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">max(x,y)+&#x3D;1.0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在函数的使用过程中，我们都明白传指针和传引用会使实参的值发生改变。那么能够通过传指针改变指针所指向的地址吗？<br>在解决这个问题之前，也许我们应该先了解指针非常容易混淆的三个属性：</p><ul><li>指针变量地址（&amp;p）</li><li>指针变量指向的地址（p，存储数据的地址）</li><li>指针变量指向的地址的值（*p）</li></ul><p>当我们将指针变量与其它变量比较之后就会发现，指针变量同其它变量是相似的，只是多了最后一种操作。比如一个int类型的变量,<code>int x=5;</code>,<code>&amp;x</code>取出存储<code>5</code>这个数据的地址，同样，<code>&amp;p</code>也是存储指针的地址，<code>p</code>就是这个地址里面保存的值，也就是指向的地址。只是与其它变量不同的是，它除了这两种操作之外，还有一个解引用操作符<code>*p</code>去获取指针变量指向的地址里面保存的值。</p><h2 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void make(int *pp)&#123;    pp&#x3D;new int(66); &#x2F;&#x2F;试图改变p指向的地址&#125;int main()&#123;     int a&#x3D;5;     int *p&#x3D;&amp;a; &#x2F;&#x2F;指针变量指向一个int类型的地址     cout&lt;&lt;&quot;address:&quot;&lt;&lt;&amp;a&lt;&lt;&quot;value:&quot;&lt;&lt;a&lt;&lt;endl;     cout&lt;&lt;&quot;address:&quot;&lt;&lt;p&lt;&lt;&quot;value:&quot;&lt;&lt;*p&lt;&lt;endl;     make(p);     cout&lt;&lt;&quot;address:&quot;&lt;&lt;p&lt;&lt;&quot;value:&quot;&lt;&lt;*p&lt;&lt;endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：我们这里虽然使用的是传指针，但是却不是直接改变指针变量指向的地址的值，却是想通过改变指针变量指向的地址来修改它的值，显然这样失败了。</p><p><img src="/no.png" alt="错误使用"></p><p>如果我们希望在函数里面修改指针变量存储的地址而不是它的值，这个时候就需要指针引用了。类似于普通变量传入变量引用，我们也传入一个指针引用，在函数里面，你可以将pp认为和p都是这个指针变量（&amp;p&#x3D;&#x3D;&amp;pp），不似传入指针参数的时候形参和实参的变量（&amp;p！&#x3D;&amp;pp）地址不一样。此时我们操作pp的值就是更改了p的值。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void make(int *&amp;pp)&#123;    pp&#x3D;new int(66); &#x2F;&#x2F;改变p指向的地址&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：当我们修改传入参数为指针的引用的时候就可以修改指针变量所指向的地址了，可以看见，传入指针引用可以修改指针变量的值（p）和指向的值（*p）。</p><p><img src="/yes.png" alt="正确使用"></p><h2 id="二级指针-1"><a href="#二级指针-1" class="headerlink" title="二级指针"></a>二级指针</h2><h2 id="指向指针的指针变量称为二级指针。如果pp是一个二级指针，那么有如下属性：-二级指针的地址（-amp-pp）-二级指针的地址保存的地址（pp）-二级指针的地址保存的地址，该地址里面保存的地址（-pp）-二级指针的地址保存的地址，该地址里面保存的地址里面的数据（-pp）"><a href="#指向指针的指针变量称为二级指针。如果pp是一个二级指针，那么有如下属性：-二级指针的地址（-amp-pp）-二级指针的地址保存的地址（pp）-二级指针的地址保存的地址，该地址里面保存的地址（-pp）-二级指针的地址保存的地址，该地址里面保存的地址里面的数据（-pp）" class="headerlink" title="指向指针的指针变量称为二级指针。如果pp是一个二级指针，那么有如下属性：- 二级指针的地址（&amp;pp）- 二级指针的地址保存的地址（pp）- 二级指针的地址保存的地址，该地址里面保存的地址（*pp）- 二级指针的地址保存的地址，该地址里面保存的地址里面的数据（**pp）"></a>指向指针的指针变量称为二级指针。<br>如果pp是一个二级指针，那么有如下属性：<br>- 二级指针的地址（&amp;pp）<br>- 二级指针的地址保存的地址（pp）<br>- 二级指针的地址保存的地址，该地址里面保存的地址（*pp）<br>- 二级指针的地址保存的地址，该地址里面保存的地址里面的数据（**pp）</h2><p><img src="/kuangtu.png" alt="框图"></p><p>除了上面传入指针引用改变一级指针指向的地址以外，我们还可以通过传入一个二级指针去修改它对应的一级指针指向的地址，同样达到了修改指针变量的效果。二级指针的指向的地址存储的值就是一级指针指向的地址。对一级指针变量解引用得到的是指针指向的地址存储的数据，二级指针变量解引用得到的也是该二级指针指向的地址存储的地址值。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void make(int **pp)&#123;   int * p&#x3D;new int(66);    *pp&#x3D;p; &#x2F;&#x2F;二级指针的解引用被赋值需要得到一个一级指针变量，上图中二级指针的示意图中*pp&#x3D;p&#125;int main()&#123;     int a&#x3D;5;     int *q&#x3D;&amp;a;     int **pp&#x3D;&amp;q;     cout&lt;&lt;&quot;address:&quot;&lt;&lt;&amp;pp&lt;&lt;&quot;  &quot;&lt;&lt;pp&lt;&lt;&quot;    &quot;&lt;&lt;&amp;q&lt;&lt;&quot;   &quot;&lt;&lt;q&lt;&lt;&quot;       value:&quot;&lt;&lt;*q&lt;&lt;endl;     make(pp);     cout&lt;&lt;&quot;address:&quot;&lt;&lt;&amp;pp&lt;&lt;&quot;  &quot;&lt;&lt;pp&lt;&lt;&quot;    &quot;&lt;&lt;&amp;q&lt;&lt;&quot;   &quot;&lt;&lt;q&lt;&lt;&quot;       value:&quot;&lt;&lt;*q&lt;&lt;endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：通过对二级指针的解引用赋值成功修改了一级指针指向的地址。如果仅仅在make函数里面对**pp&#x3D;66;操作，那么所有的地址不会改变，仅仅会改变值为66。</p><p><img src="/yes2.png" alt="二级指针"></p><h1 id="各种类型的函数参数传递"><a href="#各种类型的函数参数传递" class="headerlink" title="各种类型的函数参数传递"></a>各种类型的函数参数传递</h1><h2 id="声明-h"><a href="#声明-h" class="headerlink" title="声明.h"></a>声明.h</h2><pre class="line-numbers language-C" data-language="C"><div class="caption"><span>++</span></div><code class="language-C">&#x2F;&#x2F; 结构体数组   (in_ldc)void getLdc(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS]);&#x2F;&#x2F; cv::Mat  (in_MatK)void getMatK(cv::Mat *in_MatK);&#x2F;&#x2F; 内存块(map)  (in_BEMap)void getBEMap(unsigned short *&amp;in_BEMap);&#x2F;&#x2F; cv::Rect数组 (in_BESetRoi)void getBESetRoi(cv::Rect *in_BESetRoi);&#x2F;&#x2F; cv::Mat 数组 (in_wide_angle_map)void getWideAngleMap(float **in_wide_angle_map);&#x2F;&#x2F; 整数 (in_wide_angle_width,in_wide_angle_height)void getWideAngleSize(int &amp;in_wide_angle_width, int &amp;in_wide_angle_height);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义-cpp"><a href="#定义-cpp" class="headerlink" title="定义.cpp"></a>定义.cpp</h2><ul><li><p>结构体数组</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct&#123;    float distCenterX;    float distCenterY;    float distFocalLength;    float distFocalLengthInv;    float *lut_d2u;    int32_t lut_d2u_indMax;    float lut_d2u_step;    float lut_d2u_stepInv;    float *lut_u2d;    int32_t lut_u2d_indMax;    float lut_u2d_step;    float lut_u2d_stepInv;    bool if_get_matrix &#x3D; false;    cv::Mat intrinsics &#x3D; cv::Mat(3, 3, CV_32FC1, cv::Scalar::all(0));    cv::Mat distortionCoeff &#x3D; cv::Mat(4, 1, CV_32FC1, cv::Scalar::all(0));&#125; TLensDistortionCorrection;TLensDistortionCorrection TLdc[NUM_CAMERAS];void ParametersInit::getLdc(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS])&#123;    for (int i &#x3D; 0; i &lt; NUM_CAMERAS; i++)    &#123;        in_ldc[i] &#x3D; TLdc[i];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>map</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">unsigned short *BEMap &#x3D; NULL;BEMap &#x3D; (unsigned short *)malloc(sizeof(unsigned short) * BEGetRoiSize * 2 * 2 * 4);void getBEMap(unsigned short *&amp;in_BEMap)&#123;    in_BEMap &#x3D; BEMap;&#125;&#x2F;&#x2F; cv::Rectfor (int rect_index &#x3D; 0; rect_index &lt; 4; rect_index++)&#123;    BESetRoi[rect_index] &#x3D; cv::Rect(BE_set_roi[rect_index * 4 + 0], BE_set_roi[rect_index * 4 + 1],                                        BE_set_roi[rect_index * 4 + 2], BE_set_roi[rect_index * 4 + 3]);&#125;void getBESetRoi(cv::Rect *in_BESetRoi)&#123;    for (int i &#x3D; 0; i &lt; NUM_CAMERAS; i++)    &#123;        in_BESetRoi[i] &#x3D; BESetRoi[i];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cv::Mat []</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">float *wideAngleViewMap[NUM_CAMERAS] &#x3D; &#123;NULL&#125;;for (int index &#x3D; 0; index &lt; NUM_CAMERAS; index++)&#123;    wideAngleViewMap[index] &#x3D; (float *)malloc(wideAngle_width * wideAngle_height * 3 &#x2F; 2 * 2 * sizeof(float));&#125;void ParametersInit::getWideAngleMap(float **in_wide_angle_map)&#123;    for (int i &#x3D; 0; i &lt; NUM_CAMERAS; i++)    &#123;        if (wideAngleViewMap[i] !&#x3D; NULL)        &#123;            in_wide_angle_map[i] &#x3D; wideAngleViewMap[i];        &#125;        else        &#123;            LOGI(1,&quot;getWideAngleMap failed!&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>int</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int wideAngle_width &#x3D; 720; &#x2F;&#x2F;广角视图的尺寸，需要为偶数int wideAngle_height &#x3D; 720;void ParametersInit::getWideAngleSize(int &amp;in_wide_angle_width, int &amp;in_wide_angle_height)&#123;    in_wide_angle_width &#x3D; wideAngle_width;    in_wide_angle_height &#x3D; wideAngle_height;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="使用-cpp"><a href="#使用-cpp" class="headerlink" title="使用.cpp"></a>使用.cpp</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; TLensDistortionCorrection m_ldc[NUM_CAMERAS];getLdc(my_avm_bsd.m_ldc);&#x2F;&#x2F; cv::Mat m_MatK[NUM_CAMERAS];getMatK(my_avm_bsd.m_MatK);&#x2F;&#x2F; unsigned short *BE_Map;getBEMap(my_BB_YUV.BE_Map);&#x2F;&#x2F; cv::Rect BE_SetRoi[4];getBESetRoi(my_BB_YUV.BE_SetRoi);&#x2F;&#x2F; float *wide_angle_map[NUM_CAMERAS] &#x3D; &#123;NULL&#125;;getWideAngleMap(g_avm_set-&gt;wide_angle_map);&#x2F;&#x2F; int m_wideAngle_width;int m_wideAngle_height;getWideAngleSize(g_avm_set-&gt;m_wideAngle_width, g_avm_set-&gt;m_wideAngle_height);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://www.pudn.com/news/62615ba10e75e420124071b2.html">C++中引用传递与指针传递区别（进一步整理）</a> </li><li><a href="https://blog.csdn.net/qq_32483145/article/details/52901230">二级指针和指针引用函数传参（C++）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数参数传递 </tag>
            
            <tag> 引用与指针 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
