<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>adb命令使用指南</title>
      <link href="/2023/11/25/adb-ming-ling-shi-yong-zhi-nan/"/>
      <url>/2023/11/25/adb-ming-ling-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://github.com/mzlogin/awesome-adb">ADB 用法集合</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> adb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令快速教程</title>
      <link href="/2023/11/25/linux-ming-ling-kuai-su-jiao-cheng/"/>
      <url>/2023/11/25/linux-ming-ling-kuai-su-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://linuxtools-rst.readthedocs.io/zh-cn/latest/">Linux工具快速教程</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程范例</title>
      <link href="/2023/11/25/shell-bian-cheng-fan-li/"/>
      <url>/2023/11/25/shell-bian-cheng-fan-li/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://tinylab-1.gitbook.io/shellbook/">Shell编程范例</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim从入门到精通</title>
      <link href="/2023/11/25/vim-cong-ru-men-dao-jing-tong/"/>
      <url>/2023/11/25/vim-cong-ru-men-dao-jing-tong/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://gitlab.com/wsdjeg/vim-galore-zh_cn">Vim从入门到精通</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构常用算法会</title>
      <link href="/2023/11/25/shu-ju-jie-gou-he-suan-fa-bi-zhi-bi-hui-de-50-ge-dai-ma-shi-xian/"/>
      <url>/2023/11/25/shu-ju-jie-gou-he-suan-fa-bi-zhi-bi-hui-de-50-ge-dai-ma-shi-xian/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://github.com/wangzheng0822/algo">数据结构和算法必知必会的50个代码实现</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图说设计模式</title>
      <link href="/2023/11/25/tu-shuo-she-ji-mo-shi/"/>
      <url>/2023/11/25/tu-shuo-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://design-patterns.readthedocs.io/zh-cn/latest/index.html">图说设计模式</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用图像坐标系变换</title>
      <link href="/2023/11/22/chang-yong-tu-xiang-zuo-biao-xi-bian-huan/"/>
      <url>/2023/11/22/chang-yong-tu-xiang-zuo-biao-xi-bian-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="相机坐标系-X-c-Y-c-Z-c-到图像坐标系-u-v"><a href="#相机坐标系-X-c-Y-c-Z-c-到图像坐标系-u-v" class="headerlink" title="相机坐标系$(X_c,Y_c,Z_c)$到图像坐标系$(u,v)$"></a>相机坐标系$(X_c,Y_c,Z_c)$到图像坐标系$(u,v)$</h1><p>$$<br>{Z_{c}}\begin{bmatrix}<br>u \\<br>v \\<br>1<br>\end{bmatrix} &#x3D; \begin{bmatrix}<br>f_x &amp; 0 &amp; c_x &amp; 0 \\<br>0 &amp; f_y &amp; c_y &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{bmatrix} \cdot \begin{bmatrix}<br>X_c \\<br>Y_c \\<br>Z_c \\<br>1<br>\end{bmatrix} &#x3D; \begin{bmatrix}<br>f_x X_c+c_x Z_c \\<br>f_y Y_c+c_y Z_c \\<br>Z_c<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>u \\<br>v \\<br>1<br>\end{bmatrix}<br>&#x3D;\begin{bmatrix}<br>f_x &amp; 0 &amp; c_x &amp; 0 \\<br>0 &amp; f_y &amp; c_y &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{bmatrix}<br>\cdot \begin{bmatrix}<br>X_c \\<br>Y_c \\<br>Z_c \\<br>1<br>\end{bmatrix}<br>&#x3D; \begin{bmatrix}<br>f_x X_c &#x2F; Z_c+c_x \\<br>f_y Y_c &#x2F; Z_c+c_y \\<br>1<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{cases}<br>    u &#x3D; \frac{f_x X_c}{Z_c} + c_x \\<br>    v &#x3D; \frac{f_y Y_c}{Z_c} + c_y<br>\end{cases}<br>$$</p><h1 id="世界坐标系-X-w-Y-w-Z-w-到图像坐标系-u-v"><a href="#世界坐标系-X-w-Y-w-Z-w-到图像坐标系-u-v" class="headerlink" title="世界坐标系$(X_w,Y_w,Z_w)$到图像坐标系$(u,v)$"></a>世界坐标系$(X_w,Y_w,Z_w)$到图像坐标系$(u,v)$</h1><p>$$<br>R_x&#x3D;<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 \\<br>0 &amp; \cos(pitch) &amp; -\sin(pitch) \\<br>0 &amp; \sin(pitch) &amp; \cos(pitch)<br>\end{bmatrix}<br>$$</p><p>$$<br>R_{y}&#x3D;<br>\begin{bmatrix}<br>\cos(yaw) &amp; 0 &amp; \sin(yaw) \\<br>0 &amp; 1 &amp; 0 \\<br>-\sin(yaw) &amp; 0 &amp; \cos(yaw)<br>\end{bmatrix}<br>$$</p><p>$$<br>R_{z}&#x3D;<br>\begin{bmatrix}<br>\cos(roll) &amp; -\sin(roll) &amp; 0 \\<br>\sin(roll) &amp; \cos(roll) &amp; 0 \\<br>0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$</p><p>$$<br>R&#x3D;{R_z}{R_y}{R_x}&#x3D;<br>\begin{bmatrix}<br>c_{roll} c_{yaw} &amp; c_{roll} s_{yaw} s_{pitch}-s_{roll} c_{pitch} &amp; c_{roll} s_{yaw} c_{pitch}+s_{roll} s_{pitch} \\<br>s_{roll} c_{yaw} &amp; s_{roll} s_{yaw} s_{pitch}+c_{roll} c_{pitch} &amp; s_{roll} s_{yaw} c_{pitch}-c_{roll} s_{pitch} \\<br>-s_{yaw} &amp; c_{yaw} s_{pitch} &amp; c_{yaw} c_{pitch}<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>c_{yaw}&#x3D;\cos(yaw) &amp; s_{yaw}&#x3D;\sin(yaw) \\<br>c_{pitch}&#x3D;\cos(pitch) &amp; s_{pitch}&#x3D;\sin(pitch) \\<br>c_{roll}&#x3D;\cos(roll) &amp; s_{roll}&#x3D;\sin(roll)<br>\end{bmatrix}<br>$$</p><p>$$<br>t&#x3D;<br>\begin{bmatrix}<br>t_{x} \\<br>t_{y} \\<br>t_{z}<br>\end{bmatrix}<br>$$</p><p>$$<br>Z_{c}<br>\begin{bmatrix}<br> u \\<br> v <br> 1<br>\end{bmatrix}<br>&#x3D;\begin{bmatrix}<br>f_{x} &amp; {0} &amp; c_{x} &amp; {0} \\<br>{0} &amp; f_{y} &amp; c_{y} &amp; {0} \\<br>{0} &amp; {0} &amp;{1}<br>\end{bmatrix}<br>\begin{bmatrix}<br>{X_{w}} \\<br>{Y_{w}} \\<br>{Z_{w}}<br>\end{bmatrix}<br>$$</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 坐标系变换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坐标系变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车载相机与地面的在线标定</title>
      <link href="/2023/11/16/che-zai-xiang-ji-yu-di-mian-de-zai-xian-biao-ding/"/>
      <url>/2023/11/16/che-zai-xiang-ji-yu-di-mian-de-zai-xian-biao-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>相机与地面的在线标定是一般指实时生成相机与道路平面之间的非刚体变换，现有的解决方案常常利用静态标定，在面对轮胎气压变化、车辆载重体积变化和道路表面多样性等环境变化时存在问题。其他在线解决方案利用道路元素或图像中重叠视图之间的光度一致性，这需要在道路上连续检测特定目标或借助多个摄像头来进行标定。</p><p>这里提出一种在线的单目相机与地面标定解决方案，不需要在行驶过程中使用任何特定目标。通过轮速里程计进行粗到精的地面特征提取，并通过基于滑动窗口的因子图优化来估计相机与地面的标定参数。考虑到驾驶过程中相机与地面之间的非刚性变换，同时提供了衡量标定性能的指标和停止标准，用以发布满意的标定结果。使用真实的数据进行的广泛实验表明该算法有效，并且优于现有的技术。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>现代车辆配备了各种摄像头，以获取与周围环境相关的丰富语义信息，并将特征统一在共享的鸟瞰图中，以支持可解释的运动规划任务。相机与地面的标定在确定相机坐标和地面坐标之间的特征位置的几何变换方面起着关键作用。它有助于消除相机的透视畸变，提供鸟瞰图表示空间，并且便于估算安装在车辆上的相机与地面上位置之间的距离，这在先进驾驶辅助系统（ADAS）和自动驾驶系统中被广泛应用。</p><p>在过去的几十年中，已经提出了许多相机与地面的标定方法。这些方法通常可以分为两类，其一是静态标定，其二是行驶过程中的在线标定。第一类方法通常使用诸如棋盘格或手动标注的地面物体等各种模式，事先计算相机与地面之间的变换关系。然而，由于车辆在道路上行驶时，由于轮胎气压变化、车辆载荷变化、道路表面多样性和部件振动，此类变换是非刚性的。相机与地面的标定应在行驶过程中进行多次，以调整几何投影的变化。例如，由周围视图鱼眼相机捕获的图像在下图a中，静态标定在下图b中会导致BEV图像不准确。在线标定可以减小变换误差，确保适当地处理投影变化，并生成下图c中对齐良好的BEV图像。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/1.png"></p><p>上图在给定的环视图鱼眼相机图像a中，静态标定包含了大量的相机到地面估计误差，导致BEV图像不匹配b，但是本文的方法在c中生成了一个对齐良好的BEV图像。第二类现有方法应用在线标定，这需要从道路上提取出特定的几何形状，例如单目相机的消失点和周围视图相机提取的车道标线，或者多个相机之间重叠区域的光度一致性，以辅助标定调整。然而，在各种行驶环境中很难保持这些要求。在这种情况下，需要在使用单个摄像头连续图像的情况下进行相机与地面的标定，而不依赖于任何特定的标定目标。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>本文采用了一种从粗到精的方法，在车辆行驶在道路上时，通过因子图优化获取地面特征并优化相机到地面的标定参数，而无需使用任何特定的标定目标。利用图像中水平线分离地面和非地面区域，通过轮式测程法预测地面特征的位置，并使用基于几何的方法验证地面特征。对三角测量的地面特征进行平面拟合，以获取地面的法向量和相机到地面的高度，并通过因子图优化进一步改进这些参数，以确定相机到地面的变换关系。考虑到在驾驶过程中相机到地面的非刚性变换，还提出了度量标定性能的指标和停止准则，以确保标定质量。</p><p>下图展示了系统框图，主要包含以下模块。首先利用运动学自车模型恢复图像关键帧之间的相对运动，以便进行相机姿态估计和地面点三角测量。其次从关键帧中提取粗糙的地面特征，通过车辆运动进行特征预测，并进一步进行优化地面特征验证过程。然后进行地面平面拟合，获取地面法向量和相机到地面的高度。然后通过因子图优化来细化相机姿态和相机到地面的变换参数，并提出了一个停止标定准则，确定何时发布相机到地面的标定结果。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/2.png"></p><h2 id="通过轮速里程计测量的相机运动"><a href="#通过轮速里程计测量的相机运动" class="headerlink" title="通过轮速里程计测量的相机运动"></a>通过轮速里程计测量的相机运动</h2><p>利用CAN总线系统提供的连续车轮里程读数估计车辆随时间的姿态变化，并确定相机关键帧之间的相对运动，以恢复单目相机系统的尺度因子。</p><h2 id="连续关键帧的地面提取"><a href="#连续关键帧的地面提取" class="headerlink" title="连续关键帧的地面提取"></a>连续关键帧的地面提取</h2><p>地面特征（即车辆所行驶的道路表面上的特征）在相机与地面标定中起着重要作用。在城市&#x2F;郊区环境中，大多数地面特征位于具有相似纹理的混凝土或沥青道路表面上，这些特征很难提取和匹配。这里提出了一种新颖的粗到细的地面特征提取架构，用于稳健的相机与地面标定。</p><p>首先，引入地平线提取方法，通过车辆运动预测地面特征的位置，以便进行特征匹配。然后，利用几何方法来验证地面特征，并进行地面平面拟合，以获得地面法线向量和相机中心到地面的高度。在进行标定时，选择以稳定速度行驶时的关键帧，这样可以在不同的图像帧之间获得较小的相机姿态变化，有利于标定过程的稳定性，关键帧是指在时间序列中选择的一帧图像，通常表示为时间间隔的起点。从选择的关键帧开始，通过KLT稀疏光流算法提取图像中的角点特征，并进行跟踪。然后通过水平线分割图像，可以筛选位于水平线以下的特征点来选择地面特征，并利用车辆的运动信息进一步预测地面特征在下一个关键帧中的位置，这样可以有效地提取和跟踪地面特征，为后续的相机到地面标定和场景理解提供重要的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/3.png"></p><p>上图通过车辆运动进行特征预测，这里，Ok是关键帧Ik的相机中心。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/4.png"></p><p>上图为粗糙的地面特征提取，对于每个特征，通过车辆运动预测其在下一个关键帧中的位置a。因此，与没有任何预测的KLT跟踪器中的特征相比，在b中有更多的、质量更高的匹配特征对。进一步在d中从b中均匀采样&#x2F;选择特征以进行计算优化。这里，红色线段的端点表示关键帧Ik和Ik+1之间的匹配特征，绿色线是地平线。</p><h2 id="跨关键帧地面优化"><a href="#跨关键帧地面优化" class="headerlink" title="跨关键帧地面优化"></a>跨关键帧地面优化</h2><p>采用基于滑动窗口的因子图优化方法来优化相机姿态、地面法向量和相机中心到地面的高度。通过使用单应性变换矩阵，可以将当前关键帧的特征点投影到上一关键帧的图像中。然后通过最小化重投影误差来优化相机姿态和地面参数，以确保在上一关键帧中的特征点与当前关键帧中的投影点之间的一致性。</p><p>具体来说，首先计算从当前关键帧到上一关键帧的相机姿态变换。然后，根据相机姿态变换将当前关键帧的特征点投影到上一关键帧的图像平面上。接下来计算投影点与上一关键帧中的特征点之间的重投影误差，并将其作为优化问题的目标函数。通过最小化这个目标函数，可以同时调整相机姿态、地面法向量和相机中心到地面的高度，从而得到更准确的地面参数。通过这种跨关键帧的地面优化方法，可以更好地优化相机姿态和地面参数，提高相机到地面的标定精度，并为后续的路径规划和场景感知任务提供更准确的地面信息。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>在各种驾驶场景下使用乘用车实现了本文的算法并进行了大量实验，车辆安装了由四个向下朝向的鱼眼摄像机组成的全景摄像系统（参见下图a中的示例），这些摄像机与车轮编码器数据同步。摄像机的帧率为33Hz，图像分辨率调整为812×540。本文收集了来自不同区域的长序列连续数据，以分析本文算法的效率和鲁棒性（参见表I）。这些数据涵盖了从平坦的铺装地面（FPG）到城市、郊区和农村等不同天气、光照和驾驶条件下的公共道路，FPG数据来自极其平坦的沥青路面，用于验证本文动态标定的基准性能。表I的最后一列表示车辆行驶而不是停车的时间百分比。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/5.png"></p><p>上图显示本文的方法在具有挑战性的驾驶场景中表现良好，图中的标签与表格I从上到下对应。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/6.png"></p><p>将本文的方法与现有的最先进方法进行比较，从而定性地检验性能，包括Liu等人[23]、OECS[24]和ROECS[25]在本文的数据集上的性能。首先比较了在FPG数据上的标定性能，并在表II中总结了结果。与对手一样，本文的方法在车辆行驶在FPG上时能够生成连续稳定的相机到地面的标定。因此显示了与地面真实（GT）标定的欧拉角差的平均值，并评估绝对变化量δr、δp和δy。这里，δr、δp和δy分别表示滚转角、俯仰角和偏航角的变化量。表II中的δh列是相机中心到地面的高度位移。在表II中，即使在图像上没有可辨别纹理的混凝土路面上，本文的在线方法也取得了更好的性能。例如，本文的方法在俯仰角、偏航角和高度估计方面分别获得了显著的绝对增益，分别为44.4%、50.0%和71.2%。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/7.png"></p><p>为了展示本文提出的方法的优越性，在下图中呈现了误差直方图，获得了不同区间的误差差异，作为相对于最先进工作的性能提升的总和。本文的方法在不同水平下具有相对较小的特征转移误差f，并且误差保持在0.83像素以内，这在不同数据序列中保持一致。本文的方法在郊区数据上获得了最低的性能增益44.2%，在城市数据上获得了最高的性能增益67.6%。在从城市到农村地区的公共道路驾驶数据中，与最先进方法相比，本文的方法在误差p方面表现更好。误差p在0.75像素以内变化，并且90.9%的误差在0.67像素以内。在考虑平坦道路条件的情况下，性能提高了12.7%，在郊区数据中获得了最高得分，而在FPG数据中获得了最低得分，为1.59%。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/8.png"></p><p>上图为表I中数据序列的性能直方图。水平轴的值对应于误差，垂直轴是概率密度。</p><p>下图展示了在车辆以高速直行时不同方法生成的鸟瞰图像的视觉结果。本文的方法不依赖于不同摄像头之间的重叠区域或特定物体，获得了较小的特征残差误差，并生成了更好对齐的鸟瞰图像，原因如下：</p><p>（1）直行车道标线与车辆行驶方向平行；</p><p>（2）摄像头之间的车道标线互相重叠；</p><p>（3）道路上的混凝土裂缝在相邻摄像头鸟瞰图像的重叠区域上连接在一起。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/9.png"></p><p>上图为在行驶过程中城市I数据的示例结果。上图展示了a本文的结果，bROECS[25]，cOECS[24]和（d）Liu等人的结果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文提出了一种在线相机到地面无目标标定方法，用于在行驶过程中生成相机坐标与地面坐标之间的非刚体变换。采用了一种新颖的粗到精的架构来选择地面特征，并通过基于几何的方法进行验证。对三角化的地面特征进行平面拟合，以获得地面法向量和相机到地面的高度，然后通过滑动窗口的因子图优化对其进行优化。通过旋转平均确定相机到地面的变换，并提供停止标准来广播满足标定结果的情况。使用从不同天气和驾驶条件下收集的真实数据对本文的算法进行了广泛测试，结果显示本文的方法是有效的，并且优于最先进的技术。在未来将减少因子图优化的运行时间复杂度，并进行可观测性分析，以识别帮助丢弃不需要用于标定计算的姿态和地面特征的退化场景。</p><h1 id="文章链接"><a href="#文章链接" class="headerlink" title="文章链接"></a>文章链接</h1><p><a href="https://arxiv.org/pdf/2303.17137.pdf">参考文章</a></p><p><a href="https://mp.weixin.qq.com/s/nSMl6mf-cyc54tL-yLdJcw">原文链接</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 相机标定 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
            <tag> 360环视 </tag>
            
            <tag> 在线标定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单应性矩阵应用之鸟瞰图生成</title>
      <link href="/2023/11/02/dan-ying-xing-ju-zhen-ying-yong-zhi-niao-kan-tu-sheng-cheng/"/>
      <url>/2023/11/02/dan-ying-xing-ju-zhen-ying-yong-zhi-niao-kan-tu-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 鸟瞰图 </tag>
            
            <tag> 单应性矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础学习g2o</title>
      <link href="/2023/10/17/ling-ji-chu-xue-xi-g2o/"/>
      <url>/2023/10/17/ling-ji-chu-xue-xi-g2o/</url>
      
        <content type="html"><![CDATA[<h1 id="正篇"><a href="#正篇" class="headerlink" title="正篇"></a>正篇</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>g2o（General Graphic Optimization）是一个基于图优化的库，将非线性优化与图论结合起来的理论，我们可以<strong>利用g2o求解任何可以表示为图优化的最小二乘问题</strong>。图优化就是把优化问题表现成图的方式。图由顶点和边组成，其中<em>顶点表示优化变量</em>，<em>边表示误差项</em>，对任意一个非线性最小二乘问题，我们都可以构建与之对应的图。</p><p>g2o的核里带有各种各样的求解器，而它的顶点、边的类型则多种多样。通过自定义顶点和边，事实上，只要一个优化问题能够表达成图，那么就可以用g2o去求解它。常见的，比如bundle adjustment，ICP，数据拟合，都可以用g2o来做。</p><p>从代码层面来说，g2o是一个c++编写的项目，用cmake构建。它的github地址在：<a href="https://github.com/RainerKuemmerle/g2o">https://github.com/RainerKuemmerle/g2o</a> </p><p>g2o的源代码文件夹的内容：</p><ul><li><code>apps</code>　　　　 一些应用程序。好用的g2o_viewer就在这里。其他还有一些不常用的命令行工具等。</li><li><code>core</code>　　　　 核心组件，很重要！基本的顶点、边、图结构的定义，算法的定义，求解器接口的定义在这里。</li><li><code>examples</code>　  一些例程，可以参照着这里的东西来写。不过注释不太多。</li><li><code>solvers</code>　　  求解器的实现。主要来自choldmod, csparse。在使用g2o时要先选择其中一种。</li><li><code>stuff</code>　　　  对用户来讲可有可无的一些工具函数。</li><li><code>types</code>　　　  各种顶点和边，很重要！我们用户在构建图优化问题时，先要想好自己的顶点和边是否已经提供了定义。如果没有，要自己实现。如果有，就用g2o提供的即可。</li></ul><p>就经验而言，<code>solvers</code>给人的感觉是大同小异(不同的求解器可能有针对性的求解场景，但是对于一般的优化问题，一般都适用)，而 <code>types</code> 的选取(关键就是顶点和边的定义)，则是 g2o 用户主要关心的内容。然后 <code>core</code> 下面的内容，我们要争取弄的比较熟悉，才能确保使用中出现错误可以正确地应对。</p><p>g2o的结构图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/g2o%E6%A1%86%E6%9E%B6%E5%9B%BE.png"></p><p>先看上半部分。<code>SparseOptimizer</code>(稀疏优化器) 是我们最终要维护的东东。它是一个OptimizableGraph(优化图)，从而也是一个HyperGraph(超图)。一个 <code>SparseOptimizer</code> 含有很多个顶点 （都继承自 <code>Base Vertex</code>）和很多个边（继承自 <code>BaseUnaryEdge</code>(一元边), <code>BaseBinaryEdge</code>(二元边)或<code>BaseMultiEdge</code>(多元边)）。这些 <code>Base Vertex</code> 和 <code>Base Edge</code>都是抽象的基类，而实际用的顶点和边，都是它们的派生类。我们用 <code>SparseOptimizer.addVertex</code> 和 <code>SparseOptimizer.addEdge</code> 向一个图中添加顶点和边，最后调用 <code>SparseOptimizer.optimize</code> 完成优化。</p><p>在优化之前，需要指定我们用的求解器和迭代算法。从图中下半部分可以看到，一个 <code>SparseOptimizer</code> 拥有一个 <code>Optimization Algorithm</code>继承自<code>Gauss-Newton</code>, <code>Levernberg-Marquardt</code>, <code>Powell&#39;s dogleg</code> 三者之一（我们常用的是GN或LM）。同时，这个 <code>Optimization Algorithm</code> 拥有一个<code>Solver</code>它含有两个部分。一个是 <code>SparseBlockMatrix</code> ，用于计算稀疏的雅可比矩阵和海塞矩阵； 一个是 <code>linearsolver</code> ，用于计算迭代过程中最关键的一步：</p><p>$$H\Delta x&#x3D;-b$$</p><p>这就需要一个线性方程的求解器。而这个求解器，可以从 PCG, CSparse, Choldmod 三者选一。</p><p><strong>综上所述，在g2o中选择优化方法一共需要三个步骤：</strong></p><ul><li>选择一个线性方程求解器，从 PCG, CSparse, Choldmod中选，实际则来自 g2o&#x2F;solvers 文件夹中定义的东东。</li><li>选择一个 BlockSolver 。</li><li>选择一个迭代策略，从GN, LM, Doglog中选。</li></ul><h1 id="扫盲篇"><a href="#扫盲篇" class="headerlink" title="扫盲篇"></a>扫盲篇</h1><h2 id="最小二乘"><a href="#最小二乘" class="headerlink" title="最小二乘"></a>最小二乘</h2><blockquote><p>参考网站：<a href="https://blog.csdn.net/qq_41598072/article/details/83984299">https://blog.csdn.net/qq_41598072/article/details/83984299</a><br>大家可以随意搜索一下，相关的文章很多。长篇大论的不少，刚入门的朋友一看到那些公式可能就看不下去了。比如下面的解释：</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi1jMjdkNWI0NzcwNjM5NDZiNmFiZmQxNWI1YTYzNTExNV9oZC5qcGc?x-oss-process=image/format,png"></p><p>毫无疑问，这样的解释是专业的，严谨的。事实上，这是深度学习圣经里的解释。我并没有诋毁大师的意思，只是觉得用一个具体的例子来说明，可能会让读者更加容易理解：</p><p>小明是跑运输的，跑1公里需要6块，跑2公里需要5块（那段时间刚好油价跌了），跑3公里需要7块，跑4公里需要10块，请问跑5公里需要多少块？</p><p>如果我们有初中数学基础，应该会自然而然地想到用线性方程组来做，对吧。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi1kMGRkYzFiM2EzNGRiOTE5Yzk0OGViOTAyZWQwMzEyOF9oZC5qcGc?x-oss-process=image/format,png"></p><p>这里假定x是公里数，y是运输成本（β1和β2是要求的系数）。我们把上面的一组数据代入得到这么几个方程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi0zMWQ5OWY5YmIxZjViMDE0MDcyMTBhYTRiYmIzM2IwY19oZC5qcGc?x-oss-process=image/format,png"></p><p>如果存在这样的β1和β2，让所有的数据$（x，y）&#x3D;（1,6），（2,5），（3,7），（4，10）$ 都能满足的话，那么解答就很简单了，β1+5β2就是5公里的成本，对吧。</p><p>但遗憾的是，这样的β1和β2是不存在的，上面的方程组很容易，你可以把前面两个解出来得到一组β1和β2，后面两个也解出来同样得到一组β1和β2。这两组β1和β2是不一样的。</p><p>形象地说，就是你找不到一条直线，穿过所有的点，因为他们不在一条直线上。如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi04NWRlYTEzMTU4OTgyMzgxZDViMjcxMmM2YmY3MjI2MV9oZC5qcGc?x-oss-process=image/format,png"></p><p>可是现实生活中，我们就希望能找到一条直线，虽然不能满足所有条件，但能<strong>近似</strong>地表示这个趋势，或者说，能近似地知道5公里的运输成本，这也是有意义的。</p><p>现实生活当中，有很多这样的例子，想起以前在某公司上班的时候，CEO说我们研发部做事有个问题：一个研发任务，要求三个月做完，因为周期太短，完成不了，就干脆不做，这显然是不对的，要尽全力，哪怕三个月完成了80%，或者最终4个月完成，总比不作为的好。</p><p>其实最小二乘法也是这样，要尽全力让这条直线最接近这些点，那么问题来了，怎么才叫做最接近呢？直觉告诉我们，这条直线在所有数据点中间穿过，让这些点到这条直线的误差之和越小越好。这里我们用方差来算更客观。也就是说，把每个点到直线的误差平方加起来：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi05MzljOTExODY2N2VlMzgxNzI1NTQ3ZmE2MDUwNDFkY19oZC5qcGc?x-oss-process=image/format,png"></p><p>（如果上面的四个方程都能满足，那么S的值显然为0，这是最完美的，但如果做不到完美，我们就让这个S越小越好）</p><p>接下来的问题就是，如何让这个S变得最小。这里有一个概念，就是求偏导数。这里我想提一下，在培训的过程中，我发现机器学习的数学基础课程当中，微积分是大家印象最深刻的，而且也最容易理解：比如导数就是求变化率，而偏导数则是当变量超过一个的时候，对其中一个变量求变化率。如果这个概念也忘了，可以参考我在深度学习回答里那个王小二卖猪的例子。这里就不细讲了：</p><p>要让S取得最小值（或最大值，但显然这个函数没有最大值，自己琢磨一下），那么S对于β1和β2分别求偏导结果为0，用一个直观的图来表示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi05NjgwODUzMTY5YmNhMGRjY2M2OTY3OGM4MzM4NzQ2MV9oZC5qcGc?x-oss-process=image/format,png"></p><p>我们看到这条曲线，前半部分是呈下降的趋势，也就是变化率（导数）为负的，后半部分呈上升的趋势，也就是变化率（导数）为正，那么分界点的导数为0，也就是取得最小值的地方。这是一个变量的情况，对于多个变量的情况，要让S取得最小值，那最好是对β1和β2分别求导（对β1求导的时候，把β2当常量所以叫求偏导），值为0：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi05ZDlmZDA4MGM1YmZiOTAxMTc0NjM5YTVmMjM3Y2M2OV9oZC5qcGc?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi00ZTQ1OWRkNDQ1N2Q5ZDM1YTk3ZDU1NWUyMGJiYmU3OF9oZC5qcGc?x-oss-process=image/format,png"></p><p>看到这个我们就熟悉了，两个变量，刚好有两个方程式，初中学过，那么很容易得出：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi1mMDMwYTk0Y2M4YjcwYjgzYjk4MDUxMDg0MTkyMTM5ZF9oZC5qcGc?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi0xYmM3ZTQ5OTYyY2EyMTI1NGI3YWU5N2M3OTNlNWYwY19oZC5qcGc?x-oss-process=image/format,png"></p><p>其实也就意味着</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWM0LnpoaW1nLmNvbS84MC92Mi00ZTJhNzVmMWJkMmM0NzZmOTFlNmYzMDMwMzFiNzcyYl9oZC5qcGc?x-oss-process=image/format,png"></p><p>这个函数也就是我们要的直线，这条直线虽然不能把那些点串起来，但它能最大程度上接近这些点。也就是说5公里的时候，成本为3.5+1.4x5&#x3D;10.5块，虽然不完美，但是很接近实际情况。</p><h2 id="BA优化"><a href="#BA优化" class="headerlink" title="BA优化"></a>BA优化</h2><blockquote><p>参考网站: <a href="https://optsolution.github.io/archives/58892.html">https://optsolution.github.io/archives/58892.html</a></p></blockquote><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Bundle Adjustment中文译为<strong>光束法平差</strong>，大概大家看到更多的翻译可能为束调整、捆集调整或者捆绑调整等等.所谓bundle，来源于bundle of light，其本意就是指的光束，这些光束指的是三维空间中的点投影到像平面上的光束，而重投影误差正是利用这些光束来构建的，因此称为光束法强调光束也正是描述其优化模型是如何建立的。</p><p>剩下的就是平差，那什么是平差呢？由于测量仪器的精度不完善和人为因素及外界条件的影响，测量误差总是不可避免的。为了提高成果的质量，处理好这些测量中存在的误差问题，观测值的个数往往要多于确定未知量所必须观测的个数，也就是要进行<em>多余观测</em>。有了多余观测，势必在观测结果之间产生矛盾，测量平差的目的就在于消除这些矛盾而求得观测量的最可靠结果并评定测量成果的精度。测量平差采用的原理就是“最小二乘法”。平差也就正好表述了为什么需要BA以及BA这个优化过程到底是怎么进行的。<strong>BA的本质是一个优化模型，其目的是最小化重投影误差</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/BA1.jpg"></p><p>这些五颜六色的线就是我们讲的光束啦！那现在就该说下什么叫重投影误差了，重投影也就是指的第二次投影，那到底是怎么投影的呢？我们来整理一下吧。</p><ul><li>第一次投影指的就是相机在拍照的时候三维空间点投影到图像上</li><li>第二次投影指的是利用几何信息构建三角形来确定三维空间点的位置，利用相机矩阵将得到的三维点的坐标投影到图像上，进行第二次投影，也就是重投影.重投影使用的三维点的位置是根据三角化得到的。<blockquote><p>第二次投影利用到了三角化的原理，那么什么是三角化呢？参加后文三角化介绍。</p></blockquote></li></ul><p>现在我们知道什么是重投影了，那重投影误差到底是什么样的误差呢？这个误差是指的真实三维空间点在图像平面上的投影（也就是图像上的像素点）和重投影（其实是用我们的计算值得到的虚拟的像素点）的差值，因为种种原因计算得到的值和实际情况不会完全相符，也就是这个差值不可能恰好为0，此时也就需要将这些差值的和最小化获取最优的相机参数及三维空间点的坐标。</p><p>BA是一个图优化模型，那首先肯定要构造一个图模型了（没学过图论也没事，后面还是会回到一般的优化模型）。既然是图模型那自然就有节点和边了，这个图模型的节点由相机$P_i$和三维空间点$X_j$构成，如果点$X_j$投影到相机$P_i$的图像上则将这两个节点连接起来。还是来张图吧。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/BA2.png"></p><p>这样就一目了然了。那么我们现在就可以通过这个图来构造优化模型了。</p><p>令点$X_j$在相机$P_i$拍摄到的图像归一化坐标系上的坐标为$k(u_{i j}^{T},1)^{T}&#x3D;K_{i}^{-1}x_{i j}$，其重投影后的图像归一化坐标系下坐标为$k^{\prime}(v_{i j}^{T},1)^{T}&#x3D;K_{i}^{-1}P_{i}X_{j}$，其中$K_{i}^{-1}$是为了在计算时能不受相机内参影响,$k$和$k^{\prime}$是将齐次坐标转换为非齐次坐标的常数项，可以得到该重投影误差为:<br>$$e_{i j}&#x3D;u_{i j}-v_{i j}$$<br>BA是要将所有重投影误差的和最小化，那么这里自然就要开始求和了。<br>$$\operatorname*{min}<em>{R</em>{i},t_{i},X_{j}}\sum_{i,j}\sigma_{i j}||u_{i j}-v_{i j}||<em>{2}$$<br>其中当点$X_j$在相机$P_i$中有投影时$\sigma</em>{i j}&#x3D;1$，否则为$\sigma_{i j}&#x3D;0$。到此我们就得到了BA优化模型的数学形式了。</p><p>既然是优化模型，那自然就应该用各种优化算法来进行计算了。常用的方法有最速下降法，牛顿方法，高斯牛顿方法，LM方法。具体细节<a href="https://optsolution.github.io/archives/58892.html">点我查看</a></p><blockquote><p>具体细节预览<a href="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/BA%E7%AE%80%E8%BF%B0.png">点我查看</a></p></blockquote><h2 id="三角化"><a href="#三角化" class="headerlink" title="三角化"></a>三角化</h2><p>在单目SLAM中，仅通过单张图像无法获得像素的深度信息，我们需要通过三角测量(Triangulation)(或三角化)的方法来估计地图点的深度。即通过某个特征点P在不同帧图像中像素点的位置，来计算出该特征点在三维空间中的坐标，也即获得特征点P的深度信息。特征点在某个相机中被观测到，根据相机位姿和观测向量可以得到3D空间中的一条从相机中心出发的观测“射线”，多个相机位姿观测会产生多条观测射线，理想情况下这些观测射线相交于空间中一点，求所有观测射线的交点就是特征点在3D空间的位置，这就是三角化最朴素的思想。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/%E4%B8%89%E8%A7%92%E5%8C%96.png"></p><p>以两视图的三角化为例，考虑$I_1$,$I_2$两帧图像，$R,t$是第二帧相对于第一帧的旋转矩阵和平移向量（对应的变换矩阵是$T_{12}$）。在$I_1$中有特征点$p_1$，对应于$I_2$中的匹配点$p_2$。根据相机的内参数矩阵$K$，我们便可以获得$p_1$在帧归一化图像平面中的点$x_1&#x3D;K^{-1}p_{1}$；$p_2$在$I_2$帧归一化平面中的点$x_2&#x3D;K^{-1}p_2$。</p><p>根据对极约束，他们满足如下的关系：<br>$$s_{1}x_{1}&#x3D;s_{2}Rx_{2}+t$$</p><p>先对公式左右两端左乘反对称矩阵$x^{\wedge}$，得到：</p><p>$$s_{1}x_{1}^{\wedge}x_{1}&#x3D;0&#x3D;s_{2}x_{1}^{\wedge}R x_{2}+x_{1}^{\wedge}t$$</p><p>根据上述公式的右端，可以计算出$s_2$，进而计算出$s_1$，我们便可得到路标点$P$在这两帧中的深度。然而，在实际的位姿估计中，我们估计的值往往存在误差，上述公式不严格为0。这时候我们可以计算最小二乘解。</p><blockquote><p>多视图三角化<a href="https://gutsgwh1997.github.io/2020/03/31/%E5%A4%9A%E8%A7%86%E5%9B%BE%E4%B8%89%E8%A7%92%E5%8C%96/">点我查看</a><br>具体细节预览<a href="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/%E5%A4%9A%E8%A7%86%E5%9B%BE%E4%B8%89%E8%A7%92%E5%8C%96.png">点我查看</a></p></blockquote><h2 id="对极约束"><a href="#对极约束" class="headerlink" title="对极约束"></a>对极约束</h2><p>对极几何（Epipolar geometry）又叫对极约束，是根据图像二维平面信息来估计单目相机帧间运动或双目相机相对位姿关系的一种算法。直观来讲，当相机在两个不同视角对同一物体进行拍摄时，物体在两幅图像中的成像肯定会有不同，那么，根据这两幅不同的图像，我们如何判断出相机的位姿发生了怎样的变化，这正是对极几何要解决的问题。直观来说就是利用$n$对匹配点对的图像坐标求解相机位姿变换关系。</p><p>需要明确的是，在对极几何中，我们的已知条件仅仅是每幅图像中特征点的像素坐标，当然，计算对极约束的前提是我们必须知道两幅图像中特征点之间准确的匹配关系。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/%E5%AF%B9%E6%9E%81%E5%87%A0%E4%BD%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png"><br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/%E5%AF%B9%E6%9E%81%E5%87%A0%E4%BD%95%E6%8E%A8%E5%AF%BC.png"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> g2o </category>
          
      </categories>
      
      
        <tags>
            
            <tag> g2o </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文献检索</title>
      <link href="/2023/10/09/lun-wen-jian-suo/"/>
      <url>/2023/10/09/lun-wen-jian-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="360环视"><a href="#360环视" class="headerlink" title="360环视"></a>360环视</h1><h2 id="相机标定优化"><a href="#相机标定优化" class="headerlink" title="相机标定优化"></a>相机标定优化</h2><h3 id="Online-Correction-of-Camera-Poses"><a href="#Online-Correction-of-Camera-Poses" class="headerlink" title="Online Correction of Camera Poses"></a>Online Correction of Camera Poses</h3><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Online%20correction%20of%20camera%20poses%20for%20the%20surround%20viewsystem%20a%20sparse%20direct%20approach.pdf">Online Correction of Camera Poses for the Surround-view System: A Sparse Direct Approach</a></p></li><li><p>摘要<br>环绕视图模块是现代先进驾驶辅助系统不可或缺的组成部分。通过精确地校准环绕视图摄像机的内部信息和外部信息，可以从原始的鱼眼图像中生成一个自上而下的环绕视图。然而，这些相机的姿势有时可能会改变。目前，如何在不重新校准的情况下，在线校正相机的姿态仍是一个有待解决的问题。为了解决这个问题，我们引入了稀疏直接框架，并提出了一种新的级联结构优化方案。该方案实际上由两级优化方案组成，并提出了两个相应的基于光度误差的模型。第一级优化的模型称为地面模型，因为它的光度误差是在地平面上测量的。对于优化的第二层，它是基于所谓的地面照相机模型，即在成像平面上计算光度误差。利用这些模型，姿态校正任务被表述为一个非线性最小二乘问题，以最小化相邻鸟瞰图图像重叠区域的光度误差。通过这两个层次优化的级联结构，可以在速度和精度之间达到适当的平衡。实验表明，该方法可以有效地消除环绕视图系统中摄像机适度姿态变化造成的错位。源代码和测试用例可以在<a href="https://cslinzhang.github.io/CamPoseCorrection/">https://cslinzhang.github.io/CamPoseCorrection/</a>上找到。</p></li></ul><blockquote><p><em>The surround-view module is an indispensable component of a modern advanced driving assistance system. By calibrating the ntrinsics and extrinsics of the surround-view cameras accurately, a top-down surround-view can be generated from raw fisheye images. However, poses of these cameras sometimes may change. At present, how to correct poses of cameras in a surround-view system online without re-calibration is still an open issue. To settle this problem, we introduce the sparse direct framework and propose a novel optimization scheme of a cascade structure. This scheme is actually composed of two levels of optimization and two corresponding photometric error based models are proposed. The model for the first-level optimization is called the ground model, as its photometric errors are measured on the ground plane. For the second level of the optimization, it’s based on the so-called ground-camera model, in which photometric errors are computed on the imaging planes. With these models, the pose correction task is formulated as a nonlinear least-squares problem to minimize photometric errors in overlapping regions of adjacent bird’s-eye-view images. With a cascade structure of these two levels of optimization, an appropriate balance between the speed and the ccuracy can be achieved. Experiments show that our method can effectively eliminate the misalignment caused by cameras’ moderate pose hanges in the surround-view system. Source code and test cases are available online at <a href="https://cslinzhang.github.io/CamPoseCorrection/">https://cslinzhang.github.io/CamPoseCorrection/</a>.</em></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 文献检索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文献检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础学习卡尔曼滤波</title>
      <link href="/2023/10/08/ling-ji-chu-xue-xi-qia-er-man-lu-bo/"/>
      <url>/2023/10/08/ling-ji-chu-xue-xi-qia-er-man-lu-bo/</url>
      
        <content type="html"><![CDATA[<h1 id="扫盲篇"><a href="#扫盲篇" class="headerlink" title="扫盲篇"></a>扫盲篇</h1><h2 id="最小二乘"><a href="#最小二乘" class="headerlink" title="最小二乘"></a>最小二乘</h2><p>$a_1$ dddddddddddddddddddddddddd</p><p>dfsadfasdf<br>$$a_1$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 2 &amp; 3 \\<br>4 &amp; 5 &amp; 6 \\<br>7 &amp; 8 &amp; 9<br>\end{bmatrix}<br>$$</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 卡尔曼滤波 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卡尔曼滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用图像变换</title>
      <link href="/2023/09/20/chang-yong-tu-xiang-bian-huan/"/>
      <url>/2023/09/20/chang-yong-tu-xiang-bian-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="形态学变换"><a href="#形态学变换" class="headerlink" title="形态学变换"></a>形态学变换</h1><p>形态学变换是一组用于图像处理中的数学操作，用于改变图像中物体的形状、大小和结构。这些操作通常用于处理二值图像（黑白图像），用于分割图像中的物体、去除噪声、查找轮廓等，最初是为了分析和处理二值图像中的形状、结构和特征而开发的。</p><h2 id="腐蚀与膨胀"><a href="#腐蚀与膨胀" class="headerlink" title="腐蚀与膨胀"></a>腐蚀与膨胀</h2><p>与卷积操作类似(嗯… 什么是卷积…<a href="https://setosa.io/ev/image-kernels/">点我查看</a>),假设有图像A和结构元素B,结构元素B在A上面移动,其中B定义其中心为锚点，计算B覆盖下A的最大像素值用来替换锚点的像素，其中B作为结构体可以是任意形状。随着锚点在图像上的移动，结构B就可对图像上的每个像素进行处理。</p><p>膨胀操作用于扩大图像中的白色区域，即通过结构元素的移动来扩展白色像素。如果结构元素的中心覆盖了至少一个白色像素，则中心位置的像素被置为白色。膨胀操作通常用于填充空洞、连接断开的对象和扩展物体。腐蚀和膨胀是数学形态学最基本的变换。</p><p>图像膨胀主要针对的是阈值化后的图像。图像膨胀类似于“领域被扩张”，将图像中的高亮区域或白色部分进行扩增粗化，其运行结果图比原图的高亮区域更大。其原理是：将核在原始图像中进行遍历，然后将原始图像遍历到的像素点的值与自定义卷积核(全为1的二维矩阵)得值进行与运算，像素点与对应核一 一对应进行与，当卷积核对应的元素值只要有一个为1时，设置卷积核中心值的像素点为1，如果全为0，,则其值设置为0。</p><p>图像腐蚀主要针对的是阈值化后的图像。图像腐蚀类似于“领域被蚕食”，将图像中的高亮区域或白色部分进行缩减细化，其运行结果图比原图的高亮区域更小。其原理是：将核在原始图像中进行遍历，然后将原始图像遍历到的像素点的值与自定义卷积核(全为1的二维矩阵)得值进行与运算，像素点与对应核一 一对应进行与，当卷积核对应的元素值均为1时，设置卷积核中心值的像素点为1，否则其值设置为0</p><p>一头雾水，直接看图…</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/df2fe5f21358787937bf255254be8820.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6b29fcd3560f6d0db69c76561679ee41.png"></th></tr></thead><tbody><tr><td><strong>腐蚀变换</strong></td><td><strong>原图</strong></td><td><strong>膨胀变换</strong></td></tr></tbody></table><p>注：卷积核的大小为5×5。</p><p><strong>腐蚀就是使得“白色”区域变小，膨胀就是使得“白色”区域变大。</strong></p><h2 id="开运算与闭运算"><a href="#开运算与闭运算" class="headerlink" title="开运算与闭运算"></a>开运算与闭运算</h2><p>开运算是将腐蚀（Erosion）操作和膨胀（Dilation）操作依次应用于图像的操作。首先执行腐蚀操作，然后再执行膨胀操作。开运算通常用于以下情况：</p><ul><li>去除小的噪声和斑点：通过腐蚀操作可以缩小小的白色区域，然后通过膨胀操作将它们恢复到原始大小，从而去除小的噪声和斑点。</li><li>分离连接的物体：开运算可以分离连接在一起的物体，使它们变得更远离彼此。</li></ul><p>闭运算是将膨胀（Dilation）操作和腐蚀（Erosion）操作依次应用于图像的操作。首先执行膨胀操作，然后再执行腐蚀操作。闭运算通常用于以下情况：</p><ul><li>填充物体内的小孔：通过膨胀操作可以填充物体内的小孔，然后通过腐蚀操作来还原物体的大小。</li><li>连接断开的物体：闭运算可以连接断开的物体，使它们相互接触。</li></ul><p>在图像分割中，开运算可以分离相邻物体，闭运算可用于连接物体。在光学字符识别（OCR）中，开运算可用于去除文本字符之间的干扰，闭运算可用于连接字符的笔画。在医学影像中，这些操作可用于处理X射线图像或CT扫描图像中的结构。</p><p>一头雾水，直接看图…</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/28953503336881d61c9b80472ab7a96f.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png" alt="原始图像"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/60951e8e70e0276c13faa177bc76695e.png"></th></tr></thead><tbody><tr><td><strong>开运算</strong></td><td><strong>原图</strong></td><td><strong>闭运算</strong></td></tr></tbody></table><p>注：卷积核的大小为5×5。</p><p>嗯… 有啥区别…. 因为开运算和闭运算都是腐蚀和膨胀相结合的，无非是顺序不同，因此，对于上述图像的影响不大。</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0d6668004a819e172f8c6ac9ca7d8864.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8b39caf08ec08e1441b49cd645c20e63.png"></th></tr></thead><tbody><tr><td><strong>开运算</strong></td><td><strong>原图</strong></td><td><strong>闭运算</strong></td></tr></tbody></table><p><strong>开运算就是填充白色空洞，闭运算就是断开黑色连接，开运算和闭运算都基本保持图像原来的尺寸和形状。</strong></p><h2 id="形态学梯度"><a href="#形态学梯度" class="headerlink" title="形态学梯度"></a>形态学梯度</h2><p>形态学梯度通过计算图像中每个像素点的亮度变化程度来实现，从而可以突出物体的边界。形态学梯度操作通常对二值图像或灰度图像进行处理。</p><p>形态学梯度操作通常通过以下公式来计算每个像素的梯度值：</p><p>Gradient(x,y)&#x3D;Dilation(x,y)-Erosion(x,y)</p><p>Dilation(x,y) 表示对图像进行膨胀操作，Erosion(x,y) 表示对图像进行腐蚀操作。这意味着形态学梯度是膨胀图像和腐蚀图像之间的差异。这种操作突出了物体的边缘，因为边缘像素的值在膨胀和腐蚀之间产生最大的变化。形态学梯度的应用如下：</p><ul><li>边缘检测：形态学梯度可用于检测图像中的边缘，使其成为图像处理中常用的边缘检测工具。在边缘检测中，物体边界通常是感兴趣的区域，形态学梯度可以帮助找到这些边界。</li><li>物体分割：形态学梯度可以用于分割图像中的不同物体，因为它可以突出物体之间的边界。这在计算机视觉和图像分析中非常有用。</li><li>纹理分析：在纹理分析中，形态学梯度可以用于检测和描述图像中的纹理特征，从而有助于分类和识别任务。</li><li>图像增强：形态学梯度操作可以增强图像中物体的轮廓和边缘，使它们更清晰可见，这在图像改进和可视化中很有用。</li><li>医学影像处理：在医学图像中，形态学梯度可以用于检测血管、骨骼和组织的边界，从而帮助医生进行诊断。</li></ul><p>对图像进行形态学梯度计算时的效果如下：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fcbca0d7334a7df27f68aad79fcc65fd.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>形态学梯</strong></td></tr></tbody></table><p>通过上图可以看出，形态学梯度对图像的边缘检测具有明显的效果。</p><h2 id="顶帽与黑帽"><a href="#顶帽与黑帽" class="headerlink" title="顶帽与黑帽"></a>顶帽与黑帽</h2><p>顶帽和黑帽是形态学图像处理中的两种操作，它们分别用于突出图像中的亮区域和暗区域，常用于图像增强和特征提取。顶帽操作是原始图像与开运算的结果之差。开运算通常用于去除图像中的噪声或连接分散的物体，因此顶帽操作可以突出图像中的小亮区域或物体的细节。顶帽操作通常用于以下情况：</p><ul><li>亮物体检测：当亮物体与背景的亮度差异很小时，顶帽操作可以突出这些亮物体。</li><li>纹理分析：用于分析图像中的纹理和细节。</li><li>图像增强：可以增强图像中的细节，使其更清晰可见。</li></ul><p>黑帽操作是闭运算的结果与原始图像之差。闭运算通常用于填充物体内的小孔或连接物体，因此黑帽操作可以突出图像中的小暗区域或物体的细节。黑帽操作通常用于以下情况：</p><ul><li>暗物体检测：当暗物体与背景的亮度差异很小时，黑帽操作可以突出这些暗物体。</li><li>小孔填充：用于填充物体内的小孔或裂缝，以还原物体的形状。</li><li>图像增强：可以增强图像中的细节，特别是暗区域的细节。</li></ul><p>应用示例：</p><ul><li>医学影像：顶帽和黑帽操作可用于医学影像中的病变检测和血管分析。</li><li>工业检测：在制造业中，它们可用于检测产品表面上的缺陷或微小的瑕疵。</li><li>纹理分析：用于纹理分析和纹理特征提取，例如在图像分类或图像检索中。</li><li>数字图像处理：常用于数字图像处理中的各种图像增强和预处理任务。</li></ul><p>总之，顶帽和黑帽操作是形态学图像处理中的两种重要工具，可以帮助突出图像中的亮暗区域和细节，用于不同的图像分析和增强任务。选择适当的操作取决于具体的应用场景和目标。</p><p>一头雾水，直接看图…</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4bbcac92cf2200b7e9865fa07d1e73c3.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4f8310d681cc934306a65da7641bb029.png"></th></tr></thead><tbody><tr><td><strong>顶帽</strong></td><td><strong>原图</strong></td><td><strong>黑帽</strong></td></tr></tbody></table><p>结合开运算和闭运算，就可以看出顶帽和黑帽操作与之的关系，但是具体应用起来是什么样子的呢？看下图：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/aa5e50980c5e180aa26224402a463e6e.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4693bd3b37c710f59bbc5155dd0bcba2.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5e779f81df404e04a55ad2c946aed599.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>闭运算</strong></td><td><strong>黑帽</strong></td></tr></tbody></table><p>| <img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/e1040dba7d87a8279fac9a8ee3ef6b64.png"> | <strong><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/3e16fd13019d0bd17319d5190ca46760.png"></strong> | <img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d565b8b1a2af708a41f010d0b6f7e810.png"> |<br>| <strong>原图</strong>                                                | <strong>开运算</strong>                                                | <strong>顶帽</strong>                                            |</p><p><strong>顶帽操作是原始图像与开运算的结果之差。黑帽操作是闭运算的结果与原始图像之差。</strong></p><h1 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h1><p>几何变换是数字图像处理领域中的关键概念，用于改变图像的几何结构和外观，而不涉及像素值的修改。这些变换允许我们对图像进行缩放、旋转、平移、拉伸和扭曲等操作，以满足特定的需求和应用场景。几何变换在图像处理中有广泛的应用，从简单的尺寸调整到复杂的场景校正和特效添加。它们为我们提供了强大的工具，用于改善图像质量、分析图像内容以及实现各种计算机视觉任务。无论是医学影像分析、自动驾驶、视频游戏还是艺术创作，几何变换都是不可或缺的工具，为图像处理和计算机视觉领域的不断发展提供了关键支持。</p><h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><p>仿射变换是指在向量空间中进行一次线性变换(乘以一个矩阵)并加上一个平移(加上一个向量)，变换为另一个向量空间的过程。在有限维的情况下，每个仿射变换可以由一个矩阵A和一个向量b给出，它可以写作A和一个附加的列b。一个仿射变换对应于一个矩阵和一个向量的乘法，而仿射变换的复合对应于普通的矩阵乘法，只要加入一个额外的行到矩阵的底下，这一行全部是0除了最右边是一个1，而列向量的底下要加上一个1.</p><p>仿射变换描述了一种二维仿射变换的功能，它是一种二维坐标之间的线性变换，保持二维图形的“平直性”(即变换后直线还是直线，圆弧还是圆弧)和“平行性”(其实是保持二维图形间的相对位置关系不变，平行线还是平行线，而直线上的点位置顺序不变，另特别注意向量间夹角可能会发生变化)。仿射变换可以通过一系列的原子变换的复合来实现包括：平移(Translation)、缩放(Scale)、翻转(Flip)、旋转(Rotation)和错切(Shear).</p><p>事实上，仿射变换代表的是两幅图之间的关系，我们通常使用2x3矩阵来表示仿射变换如下：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0112ba5cf3ed3070df2c9b16a0977592.png"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/593c901c84ab56cf201b071ea784d283.png"></p><p>考虑到我们要使用矩阵A和B对二维向量X&#x3D;[x,y]T做变换，所以也能表示为下列形式：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1c55f47f42310736e8d18d997a3a688f.png"></p><p>得到如下效果：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/2d9e26acd785f952e36ead506de2d417.png"></p><p>从上面解释中我们得知仿射变换表示的就是两幅图片的一种联系，关于这种联系的信息大致可以从以下两种场景获得。</p><p>a. 我们已知X和T而且我们知道他们是有联系的，接下来的工作就是求解矩阵M</p><p>b. 我们一致M和X要求得T,我们只需要应用算式T&#x3D;M.X即可。对于这种联系的信息可以用矩阵M清晰的表达(即给出明确的2x3矩阵)或者也可以用两幅图片点之间几何关系来表达。</p><p>因为矩阵M联系着两幅图片，我们以其表示两图中各三点直接的联系为例，如下:</p><p>点1,2和3(在图一中形成一个三角)与图二中三个点一一映射，仍然形成三角形，但形状已经大大改变。如果我们能通过这样两组三点求出仿射变换（你能选择自己喜欢的点），接下来我们就能把仿射变换应用到图像中所有的点。</p><p>对实际的图像进行仿射变换的效果如下：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/38c2d8927c01a06858a43fe180df10bf.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a1bdbc0eb00b913a9ec23e1a92074091.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>仿射变换</strong></td></tr></tbody></table><p><strong>仿射变换是将矩形变换成平行四边形，变换后各边依旧平行。</strong></p><h2 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h2><p>透视变换不能保证物体形状的“平行性”。仿射变换是透视变换的特殊形式。透视变换是将一个平面投影到另一个平面，简单理解就是把一张图片投影到另一张图片，求的是同一张图片到它的投影图片之间的变换。透视变换是将成像投影到一个新的视平面，也称作投影映射。如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ce8be3b8d534d31b2192bcbc583e3a81.png"></p><p>透视变换原理如下：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/645bf3d7e15e69e8a183a1be8755b91f.png"></p><p>上述公式中， (<em>u</em>,<em>v</em>) 代表原始图像坐标， (<em>x</em>,<em>y</em>) 为经过透视变换的图片坐标，其中变换矩阵为3×3 形式。进而可以得到：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/57a9929d24923ac6eb7581731ccfe3e6.png"></p><p>在原图上取4点坐标与新图对应，相当于列出方程组，解出变换矩阵。通过变换矩阵，在输入原图像坐标的情况下，可以直接求解新图平面坐标。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7c71e1a5dbcf76e3543a33c99c3171cc.png"></p><p>其中， (<em>x</em>,<em>y</em>)是原图坐标，<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c002438d0c0f30cdbb142c65c99ef72b.png" alt="" style="max-height: 1.5em;"></span>是变换后的坐标；<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c03622f9b4a0db4e9018790e5490f206.png" alt="" style="max-height: 1.5em;"></span> 为旋转量，<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/a057b24fb85fb51287d74dba2baef71c.png" alt="" style="max-height: 1.5em;"></span>  为平移量。因为透视变换是非线性的，所以不能齐次性表示；透视变换矩阵为3×3。透视变换的方程组有8个未知数，所以要求解就需要找到4组映射点，四个点就刚好确定了一个三维空间。</p><p>利用透视变换常常进行图像的“摆正”，示例如下：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ecfb0ef920f80807ce2f9227c6aeff55.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5a59ba2712377bcb27bd960e2a078dba.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>透视变换</strong></td></tr></tbody></table><p><strong>透视变换用于将一个二维平面上的图像从一种视角或投影方式转换为另一种视角或投影方式的方法。它的主要目的是消除或校正由于观察角度或位置变化引起的投影畸变，以便更准确地分析或呈现图像中的对象。</strong></p><h1 id="去畸变"><a href="#去畸变" class="headerlink" title="去畸变"></a>去畸变</h1><p>这里重点介绍鱼眼相机为例展开介绍。首先，鱼眼镜头为什么可以获得比普通镜头更大的视野范围呢，他们两者之间的差别在哪？</p><p>其实，我们平常接触的大多数镜头都可以近似看做针孔相机模型，该模型下，光线沿直线传播，像与物之间是相似的，或者更严格地用数学语言来说，像与物之间是经过了透视变换（Perspective Transform）。在透视变换下，直线经过变换仍是直线，曲线经过变换仍是曲线，两直线交点经过变换仍是两直线相交的点等。正因为投影变换保持了很多几何性质不变，所以我们看照片是能够与原场景联系起来的，照片与原场景之间存在某些相似的特性。那么鱼眼镜头为什么可以获得比普通镜头更大的视野范围呢，他们两者之间的差别在哪？</p><p>从某种意义上来说，相机镜头所起的作用，就是做了一个数学变换，将物空间变换为像空间，成像平面就是在像空间内切了一刀，截取了一个平面，成为拍下的照片。</p><p>但基于针孔相机模型的镜头存在一个缺陷——光线始终沿直线传播使得镜头难以捕捉位于边缘的物体。如下图所示，对于同样长度的红色箭头，越靠近边缘的经过镜头成像后就变得越长，而实际上我们底片的尺寸是有限的，所以极端接近边缘的物体普通的镜头就无法成像记录了。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/784946d7aeaf0b77e4b5e91eb85e0e78.png"></p><p>于是人们想到的水下的鱼。由于水的折射率比空气大，光线从空气进入水中，折射角比入射角更小，并且入射角越大，这个变小的程度也越大。由于这个特性，使得在水中向上看时，能一眼看到整个水面上的这个半球形空间，整个空间的影像都背扭曲、压缩到了一个半顶角约为48°的锥形内。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ab3ff1d293450f796c8a04a36468a708.png"></p><p>在这个锥形空间内部，是来自水面上的空间的光线，在这个锥形外部，是来自水面下景色的反射。也就是说，在水下向上看，在一个圈之外，只能看到水底的景色；所有水面上的景色，都被压缩在一个圈内，如下图所示。鱼眼镜头也是人们根据这种特性发明的，另外，鱼眼镜头的前镜片直径很短，且呈抛物状像前部凸出，与鱼的眼睛十分相似，“鱼眼镜头”因此而得名。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6a0cdceaaeabedb67171931925741dac.jpeg"></p><p>鱼眼镜头一般是由十几个不同的透镜组合而成的，如下图所示，在成像的过程中，入射光线经过不同程度的折射，投影到尺寸有限的成像平面上，使得鱼眼镜头与普通镜头相比起来拥有了更大的视野范围。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8f225713814103dc0d3d5d279921a18e.png"></p><p>在研究鱼眼相机成像时，可以将上面的镜头组简化为一个球面，如下图所示，<em>O1-XcYcZc</em>为相机坐标系，O2-xy为成像平面。现实世界有一点P,入射角θ，如果按照普通相机的针孔相机模型，入射光线PO1经过镜头之后不改变路线,P、O1、<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png" alt="" style="max-height: 1.5em;"></span>三点共线，<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png" alt="" style="max-height: 1.5em;"></span>为P的像点，但是对于鱼眼相机，入射光线PO1经过镜头后会发生折射，因此P的像点为<em>p</em>，极坐标表示为（r，φ）。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7d8730b23f213a652c7831c05825b3b7.png"></p><p>根据投影函数的不同，鱼眼相机的设计模型大致能被分为五种：透视投影（即针孔相机模型）、等积投影、等距投影、体视投影、正交投影。而实际的镜头因为各种原因并不会精确的符合投影模型，为了方便鱼眼相机的标定，一般取r关于θ泰勒展开式的前5项来近似鱼眼镜头的实际投影函数：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fa31e394765b87121758996872f7340e.png"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ea2695d35ac1024134b00751cfad39a0.png"></p><p>假设相机坐标系下有一点P(x,y,z)，点P(x,y,z)如果按照针孔相机模型投影，则不存在畸变，像点为P0(a,b)。不妨假设f&#x3D;1（最终可以求得rd 和r的比值与f无关）,可求得P0 点坐标y以及入射角θ：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/b7807a8872366727b6299499d28345f5.png"></p><p>由于畸变的存在，像点到图像中心的距离r被压缩成rd,实际的像点位置为p’(x’,y),有|Op’|&#x3D;rd,|OP0|&#x3D;r。结合等距投影函数有：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/f3a9b01ac3248215c5904b2b87d9c74f.png"></p><p>因为f&#x3D;1，θd 的一次项系数k0 可以为1，最终可以得到OpenCV中使用的鱼眼相机模型：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a821cb9a522abf758657aeab932fd8dc.png"></p><p>由相似三角形原理：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4543df1de58c719a6be4c04ca947624b.png"></p><p>所以就求得了畸变后点p’ 的坐标为：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/eb3e8f28d45e99d9ba53eefb2d2a8d4b.png"></p><p>最后利用相机内参将像平面的点转换到像素坐标系就得到了最终图像上的点：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d10563806f7a6f97c687a2b74f4e4543.png"></p><p>鱼眼相机拍摄的图像去畸变后的效果如下所示：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1f0d3bb10e87bd6e364a92c8e5406a41.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>去畸变图像</strong></td></tr></tbody></table><p><strong>可以看出去畸变图像的视野相比与原始图像视野范围有所减小，但物体更贴近实际尺寸。</strong></p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><ul><li><p>code</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui/highgui.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/imgproc/imgproc.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span>  </span><span class="token comment">/** * @description: 腐蚀变换 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyErode</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_ERODE<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"腐蚀变换"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"腐蚀变换.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 膨胀变换 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyDilate</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_DILATE<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"膨胀变换"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"膨胀变换.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 开运算 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyOpen</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_OPEN<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"开运算"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"开运算.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 闭运算 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyClose</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_CLOSE<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"闭运算"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"闭运算.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 顶帽 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyTopHat</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_TOPHAT<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"顶帽"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"顶帽.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 黑帽 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyBlackHat</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_BLACKHAT<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"黑帽"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"黑帽.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 形态学梯度 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyGradient</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_GRADIENT<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"形态学梯度"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"形态学梯度.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 仿射变换 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyAffine</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> scale_x <span class="token operator">=</span> <span class="token number">0.7</span><span class="token punctuation">;</span>     <span class="token comment">// 水平缩放因子</span>    <span class="token keyword">float</span> scale_y <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span>     <span class="token comment">// 垂直缩放因子</span>    <span class="token keyword">float</span> theta <span class="token operator">=</span> CV_PI <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 旋转角度</span>    <span class="token keyword">float</span> tx <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>           <span class="token comment">// 水平平移量</span>    <span class="token keyword">float</span> ty <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>           <span class="token comment">// 垂直平移量</span>    <span class="token keyword">float</span> shear_x <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>     <span class="token comment">// X轴错切</span>    <span class="token keyword">float</span> shear_y <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>     <span class="token comment">// Y轴错切</span>    cv<span class="token double-colon punctuation">::</span>Mat warpMatrix <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> scale_x <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span>shear_y <span class="token operator">*</span> scale_y <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> tx<span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> shear_x <span class="token operator">*</span> scale_x <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> scale_y <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> ty<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">warpAffine</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> warpMatrix<span class="token punctuation">,</span> src_img<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"仿射变换"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"仿射变换.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 鼠标操作 自己准备结构体</span><span class="token keyword">struct</span> <span class="token class-name">ImageData</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat img<span class="token punctuation">;</span>                <span class="token comment">// 目标图像 用于点击 确定坐标</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> points<span class="token punctuation">;</span> <span class="token comment">// 存放原图的坐标 通过鼠标的点击进行存放</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//鼠标操作的回调函数:用于选择四个角的点（使用方法：从左上角开始顺时针选择四个点，选完之后回车操作）</span><span class="token keyword">void</span> <span class="token function">mouseHundle</span><span class="token punctuation">(</span><span class="token keyword">int</span> event<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 强制转换</span>    <span class="token keyword">struct</span> <span class="token class-name">ImageData</span> <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ImageData</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token comment">// 如果按下的是鼠标左键</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> cv<span class="token double-colon punctuation">::</span>EVENT_LBUTTONDOWN<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 用圆形来标记下鼠标按下左键标记的位置</span>        cv<span class="token double-colon punctuation">::</span><span class="token function">circle</span><span class="token punctuation">(</span>d<span class="token operator">-></span>img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_AA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在图上标记,圆心为点击的位置</span>        cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">// 原窗口上进行显示标记点</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选择点%d: %d,%d...\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d<span class="token operator">-></span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 透视变换 需要使用四个点的坐标</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            d<span class="token operator">-></span>points<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把点击下来的坐标进行存储</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            cv<span class="token double-colon punctuation">::</span><span class="token function">setMouseCallback</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消鼠标回调</span>            cv<span class="token double-colon punctuation">::</span><span class="token function">destroyWindow</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 透视变换 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyPerspectiveTF</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    ImageData data<span class="token punctuation">;</span>    data<span class="token punctuation">.</span>img <span class="token operator">=</span> src_img<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">setMouseCallback</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> mouseHundle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> src_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请在图像上点击四个点，然后按任意键继续...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Size dst_size <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出图像的尺寸</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> outputPoints<span class="token punctuation">;</span> <span class="token comment">// 输出图像上的对应点</span>    outputPoints<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputPoints<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>dst_size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputPoints<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>dst_size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> dst_size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputPoints<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dst_size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>outputPoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token operator">||</span> data<span class="token punctuation">.</span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"请选择4个点即可"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cv<span class="token double-colon punctuation">::</span>Mat perspectiveMatrix <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getPerspectiveTransform</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>points<span class="token punctuation">,</span> outputPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">warpPerspective</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> perspectiveMatrix<span class="token punctuation">,</span> dst_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"透视变换"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"透视变换.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 判断参数输入是否正确</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"参数错误,请使用如下命令格式: "</span> <span class="token operator">&lt;&lt;</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"[图像路径] [图像变换类型(1,2,3,...)] "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mode <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"说明：\n[0] 说明\n[1] 图像腐蚀变换\n[2] 图像膨胀变换\n[3] 开运算\n[4] 闭运算\n[5] 顶帽\n[6] 黑帽\n[7] 形态学梯度\n[8] 仿射变换\n[9] 透视变换\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获得图像</span>    cv<span class="token double-colon punctuation">::</span>Mat img <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"原始图像"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"原始图像.png"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"图像腐蚀变换...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyErode</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"图像膨胀变换...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyDilate</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"开运算...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyOpen</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"闭运算...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyClose</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顶帽...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyTopHat</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"黑帽...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyBlackHat</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"形态学梯度...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyGradient</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"仿射变换...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyAffine</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"透视变换...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyPerspectiveTF</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ image_transform.cpp <span class="token parameter variable">-o</span> image_transform <span class="token parameter variable">-lopencv_core</span> <span class="token parameter variable">-lopencv_highgui</span> <span class="token parameter variable">-lopencv_imgproc</span> <span class="token parameter variable">-lopencv_imgcodecs</span> <span class="token parameter variable">-lopencv_calib3d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./image_transform 图像路径 图像变换类型<span class="token punctuation">(</span><span class="token number">1,2</span>,3,<span class="token punctuation">..</span>.<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://blog.csdn.net/qq_16137569/article/details/112398976">https://blog.csdn.net/qq_16137569/article/details/112398976</a></li><li>数字图像处理（第四版）</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL_ES常用问答</title>
      <link href="/2023/06/21/opengl-es-chang-yong-wen-da/"/>
      <url>/2023/06/21/opengl-es-chang-yong-wen-da/</url>
      
        <content type="html"><![CDATA[<h1 id="glUseProgram什么时候使用"><a href="#glUseProgram什么时候使用" class="headerlink" title="glUseProgram什么时候使用?"></a>glUseProgram什么时候使用?</h1><p>glUseProgram是OpenGL中的一个函数，用于指定当前使用的着色器程序对象。着色器程序对象是由顶点着色器和片段着色器组成的，用于描述渲染管线中的图形处理和光栅化阶段。</p><p>glUseProgram函数的调用时机通常是在绘制场景之前。当你创建并编译好顶点着色器和片段着色器，并将它们链接为一个着色器程序对象后，你需要使用glUseProgram来告诉OpenGL在绘制时要使用这个着色器程序。</p><p>具体的步骤通常是这样的：</p><blockquote><ol><li>创建顶点着色器和片段着色器，并编译它们。</li><li>创建一个着色器程序对象，并将顶点着色器和片段着色器附加到该对象上。</li><li>链接着色器程序对象。</li><li>在每次绘制场景之前，调用glUseProgram函数，将着色器程序对象作为参数传递进去，以指定当前使用的着色器程序。</li><li>执行绘制操作，OpenGL将使用当前指定的着色器程序进行渲染。</li></ol></blockquote><p>通过glUseProgram函数，你可以在渲染过程中灵活地切换不同的着色器程序，以实现不同的渲染效果或实现特定的图形处理算法。</p><h1 id="glActiveTexture什么时候使用"><a href="#glActiveTexture什么时候使用" class="headerlink" title="glActiveTexture什么时候使用?"></a>glActiveTexture什么时候使用?</h1><p>glActiveTexture是OpenGL中的一个函数，用于指定当前活动的纹理单元。纹理单元是用于存储和处理纹理数据的硬件单元。</p><p>glActiveTexture函数的调用时机通常是在设置纹理之前。在渲染过程中，你可能会使用多个纹理，例如一张用于漫反射贴图，一张用于法线贴图等。glActiveTexture函数允许你指定当前要操作的纹理单元，以便后续的纹理相关函数能够作用于指定的单元。</p><p>具体的步骤通常是这样的：</p><ol><li>在绑定纹理之前，调用glActiveTexture函数，传递一个纹理单元的索引作为参数。常用的索引值为GL_TEXTURE0、GL_TEXTURE1等，表示不同的纹理单元。</li><li>绑定纹理对象到指定的纹理单元。使用glBindTexture函数将纹理对象与当前活动的纹理单元关联起来。例如，使用glBindTexture(GL_TEXTURE_2D, textureID)将纹理对象绑定到当前活动的纹理单元上。</li><li>设置纹理参数和上传纹理数据等操作。在glActiveTexture函数和glBindTexture函数之后，你可以执行一系列与纹理相关的操作，如设置纹理过滤方式、纹理环绕方式、上传纹理数据等。</li></ol><p>通过glActiveTexture函数，你可以在渲染过程中使用多个纹理单元，并对每个纹理单元进行独立的设置和绑定。这样可以实现更复杂的纹理映射效果，如多重纹理、立方体贴图等。</p><h1 id="怎么从缓冲区读取像素数据？"><a href="#怎么从缓冲区读取像素数据？" class="headerlink" title="怎么从缓冲区读取像素数据？"></a>怎么从缓冲区读取像素数据？</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 读取颜色缓冲区的像素数据</span>       std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span> <span class="token function">pixelData</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RGBA格式，每个像素4个字节</span>       <span class="token function">glReadPixels</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> GL_RGBA<span class="token punctuation">,</span> GL_UNSIGNED_BYTE<span class="token punctuation">,</span> pixelData<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 检查像素数据</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               <span class="token keyword">int</span> pixelIndex <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 每个像素4个字节</span>               <span class="token keyword">unsigned</span> <span class="token keyword">char</span> red <span class="token operator">=</span> pixelData<span class="token punctuation">[</span>pixelIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">unsigned</span> <span class="token keyword">char</span> green <span class="token operator">=</span> pixelData<span class="token punctuation">[</span>pixelIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">unsigned</span> <span class="token keyword">char</span> blue <span class="token operator">=</span> pixelData<span class="token punctuation">[</span>pixelIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">unsigned</span> <span class="token keyword">char</span> alpha <span class="token operator">=</span> pixelData<span class="token punctuation">[</span>pixelIndex <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">// 打印像素值</span>               <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"像素(%d, %d): R=%d, G=%d, B=%d, A=%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="怎么获取opengl-es的错误代码？"><a href="#怎么获取opengl-es的错误代码？" class="headerlink" title="怎么获取opengl es的错误代码？"></a>怎么获取opengl es的错误代码？</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">EGLint status2 <span class="token operator">=</span> <span class="token function">eglGetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>status2 <span class="token operator">!=</span> EGL_SUCCESS<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"eglSwapBuffers failed!!!, status= %d\n"</span><span class="token punctuation">,</span> status2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 帧缓冲不完整，eglSwapBuffers 执行失败&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="VAO绑定怎么使用？"><a href="#VAO绑定怎么使用？" class="headerlink" title="VAO绑定怎么使用？"></a>VAO绑定怎么使用？</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">glBindVertexArray</span><span class="token punctuation">(</span>VAO<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绑定顶点数组对象,执行VAO绑定之后其后的所有VBO配置都是这个VAO对象的一部分。具体来说，glBindVertexArray的作用是将VAO与当前上下文相关的顶点状态绑定在一起。顶点状态包括顶点属性指针、顶点缓冲对象等。当我们需要绘制时，只需绑定相应的VAO，OpenGL会自动应用之前设置的顶点状态。</p><h1 id="glDrawElements函数有什么作用？"><a href="#glDrawElements函数有什么作用？" class="headerlink" title="glDrawElements函数有什么作用？"></a>glDrawElements函数有什么作用？</h1><p>glDrawElements函数用于绘制索引化的图元，它并不会将绘制结果保存在任何地方。它的作用是根据索引数据来指定绘制顶点的顺序，并将这些顶点渲染到当前帧缓冲对象中。<br>绘制结果的保存通常发生在帧缓冲对象（Framebuffer Object, FBO）中。帧缓冲对象是一个特殊的OpenGL对象，它可以作为渲染目标来保存绘制结果。可以将帧缓冲对象与纹理或渲染缓冲对象关联，以便将绘制结果保存在纹理或渲染缓冲对象中。<br>在使用glDrawElements之前，需要先创建并绑定顶点数组对象（VAO），并将索引数据存储在索引缓冲对象（Index Buffer Object, IBO）中。然后，通过glBindVertexArray绑定VAO，使用glBindBuffer将IBO绑定到GL_ELEMENT_ARRAY_BUFFER目标，以告诉OpenGL使用IBO中的索引来绘制顶点。</p><h1 id="怎么设置纹理采样方式和纹理拉伸方式？"><a href="#怎么设置纹理采样方式和纹理拉伸方式？" class="headerlink" title="怎么设置纹理采样方式和纹理拉伸方式？"></a>怎么设置纹理采样方式和纹理拉伸方式？</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ## 设置纹理拉伸方式</span><span class="token function">glTexParameterf</span><span class="token punctuation">(</span>GL_TEXTURE_2D<span class="token punctuation">,</span> GL_TEXTURE_WRAP_S<span class="token punctuation">,</span> GL_CLAMP_TO_EDGE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置纹理 S 横轴）的拉伸方式为截取</span><span class="token function">glTexParameterf</span><span class="token punctuation">(</span>GL_TEXTURE_2D<span class="token punctuation">,</span> GL_TEXTURE_WRAP_T<span class="token punctuation">,</span> GL_CLAMP_TO_EDGE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置纹理 T 纵轴）的拉伸方式为截取</span><span class="token comment">// ## 设置纹理采样方式</span><span class="token function">glTexParameteri</span><span class="token punctuation">(</span>GL_TEXTURE_2D<span class="token punctuation">,</span> GL_TEXTURE_MIN_FILTER<span class="token punctuation">,</span> GL_LINEAR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将纹理缩小时(GL_TEXTURE_MIN_FILTER)，会进行线性插值(GL_LINEAR)来计算新的纹理像素值。</span><span class="token function">glTexParameteri</span><span class="token punctuation">(</span>GL_TEXTURE_2D<span class="token punctuation">,</span> GL_TEXTURE_MAG_FILTER<span class="token punctuation">,</span> GL_LINEAR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将纹理放大时(GL_TEXTURE_MAG_FILTER)，会进行线性插值(GL_LINEAR)来计算新的纹理像素值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在OpenGL中，纹理参数是与当前绑定的纹理对象相关联的。当你调用glTexParameterf函数设置纹理参数时，它会作用于当前绑定的纹理对象。<br>要确定glTexParameterf设置的是哪个纹理的参数，需要在调用该函数之前通过glBindTexture函数将相应的纹理对象绑定到当前纹理目标。</p><h1 id="Surfaceview和GLSurfaceview有什么区别"><a href="#Surfaceview和GLSurfaceview有什么区别" class="headerlink" title="Surfaceview和GLSurfaceview有什么区别"></a>Surfaceview和GLSurfaceview有什么区别</h1><p>SurfaceView和GLSurfaceView是Android中用于图形渲染的两个重要视图类，它们之间有以下区别：</p><ol><li><p>功能和用途：SurfaceView是用于显示普通2D图形和视频的视图，而GLSurfaceView则是专门用于显示OpenGL ES图形的视图。GLSurfaceView提供了与OpenGL ES渲染相关的功能和接口，可以更方便地进行OpenGL ES的初始化、渲染和交互操作。</p></li><li><p>渲染机制：SurfaceView使用双缓冲机制进行绘制，即在后台线程中渲染图形，并将渲染结果通过SurfaceHolder进行显示。这种机制使得SurfaceView能够在主UI线程之外进行绘制，适用于需要频繁更新的图形或视频场景。GLSurfaceView也采用了双缓冲机制，但它使用了专门的渲染线程，并提供了OpenGL ES渲染上下文的管理和控制。</p></li><li><p>对性能的要求：由于SurfaceView在单独的线程中进行渲染，因此它更适合于需要高性能渲染的场景，如视频播放、游戏等。GLSurfaceView在底层使用了OpenGL ES，因此可以更高效地进行图形渲染，并提供了更多与OpenGL ES相关的功能和特性。</p></li><li><p>交互处理：SurfaceView的UI事件处理是在主UI线程中进行的，而GLSurfaceView可以通过设置Renderer来处理与OpenGL ES相关的交互事件，如触摸事件、按键事件等。</p></li><li><p>使用SurfaceView时候需要单独开启线程进行循环渲染，而GLSurfaceView在每帧渲染之前会自动调用onDrawFrame函数，因此我们可以将渲染程序写在onDrawFrame中，无线单独开启线程。</p></li><li><p>使用SurfaceView时候需要绑定窗口并设置窗口属性，而GLSurfaceView默认绑定当前窗口，无需额外绑定。</p></li></ol><p>综上所述，SurfaceView适用于普通的2D图形和视频显示，而GLSurfaceView则专注于OpenGL ES图形渲染，并提供更高性能和更多的OpenGL ES功能。选择使用哪个类取决于你的具体需求和场景。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> OpenGL ES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++对象优化</title>
      <link href="/2023/05/29/c-dui-xiang-you-hua/"/>
      <url>/2023/05/29/c-dui-xiang-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="对象使用过程中背后调用了哪些方法"><a href="#对象使用过程中背后调用了哪些方法" class="headerlink" title="对象使用过程中背后调用了哪些方法"></a>对象使用过程中背后调用了哪些方法</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ma</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(int)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"~Test()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Test</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ma</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>ma<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test (const Test &amp;t)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"operator="</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>ma <span class="token operator">=</span> t<span class="token punctuation">.</span>ma<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> ma<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 1 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test t1<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 2 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test <span class="token function">t2</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 3 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test t3 <span class="token operator">=</span> t1<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 4 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test t4 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 5 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t4 <span class="token operator">=</span> t2<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 6 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t4 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 7 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t4 <span class="token operator">=</span> <span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token number">30</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 8 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t4 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 9 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//Test *p = &amp;Test(40;)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 10 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>ref <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--- <span class="token number">1</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span>--- <span class="token number">2</span> ---Test <span class="token punctuation">(</span>const Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>--- <span class="token number">3</span> ---Test <span class="token punctuation">(</span>const Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>--- <span class="token number">4</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span>--- <span class="token number">5</span> ---<span class="token assign-left variable">operator</span><span class="token operator">=</span>--- <span class="token number">6</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token assign-left variable">operator</span><span class="token operator">=</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">7</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token assign-left variable">operator</span><span class="token operator">=</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">8</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token assign-left variable">operator</span><span class="token operator">=</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">9</span> ------ <span class="token number">10</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ul><li>1<br>正常使用构造函数生成t1，传入参数有默认值</li><li>2<br>常见的拷贝构造</li><li>3<br>拷贝构造</li><li>4<br>C++编译器对于对象构造的优化，用临时对象生成新对象的时候，临时对象就不产生了，直接构造新对象，因此这里等价于直接调用常规构造函数，不调用拷贝构造<br>Test(20)显式生成临时对象，生存周期为所在语句<br>因此这里的Test t4 &#x3D; Test(20);等价于Test t4(20);</li><li>5<br>调用了赋值运算符重载函数</li><li>6<br>使用临时对象为已经存在的对象赋值，这时临时对象需要生成，要不无法赋值，显式生成临时对象</li><li>7<br>把30强制转换为Test，然后将int 转换为 Test(int)，这时就要看这个类有没有输入为int的构造函数，进而调用。这时临时对象需要生成，要不无法赋值，显式生成临时对象</li><li>8<br>把30强制转换为Test，然后将int 转换为 Test(int)，这时就要看这个类有没有输入为int的构造函数，进而调用。这时临时对象需要生成，要不无法赋值，隐式生成临时对象</li><li>9<br>这里的临时对象需要生成，且出了语句临时对象就会调用析构函数，因此这里说明使用指针指向临时对象是不安全的，因此这里直接运行是报错的，无法获取右值的地址</li><li>10<br>这里的临时对象需要生成，且出了语句临时对象不会调用析构函数</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ma</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mb</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(int, int)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"~Test()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>src<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ma</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>ma<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mb</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>mb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(const Test &amp;)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Test <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ma <span class="token operator">=</span> src<span class="token punctuation">.</span>ma<span class="token punctuation">;</span>mb <span class="token operator">=</span> src<span class="token punctuation">.</span>mb<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"operator = "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> ma<span class="token punctuation">;</span><span class="token keyword">int</span> mb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Test <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 3 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test <span class="token function">t2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 4 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test t3 <span class="token operator">=</span> t2<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 5 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">static</span> Test t4 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 6 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t2 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 7 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 8 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t2 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 9 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 10 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token keyword">new</span> Test<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 11 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// Test *p3 = &amp;Test(80,80);</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 12 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>p4 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> p1<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> p2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Test <span class="token function">t5</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">3</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">4</span> ---Test<span class="token punctuation">(</span>const Test <span class="token operator">&amp;</span><span class="token punctuation">)</span>--- <span class="token number">5</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">6</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>operator <span class="token operator">=</span> ~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">7</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>operator <span class="token operator">=</span> ~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">8</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>operator <span class="token operator">=</span> ~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">9</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">10</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">11</span> ------ <span class="token number">12</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h2><ul><li>5<br>使用临时构造同类型新对象的时候，临时对象被优化，类似于上文的第4项</li><li>7<br>逗号表达式的值为最后一个参数的值，即:t2 &#x3D; (Test)(50);这里将50进行了强制类型转换。编译器就会去找有没有带一个整型输入的构造函数去实现。</li><li>11<br>不能使用指针指向临时对象，临时对象使用后析构。</li><li>12<br>使用引用变量指向临时对象，相当于给临时对象起了一个别名，引用对象销毁时，临时对象才会析构。</li></ul><h1 id="函数调用过程中对象背后调用了哪些方法"><a href="#函数调用过程中对象背后调用了哪些方法" class="headerlink" title="函数调用过程中对象背后调用了哪些方法"></a>函数调用过程中对象背后调用了哪些方法</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ma</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(int)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"~Test"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ma</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>ma<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(const Test &amp;)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"operator="</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>ma<span class="token operator">=</span>t<span class="token punctuation">.</span>ma<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> ma<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> ma<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Test <span class="token function">GetObject</span><span class="token punctuation">(</span>Test t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Test <span class="token function">tmp</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Test t1<span class="token punctuation">;</span>Test t2<span class="token punctuation">;</span>t2<span class="token operator">=</span><span class="token function">GetObject</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span>Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span><span class="token operator">=</span>Test<span class="token punctuation">(</span>const Test <span class="token operator">&amp;</span><span class="token punctuation">)</span>Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token assign-left variable">operator</span><span class="token operator">=</span>~Test~Test~Test~Test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>Test(int)<br>调用默认构造函数</li><li>Test(int)<br>调用默认构造函数</li><li>Test(const Test &amp;)<br>执行<code>GetObject(t1)</code>时需要将实参t1传递给<code>GetObject(Test t)</code>函数的形参<code>t</code>,这里是不能是直接的赋值，应该是初始化，即:要默认调用构造函数(拷贝构造函数)，因此这里实际是调用了<code>Test(const Test &amp;)</code>函数。</li><li>Test(int)<br>这里是<code>GetObject(Test t)</code>函数内部调用了默认构造函数</li><li>operator&#x3D;<br>由于<code>GetObject(Test t)</code>函数内部的<code>tmp</code>变量在函数结束后就会被释放没有办法再把参数传递出去，因此这里其实也在调用构造函数，需要构造一个临时变量，使用函数重载进行值传递</li><li>~Test<br>依次执行临时对象的析构</li><li>~Test<br>依次执行临时对象的析构</li><li>~Test<br>依次执行临时对象的析构</li><li>~Test<br>依次执行临时对象的析构</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 对象优化 </tag>
            
            <tag> c++课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鱼眼相机外参标定</title>
      <link href="/2023/05/29/yu-yan-xiang-ji-wai-can-biao-ding/"/>
      <url>/2023/05/29/yu-yan-xiang-ji-wai-can-biao-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p>待整理</p><p><a href="https://zhuanlan.zhihu.com/p/603296375">AVM环视系统——鱼眼相机去畸变算法</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 外参求解</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point3f<span class="token operator">></span> object_points<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">solvePnP</span><span class="token punctuation">(</span>object_points<span class="token punctuation">,</span> image_points_undist_new<span class="token punctuation">,</span> cam_K<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cam_T<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token boolean">false</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>SOLVEPNP_ITERATIVE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: solvePnP cam_index[%d]\n"</span><span class="token punctuation">,</span> cam_index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">float</span> projection_error <span class="token operator">=</span> <span class="token function">ComputeProjectionError</span><span class="token punctuation">(</span>object_points<span class="token punctuation">,</span> image_points_undist_new<span class="token punctuation">,</span> cam_K<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cam_T<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"projection_error1: "</span> <span class="token operator">&lt;&lt;</span> projection_error <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// 定义迭代终止条件：最大迭代次数为 100，收敛阈值为 0.001</span>cv<span class="token double-colon punctuation">::</span>TermCriteria <span class="token function">termCrit</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>TermCriteria<span class="token double-colon punctuation">::</span>MAX_ITER <span class="token operator">|</span> cv<span class="token double-colon punctuation">::</span>TermCriteria<span class="token double-colon punctuation">::</span>EPS<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 L-M（Levenberg-Marquardt） 算法进行迭代优化，不断减小重投影误差</span>cv<span class="token double-colon punctuation">::</span>Mat RR <span class="token operator">=</span> cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cv<span class="token double-colon punctuation">::</span>Mat TT <span class="token operator">=</span> cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cv<span class="token double-colon punctuation">::</span><span class="token function">solvePnPRefineLM</span><span class="token punctuation">(</span>object_points<span class="token punctuation">,</span> image_points_undist_new<span class="token punctuation">,</span> cam_K<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RR<span class="token punctuation">,</span> TT<span class="token punctuation">,</span> termCrit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用虚拟视觉伺服 (Virtual Visual Servoing)方法进行迭代优化，不断减小重投影误差</span><span class="token comment">// cv::solvePnPRefineVVS(object_points, image_points_undist_new, cam_K[cam_index], cv::noArray(), RR, TT, termCrit);</span>cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span> <span class="token operator">=</span> RR<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span> <span class="token operator">=</span> TT<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * @description: 输入畸变图，输出去畸变图 * @param &#123;Mat&#125; &amp;img_dist * @param &#123;Mat&#125; &amp;img_undist * @return &#123;*&#125; * @author: wangshuaiyang *&#x2F;int TAvmCal::DistToUndistImage(cv::Mat img_dist, cv::Mat &amp;img_undist, int cam_index)&#123;    int ret &#x3D; 0;#if 1    &#x2F;&#x2F; 新的相机内参矩阵和图像尺寸（可选）    float scale &#x3D; 2.5;    cv::Mat new_cam_K &#x3D; cam_K[cam_index].clone();    new_cam_K.at&lt;float&gt;(0, 0) &#x3D; new_cam_K.at&lt;float&gt;(0, 0);     &#x2F;&#x2F; fx    new_cam_K.at&lt;float&gt;(1, 1) &#x3D; new_cam_K.at&lt;float&gt;(0, 0);     &#x2F;&#x2F; fy    new_cam_K.at&lt;float&gt;(0, 2) &#x3D; new_cam_K.at&lt;float&gt;(0, 0) * 5; &#x2F;&#x2F; cx    new_cam_K.at&lt;float&gt;(1, 2) &#x3D; new_cam_K.at&lt;float&gt;(0, 0) * 2; &#x2F;&#x2F; cy    cv::Size new_size &#x3D; cv::Size(img_dist.size().width * scale, img_dist.size().height * scale);    cv::fisheye::undistortImage(img_dist, img_undist, cam_K[cam_index], cam_D[cam_index], new_cam_K, new_size);    cv::resize(img_undist, img_undist, img_dist.size());#else    cv::Mat mapx;    cv::Mat mapy;    &#x2F;&#x2F; 计算矫正图    float point_u_tmp[2];    float point_d_tmp[2];    float scale &#x3D; 2.5;    int offset_x &#x3D; 1000;    int offset_y &#x3D; 300;    int w &#x3D; img_dist.cols * scale;    int h &#x3D; img_dist.rows * scale;    mapx.create(h, w, CV_32FC1);    mapy.create(h, w, CV_32FC1);    for (int col &#x3D; 0; col &lt; w; col +&#x3D; 1)    &#123;        for (int row &#x3D; 0; row &lt; h; row +&#x3D; 1)        &#123;            &#x2F;&#x2F; 归一化            std::vector&lt;cv::Point2d&gt; unDist_points(1);            std::vector&lt;cv::Point2d&gt; dist_points(1);            point_u_tmp[0] &#x3D; col - offset_x;            point_u_tmp[1] &#x3D; row - offset_y;            unDist_points[0].x &#x3D; (point_u_tmp[0] - cam_K[cam_index].at&lt;float&gt;(0, 2)) &#x2F; cam_K[cam_index].at&lt;float&gt;(0, 0);            unDist_points[0].y &#x3D; (point_u_tmp[1] - cam_K[cam_index].at&lt;float&gt;(1, 2)) &#x2F; cam_K[cam_index].at&lt;float&gt;(1, 1);            cv::fisheye::distortPoints(unDist_points, dist_points, cam_K[cam_index], cam_D[cam_index]);            mapx.at&lt;float&gt;(row, col) &#x3D; dist_points[0].x;            mapy.at&lt;float&gt;(row, col) &#x3D; dist_points[0].y;        &#125;    &#125;    cv::remap(img_dist, img_undist, mapx, mapy, cv::INTER_LINEAR);    cv::resize(img_undist, img_undist, img_dist.size());#endif#if  SHOW_DETECT_PROCESS    cv::imshow(&quot;image_remap_fish&quot;, img_undist);    cv::waitKey(0);#endif    return 0;&#125;&#x2F;** * @description: 计算重投影误差(使用均方误差，RMS) * @return &#123;*&#125; * @author: wangshuaiyang *&#x2F;float TAvmCal::ComputeProjectionError(const std::vector&lt;cv::Point3f&gt; &amp;objectPoints,                                      const std::vector&lt;cv::Point2f&gt; &amp;imagePoints,                                      const cv::Mat &amp;cameraMatrix,                                      const cv::Mat &amp;rvec,                                      const cv::Mat &amp;tvec)&#123;    &#x2F;&#x2F; 使用估计的相机位姿将世界坐标系中的三维点投影到图像平面上    std::vector&lt;cv::Point2f&gt; projectedPoints;    cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, cv::noArray(), projectedPoints);    &#x2F;&#x2F; 计算重投影误差    float RMS_Error &#x3D; 0.0;    for (size_t i &#x3D; 0; i &lt; imagePoints.size(); ++i)    &#123;        float dx &#x3D; projectedPoints[i].x - imagePoints[i].x;        float dy &#x3D; projectedPoints[i].y - imagePoints[i].y;        RMS_Error +&#x3D; (dx * dx + dy * dy);    &#125;    RMS_Error &#x2F;&#x3D; (float)imagePoints.size();    RMS_Error &#x3D; std::sqrt(RMS_Error);    &#x2F;&#x2F; 返回总的重投影误差    return RMS_Error;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 鱼眼相机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 鱼眼相机外参标定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2023/05/19/dan-li-mo-shi/"/>
      <url>/2023/05/19/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul><li>当存在一个或多个变量仅初始化一次，却被多个文件多次使用的情况下考虑单例模式</li><li>可实现一次初始化，多文件多次使用</li><li>例如 ：相机的内参和外参一般只初始化一次，然后直接使用。</li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h1 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h1><h3 id="ParametersInit-h"><a href="#ParametersInit-h" class="headerlink" title="ParametersInit.h"></a>ParametersInit.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__PARAMETERS_INIT_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__PARAMETERS_INIT_H__</span></span><span class="token comment">// for thread-safe singleton</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">ParametersInit</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> ParametersInit <span class="token operator">*</span>m_instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> pthread_once_t _once<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_test<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token comment">/* args */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用pthread_once保证init()只调用一次</span>    <span class="token keyword">static</span> ParametersInit <span class="token operator">*</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">camParametersInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> in_test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ParametersInit-cpp"><a href="#ParametersInit-cpp" class="headerlink" title="ParametersInit.cpp"></a>ParametersInit.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../inc/ParametersInit.h"</span></span><span class="token comment">// 静态成员函数必须初始化后使用</span>pthread_once_t ParametersInit<span class="token double-colon punctuation">::</span>_once <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ParametersInit <span class="token operator">*</span>ParametersInit<span class="token double-colon punctuation">::</span>m_instance<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token comment">/* args */</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_instance<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ParametersInit <span class="token operator">*</span><span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">pthread_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_once<span class="token punctuation">,</span> ParametersInit<span class="token double-colon punctuation">::</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">camParametersInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> in_test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_test <span class="token operator">=</span> in_test<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> m_test<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="init-cpp"><a href="#init-cpp" class="headerlink" title="init.cpp"></a>init.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ParametersInit.h"</span></span>ParametersInit <span class="token operator">*</span>m_Instance <span class="token operator">=</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m_Instance<span class="token operator">-></span><span class="token function">camParametersInit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="use1-cpp"><a href="#use1-cpp" class="headerlink" title="use1.cpp"></a>use1.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ParametersInit.h"</span></span>ParametersInit <span class="token operator">*</span>m_Instance <span class="token operator">=</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里可以直接使用init.cpp初始化的参数ParametersInit::m_test</span><span class="token keyword">int</span> m_test <span class="token operator">=</span> m_Instance<span class="token operator">-></span><span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m_test=100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考网站: <a href="https://blog.csdn.net/CoderAldrich/article/details/83114881">https://blog.csdn.net/CoderAldrich/article/details/83114881</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多线程常用案例</title>
      <link href="/2023/05/10/c-duo-xian-cheng-chang-yong-an-li/"/>
      <url>/2023/05/10/c-duo-xian-cheng-chang-yong-an-li/</url>
      
        <content type="html"><![CDATA[<h1 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h1><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p>使用C++11 std库中的线程和条件变量实现notify_one的一个简单例子。在这个例子中，我们有一个线程向一个队列中添加元素，另一个线程从队列中删除元素。线程通过条件变量进行同步。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span>std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> queue<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>mutex mtx<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>condition_variable cv<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟生产</span>        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Produced: "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        cv<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知消费者</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>        cv<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待直到队列不为空</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Consumed: "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t2</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，生产者线程在每次添加一个元素到队列后都会调用notify_one()来通知消费者线程。消费者线程在wait()函数中等待，直到收到通知并且队列不为空才会继续执行。</p><p>需要注意的是，虽然在上述代码中我们的消费者线程是一个无限循环，但在实际的程序中，你需要有一种机制来结束这个线程。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能指针的使用</title>
      <link href="/2023/05/10/zhi-neng-zhi-zhen-de-shi-yong/"/>
      <url>/2023/05/10/zhi-neng-zhi-zhen-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在 C++ 中，智能指针是一种对象，它处理内存管理的问题，使程序员更加专注于业务逻辑而不是内存管理。C++ 标准库中提供了几种类型的智能指针，包括：</p><ul><li><p><code>std::unique_ptr</code>: 它代表独占所有权的概念。一个 <code>std::unique_ptr</code> 对象在任何时间都拥有它所指向的对象。当 <code>std::unique_ptr</code> 被销毁（例如，当离开其作用域时），它所指向的对象也会被销毁（即调用其析构函数）。</p></li><li><p><code>std::shared_ptr</code>: 它代表共享所有权的概念。多个 <code>std::shared_ptr</code> 对象可以拥有同一个对象。当最后一个拥有该对象的 <code>std::shared_ptr</code> 被销毁时，它所指向的对象也会被销毁。</p></li><li><p><code>std::weak_ptr</code>: 它是为了配合 <code>std::shared_ptr</code> 而存在的，它提供了一种方式访问 <code>std::shared_ptr</code> 所管理的对象，但是不增加引用计数。这对于解决 <code>std::shared_ptr</code> 循环引用的问题（即，两个 <code>std::shared_ptr</code> 相互引用，导致它们都不会被销毁）是很有用的。</p></li></ul><p>智能指针的使用可以极大地简化内存管理，避免内存泄漏和其他与生命周期管理相关的错误。然而，它们并不能解决所有的内存管理问题，仍然需要程序员小心谨慎地设计他们的代码。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="std-unique-ptr示例"><a href="#std-unique-ptr示例" class="headerlink" title="std::unique_ptr示例"></a><code>std::unique_ptr</code>示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::~Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::bar\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> Foo <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(const Foo&amp;)\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token keyword">new</span> Foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p1 独占 Foo</span>    p1<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> <span class="token function">p2</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 现在 p2 独占 Foo</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 现在 p1 独占 Foo</span>    <span class="token punctuation">&#125;</span>    p1<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>    <span class="token comment">// Foo 的析构器在这里被调用，因为 p1 被销毁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="std-shared-ptr示例"><a href="#std-shared-ptr示例" class="headerlink" title="std::shared_ptr示例"></a><code>std::shared_ptr</code>示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::~Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::bar\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Foo<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里，我们不再需要使用 new。std::make_shared 是一个更安全，更高效的方式来分配共享对象。</span>        p1<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        p2<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>        <span class="token comment">// Foo 的实例仍未被删除，因为 p1 和 p2 都还在作用域内</span>    <span class="token punctuation">&#125;</span>        p1<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>        <span class="token comment">// Foo 的析构器在这里被调用，因为 p1 离开了作用域</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="std-weak-ptr示例"><a href="#std-weak-ptr示例" class="headerlink" title="std::weak_ptr示例"></a><code>std::weak_ptr</code>示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::~Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>weak_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> weak<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> shared <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Foo<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weak <span class="token operator">=</span> shared<span class="token punctuation">;</span>        <span class="token comment">// 在 shared 存在的时候，我们可以使用 weak 来获取一个新的 shared_ptr 实例</span>        <span class="token keyword">auto</span> p <span class="token operator">=</span> weak<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Object has not been deleted\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这里，shared 被销毁，因此 Foo 被删除</span>    <span class="token comment">// 因为 Foo 已经被删除，所以我们不能再从 weak 中获取一个 shared_ptr</span>    <span class="token keyword">auto</span> p <span class="token operator">=</span> weak<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Object has been deleted\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p>智能指针的 reset 方法是用于释放智能指针当前拥有的对象，并可能接管新的对象。</p><p>以下是 std::unique_ptr 和 std::shared_ptr 的 reset 方法的使用：</p><ul><li><code>std::unique_ptr</code> 的 <code>reset</code> 方法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">" constructed.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">" destructed.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p 现在指向一个新的 Foo 对象</span>    p<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p 释放旧的 Foo 对象并指向一个新的 Foo 对象</span>    <span class="token comment">// 在这一步，"Foo 1 destructed." 被打印到控制台</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>std::shared_ptr</code> 的 <code>reset</code> 方法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">" constructed.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">" destructed.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Foo<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p1 现在指向一个新的 Foo 对象</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>  <span class="token comment">// p2 也指向同一个 Foo 对象</span>    p1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p1 释放旧的 Foo 对象并指向一个新的 Foo 对象</span>    <span class="token comment">// 但是，"Foo 1 destructed." 并未被打印到控制台，因为 p2 仍然拥有它</span>    p2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p2 释放它的 Foo 对象</span>    <span class="token comment">// 在这一步，"Foo 1 destructed." 被打印到控制台</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 智能指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的封装与函数绑定用法解析</title>
      <link href="/2023/05/10/lei-de-feng-zhuang-yu-han-shu-bang-ding-yong-fa-jie-xi/"/>
      <url>/2023/05/10/lei-de-feng-zhuang-yu-han-shu-bang-ding-yong-fa-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h1><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><p>src&#x2F;adas_proc&#x2F;adas_app&#x2F;adas_app.cpp —&gt; 629行</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> AdasProcWrapper <span class="token operator">=</span> ac<span class="token double-colon punctuation">::</span>ObjWrapper<span class="token operator">&lt;</span>ac<span class="token double-colon punctuation">::</span>AdasProcInterface<span class="token punctuation">,</span> HAC_CreateAdasProc<span class="token punctuation">,</span> HAC_DestroyAdasProc<span class="token operator">></span><span class="token punctuation">;</span>AdasProcWrapper                        adas_proc_<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>AdasProcWrapper</code> 是一个类型别名（using 声明），用于定义 <code>adas_proc_</code>对象。它是由 <code>ac::ObjWrapper</code> 模板类实例化而来。  </li><li><code>ac::ObjWrapper</code> 是一个模板类，接受三个模板参数：<code>ac::AdasProcInterface、HAC_CreateAdasProc 和 HAC_DestroyAdasProc</code>。</li></ul><p>ObjWrapper模板类的定义如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * @brief 一个简单的wrapper */</span><span class="token keyword">using</span> ObjCreateType  <span class="token operator">=</span> <span class="token function">HAC_Handle</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">using</span> ObjDestroyType <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>HAC_Handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> ObjCreateType Create<span class="token punctuation">,</span> ObjDestroyType Destroy<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">ObjWrapper</span> <span class="token keyword">final</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ObjWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>config<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        obj_ <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">Create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token function">StringException</span><span class="token punctuation">(</span><span class="token function">StringFormatWithPrefix</span><span class="token punctuation">(</span><span class="token string">"error: Create obj failed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ObjWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">ObjWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>HAC_Handle<span class="token operator">></span></span></span><span class="token punctuation">(</span>obj_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    T <span class="token operator">*</span><span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token function">StringException</span><span class="token punctuation">(</span><span class="token function">StringFormatWithPrefix</span><span class="token punctuation">(</span><span class="token string">"error: obj is nullptr."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> obj_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    T <span class="token operator">*</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>config<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> obj <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">Create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token function">StringException</span><span class="token punctuation">(</span><span class="token function">StringFormatWithPrefix</span><span class="token punctuation">(</span><span class="token string">"error: Create obj failed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>HAC_Handle<span class="token operator">></span></span></span><span class="token punctuation">(</span>obj_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj_ <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ObjWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> ObjWrapper <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    ObjWrapper<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> ObjWrapper <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    T <span class="token operator">*</span>obj_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由模板类的定义可知，该模板类有三个模板参数：</p><ul><li><code>typename T</code>：这是一个类型参数，用于指定被包装的对象的类型。</li><li><code>ObjCreateType Create</code>：这是一个函数指针类型，用于指定创建对象的函数。</li><li><code>ObjDestroyType Destroy</code>：这是一个函数指针类型，用于指定销毁对象的函数。</li></ul><p>因此，<code>AdasProcWrapper</code> 类型的 <code>adas_proc_</code> 对象是一个使用 <code>ac::ObjWrapper</code> 封装的 ADAS 处理实例。这个封装提供了一种方便的方式来创建和销毁 ADAS 处理实例，并提供了 ADAS 处理接口的访问。<code>adas_proc_</code>为封装类<code>ac::ObjWrapper</code>实例化后的对象。</p><h2 id="封装类的使用1"><a href="#封装类的使用1" class="headerlink" title="封装类的使用1"></a>封装类的使用1</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">adas_proc_<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>json_config_str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>封装类对象adas_proc_调用了模板类<code>ac::ObjWrapper</code>中的<code>Reset</code>函数，该函数调用了模板类创建时传入的参数2：<code>HAC_CreateAdasProc</code>,该参数是一个函数指针类型，用于指定创建对象的函数。该函数的定义如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * @brief 创造对象 * @param config json字符串，参考，assets目录下的配置文件,会从中读取各种配置信息， *               包括摄像头信息，模型文件路径,以及其他配置信息等等 * @note 当句柄不为NULL时候，最后一定要调用HAC_DestroyAdasProc进行销毁， *       如果为NULL，调用或者不调用HAC_DestroyAdasProc都可以。 * @return HAC_Handle 句柄,需要判断返回值是否是NULL */</span><span class="token keyword">extern</span> <span class="token string">"C"</span> HQ_FLAG_DLL_API HAC_Handle <span class="token function">HAC_CreateAdasProc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>config<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>HAC_Handle<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> ac<span class="token double-colon punctuation">::</span><span class="token function">AdasProcImpl</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="封装类的使用2"><a href="#封装类的使用2" class="headerlink" title="封装类的使用2"></a>封装类的使用2</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">adas_proc_<span class="token operator">-></span><span class="token function">SetAdasInfoEvent</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Impl<span class="token double-colon punctuation">::</span>OnAdasInfo<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_1<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_2<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，<code>SetAdasInfoEvent</code>函数的定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">AdasProcImpl</span><span class="token double-colon punctuation">::</span><span class="token function">SetAdasInfoEvent</span><span class="token punctuation">(</span><span class="token keyword">const</span> AdasInfoEvent <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    on_adas_info_ <span class="token operator">=</span> event<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>OnAdasInfo</code>函数的定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">OnAdasInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> tickcount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里就有点绕了，模板类中并没有SetAdasInfoEvent函数，这里怎么能使用呢？其实这个函数的定义在<code>ac::AdasProcInterface</code>类中，由于在模板类中重载了<code>-&gt;</code>运算符，因此<code>adas_proc_-&gt;SetAdasInfoEvent</code>中的<code>-&gt;</code>是被重载后的运算符，<code>adas_proc_-&gt;</code>等同于<code>adas_proc_.obj_</code>,故<code>adas_proc_-&gt;SetAdasInfoEvent</code>等同于<code>adas_proc_.obj_.SetAdasInfoEvent</code>。</p><p>这里封装类重载了<code>-&gt;</code>运算符，因此看起来封装后的类可以直接访问模板参数1指向类<code>ac::AdasProcInterface</code>的成员函数。</p><p>到此为止，可以基本了解封装类的定义和使用示例。</p><h1 id="函数的绑定"><a href="#函数的绑定" class="headerlink" title="函数的绑定"></a>函数的绑定</h1><p>紧接上文，在调用<code>SetAdasInfoEvent</code>函数时使用了<code>std::bind</code>进行了函数的绑定。<code>std::bind</code> 是 C++ 标准库中的一个函数模板，它允许你创建一个函数对象，将参数绑定到可调用对象上。它位于 <code>&lt;functional&gt;</code> 头文件中，用于泛化函数调用。</p><p>std::bind 函数可以将一个可调用对象和一些参数绑定在一起，生成一个新的函数对象。这个新的函数对象可以延迟执行或者在需要时进行调用，而且可以自定义绑定的参数。</p><p>因此,这里是将<code>Impl::OnAdasInfo</code>与其参数进行绑定后生成一个新的可调用对象，同时将其作为函数<code>SetAdasInfoEvent</code>的参数传递给<code>on_adas_info_</code>,也就是说<code>on_adas_info_=std::bind(&amp;Impl::OnAdasInfo, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3)</code>。这样<code>on_adas_info_</code>就可以在使用时传递参数并执行<code>OnAdasInfo</code>函数。</p><p><code>on_adas_info_</code>的调用场景如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">AdasProcImpl</span><span class="token double-colon punctuation">::</span><span class="token function">OnAlarmInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> tickcount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 设置输出信息到buffer中</span>    <span class="token comment">// 把决策模块会掉出来的内容添加到out_buffer_中，然后回调到外面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>on_adas_info_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">decltype</span><span class="token punctuation">(</span>out_buffer_<span class="token punctuation">)</span>  tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>                        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lck</span><span class="token punctuation">(</span>buf_mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 把buffer中内容放入out_buffer中</span>            <span class="token keyword">const</span> <span class="token keyword">auto</span> out_buffer_length <span class="token operator">=</span> out_buffer_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out_buffer_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>out_buffer_length <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>out_buffer_<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> out_buffer_length<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> out_buffer_<span class="token punctuation">;</span>            out_buffer_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">on_adas_info_</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tickcount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此为止，可以基本了解函数绑定的定义和使用示例。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类的封装 </tag>
            
            <tag> 函数绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++接口定义</title>
      <link href="/2023/05/10/c-jie-kou-ding-yi/"/>
      <url>/2023/05/10/c-jie-kou-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要定义接口类"><a href="#为什么要定义接口类" class="headerlink" title="为什么要定义接口类?"></a>为什么要定义接口类?</h1><p>在软件开发这个行业中，一个较大的软件项目，一般由几个小组共同开发完成，为了将小组之间的影响降低到最低，定义好接口软件成为双方关注的焦点，对于要求在短时间开发完成的接口更是如此。那么如何才能定义好的接口呢? 第一，接口名字和实际的功能相符合；第二、接口要对数据进行封装，不允许客户直接操作接口之下的数据，尤其是使用new和delete在堆上操作内存数据。因为客户很容易由于操作不当造成错误，误以为是设计的接口有问题。</p><h1 id="两种常见的接口定义方法？"><a href="#两种常见的接口定义方法？" class="headerlink" title="两种常见的接口定义方法？"></a>两种常见的接口定义方法？</h1><p>c++中实现对接口与实现进行分离有两种方法，一种是将对象的实现细目隐藏于指针背后，简单的说就是将其分成两个类，一个类只提供接口，另一个负责实现该接口，这种设计手法常称为Pimpl Idiom(pointer to implementation)。<br>另一种方法就是将接口定义为抽象类，接口全被定义为纯虚函数的形式（纯虚函数没有具体的实现方法），派生类的成员函数负责实现这些接口。这种设计手法称为对象接口（Object Interface）。千万不要忘记把抽象接口类的析构函数定义为virtual函数，可能会造成内存泄漏。</p><h1 id="“对象接口”方式"><a href="#“对象接口”方式" class="headerlink" title="“对象接口”方式"></a>“对象接口”方式</h1><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><h3 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义?"></a>如何定义?</h3><p>首先给接口类下了定义：接口类应该是只提供方法声明，而自身不提供方法定义的抽象类。接口类自身不能实例化，接口类的方法定义&#x2F;实现只能由接口类的子类来完成。</p><p>而对于C++，其接口类一般具有以下特征：</p><ul><li>1.最好不要有成员变量，但可以有静态常量（static const或enum）</li><li>2.要有纯虚接口方法</li><li>3.要有虚析构函数，并提供默认实现</li><li>4.不要声明构造函数</li></ul><p>如下就是一个最简单的例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Testable</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> START <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// #1</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> STOP <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// #2： 接口方法</span>     <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Testable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// #3： 从C++11开始可以： virtual ~Testable() = default;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>#1.</code><br>如果成员变量，尤其是可变的成员变量，定义在接口中，等于是把实现细节暴露出来了，不符合接口定义的要求，所以一般不在接口中定义可变的成员变量。<br>而常量可以定义在接口中，因为有时接口需要返回状态，而这些状态可以定义成常量放在接口中。</p><p><code>#2.</code><br>由于不能让接口类自身能够实例化，并且需要子类必须实现接口暴露的方法，所以接口方法都要声明成纯虚函数。<br>声明成纯虚函数意味着接口类自身不需要提供方法的定义，方法的定义需要由接口类的子类提供，并且接口类自身也因此变成了抽象类而不能被实例化。</p><p><code>#3.</code><br>a). 在使用接口类的指针访问接口类的子类的实例时，当对接口类的指针做delete时，如果接口类的析构函数不是虚析构函数的话，将只会调用接口类的析构函数，接口类的子类的析构函数将不会被调用，内存泄露将会产生，所以接口类的析构函数必须定义成虚析构函数。<br>b). 如果接口类的析构函数不提供默认实现，即如果接口类的析构函数是纯虚析构函数的话，接口类的子类将被迫必须提供析构函数的实现，这样对接口类的子类不友好。<br>c). 在C++11中也可以用：  virtual ~Testable() &#x3D; default; 替代 virtual ~Testable() {};</p><p><code>#4.</code><br>不要显式定义任何的构造函数，但也不要在接口中加入如下代码来禁止生成构造函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Testable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token function">Testable</span><span class="token punctuation">(</span><span class="token keyword">const</span> Testable<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为C++的调用机制要求子类的构造函数调用时一定会先调用父类的构造函数，如果禁止生成构造函数，代码编译时会报错。如果程序员不显式的提供构造函数，编译器也会隐式的加上构造函数的，虽然这些构造函数对于接口类来说实际没有什么意义。</p><p>C++中如何定义标识接口（marker interface）类?<br>标识接口是没有任何方法和属性的接口。这种接口在java中出现的较多，比如：java.io.Serializable、java.rmi.Remote、java.util.EventListener、java.util.RandomAccess</p><p>实现代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Testable</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Testable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// #5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>#5.</code><br>只要对纯虚析构函数提供一个默认实现就可以了。这种对纯虚函数提供实现的写法看似很奇怪，但C++的确是支持的。</p><h3 id="如何正确的使用接口类"><a href="#如何正确的使用接口类" class="headerlink" title="如何正确的使用接口类"></a>如何正确的使用接口类</h3><p>提供接口与实现<br>首先，声明一个接口：</p><ul><li><code>circle.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle.h</span><span class="token comment">// 圆的接口类</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 接口方法：面积</span><span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过继承的方式实现这个接口：</p><ul><li><code>circle_impl.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle_impl.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle.h"</span></span> <span class="token comment">// 圆的具体实现类</span><span class="token keyword">class</span> <span class="token class-name">CircleImpl</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Circle</span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">CircleImpl</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>circle_impl.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle_impl.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle_impl.h"</span></span> <span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token class-name">CircleImpl</span><span class="token double-colon punctuation">::</span><span class="token function">CircleImpl</span><span class="token punctuation">(</span><span class="token keyword">double</span> _radius<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">radius</span><span class="token punctuation">(</span>_radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">double</span> <span class="token class-name">CircleImpl</span><span class="token double-colon punctuation">::</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，通过管理类创建接口派生类的实例，或者销毁接口派生类的实例：</p><ul><li><code>circle_manager.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle_manager.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle.h"</span></span> <span class="token comment">// 圆的创建工厂类</span><span class="token keyword">class</span> <span class="token class-name">CircleManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> Circle<span class="token operator">*</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 创建circle实例</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>Circle<span class="token operator">*</span> circlePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 销毁circle实例</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>circle_manager.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle_manager.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle_manager.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle_impl.h"</span></span> Circle<span class="token operator">*</span> <span class="token class-name">CircleManager</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Circle<span class="token operator">*</span> circlePtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CircleImpl</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> circlePtr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token class-name">CircleManager</span><span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span>Circle<span class="token operator">*</span> circlePtr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> circlePtr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码目录结构</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proj-+     <span class="token operator">|</span>-inc-+     <span class="token operator">|</span>     <span class="token operator">|</span>-circle.h     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_manager.h     <span class="token operator">|</span>     <span class="token operator">|</span>-src-+           <span class="token operator">|</span>-circle_impl.h           <span class="token operator">|</span>-circle_impl.cpp           <span class="token operator">|</span>-circle_manager.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中inc目录用于存放Circle接口类和Circle管理类的声明，src目录中存放Circle实现类CircleImpl的声明和定义、Circle管理类CircleManager的定义。</p><p>然后，可以将以上代码编译成静态库circle.lib，并和inc目录中的头文件一起提供给外部调用：</p><blockquote><ul><li><code>如何使用静态库？</code><br>外部使用者编译时，需要做如下配置：</li></ul><ul><li><p>1 把inc目录添加到“附加包含目录”中。</p></li><li><p>2 “附加依赖项”中添加circle.lib。</p></li><li><p>3 把circle.lib所在目录的路径添加到“附加库目录”中。</p></li></ul></blockquote><p>外部使用者的代码如下：</p><ul><li><code>main.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle_manager.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle.h"</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Circle<span class="token operator">*</span> circlePtr <span class="token operator">=</span> <span class="token class-name">CircleManager</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> circlePtr<span class="token operator">-></span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token class-name">CircleManager</span><span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span>circlePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码只提供给外部circle的接口，circle的实现完全被隐藏了起来，外部将无从知晓，外部使用者只能通过circle管理类生成circle的派生类的实例。外部使用者得到circle派生类的实例后，除了能调用接口暴露的方法area()外，其它什么也做不了，这样就完全达到了使用接口的最终目标。</p><p><code>如何编译成动态库？</code><br>首先，添加一个新的头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// dll_export.h </span><span class="token comment">// if windows .dll </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WINDLL </span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DLL_API_EXPORTS </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DLL_API</span> <span class="token expression"><span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DLL_API</span> <span class="token expression"><span class="token function">__declspec</span><span class="token punctuation">(</span>dllimport<span class="token punctuation">)</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span> <span class="token comment">// else if Linux or macOS .so </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DLL_API</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加此头文件后，代码可以在windows、Linux下都可编译生成动态库，只需在编译时设置不同参数就行了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">windows： /D <span class="token string">"DLL_API_EXPORTS"</span> /D <span class="token string">"_WINDLL"</span>Linux： 不用配置额外参数circle.h和circle_manager.h也要做相应改动：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译完成后将生成”circle.lib“和”circle.dll“文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proj-+     <span class="token operator">|</span>-inc-+     <span class="token operator">|</span>     <span class="token operator">|</span>-circle.h     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_manager.h     <span class="token operator">|</span>     <span class="token operator">|</span>-src-+     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_impl.h     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_impl.cpp     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_manager.cpp     <span class="token operator">|</span>     <span class="token operator">|</span>-bin-+           <span class="token operator">|</span>-circle.lib           <span class="token operator">|</span>-circlr.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>如何使用动态库？</code><br>外部使用者编译时，需要做如下配置：</p><ul><li><p>1 代码中添加#pragma comment(lib,”circle.lib”)， 这里是circle.lib，不是circle.dll。</p></li><li><p>2 把inc目录添加到“附加包含目录”中。</p></li><li><p>3 附加依赖项”中添加circle.lib，这里也是circle.lib，不是circle.dll。</p></li><li><p>4 把bin目录所在路径添加到”附加库目录“中。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里有几点需要说明一下：</p><p>1、为什么CircleManager类即在提供创建实例的方法又要提供销毁实例的方法？</p><p>由于编译器的实现方式不同，dll的堆空间可能跟调用方的堆空间不同，它可能是由dll自己单独管理的，所以从dll中创建的实例，最好还是在dll中销毁。</p><p>2、对动态库的调用本文是通过隐式调用的方式完成的，对动态库的调用也可以使用显式调用的方式，但由于windows和Linux在使用显式调用时的API是不同的，不好提供统一的代码，所以本文没有举例，以后有机会再单独行文介绍。</p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><ul><li><code>Animal.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">virtual</span> string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> Animal<span class="token operator">*</span> <span class="token function">creat</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>RealAnimal.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Animal.h"</span></span> <span class="token keyword">class</span> <span class="token class-name">RealAnimal</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">RealAnimal</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">RealAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">friend</span> Animal<span class="token operator">*</span> <span class="token function">creat</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    string<span class="token operator">&amp;</span> mName<span class="token punctuation">;</span>    <span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>RealAnimal.cpp</code><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"RealAnimal.h"</span></span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">RealAnimal</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">mName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">mAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">RealAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> string<span class="token operator">&amp;</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Animal<span class="token operator">*</span> <span class="token function">creat</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">RealAnimal</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>如前面所说，Animal* creat(string&amp; name, int age)确实只是实例化一个RealAnimal对象，返回的却是Animal接口对象，所以必须将类Animal 的析构函数声明为虚函数，不然会造成内存泄漏。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>对象接口的形式就是定义一个接口类，类内函数为纯虚函数(继承者必须实现)，放在一个接口头文件中，对外开放；然后定义一个实现上述接口的类，这个类继承了接口类，必须对类内的函数进行实现。这个外部只能看到接口头文件中内容，可以使用接口中定义的方法，但是无法修改和访问方法实现的细节。</p><h1 id="“指针实现”方式"><a href="#“指针实现”方式" class="headerlink" title="“指针实现”方式"></a>“指针实现”方式</h1><h2 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h2><ul><li><code>personImpl.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">PersonImpl</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">PersonImpl</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">PersonImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    string<span class="token operator">&amp;</span> mName<span class="token punctuation">;</span>    <span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>personImpl.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"personImpl.h"</span></span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">PersonImpl</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">mName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">PersonImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> string<span class="token operator">&amp;</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>person.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">PersonImpl</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>     PersonImpl <span class="token operator">*</span> <span class="token function">getImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    PersonImpl <span class="token operator">*</span>mPersonImpl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>person.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"person.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"personImpl.h"</span></span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">Person</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">mPersonImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">PersonImpl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"construct Person"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> mPersonImpl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"deconstruct Person"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> string<span class="token operator">&amp;</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mPersonImpl<span class="token operator">-></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mPersonImpl<span class="token operator">-></span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mPersonImpl<span class="token operator">-></span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mPersonImpl<span class="token operator">-></span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> PersonImpl<span class="token operator">*</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span> <span class="token function">getImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mPersonImpl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>main.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"person.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"personImpl.h"</span></span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        string str<span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>    Person <span class="token function">person</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     PersonImpl <span class="token operator">*</span>personImp <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     string name <span class="token operator">=</span> personImp<span class="token operator">-></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span>personImp<span class="token operator">-></span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h2><ul><li><p><code>adas_app.h</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">AdasApp</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">// json字符串</span>    <span class="token function">AdasApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">AdasApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">class</span> <span class="token class-name">Impl</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Impl<span class="token operator">></span> impl_<span class="token comment">/* = nullptr*/</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>adas_app.cpp</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">AdasApp</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">Impl</span> <span class="token keyword">final</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">/**     * @brief 解析得到前向目标     */</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>ac<span class="token double-colon punctuation">::</span>ObstacleInfo<span class="token operator">></span> <span class="token function">DecodeObjects</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> size<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>具体实现<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @brief 解析得到车道线     */</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>ac<span class="token double-colon punctuation">::</span>CurveInfo<span class="token operator">></span> <span class="token function">DecodeCurves</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> size<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>具体实现<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Impl</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>config<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>具体实现<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">DecodeObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DecodeCurves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token operator">~</span><span class="token function">Impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>具体实现<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token function">AdasApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>config<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">impl_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Impl</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">AdasApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>main.cpp</code></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   AdasApp <span class="token function">obj</span><span class="token punctuation">(</span>ac<span class="token double-colon punctuation">::</span><span class="token function">LoadTextFile</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子使用了智能指针实现adad的实现类<code>class Impl;</code> <code>std::unique_ptr&lt;Impl&gt; impl_/* = nullptr*/;</code>在adas_app.h中看不到真正的实现，但实际声明了一个智能指针<code>impl_</code>，在adas_app.cpp中将该指针指针指向了一个new对象<code>impl_(new Impl(config)</code>，并将其new对象的构造函数<code>Impl&#123;&#125;</code>进行了真正的实现。</p><hr><blockquote><p>版权声明：本文为CSDN博主「netyeaxi」的原创文章，遵循CC4.0BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/netyeaxi/article/details/80887646">https://blog.csdn.net/netyeaxi/article/details/80887646</a><br>原文链接：<a href="https://blog.csdn.net/netyeaxi/article/details/80724557">https://blog.csdn.net/netyeaxi/article/details/80724557</a><br>原文链接：<a href="https://blog.csdn.net/qq_20853741/article/details/121244189">https://blog.csdn.net/qq_20853741/article/details/121244189</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 接口定义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓OpenGL渲染画面闪烁原因分析</title>
      <link href="/2023/03/16/an-zhuo-opengl-xuan-ran-hua-mian-shan-shuo-yuan-yin-fen-xi/"/>
      <url>/2023/03/16/an-zhuo-opengl-xuan-ran-hua-mian-shan-shuo-yuan-yin-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>1.硬件接触不良<br>2.opengl双缓存未开启<br>3.opengl双缓存开启但离屏数据为更新<br>4.相机数据被覆盖<br>4.1相机数据格式不对<br>4.2申请内存与访问内存越界问题</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 待整理android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> opengl </tag>
            
            <tag> 画面闪烁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用指南</title>
      <link href="/2023/02/28/git-shi-yong-zhi-nan/"/>
      <url>/2023/02/28/git-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="git-config-设置用户名称和邮件地址"><a href="#git-config-设置用户名称和邮件地址" class="headerlink" title="git config 设置用户名称和邮件地址"></a><code>git config</code> 设置用户名称和邮件地址</h2><ul><li>设置用户名称<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"goto456"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>设置邮件地址<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"goto456@126.com"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>列出当前Git所有的配置信息<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="git-init-初始化本地仓库"><a href="#git-init-初始化本地仓库" class="headerlink" title="git init 初始化本地仓库"></a><code>git init</code> 初始化本地仓库</h2><p>获取一个 Git 仓库有两种方法：<br>1.本地初始化一个仓库<br>2.从远程克隆一个仓库到本地<br>对于第1种方式，如果想对本地现有的一个项目用 Git 来管理，可以直接进入该项目的目录下执行如下命令，就可以将其初始化成一个 Git 仓库了。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="git-clone-克隆远程仓库到本地"><a href="#git-clone-克隆远程仓库到本地" class="headerlink" title="git clone 克隆远程仓库到本地"></a><code>git clone</code> 克隆远程仓库到本地</h2><ul><li>通过ssh方式克隆<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:goto456/leetcode.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>通过https方式克隆<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/goto456/leetcode.git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>https方式：不管是谁，只要拿到该项目的 url 可以随便 clone，但是在 push 到远程的时候需要验证用户名和密码；<br>ssh方式：需要现将你电脑的SSH key（SSH公钥）添加到GitHub（或者其他代码托管网站）上，这样在 clone 项目和 push 项目到远程时都不需要输入用户名和密码。</p></blockquote></li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git%E6%95%99%E7%A8%8B.pdf">参考文档</a><br><a href="https://git-scm.com/book/zh/v2">Pro Git 第二版</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的lambda表达式使用方法</title>
      <link href="/2023/02/14/c-de-lambda-biao-da-shi-shi-yong-fang-fa/"/>
      <url>/2023/02/14/c-de-lambda-biao-da-shi-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数参数传递 </tag>
            
            <tag> lambda表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义鱼眼图像去畸变</title>
      <link href="/2023/02/14/zi-ding-yi-yu-yan-tu-xiang-qu-ji-bian/"/>
      <url>/2023/02/14/zi-ding-yi-yu-yan-tu-xiang-qu-ji-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="畸变图像-rightarrowtail-去畸变图像"><a href="#畸变图像-rightarrowtail-去畸变图像" class="headerlink" title="畸变图像$\rightarrowtail$ 去畸变图像"></a>畸变图像$\rightarrowtail$ 去畸变图像</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">undistortImage</span><span class="token punctuation">(</span>    InputArray distorted<span class="token punctuation">,</span>            <span class="token comment">// 输入的畸变图像</span>    OutputArray undistorted<span class="token punctuation">,</span>         <span class="token comment">// 输出的去畸变图像</span>    InputArray K<span class="token punctuation">,</span>                    <span class="token comment">// 相机内参矩阵(3x3)</span>    InputArray D<span class="token punctuation">,</span>                    <span class="token comment">// 相机畸变系数</span>    InputArray Knew <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 新的相机内参矩阵(3x3)</span>    <span class="token keyword">const</span> Size<span class="token operator">&amp;</span> new_size <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 新的去畸变图像尺寸</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>new_size</code>一般设置为空，默认输出去畸变图像和畸变图像的尺寸相同。</li><li><code>Knew </code>为新的相机内参矩阵，影响者去畸变之后图像的范围，参数有：<code>fx</code>、<code>fy</code>、<code>cx</code>、<code>cy</code>。<ul><li><code>fx</code>为水平方向的焦距，值越大，水平方向显示图像范围越大。</li><li><code>fy</code>为垂直方向的焦距，值越大，垂直方向显示图像范围越大。</li><li><code>cx</code>主点坐标的x值，值越大，显示图像范围整体越偏左</li><li><code>cy</code>主点坐标的y值，值越大，显示图像范围整体越偏下<blockquote><p><code>cx</code>、<code>cy</code>一般和原应相机的参数一样，这样去畸变后的图像和畸变图像的中心可以对齐；<code>fx</code>、<code>fy</code>需要根据去畸变图像的视野需求进行调整，一般在原相机的参数的基础上进行缩放。</p></blockquote></li></ul></li><li>效果展示<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%B1%BC%E7%9C%BC%E5%9B%BE%E5%83%8F%E5%8E%BB%E7%95%B8%E5%8F%98/0.0-0.0.png" alt="原始畸变图像"><style>th, td {  text-align: center; /* 设置表头和单元格中的文本居中 */}</style><table><colgroup>  <col style="width: 20%;">  <col style="width: 20%;">  <col style="width: 60%;"></colgroup><tr>  <th>fx缩小倍数</th>  <th>fy缩小倍数</th>  <th>去畸变图像</th></tr><tr>  <td>1.0</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/1.0-1.0.png""></td></tr><tr>  <td>1.3</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/1.3-1.0.png""></td></tr><tr>  <td>1.5</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/1.5-1.0.png""></td></tr><tr>  <td>3.0</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/3.0-1.0.png""></td></tr><tr>  <td>5.0</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/5.0-1.0.png""></td></tr><tr>  <td>5.0</td>  <td>1.5</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/5.0-1.5.png""></td></tr><tr>  <td>5.0</td>  <td>3.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/5.0-3.0.png""></td></tr></table></li></ul><h1 id="畸变点-rightarrowtail-去畸变点"><a href="#畸变点-rightarrowtail-去畸变点" class="headerlink" title="畸变点$\rightarrowtail$ 去畸变点"></a>畸变点$\rightarrowtail$ 去畸变点</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">undistortPoints</span><span class="token punctuation">(</span>    InputArray distorted<span class="token punctuation">,</span>          <span class="token comment">// 输入的畸变坐标点</span>    OutputArray undistorted<span class="token punctuation">,</span>      <span class="token comment">// 输出的去畸变坐标点</span>    InputArray K<span class="token punctuation">,</span>                  <span class="token comment">// 相机内参矩阵(3x3)</span>    InputArray D<span class="token punctuation">,</span>                  <span class="token comment">// 畸变参数向量</span>    InputArray R <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 旋转矩阵(3x3)，通常是单位矩阵</span>    InputArray P <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 投影矩阵(3x3)或新相机内参矩阵Knew(3x3)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个函数可以直接向畸变图像上的点转换为去畸变图像上的点，也可以利用<code>R</code>,<code>P</code>矩阵将畸变图像上的点转换为世界坐标系中。</p></blockquote><p><strong>注意</strong>：这里转换为去畸变图像上的点时，不支持图像缩放，仅支持新的内参矩阵，因此图像在去畸变时，一般不改变图像的大小，保证点去畸变时可以与之对应。</p><h1 id="去畸变点-rightarrowtail-畸变点"><a href="#去畸变点-rightarrowtail-畸变点" class="headerlink" title="去畸变点$\rightarrowtail$ 畸变点"></a>去畸变点$\rightarrowtail$ 畸变点</h1><p>没有直接的函数将畸变点转换为去畸变点，但是可以利用map映射函数获得映射点来进行转换。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">initUndistortRectifyMap</span><span class="token punctuation">(</span>    InputArray K<span class="token punctuation">,</span>              <span class="token comment">// 相机内参矩阵 (3x3)</span>    InputArray D<span class="token punctuation">,</span>              <span class="token comment">// 畸变参数向量</span>    InputArray R<span class="token punctuation">,</span>              <span class="token comment">// 旋转矩阵 (3x3)</span>    InputArray P<span class="token punctuation">,</span>              <span class="token comment">// 新相机矩阵 (3x3)</span>    <span class="token keyword">const</span> Size<span class="token operator">&amp;</span> size<span class="token punctuation">,</span>          <span class="token comment">// 输出映射的图像尺寸</span>    <span class="token keyword">int</span> m1type<span class="token punctuation">,</span>                <span class="token comment">// 映射矩阵的数据类型 (例如：CV_32FC1)</span>    OutputArray map1<span class="token punctuation">,</span>          <span class="token comment">// 输出的第一个映射</span>    OutputArray map2           <span class="token comment">// 输出的第二个映射</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>map1</code>、<code>map2</code>为映射矩阵，类型为<code>cv::Mat</code>,尺寸为<code>size</code>，也就是说这个<code>Mat</code>的尺寸就是去畸变图像的尺寸，每个位置存储的值为对应畸变图像上点的<code>x</code>值或者<code>y</code>值。这样我们就可以访问这个<code>Mat</code>中每个像素值，进而得到去畸变点对应的畸变点坐标。</p><blockquote><p>众所周知，map映射时存储的映射关系一般为相反的</p></blockquote><ul><li>使用方法<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 初始化映射表</span>cv<span class="token double-colon punctuation">::</span>Mat map_x<span class="token punctuation">,</span> map_y<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> image_points_dist<span class="token punctuation">,</span> image_points_undist_new<span class="token punctuation">;</span>cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">initUndistortRectifyMap</span><span class="token punctuation">(</span>cam_K<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cam_D<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">)</span><span class="token punctuation">,</span> cam_K_new<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span>CAMERA_WIDTH<span class="token punctuation">,</span> CAMERA_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> map_x<span class="token punctuation">,</span> map_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> point <span class="token operator">:</span> image_points_undist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Point2f point_undist <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span>                                           point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    image_points_dist<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>map_x<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>point_undist<span class="token punctuation">)</span><span class="token punctuation">,</span> map_y<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>point_undist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意</strong>: 这里的输出映射的图像尺寸需要为畸变图像的原始尺寸<code>cv::Size(CAMERA_WIDTH, CAMERA_HEIGHT)</code>,旋转矩阵应该为单位矩阵，新相机矩阵与去畸变时的设置保持一直即可。</p><h1 id="代码-undist-cpp"><a href="#代码-undist-cpp" class="headerlink" title="代码: undist.cpp"></a>代码: <code>undist.cpp</code></h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui/highgui.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/imgproc/imgproc.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNDIST_SCALE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * @description: 输入畸变图，输出去畸变图 * @param &#123;Mat&#125; &amp;img_dist * @param &#123;Mat&#125; &amp;img_undist * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">DistToUndistImage</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat img_dist<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>Mat <span class="token operator">&amp;</span>img_undist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat cam_K <span class="token operator">=</span> <span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Mat_</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">319.307046915</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">319.715597621</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat cam_D <span class="token operator">=</span> <span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Mat_</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0.07218855</span><span class="token punctuation">,</span> <span class="token number">0.02228145</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.015075182</span><span class="token punctuation">,</span> <span class="token number">0.002351672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新的相机内参矩阵和图像尺寸（可选）</span>    cv<span class="token double-colon punctuation">::</span>Mat cam_K_new <span class="token operator">=</span> cam_K<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5.0</span><span class="token punctuation">;</span>     <span class="token comment">// fx</span>    cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1.5</span><span class="token punctuation">;</span>     <span class="token comment">// fy</span>    cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cx</span>    cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cy</span>    cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">undistortImage</span><span class="token punctuation">(</span>img_dist<span class="token punctuation">,</span> img_undist<span class="token punctuation">,</span> cam_K<span class="token punctuation">,</span> cam_D<span class="token punctuation">,</span> cam_K_new<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>img_undist<span class="token punctuation">,</span> img_undist<span class="token punctuation">,</span> img_dist<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"image_remap_fish"</span><span class="token punctuation">,</span> img_undist<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat img <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"picture_back.png"</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat undist_img<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">DistToUndistImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> undist_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编译</li><li><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ undist.cpp <span class="token parameter variable">-o</span> undist <span class="token parameter variable">-lopencv_core</span> <span class="token parameter variable">-lopencv_highgui</span> <span class="token parameter variable">-lopencv_imgproc</span> <span class="token parameter variable">-lopencv_imgcodecs</span> <span class="token parameter variable">-lopencv_calib3d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码规范</title>
      <link href="/2023/02/14/bian-ma-gui-fan/"/>
      <url>/2023/02/14/bian-ma-gui-fan/</url>
      
        <content type="html"><![CDATA[<h1 id="C-编码规范"><a href="#C-编码规范" class="headerlink" title="C++编码规范"></a>C++编码规范</h1><p>&#x2F;&#x2F; 文件: 单词小写, 单词之间使用下划线</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"a.h"</span></span><span class="token comment">// 命名空间: 小写字母</span><span class="token keyword">namespace</span> mynamespace <span class="token punctuation">&#123;</span><span class="token comment">// 常量: k开头, 每个单词首字母大写</span><span class="token keyword">const</span> <span class="token keyword">int</span> kDaysInAWeek <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">// 类型定义</span><span class="token keyword">typedef</span> hash_map<span class="token operator">&lt;</span>TUrlTableProperties <span class="token operator">*</span><span class="token punctuation">,</span> string<span class="token operator">></span> TPropertiesMap<span class="token punctuation">;</span><span class="token keyword">using</span> PropertiesMap <span class="token operator">=</span> hash_map<span class="token operator">&lt;</span>TUrlTableProperties <span class="token operator">*</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">// 全局变量、局部变量: 单词小写, 单词之间使用下划线</span><span class="token keyword">int</span> my_name<span class="token punctuation">;</span><span class="token comment">// 类: T开头, 每个单词首字母大写</span><span class="token keyword">class</span> <span class="token class-name">TMyClass</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// 结构体: T开头, 每个单词首字母大写</span><span class="token keyword">struct</span> <span class="token class-name">TMyStruct</span> <span class="token punctuation">&#123;</span><span class="token comment">// 普通变量: 单词小写, 单词之间使用下划线</span><span class="token keyword">int</span> my_name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 函数: 每个单词首字母大写, 函数名首字母大写</span><span class="token function">MyExcitingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 类成员变量: 单词小写, 单词之间使用下划线, 最后以下划线结束</span><span class="token keyword">int</span> my_name_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%2B%2B%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C++编码规范</a></p><blockquote><p>C++编码规范.pdf的升级版本</p></blockquote><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%2B%2B%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83C1.pdf">C++编码规范.pdf的升级版本</a></p><h1 id="C编码规范"><a href="#C编码规范" class="headerlink" title="C编码规范"></a>C编码规范</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/%E5%B5%8C%E5%85%A5%E5%BC%8FC%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C编码规范</a></p><h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/Java%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C#编码规范</a></p><h1 id="C-编码规范-1"><a href="#C-编码规范-1" class="headerlink" title="C#编码规范"></a>C#编码规范</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%E4%BA%95%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83C1.pdf">C#编码规范</a></p><h1 id="google编程风格指南"><a href="#google编程风格指南" class="headerlink" title="google编程风格指南"></a>google编程风格指南</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/google%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97.pdf">google编程风格指南</a></p><h1 id="移动机器人开发代码规范说明书"><a href="#移动机器人开发代码规范说明书" class="headerlink" title="移动机器人开发代码规范说明书"></a>移动机器人开发代码规范说明书</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">移动机器人开发代码规范说明书</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编码规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> java </tag>
            
            <tag> C </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity和SurfaceView的生命周期</title>
      <link href="/2023/02/10/activity-he-surfaceview-de-sheng-ming-zhou-qi/"/>
      <url>/2023/02/10/activity-he-surfaceview-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<p>当用户浏览、退出和返回到您的应用时，您应用中的 Activity 实例会在其生命周期的不同状态间转换。Activity 类会提供许多回调，这些回调会让 Activity 知晓某个状态已经更改：系统正在创建、停止或恢复某个 Activity，或者正在销毁该 Activity 所在的进程。</p><p>在生命周期回调方法中，您可以声明用户离开和再次进入 Activity 时 Activity 的行为方式。例如，如果您正构建流媒体视频播放器，当用户切换至另一应用时，您可能要暂停视频或终止网络连接。当用户返回时，您可以重新连接网络并允许用户从同一位置继续播放视频。换言之，每个回调都支持您执行适合给定状态变更的特定作业。在合适的时间执行正确的作业，并妥善处理转换，这将提升应用的稳健性和性能。例如，良好的生命周期回调实现有助于防止应用出现以下问题：</p><ul><li>当用户在使用应用时接听来电，或切换至另一应用时崩溃。</li><li>当用户未主动使用它时，消耗宝贵的系统资源。</li><li>当用户离开应用并在稍后返回时，丢失用户的进度。</li><li>当屏幕在横向和纵向之间旋转时，崩溃或丢失用户的进度。</li></ul><h1 id="Activity-生命周期概念"><a href="#Activity-生命周期概念" class="headerlink" title="Activity 生命周期概念"></a>Activity 生命周期概念</h1><p>为了在 Activity 生命周期的各个阶段之间导航转换，Activity 类提供六个核心回调：onCreate()、onStart()、onResume()、onPause()、onStop() 和 onDestroy()。当 Activity 进入新状态时，系统会调用其中每个回调。</p><p>下图是对此范例的直观展现。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_surfaceView.png">  </p><p>当用户开始离开 Activity 时，系统会调用方法来销毁该 Activity。在某些情况下，此销毁只是部分销毁；Activity 仍然驻留在内存中（例如当用户切换至另一应用时），并且仍然可以返回到前台。如果用户返回到该 Activity，Activity 会从用户离开时的位置继续运行。除了少数例外，应用在后台运行时会受到限制，无法启动 Activity。</p><p>系统终止给定进程及其中 Activity 的可能性取决于当时 Activity 的状态。Activity 状态和从内存中弹出 会更详细地介绍状态与弹出漏洞之间的关系。</p><p>根据 Activity 的复杂程度，您可能不需要实现所有生命周期方法。但是，请务必了解每个方法，并实现能够确保应用按用户预期方式运行的方法，这非常重要。</p><blockquote><p>具体细节参考：<a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java">https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java</a></p></blockquote><h1 id="Activity和SurfaceView的生命周期"><a href="#Activity和SurfaceView的生命周期" class="headerlink" title="Activity和SurfaceView的生命周期"></a>Activity和SurfaceView的生命周期</h1><ul><li><p>程序打开<br>Activity 调用顺序:<code>onCreate()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceCreated()</code>-&gt;<code>surfaceChanged()</code>  </p></li><li><p>程序关闭（按 BACK 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code>-&gt;<code>onDestory()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p></li><li><p>程序切到后台（按 HOME 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p></li><li><p>程序切到前台<br>Activity 调用顺序: <code>onRestart()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceChanged()</code>-&gt;<code>surfaceCreated()</code>  </p></li><li><p>屏幕锁定（挂断键或锁定屏幕）<br>Activity 调用顺序: <code>onPause()</code><br>SurfaceView 什么方法都不调用  </p></li><li><p>屏幕解锁<br>Activity 调用顺序:<code>onResume()</code><br>SurfaceView 什么方法都不调用</p></li></ul><blockquote><p>总结SurfaceView在页面可见或者不可见时触发  </p></blockquote><p>示例图如下所示:  </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_lifecycle.png"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> activity </tag>
            
            <tag> surfaceView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装opencv与opencv_contrib</title>
      <link href="/2023/01/31/ubuntu-an-zhuang-opencv-yu-opencv-contrib/"/>
      <url>/2023/01/31/ubuntu-an-zhuang-opencv-yu-opencv-contrib/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cmake <span class="token function">git</span> libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential qt5-default ccache libv4l-dev libavresample-dev  libgphoto2-dev libopenblas-base libopenblas-dev doxygen  openjdk-8-jdk pylint libvtk6-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> pkg-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="下载源文件"><a href="#下载源文件" class="headerlink" title="下载源文件"></a>下载源文件</h2><p><a href="https://github.com/opencv/opencv">opencv</a><br><a href="https://github.com/opencv/opencv_contrib">opencv_contrib</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> opencv-x.x.x.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> opencv_contrib-x.x.x.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="将opencv-contrib移动到opencv目录下，同时在该目录下新建一个文件夹build"><a href="#将opencv-contrib移动到opencv目录下，同时在该目录下新建一个文件夹build" class="headerlink" title="将opencv_contrib移动到opencv目录下，同时在该目录下新建一个文件夹build"></a>将opencv_contrib移动到opencv目录下，同时在该目录下新建一个文件夹build</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> opencv_contrib-x.x.x opencv-x.x.x  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> opencv-x.x.x<span class="token function">mkdir</span> build                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="现在进入到opencv-x-x-x目录下，查看文件结构"><a href="#现在进入到opencv-x-x-x目录下，查看文件结构" class="headerlink" title="现在进入到opencv-x.x.x目录下，查看文件结构"></a>现在进入到opencv-x.x.x目录下，查看文件结构</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">3rdpartycmakedataLICENSEplatformsappsCMakeLists.txtdocmodulesREADME.mdbuildCONTRIBUTING.mdincludepencv_contrib-x.x.xsamples<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进入build目录，并且执行cmake生成makefile文件"><a href="#进入build目录，并且执行cmake生成makefile文件" class="headerlink" title="进入build目录，并且执行cmake生成makefile文件"></a>进入build目录，并且执行cmake生成makefile文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> build  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>Release <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local <span class="token parameter variable">-D</span> <span class="token assign-left variable">OPENCV_EXTRA_MODULES_PATH</span><span class="token operator">=</span>/home/files/opencv-x.x.x/opencv_contrib-x.x.x/modules/ <span class="token punctuation">..</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：OPENCV_EXTRA_MODULES_PATH就是你 opencv_contrib-3.3.1下面的modules目录，请按照自己的实际目录修改地址。<br>接下来就是漫长的等待了…<br>生成完毕提示：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--   Install path:                  /usr/local-- --   cvconfig.h is in:              /home/files/opencv-x.x.x/build-- ------------------------------------------------------------------- -- Configuring <span class="token keyword">done</span>-- Generating <span class="token keyword">done</span>-- Build files have been written to: /home/files/opencv-x.x.x/build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在cmake成功之后，就可以在build文件下make了"><a href="#在cmake成功之后，就可以在build文件下make了" class="headerlink" title="在cmake成功之后，就可以在build文件下make了"></a>在cmake成功之后，就可以在build文件下make了</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来就是更漫长的等待 … 具体时间因人而异</p><h2 id="链接库共享"><a href="#链接库共享" class="headerlink" title="链接库共享"></a>链接库共享</h2><p>编译安装完毕之后，为了让你的链接库被系统共享，让编译器发现，需要执行管理命令ldconfig：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig <span class="token parameter variable">-v</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="bug解决"><a href="#bug解决" class="headerlink" title="bug解决"></a>bug解决</h1><h2 id="解决编译opencv时，卡在IPPICV"><a href="#解决编译opencv时，卡在IPPICV" class="headerlink" title="解决编译opencv时，卡在IPPICV"></a>解决编译opencv时，卡在IPPICV</h2><h3 id="手动下载缺少文件"><a href="#手动下载缺少文件" class="headerlink" title="手动下载缺少文件"></a>手动下载缺少文件</h3><p><a href="https://github.com/geiyiren/MyBlog/blob/main/source/_posts/ubuntu%E5%AE%89%E8%A3%85opencv%E4%B8%8Eopencv_contrib/.cache/ippicv/7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz">ippicv_2020_lnx_intel64_20191018_general.tgz</a></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit opencv-x.x.x/3rdparty/ippicv.cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到<code>&quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/$&#123;IPPICV_COMMIT&#125;/ippicv/&quot;</code></p><p>将其改为ippicv_2020_lnx_intel64_20191018_general.tgz保存的目录。比如：<code>&quot;file:///home/downloads/&quot;</code>,格式为<code>&quot;file://路径&quot;</code><br>最后重新执行编译命令即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题"><a href="#终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题" class="headerlink" title="终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题"></a>终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题</h2><p>卡在这里的原因是因为在cmake编译的时候没有下载成功，这里使用手动下载与替换进行补救</p><h2 id="手动下载缺少文件-1"><a href="#手动下载缺少文件-1" class="headerlink" title="手动下载缺少文件"></a>手动下载缺少文件</h2><p><a href="https://pan.baidu.com/s/1OrfTdsNczKlNvJPg_gD0VA?pwd=1633">百度网盘:ubuntu安装opencv与opencv_contrib</a></p><h2 id="替换本地文件"><a href="#替换本地文件" class="headerlink" title="替换本地文件"></a>替换本地文件</h2><p>在<code>opencv源文件目录</code>下找到隐藏文件夹<code>.cache</code>，然后分别替换其中的文件。注意下载的文件中每个对应文件的开头字符串为临时校验码，需要以自己本次安装时生成的校验码为准。例如<code>7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz</code>中<code>7421de0095c7a39162ae13a6098782f9</code>为安装校验码，这个在替换文件时候需要改为本次安装自动生成的校验码。</p><h2 id="cache文件目录"><a href="#cache文件目录" class="headerlink" title=".cache文件目录"></a>.cache文件目录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.cache├── data│   └── 7505c44ca4eb54b4ab1e4777cb96ac05-face_landmark_model.dat├── ippicv│   └── 7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz└── xfeatures2d    ├── boostdesc    │   ├── 0ae0675534aa318d9668f2a179c2a052-boostdesc_lbgm.i    │   ├── 0ea90e7a8f3f7876d450e4149c97c74f-boostdesc_bgm.i    │   ├── 202e1b3e9fec871b04da31f7f016679f-boostdesc_binboost_064.i    │   ├── 232c966b13651bd0e46a1497b0852191-boostdesc_bgm_bi.i    │   ├── 324426a24fa56ad9c5b8e3e0b3e5303e-boostdesc_bgm_hd.i    │   ├── 98ea99d399965c03d555cef3ea502a0b-boostdesc_binboost_128.i    │   └── e6dcfa9f647779eb1ce446a8d759b6ea-boostdesc_binboost_256.i    └── vgg        ├── 151805e03568c9f490a5e3a872777b75-vgg_generated_120.i        ├── 7126a5d9a8884ebca5aea5d63d677225-vgg_generated_64.i        ├── 7cd47228edec52b6d82f46511af325c5-vgg_generated_80.i        └── e8d0dcd54d1bcfdc29203d011a797179-vgg_generated_48.i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_39936818/article/details/104951448">一次性解决opencv源码安装文件下载问题：ippicv_2017u3_lnx, face_landmark_model.dat, tiny-dnn</a><br><a href="https://blog.csdn.net/weixin_45846977/article/details/112396739">ubuntu安装opencv问题解决——缺少boostdesc_bgm.i文件</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 待整理opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> opencv </tag>
            
            <tag> opencv_contrib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客常用模板</title>
      <link href="/2023/01/31/xie-bo-ke-chang-yong-mo-ban/"/>
      <url>/2023/01/31/xie-bo-ke-chang-yong-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="插入思维导图"><a href="#插入思维导图" class="headerlink" title="插入思维导图"></a>插入思维导图</h1><p>基于百度脑图的开源库 kityminder 很不错，实现了markdown文档中使用思维导图的方法。使用 Hexo 的 pullquote 将思维导图的内容包裹起来，mindmap 是思维导图渲染的标志，尺寸有三种规格：mindmap-sm、mindmap-md 和 mindmap-lg。<br>思维导图的内容和层级关系通过无序列表表示，支持基本的文字和超链接。举个例子，撰写文章时在需要的位置添加如下内容:  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% pullquote mindmap mindmap-md %&#125;<span class="token list punctuation">-</span> <span class="token url">[<span class="token content">在 Hexo 中使用思维导图</span>](<span class="token url">https://hunterx.xyz/use-mindmap-in-hexo.html</span>)</span>  <span class="token list punctuation">-</span> 前言  <span class="token list punctuation">-</span> 操作指南    <span class="token list punctuation">-</span> 准备需要的文件    <span class="token list punctuation">-</span> 为主题添加 CSS/JS 文件  <span class="token list punctuation">-</span> 使用方法&#123;% endpullquote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><blockquote class="pullquote mindmap mindmap-md"><ul><li><a href="https://hunterx.xyz/use-mindmap-in-hexo.html">在 Hexo 中使用思维导图</a><ul><li>前言</li><li>操作指南<ul><li>准备需要的文件</li><li>为主题添加 CSS&#x2F;JS 文件</li></ul></li><li>使用方法</li></ul></li></ul></blockquote><h1 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://cdn.jsdelivr.net/gh/用户名/仓库名称/仓库下的图像路径)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如：</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/车辆动态辅助轨迹线生成方法8.png)  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="插入pdf"><a href="#插入pdf" class="headerlink" title="插入pdf"></a>插入pdf</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>仓库路径<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>仓库下pdf路径<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000px<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例如：</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/geiyiren/MyBlogFile1/blob/pdf/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>git%E6%95%99%E7%A8%8B.pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000px<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述方法适用用私人github仓库中的pdf文件；如果插入其他链接直达的pdf文档，可以使用：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% pdf PDF直达链接 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc申请内存访问时容易出现的访问越界问题</title>
      <link href="/2022/12/15/malloc-shen-qing-nei-cun-fang-wen-shi-rong-yi-chu-xian-de-fang-wen-yue-jie-wen-ti/"/>
      <url>/2022/12/15/malloc-shen-qing-nei-cun-fang-wen-shi-rong-yi-chu-xian-de-fang-wen-yue-jie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="malloc相关"><a href="#malloc相关" class="headerlink" title="malloc相关"></a>malloc相关</h1><h2 id="malloc申请内存访问bug"><a href="#malloc申请内存访问bug" class="headerlink" title="malloc申请内存访问bug"></a>malloc申请内存访问bug</h2><ul><li>在访问malloc申请的内存时，如果访问越界时不会提示错误，而是继续操作错误的内存块，这一类的错误较为隐秘。</li><li>例如：在构建图像变换的map映射表时，申请存放map映射关系的内存块的大小并不是输出图像对应的大小，而是输出图像大小的2倍，因此此时存储的是像素位置(x,y)的映射关系。  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//构建4路YUV鱼眼图像去畸变映射关系</span><span class="token keyword">void</span> <span class="token function">dist2undist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> point_u_tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> point_d_tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> sf <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> img_out_height <span class="token operator">=</span> <span class="token number">720</span> <span class="token operator">*</span> img_out_h_scale<span class="token punctuation">;</span>    <span class="token keyword">int</span> img_out_width <span class="token operator">=</span> <span class="token number">1280</span> <span class="token operator">*</span> img_out_w_scale<span class="token punctuation">;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"dist2undist begin !,img_out size(%d,%d)"</span><span class="token punctuation">,</span> img_out_height<span class="token punctuation">,</span> img_out_width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里就是bug所在</span>        undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>undistView_width <span class="token operator">*</span> undistView_height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"undist_map malloc failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> img_out_height<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> img_out_width<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                point_u_tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">/</span> img_out_w_scale<span class="token punctuation">;</span>                point_u_tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">/</span> img_out_h_scale<span class="token punctuation">;</span>                <span class="token function">LDC_UndistToDistExt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ldc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> point_u_tmp<span class="token punctuation">,</span> point_d_tmp<span class="token punctuation">,</span> sf<span class="token punctuation">)</span><span class="token punctuation">;</span>                undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> point_d_tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_w_scale<span class="token punctuation">;</span>                undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> point_d_tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_h_scale<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">int</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j <span class="token operator">+</span> img_out_width <span class="token operator">*</span> img_out_height<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>point_d_tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_w_scale <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>                    undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j <span class="token operator">+</span> img_out_width <span class="token operator">*</span> img_out_height<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>point_d_tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_h_scale <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">720</span> <span class="token operator">*</span> img_in_h_scale<span class="token punctuation">;</span>                    undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j <span class="token operator">+</span> img_out_width <span class="token operator">*</span> img_out_height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>point_d_tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_w_scale <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j <span class="token operator">+</span> img_out_width <span class="token operator">*</span> img_out_height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>point_d_tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_h_scale <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">720</span> <span class="token operator">*</span> img_in_h_scale<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>如果 #18 行中申请内存为:</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>undistView_width <span class="token operator">*</span> undistView_height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么，后面构建map映射关系时并不会出现越界访问提示，甚至后面如果不再申请内存块的情况下，继续越界访问undist_map中的内容也不会报错；但是，如果后面继续申请内存块来使用的时候，后续的内存块可能就会和undist_map内存冲突。  </p><hr><p><font color=Red><strong>总结</strong></font><br>使用malloc申请内存并访问时，注意访问是否越界，且访问越界不报错。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> malloc </tag>
            
            <tag> 内存访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android弹窗界面设置方法</title>
      <link href="/2022/12/14/android-dan-chuang-jie-mian-she-zhi-fang-fa/"/>
      <url>/2022/12/14/android-dan-chuang-jie-mian-she-zhi-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h1><p>点击主界面的一个按钮，然后跳转另一个设置界面，进行参数设置，包括：参数输入、开关按钮、保存、退出等功能。界面的布局采用表格布局，平均分布各个行列。示例代码如下所示。</p><h1 id="MainActivity-java示例"><a href="#MainActivity-java示例" class="headerlink" title="MainActivity.java示例"></a>MainActivity.java示例</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 主界面按钮定义</span><span class="token keyword">private</span> <span class="token class-name">ImageButton</span> mImage_set_btn<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 主界面按钮事件</span><span class="token comment">// R.id.image_set_btn为主界面按钮ID</span>mImage_set_btn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ImageButton</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>image_set_btn<span class="token punctuation">)</span><span class="token punctuation">;</span>mImage_set_btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">LayoutInflater</span> layoutInflater <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span><span class="token punctuation">)</span><span class="token function">getBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token constant">LAYOUT_INFLATER_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//R.id.avm_parm_view为跳转界面ID（android:id="@+id/avm_parm_view"）</span><span class="token class-name">View</span> popupView <span class="token operator">=</span> layoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_avm_parm<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ViewGroup</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>avm_parm_view<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PopupWindow</span><span class="token punctuation">(</span>popupView<span class="token punctuation">,</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">MATCH_PARENT</span><span class="token punctuation">,</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">MATCH_PARENT</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">setTouchable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">setOutsideTouchable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BitmapDrawable</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Bitmap</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">showAsDropDown</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//------ 获取输入控件的输入内容 ------</span><span class="token comment">//车长</span>editText_car_length <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> mPopupWindow_register<span class="token punctuation">.</span><span class="token function">getContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>EditText_car_length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//车宽</span>editText_car_width <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> mPopupWindow_register<span class="token punctuation">.</span><span class="token function">getContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>EditText_car_width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前悬</span>editText_suspension_front <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> mPopupWindow_register<span class="token punctuation">.</span><span class="token function">getContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>EditText_suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后悬</span>editText_suspension_back <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> mPopupWindow_register<span class="token punctuation">.</span><span class="token function">getContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>EditText_suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存按钮</span>delok_btn <span class="token operator">=</span> popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>avm_parameter_save<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回按钮</span>delcancel_btn <span class="token operator">=</span> popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>avm_parameter_return<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//车道线开关</span>mTrajectory_Switch<span class="token operator">=</span>popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>TrajectoryLine_Switch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BSD开关</span>mBSD_Switch<span class="token operator">=</span>popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>BSD_Switch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//亮度均衡开关</span>mBE_Switch<span class="token operator">=</span>popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>BE_Switch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取默认开关参数</span>carParameter carParm_history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">carParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>carParm_history<span class="token operator">=</span>avmSetParm<span class="token punctuation">.</span><span class="token function">readJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//------ 设置输入控件的显示历史数据 ------</span>editText_car_length<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editText_car_width<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editText_suspension_front<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editText_suspension_back<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>on_TrajectoryLine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>mTrajectory_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>mTrajectory_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>on_BSD<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>mBSD_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>mBSD_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>on_Bright<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>mBE_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>mBE_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//------ 设置保存按钮触发事件 ------</span>delok_btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> car_length <span class="token operator">=</span> editText_car_length<span class="token punctuation">.</span><span class="token function">getEditableText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> car_width <span class="token operator">=</span> editText_car_width<span class="token punctuation">.</span><span class="token function">getEditableText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> suspension_front <span class="token operator">=</span> editText_suspension_front<span class="token punctuation">.</span><span class="token function">getEditableText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> suspension_back <span class="token operator">=</span> editText_suspension_back<span class="token punctuation">.</span><span class="token function">getEditableText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>carParameter carParm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">carParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"filename_avm_set_json"</span><span class="token punctuation">,</span><span class="token string">"filename_avm_set_json"</span><span class="token operator">+</span>avmSetParm<span class="token punctuation">.</span>jsonFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>car_length<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>car_width<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>on_BSD<span class="token operator">=</span>mView<span class="token punctuation">.</span>mBSDViewID<span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>on_Bright<span class="token operator">=</span>mView<span class="token punctuation">.</span>mBrightID<span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token operator">=</span>mView<span class="token punctuation">.</span>mTrajectoryLineViewID<span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"car_length"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"car_width"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"suspension_front"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"suspension_back"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on_BSD"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_BSD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on_Bright"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_Bright<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on_TrajectoryLine"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>avmSetParm<span class="token punctuation">.</span><span class="token function">writeJson</span><span class="token punctuation">(</span>carParm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//------ 设置按钮触发事件 ------</span><span class="token comment">//车道线</span>mTrajectory_Switch<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">CompoundButton</span> buttonView<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buttonView<span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mTrajectoryLineViewID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mTrajectoryLineViewID<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mView<span class="token punctuation">.</span><span class="token function">avmTrajectoryLineView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BSD</span>mBSD_Switch<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">CompoundButton</span> buttonView<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buttonView<span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mBSDViewID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">avmStartBSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mBSDViewID<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">avmStopBSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mView<span class="token punctuation">.</span><span class="token function">avmBSDView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//亮度均衡</span>mBE_Switch<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">CompoundButton</span> buttonView<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buttonView<span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mBrightID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mBrightID<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mView<span class="token punctuation">.</span><span class="token function">avmBrightView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回</span>delcancel_btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="主界面xml文件"><a href="#主界面xml文件" class="headerlink" title="主界面xml文件"></a>主界面xml文件</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.drawerlayout.widget.DrawerLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/drawer_layout<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/layout_root<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/black<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tv_no_camera<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/no_camera_info<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFF0000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>36sp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gone<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@layout/settings_layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.drawerlayout.widget.DrawerLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SurfaceView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/surface_view<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_set_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>420dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_set<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_3d_360_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_360_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_front_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_front_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_back_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_back_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--       android:visibility="gone" /> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_left_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>240dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_left_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_right_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_right_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_narrow_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>360dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_narrow_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_3d_normal_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FrameLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跳转界面xml文件"><a href="#跳转界面xml文件" class="headerlink" title="跳转界面xml文件"></a>跳转界面xml文件</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/avm_parm_view<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>    <span class="token comment">&lt;!-- 表格1 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#2B2B2B<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>stretchColumns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1,3<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_car_width<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  车辆宽度:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/EditText_car_width<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CCCFD1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>毫米/mm<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>selectAllOnFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_suspension_front<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  车前悬挂:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/EditText_suspension_front<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CCCFD1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>毫米/mm<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>selectAllOnFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 分割线 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_car_length<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  车辆长度:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/EditText_car_length<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CCCFD1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>毫米/mm<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>selectAllOnFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_suspension_back<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  车后悬挂:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/EditText_suspension_back<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CCCFD1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>毫米/mm<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>selectAllOnFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 分割线 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_BE_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  亮度均衡:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/BE_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_BSD_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  BSD开关:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/BSD_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 分割线 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_TrajectoryLine_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  动态辅助线:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/TrajectoryLine_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/avm_parameter_save<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保存<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/avm_parameter_return<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>返回<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 安卓弹窗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI中成员变量和方法的相互访问</title>
      <link href="/2022/12/14/jni-zhong-cheng-yuan-bian-liang-he-fang-fa-de-xiang-hu-fang-wen/"/>
      <url>/2022/12/14/jni-zhong-cheng-yuan-bian-liang-he-fang-fa-de-xiang-hu-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JNI"><a href="#什么是JNI" class="headerlink" title="什么是JNI"></a>什么是JNI</h1><p>说明：JNI 是 Java Native Interface 的缩写，它提供了若干的API实现了Java和其他语言的通信（主要是C&amp;C++，但是它并不妨碍你使用其他编程语言，只要调用约定受支持就可以了）。从Java1.1开始，JNI 标准成为 java 平台的一部分，它允许 Java 代码和其他语言写的代码进行交互。总的来说，JNI 就是一个允许Java语言和其他编程语言（主要是C&#x2F;C++）通信的接口。</p><p>原因：C&#x2F;C++ 是系统级的编程语言，可以用来开发任何和系统相关的程序和类库，效率也很高。而 Java 本身编写底层的应用比较难以实现，使用 JNI 可以调用现有的本地库，极大地灵活了 Java 的开发。</p><ul><li><p>缺点：</p><ul><li><p>1、使用java与本地已编译的代码交互，通常会丧失平台可移植性。</p></li><li><p>2、程序不再是绝对安全的，本地代码的不当使用可能导致整个程序崩溃。</p></li></ul></li></ul><p>注：对于上面所说的java使用了JNI 接口会丧失平台的可移植性解释如下</p><p>JNI 提供出来一个功能接口，但是这个功能是使用本地语言进行实现的，通常是C或者C++。</p><p>以 linux 系统和 window 系统的 printf 函数为例，虽然这两个系统都提供了这个打印函数，并且名字也一样，但是在实现上可能会有各自的不同点。同时在 window 下的动态库为 dll 文件，linux 下的动态库为 so 文件。</p><p>所以我原本在 linux 下可以正常使用的一套 JNI 功能，一旦需要转移到 windows 上执行的时候就需要重新编译实现接口的动态库。虽然 java 是跨平台的，但是使用 jni 调用的本地方法却是与平台相依赖的，会在进行编译的过程中会出现这样或者那样的兼容性问题，一般不能直接拿来即用。</p><ul><li>实现JNI的基本步骤<ul><li>编写带有 native 声明的方法的java类。</li><li>使用 javah + 类名生成扩展名为.h的头文件。</li><li>使用 C&#x2F;C++ 实现本地方法。</li><li>将 C&#x2F;C++ 编写的文件生成动态链接库。</li><li>在 java 类中引用该动态链接库并完成调用。</li><li>注：可以先写 java 的调用，也可以先写 C&#x2F;C++ 的实现，只要两边约定好接口的名称，参数，返回值等信息即可。</li></ul></li></ul><h1 id="涉及数据类型对照表"><a href="#涉及数据类型对照表" class="headerlink" title="涉及数据类型对照表"></a>涉及数据类型对照表</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/JNI%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE/1.png"> </p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/JNI%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE/2.png"> </p><h1 id="java访问C-的变量"><a href="#java访问C-的变量" class="headerlink" title="java访问C++的变量"></a><code>java</code>访问<code>C++</code>的变量</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">JNIEXPORT jint JNICALL<span class="token function">Java_com_fibocom_multicamera_AvmSurfaceViewNative_nativeGetViewInfo</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>                                                                                    jclass type<span class="token punctuation">,</span>                                                                                    jint cmd<span class="token punctuation">,</span>                                                                                    jobject output<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jclass objectClass <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetObjectClass</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通过GetFieldID方法得到这个对象的dist属性</span>    jfieldID m3DBtnOn <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"m3DBtnOn"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID viewID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"viewID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID wheelViewID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"wheelViewID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID trajectoryLineViewID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"trajectoryLineViewID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID bsdViewID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"bsdViewID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID brightID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"brightID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//</span>    jfieldID dist_l <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"dist_l"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID dist_r <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"dist_r"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID upon <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"upon"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID angle <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"angle"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID viewPointX <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"viewPointX"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID viewPointY <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"viewPointY"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ParametersInit <span class="token operator">*</span>m_Instance <span class="token operator">=</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    avmmanager<span class="token double-colon punctuation">::</span>TAvmViewTag m_view_info<span class="token punctuation">;</span>    m_Instance<span class="token operator">-></span><span class="token function">getViewInfo</span><span class="token punctuation">(</span>m_view_info<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> m3DBtnOn<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>m3DBtnOn<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> viewID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>viewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> wheelViewID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>wheelViewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> trajectoryLineViewID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>trajectoryLineViewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> bsdViewID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>bsdViewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> brightID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>brightID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> dist_l<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>dist_l<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> dist_r<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>dist_r<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> upon<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>upon<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> angle<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> viewPointX<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>viewPointX<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> viewPointY<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>viewPointY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C-访问java的变量"><a href="#C-访问java的变量" class="headerlink" title="C++访问java的变量"></a><code>C++</code>访问<code>java</code>的变量</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">JNIEXPORT jint JNICALL<span class="token function">Java_com_fibocom_multicamera_AvmSurfaceViewNative_nativeBSDInfo</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>                                                                jobject obj<span class="token punctuation">,</span>                                                                 jobjectArray objectArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jint ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 获取数组的长度</span>    jsize length <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetArrayLength</span><span class="token punctuation">(</span>objectArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// XXX:数据长度永远为7，目前测试暂时支取第一个结果</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length<span class="token punctuation">)</span>        length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 获取Person类的Class对象</span>    jclass class_Rect <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"com/fibocom/aidl/Rect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>class_Rect <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====FindClass success===== \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 3. 获取Person的sayHello方法字段</span>    jmethodID getX1 <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getX1"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getX1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getX2 <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getX2"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getX2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getY1 <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getY1"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getY1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getY2 <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getY2"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getY2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getCamID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getCamID"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getCamID <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getTimestamp <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getTimestamp"</span><span class="token punctuation">,</span> <span class="token string">"()J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getTimestamp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 4. 循环调用每个方法</span>    jint aaa<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    avmmanager<span class="token double-colon punctuation">::</span>TBsdBox <span class="token operator">*</span>avm_bsd <span class="token operator">=</span> <span class="token keyword">new</span> avmmanager<span class="token double-colon punctuation">::</span>TBsdBox<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取引用类型数组的对象</span>        jobject element <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetObjectArrayElement</span><span class="token punctuation">(</span>objectArray<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断数组元素是否是Person类对象</span>        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== [%d] ===== \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// 调用Person对象的sayHello()方法</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getX1<span class="token punctuation">)</span><span class="token punctuation">;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getX2<span class="token punctuation">)</span><span class="token punctuation">;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getY1<span class="token punctuation">)</span><span class="token punctuation">;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getY2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> camID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getCamID<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"CallIntMethod %d \n"</span><span class="token punctuation">,</span> camID<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>camID<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"nativeBSDInfo cam_index %d \n"</span><span class="token punctuation">,</span> camID<span class="token punctuation">)</span><span class="token punctuation">;</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> camID<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallLongMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> length<span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== X1[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== X2[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== Y1[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== Y2[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== id[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== timestamp[%d] %ld  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== size[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">EventSystem</span><span class="token double-colon punctuation">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">SendEvent</span><span class="token punctuation">(</span><span class="token string">"avm_get_bsd_info"</span><span class="token punctuation">,</span> avm_bsd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr_event<span class="token punctuation">)</span>                                       <span class="token punctuation">&#123;</span>        Event <span class="token operator">*</span>event <span class="token operator">=</span> <span class="token punctuation">(</span>Event <span class="token operator">*</span><span class="token punctuation">)</span> ptr_event<span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span><span class="token punctuation">)</span> event<span class="token operator">-></span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> buf<span class="token punctuation">;</span>        <span class="token keyword">delete</span> event<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> jni </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json文件读写</title>
      <link href="/2022/12/14/json-wen-jian-du-xie/"/>
      <url>/2022/12/14/json-wen-jian-du-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="java读写Json文件"><a href="#java读写Json文件" class="headerlink" title="java读写Json文件"></a>java读写Json文件</h1><h2 id="json格式介绍"><a href="#json格式介绍" class="headerlink" title="json格式介绍"></a>json格式介绍</h2><p>json与xml相比, 对数据的描述性比XML较差,但是数据体积小,传递速度更快.  </p><p>json数据的书写格式是”名称:值对”,比如:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"Name"</span> <span class="token operator">:</span> <span class="token string">"John"</span>                        <span class="token comment">//name为名称,值对为"john"字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值对类型共分为:  </p><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号[]中）</li><li>对象（在花括号{}中）</li><li>null<br>当然数组也可以包含多对象:  <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"employees"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token property">"Name"</span><span class="token operator">:</span><span class="token string">"John"</span> <span class="token punctuation">,</span> <span class="token property">"Age"</span><span class="token operator">:</span><span class="token number">19</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token property">"Name"</span><span class="token operator">:</span><span class="token string">"Anna"</span> <span class="token punctuation">,</span> <span class="token property">"Age"</span><span class="token operator">:</span><span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token property">"Name"</span><span class="token operator">:</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token property">"Age"</span><span class="token operator">:</span><span class="token number">23</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>表示”employees”对象中有3个对象数组(每个对象数组表示一条员工信息),其中并列的数据都必须用逗号”,”隔开.</li></ul><h2 id="json文件读写示例"><a href="#json文件读写示例" class="headerlink" title="json文件读写示例"></a>json文件读写示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fibocom<span class="token punctuation">.</span>multicamera</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONArray</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStreamWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> carParameter  <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> on_TrajectoryLine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> on_BSD<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> on_Bright<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> scale_size<span class="token punctuation">;</span> <span class="token comment">// 缩放</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> car_length<span class="token punctuation">;</span><span class="token comment">//车辆长度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> car_width<span class="token punctuation">;</span><span class="token comment">//车辆宽度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> suspension_front<span class="token punctuation">;</span><span class="token comment">//前悬挂</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> suspension_back<span class="token punctuation">;</span><span class="token comment">//后悬挂</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AvmSetParm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> jsonFileName<span class="token punctuation">;</span>    <span class="token keyword">public</span> carParameter <span class="token function">readJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            carParameter carParm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">carParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">InputStreamReader</span> input <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>jsonFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> text <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//1.构造一个json对象</span>            <span class="token class-name">JSONObject</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span>            <span class="token comment">//获取数组</span>            <span class="token class-name">JSONArray</span> dataArr <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getJSONArray</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JSONObject</span> carParameterObj <span class="token operator">=</span>dataArr<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JSONObject</span> carParameter<span class="token operator">=</span>carParameterObj<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"carParameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>car_length<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"car_length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>car_width<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"car_width"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>suspension_front<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"suspension_front"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>suspension_back<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"suspension_back"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>scale_size<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"scale_size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>on_Bright<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"BE_Switch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>on_BSD<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"BSD_Switch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"TrajectoryLine_Switch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"car_length:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"car_width:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"suspension_front:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"suspension_back:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"scale_size:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>scale_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> carParm<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeJson</span><span class="token punctuation">(</span>carParameter carParm<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">InputStreamReader</span> input <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>jsonFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.构造一个json对象</span>        <span class="token class-name">JSONObject</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span>        <span class="token comment">//获取数组</span>        <span class="token class-name">JSONArray</span> data <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getJSONArray</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> carParameterObj <span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> carParameter<span class="token operator">=</span>carParameterObj<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"carParameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"car_length"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"car_width"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"suspension_front"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"suspension_back"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"BE_Switch"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>on_Bright<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"BSD_Switch"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>on_BSD<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"TrajectoryLine_Switch"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"car_length"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"car_width"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"suspension_front"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"suspension_back"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"BE_Switch"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_Bright<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"BSD_Switch"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_BSD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"TrajectoryLine_Switch"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameterObj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"carParameter"</span><span class="token punctuation">,</span>carParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>carParameterObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>jsonFileName<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空缓冲区，强制输出数据</span>        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭输出流</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="c-读写Json文件"><a href="#c-读写Json文件" class="headerlink" title="c++读写Json文件"></a>c++读写Json文件</h1><ul><li><p>模板函数定义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * @brief 从文本中加载json * @tparam R json类型 * @tparam T 自动推断的字符串类型 * @param config json字符串 * @return R */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">inline</span> R <span class="token function">LoadJsonFromText</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// static_assert(JsonHasParse&lt;R>::value,</span>    <span class="token comment">//               "error: the type must has static method [parse].");</span>    <span class="token comment">// nlohmann json</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token double-colon punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief 通用类型 * @tparam R * @tparam T * @tparam U * @param config * @param key * @param val * @return R */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">></span><span class="token keyword">inline</span> R <span class="token function">OptionalContain</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>config<span class="token punctuation">,</span> <span class="token keyword">const</span> U <span class="token operator">&amp;</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> R <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> JsonGenericType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> config<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">"json.hpp"</span></span><span class="token keyword">using</span> nlohmann<span class="token double-colon punctuation">::</span>json<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string config<span class="token operator">=</span> <span class="token string">"example.jsonc"</span><span class="token punctuation">;</span><span class="token keyword">auto</span> json_config <span class="token operator">=</span> <span class="token generic-function"><span class="token function">LoadJsonFromText</span><span class="token generic class-name"><span class="token operator">&lt;</span>json<span class="token operator">></span></span></span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>vs_config <span class="token operator">=</span> json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> width  <span class="token operator">=</span> vs_config<span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> height <span class="token operator">=</span> vs_config<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> width1  <span class="token operator">=</span> json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> height1 <span class="token operator">=</span> json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span>json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span><span class="token comment">// 将jsonc文件转换为string</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>json_config_str <span class="token operator">=</span> json_config<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>fake_config <span class="token operator">=</span> vs_config<span class="token punctuation">[</span><span class="token string">"fake"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> fake_enable <span class="token operator">=</span> ac<span class="token double-colon punctuation">::</span><span class="token function">OptionalContain</span><span class="token punctuation">(</span>fake_config<span class="token punctuation">,</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>json.hpp</code><br><img src="https://github.com/geiyiren/MyBlogFile1/blob/other/json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/json.hpp" alt="json.hpp"></p></li><li><p><code>example.jsonc</code></p><pre class="line-numbers language-jsonc" data-language="jsonc"><code class="language-jsonc">&#123;    &#x2F;&#x2F; 当前配置文件的版本，此版本用于兼容性处理    &quot;version&quot;: &quot;1.0.0.0&quot;,    &quot;camera_id&quot;: &quot;camera_1&quot;,    &quot;video_source&quot;: &#123;        &quot;width&quot; : 1280,                        &#x2F;&#x2F; 需要设置为平台相应的分辨率        &quot;height&quot;: 720,        &quot;format&quot;: &quot;kRGB888&quot;,                  &#x2F;&#x2F; 内部自行生成, 这里实际上无效        &quot;device&quot;: &quot;&#x2F;dev&#x2F;video0&quot;,        &quot;fps&quot;   : 20,        &quot;connect&quot;: true,                      &#x2F;&#x2F; true：把回调的图像送入算法； false：不给算法送入图像。                                              &#x2F;&#x2F; 这个选项对假视频源依然有效        &quot;fake&quot;: &#123;            &quot;enable&quot;: false,                  &#x2F;&#x2F; true表示启用假视频源            &quot;img&quot;: &quot;assets&#x2F;ssd_test_img.jpg&quot;, &#x2F;&#x2F; 使用这张图片来冒充，注意仅支持jpg格式图片，且最好是720或1080P图像            &quot;out_fmt&quot;: &quot;kYUV422SP&quot;            &#x2F;&#x2F; 假视频源的输出格式（模拟输出的视频格式）        &#125;    &#125;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>参考连接： <a href="https://cloud.tencent.com/developer/article/1556944">https://cloud.tencent.com/developer/article/1556944</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> json文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车辆动态辅助轨迹线生成方法</title>
      <link href="/2022/12/14/che-liang-dong-tai-fu-zhu-gui-ji-xian-sheng-cheng-fang-fa/"/>
      <url>/2022/12/14/che-liang-dong-tai-fu-zhu-gui-ji-xian-sheng-cheng-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="汽车动力学原理"><a href="#汽车动力学原理" class="headerlink" title="汽车动力学原理"></a>汽车动力学原理</h1><p>在研究辅助泊车时，第一要研究一下汽车在运动的时候的轨迹，要建立一个汽车在泊车时的运动学模型来作为后面研究的理论基础。车辆在泊车的过程中有一个特点即它是低速行驶的，这时<strong>车轮在滚动过程中不会发生侧方向的滑动</strong>，由于汽车在缓慢行驶的过程中不会有侧向力，这时系统的约束条件是允许车轮发生滚动和侧转，但不会有滑动的发生，由此建立了车辆的运动学模型。下面是倒车的时候汽车的运动学模型：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/Vehicle_dynamics_model.png"> </p><p>其中：(x_{f},y_{f})为汽车前轴中心点的坐标；(x_{r},y_{r})为汽车的后轴中心点的坐标；v指前轴中心点的速度；l_{m}为轴距；h_{r}为后轮距；φ为前轴中心的转向角；θ为汽车的航向角，指汽车的中心轴与参考方向上的夹角。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/1.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/2.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/3.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/4.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/5.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/6.png"> </p><p>总结：</p><ul><li>轨迹和速度没有关系</li><li>车辆的两个后轮是沿着圆在运动的</li><li><strong>汽车在低速行驶且不考虑有侧滑的情况下，汽车的车身上每一点的运动轨迹都是指向同样的一个圆心的圆，并且只和汽车的转向角有关系，和汽车的车速没有关系</strong></li></ul><h2 id="阿克曼转弯几何原理"><a href="#阿克曼转弯几何原理" class="headerlink" title="阿克曼转弯几何原理"></a>阿克曼转弯几何原理</h2><ul><li><p>示意图：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/Ackerman_turning_geometry.png"></p></li><li><p>讲解视频：<a href="https://www.youtube.com/watch?v=8AimxDPWKcM">https://www.youtube.com/watch?v=8AimxDPWKcM</a></p></li></ul><h1 id="参考专利"><a href="#参考专利" class="headerlink" title="参考专利"></a>参考专利</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/%E4%B9%98%E7%94%A8%E8%BD%A6%E5%8A%A8%E6%80%81%E5%80%92%E8%BD%A6%E8%BE%85%E5%8A%A9%E7%BA%BF%E8%AE%BE%E8%AE%A1.pdf">参考专利</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 辅助驾驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 360环视 </tag>
            
            <tag> 辅助驾驶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2022/12/12/linux-chang-yong-ming-ling/"/>
      <url>/2022/12/12/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> 位置 <span class="token parameter variable">-name</span> <span class="token string">'名称'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="aiApp执行命令"><a href="#aiApp执行命令" class="headerlink" title="aiApp执行命令"></a>aiApp执行命令</h1><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-F</span> /mnt/data/log/ylog <span class="token operator">|</span> <span class="token function">grep</span> aiApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/data/hq/bin/hqsetprop ctl.start aiApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/data/hq/bin/hqsetprop ctl.stop aiApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/data/hq/bin/hqsetprop ctl.restart aiApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查看与转换YUV图像："><a href="#查看与转换YUV图像：" class="headerlink" title="查看与转换YUV图像："></a>查看与转换YUV图像：</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffplay <span class="token parameter variable">-pixel_format</span> nv12 <span class="token parameter variable">-f</span> rawvideo <span class="token parameter variable">-video_size</span> 240x576 stitch_view.yuv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-pix_fmt</span> nv12 <span class="token parameter variable">-video_size</span> 1280x720 <span class="token parameter variable">-i</span> src_1.yuv <span class="token parameter variable">-y</span> src_1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="ubuntu终端查看历史命令"><a href="#ubuntu终端查看历史命令" class="headerlink" title="ubuntu终端查看历史命令"></a>ubuntu终端查看历史命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> some_command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查看cup限制"><a href="#查看cup限制" class="headerlink" title="查看cup限制"></a>查看cup限制</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> limit <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="1126关闭DNS验证"><a href="#1126关闭DNS验证" class="headerlink" title="1126关闭DNS验证"></a>1126关闭DNS验证</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/nsswitch.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者直接替换对应字段</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/dns/#dns/g"</span> <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> <span class="token string">"dns"</span> <span class="token parameter variable">-rl</span> /etc/nsswitch.conf<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注释 dns选项，如下所示：<blockquote><p>hosts:          files #dns<br>networks:       files #dns</p></blockquote></li></ul><h1 id="强制关闭窗口"><a href="#强制关闭窗口" class="headerlink" title="强制关闭窗口"></a>强制关闭窗口</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xkill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>然后移动鼠标点击需要关闭的窗口即可</li></ul><h1 id="修改aiapp的cpu限制"><a href="#修改aiapp的cpu限制" class="headerlink" title="修改aiapp的cpu限制"></a>修改aiapp的cpu限制</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /exapp/sh/run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改允许aiapp使用的cpu百分比 XX<blockquote><p>#……………aiApp…CPU………<br>&#x2F;data&#x2F;hq&#x2F;bin&#x2F;cpulimit -l XX -e aiApp &amp;</p></blockquote></li></ul><h1 id="本地gitlab库添加远程库信任"><a href="#本地gitlab库添加远程库信任" class="headerlink" title="本地gitlab库添加远程库信任"></a>本地gitlab库添加远程库信任</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--add</span> safe.directory /media/geiyiren/MyCode/AVM/avm_2d/master/avm_cpu_algo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="保存yuv-buf图像"><a href="#保存yuv-buf图像" class="headerlink" title="保存yuv buf图像"></a>保存yuv buf图像</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FILE <span class="token operator">*</span>fp_dump <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"bsd_1.yuv"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fp_dump <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fp_dump open fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fp_dump cam  yuv open success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>size_t bytes_write <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>p_yuv_buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> width <span class="token operator">*</span> height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp_dump<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_write <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"write raw_stream fail !!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp_dump<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="批量将jpg转换为yuv"><a href="#批量将jpg转换为yuv" class="headerlink" title="批量将jpg转换为yuv"></a>批量将jpg转换为yuv</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> $folder<span class="token variable">)</span></span><span class="token assign-left variable">yuv</span><span class="token operator">=</span><span class="token string">"yuv"</span><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$files</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;file<span class="token operator">:</span>0<span class="token operator">:</span>13&#125;</span>  <span class="token assign-left variable">file_name</span><span class="token operator">=</span><span class="token variable">$&#123;file<span class="token operator">:</span>0<span class="token operator">:</span>13&#125;</span>  <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">$file_name</span><span class="token variable">$yuv</span>  ffmpeg <span class="token parameter variable">-i</span> <span class="token variable">$file</span> <span class="token parameter variable">-s</span> <span class="token number">1280</span>*720 <span class="token parameter variable">-pix_fmt</span> nv12 <span class="token variable">$str</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="abd-常用命令"><a href="#abd-常用命令" class="headerlink" title="abd 常用命令"></a>abd 常用命令</h1><h2 id="打开调试端口"><a href="#打开调试端口" class="headerlink" title="打开调试端口"></a>打开调试端口</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb tcpip <span class="token number">5555</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb connect <span class="token number">10.10</span>.200.140<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进入远程终端"><a href="#进入远程终端" class="headerlink" title="进入远程终端"></a>进入远程终端</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb kill-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb start-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重新挂载"><a href="#重新挂载" class="headerlink" title="重新挂载"></a>重新挂载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb remount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安卓录制屏幕"><a href="#安卓录制屏幕" class="headerlink" title="安卓录制屏幕"></a>安卓录制屏幕</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell screenrecord  --time-limit <span class="token number">12</span> /sdcard/name.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="安卓设备开启USB"><a href="#安卓设备开启USB" class="headerlink" title="安卓设备开启USB"></a>安卓设备开启USB</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setprop persist.otg.mode device<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程登录后使用上述命令</li></ul><h1 id="远程为安卓设备安装软件"><a href="#远程为安卓设备安装软件" class="headerlink" title="远程为安卓设备安装软件"></a>远程为安卓设备安装软件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb <span class="token function">install</span> Launcher3.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在本地执行上述命令</li></ul><h1 id="查看当前文件下所有文件大小"><a href="#查看当前文件下所有文件大小" class="headerlink" title="查看当前文件下所有文件大小"></a>查看当前文件下所有文件大小</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#以M为单位查看当前文件下所有文件的大小，包含隐藏文件</span><span class="token function">du</span> <span class="token parameter variable">-sm</span> .<span class="token punctuation">[</span><span class="token operator">!</span>.<span class="token punctuation">]</span>* * <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-hr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="查看磁盘剩余空间"><a href="#查看磁盘剩余空间" class="headerlink" title="查看磁盘剩余空间"></a>查看磁盘剩余空间</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-hl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="github访问加速"><a href="#github访问加速" class="headerlink" title="github访问加速"></a>github访问加速</h1><h2 id="查询IP"><a href="#查询IP" class="headerlink" title="查询IP"></a>查询IP</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github.global.ssl.fastly.net 网站IP</span><span class="token function">nslookup</span> github.global.ssl.fastly.net<span class="token comment">#github.com 网站IP</span><span class="token function">nslookup</span> github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更改host文件"><a href="#更改host文件" class="headerlink" title="更改host文件"></a>更改host文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将上述查询到的IP复制到对应位置</li></ul><h2 id="更新host文件"><a href="#更新host文件" class="headerlink" title="更新host文件"></a>更新host文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /etc/init.d/network-manager restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="BSD测试程序运行命令"><a href="#BSD测试程序运行命令" class="headerlink" title="BSD测试程序运行命令"></a>BSD测试程序运行命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#801-s(rv1126)测试BSD程序运行命令</span><span class="token builtin class-name">cd</span> /exapp/app./bsd_proc_test <span class="token parameter variable">-d</span> /dev/video0 <span class="token parameter variable">-w</span> <span class="token number">1280</span> <span class="token parameter variable">-h</span> <span class="token number">720</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="鸿鹄"><a href="#鸿鹄" class="headerlink" title="鸿鹄"></a>鸿鹄</h1><h2 id="鸿鹄设备常用命令"><a href="#鸿鹄设备常用命令" class="headerlink" title="鸿鹄设备常用命令"></a>鸿鹄设备常用命令</h2><ul><li>以root身份挂载<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb root <span class="token operator">&amp;&amp;</span> adb remount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>推送apk<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /media/geiyiren/MyCode/AVM/avm_gpu_algo/branch/MultiCameraDemo/avm_gpu_algo/app/build/outputs/apk/debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">adb push MultiCameraDemo.apk &#x2F;system&#x2F;priv-app&#x2F;MultiCameraDemo&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>推送库文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /media/geiyiren/MyCode/AVM/avm_gpu_algo/branch/AVM_BSD_honghu/avm_gpu_algo/libs/arm64-v8a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb push libavmjni.so /system/priv-app/MultiCameraDemo/lib/arm64/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看log日志<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell logcat <span class="token operator">></span> log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>保存NATIVE_LOG日志(cpp端打印信息)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell logcat <span class="token parameter variable">-s</span> NATIVE_LOG <span class="token operator">></span> log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>保存程序运行严重错误日志(一般程序异常退出时打印该log)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell logcat *:F <span class="token operator">></span> log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="鸿鹄设备资源存储位置"><a href="#鸿鹄设备资源存储位置" class="headerlink" title="鸿鹄设备资源存储位置"></a>鸿鹄设备资源存储位置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">data└── gpu0------------    ├── calibrate    │   ├── **CALMAT.BIN**    │   └── **LENS.BIN**    └── shader        ├── **avm_3d_blend_lut.bin**        ├── **avm_3d_indices.bin**        ├── **avm_3d_lut.bin**        ├── car_model_line.fs        ├── car_model_line.vs        ├── car_model_test.fs        ├── car_model_test.vs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="鸿鹄Bug查询关键字"><a href="#鸿鹄Bug查询关键字" class="headerlink" title="鸿鹄Bug查询关键字"></a>鸿鹄Bug查询关键字</h2><table><thead><tr><th>关键字</th><th align="left">说明</th></tr></thead><tbody><tr><td>dlopen</td><td align="left">文件缺失标志</td></tr><tr><td>crash</td><td align="left">程序报错抛出异常标志</td></tr><tr><td>NATIVE_LOG</td><td align="left">AVM cpp端的打印</td></tr></tbody></table><h2 id="鸿鹄CPU占用与GPU占用查看"><a href="#鸿鹄CPU占用与GPU占用查看" class="headerlink" title="鸿鹄CPU占用与GPU占用查看"></a>鸿鹄CPU占用与GPU占用查看</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># adb登录后执行如下命令:</span><span class="token comment">## GPU</span><span class="token function">cat</span> /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage<span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token function">cat</span> /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage<span class="token comment">## CPU</span><span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更加详细的资源查看可参照：软件snapdragonprofiler_external_linux</p><p>Snapdragon Profiler是高通开发的用于调试分析高通Adreno GPU的一款桌面应用，支持Windows、MacOS 和 Linux 。在调试opengles应用程序上能发挥非常重要的作用。该工具能够捕捉CPU、GPU、DSP、内存、功率、网络连接和设备运行时的发热数据等，具有Realtime、Trace Capture、Snapshot Capture 三种模式。实时(Realtime)模式用于实时跟踪数据，跟踪(Trace Capture)模式用于跟踪事件和数据，默认最大值是10秒。快照(Snapshot Capture)模式用于捕获OpenGL ES应用程序的当前帧并可以进行调试，包括单步调试绘制指令，查看和编辑着色器、程序、纹理以及查看像素历史的能力。着色器代码是通过反编译得到，得到的代码跟原glsl代码基本一致，并且可以在截图后修改glsl进行调试。</p><p>作者：cain_huang<br>链接：<a href="https://www.jianshu.com/p/d8d1a231dada">https://www.jianshu.com/p/d8d1a231dada</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="ssh相关"><a href="#ssh相关" class="headerlink" title="ssh相关"></a>ssh相关</h1><h2 id="主机A免密登录主机B"><a href="#主机A免密登录主机B" class="headerlink" title="主机A免密登录主机B"></a>主机A免密登录主机B</h2><p>在主机A执行如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id 主机B的用户名@主机B的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="NEON优化相关函数"><a href="#NEON优化相关函数" class="headerlink" title="NEON优化相关函数"></a>NEON优化相关函数</h1><h2 id="internal-prefetch"><a href="#internal-prefetch" class="headerlink" title="internal::prefetch()"></a>internal::prefetch()</h2><p>作用：将数据放在缓存中</p><h2 id="vld1q"><a href="#vld1q" class="headerlink" title="vld1q()"></a>vld1q()</h2><p>作用：加载数据</p><p>例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">float32x4_t q0 <span class="token operator">=</span> <span class="token function">vld1q_f32</span><span class="token punctuation">(</span>d0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加载 d0 地址起始的 4 个 float 数据到 q0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="internal-getRowPtr"><a href="#internal-getRowPtr" class="headerlink" title="internal::getRowPtr()"></a>internal::getRowPtr()</h2><p>例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">internal<span class="token double-colon punctuation">::</span><span class="token function">getRowPtr</span><span class="token punctuation">(</span>src0Base<span class="token punctuation">,</span> src0Stride<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回src0Base+src0Stride*y的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="YUV图像转换"><a href="#YUV图像转换" class="headerlink" title="YUV图像转换"></a>YUV图像转换</h2><ul><li><p>安装ffmpeg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ffmpeg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>yuv查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffplay <span class="token parameter variable">-pixel_format</span> nv12 <span class="token parameter variable">-f</span> rawvideo <span class="token parameter variable">-video_size</span> 1920x1080 test.yuv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>jpg –&gt; yuv</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-i</span> front0.jpg <span class="token parameter variable">-s</span> <span class="token number">1280</span>*720 <span class="token parameter variable">-pix_fmt</span> nv12 front0.yuv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>yuv –&gt; jpg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-pix_fmt</span> nv12 <span class="token parameter variable">-video_size</span> 1280x800 <span class="token parameter variable">-i</span> src_1.yuv <span class="token parameter variable">-y</span> src_1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++变量命名常用缩写表</title>
      <link href="/2022/12/12/c-bian-liang-ming-ming-chang-yong-suo-xie-biao/"/>
      <url>/2022/12/12/c-bian-liang-ming-ming-chang-yong-suo-xie-biao/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">全 称</th><th align="center">缩 写</th></tr></thead><tbody><tr><td align="center">Address</td><td align="center">addr</td></tr><tr><td align="center">Administrator</td><td align="center">adm</td></tr><tr><td align="center">average</td><td align="center">avg</td></tr><tr><td align="center">Application</td><td align="center">app</td></tr><tr><td align="center">Argument</td><td align="center">arg</td></tr><tr><td align="center">Database</td><td align="center">DB</td></tr><tr><td align="center">assemble</td><td align="center">asm</td></tr><tr><td align="center">Bitmap</td><td align="center">bmp</td></tr><tr><td align="center">back</td><td align="center">bk</td></tr><tr><td align="center">asynchronization</td><td align="center">asyn</td></tr><tr><td align="center">Button</td><td align="center">btn</td></tr><tr><td align="center">Buffer</td><td align="center">buf</td></tr><tr><td align="center">Calculate</td><td align="center">calc</td></tr><tr><td align="center">Character</td><td align="center">char</td></tr><tr><td align="center">Change</td><td align="center">chg</td></tr><tr><td align="center">Click</td><td align="center">clk</td></tr><tr><td align="center">color</td><td align="center">clr</td></tr><tr><td align="center">Command</td><td align="center">cmd</td></tr><tr><td align="center">Compare</td><td align="center">cmp</td></tr><tr><td align="center">Column</td><td align="center">col</td></tr><tr><td align="center">coordinates</td><td align="center">coord</td></tr><tr><td align="center">copy</td><td align="center">cpy</td></tr><tr><td align="center">Control</td><td align="center">ctl &#x2F; ctrl</td></tr><tr><td align="center">Current</td><td align="center">cur</td></tr><tr><td align="center">Cylinder</td><td align="center">cyl</td></tr><tr><td align="center">Debug</td><td align="center">dbg</td></tr><tr><td align="center">Double</td><td align="center">dbl</td></tr><tr><td align="center">Decrease</td><td align="center">dec</td></tr><tr><td align="center">default</td><td align="center">def</td></tr><tr><td align="center">Delete</td><td align="center">del</td></tr><tr><td align="center">Destination</td><td align="center">dest &#x2F; dst</td></tr><tr><td align="center">Device</td><td align="center">dev</td></tr><tr><td align="center">dictionary</td><td align="center">dict</td></tr><tr><td align="center">different</td><td align="center">diff</td></tr><tr><td align="center">directory</td><td align="center">dir</td></tr><tr><td align="center">Display</td><td align="center">disp</td></tr><tr><td align="center">Divide</td><td align="center">div</td></tr><tr><td align="center">Dialog</td><td align="center">dlg</td></tr><tr><td align="center">Document</td><td align="center">doc</td></tr><tr><td align="center">Driver</td><td align="center">drv</td></tr><tr><td align="center">Dynamic</td><td align="center">dyna</td></tr><tr><td align="center">Environment</td><td align="center">env</td></tr><tr><td align="center">error</td><td align="center">err</td></tr><tr><td align="center">Extend</td><td align="center">ex&#x2F;ext</td></tr><tr><td align="center">execute</td><td align="center">exec</td></tr><tr><td align="center">flag</td><td align="center">flg</td></tr><tr><td align="center">Frame</td><td align="center">frm</td></tr><tr><td align="center">Function</td><td align="center">func &#x2F; fn</td></tr><tr><td align="center">group</td><td align="center">grp</td></tr><tr><td align="center">Horizontal</td><td align="center">horz</td></tr><tr><td align="center">Index</td><td align="center">idx &#x2F; ndx</td></tr><tr><td align="center">Image</td><td align="center">img</td></tr><tr><td align="center">Implement</td><td align="center">Impl</td></tr><tr><td align="center">Increase</td><td align="center">inc</td></tr><tr><td align="center">Information</td><td align="center">info</td></tr><tr><td align="center">Initial&#x2F;Initialize&#x2F;Initialization</td><td align="center">init</td></tr><tr><td align="center">Insert</td><td align="center">ins</td></tr><tr><td align="center">Instance</td><td align="center">inst</td></tr><tr><td align="center">Interrupt</td><td align="center">INT &#x2F; intr</td></tr><tr><td align="center">Length</td><td align="center">len</td></tr><tr><td align="center">Library</td><td align="center">lib</td></tr><tr><td align="center">Link</td><td align="center">lnk</td></tr><tr><td align="center">logical</td><td align="center">log</td></tr><tr><td align="center">List</td><td align="center">lst</td></tr><tr><td align="center">maximum</td><td align="center">max</td></tr><tr><td align="center">Memory</td><td align="center">mem</td></tr><tr><td align="center">Manage &#x2F; Manager</td><td align="center">mgr &#x2F; man</td></tr><tr><td align="center">middle</td><td align="center">mid</td></tr><tr><td align="center">minimum</td><td align="center">min</td></tr><tr><td align="center">Message</td><td align="center">msg</td></tr><tr><td align="center">Multiply</td><td align="center">mul</td></tr><tr><td align="center">Number</td><td align="center">num</td></tr><tr><td align="center">Object</td><td align="center">obj</td></tr><tr><td align="center">Offset</td><td align="center">ofs</td></tr><tr><td align="center">Origin &#x2F; Original</td><td align="center">org</td></tr><tr><td align="center">Parameter</td><td align="center">param</td></tr><tr><td align="center">picture</td><td align="center">pic</td></tr><tr><td align="center">package</td><td align="center">pkg</td></tr><tr><td align="center">Point</td><td align="center">pnt &#x2F; pt</td></tr><tr><td align="center">Position</td><td align="center">pos</td></tr><tr><td align="center">previous</td><td align="center">pre &#x2F; prev</td></tr><tr><td align="center">program</td><td align="center">prg</td></tr><tr><td align="center">Print</td><td align="center">prn</td></tr><tr><td align="center">Process &#x2F; Procedure</td><td align="center">proc</td></tr><tr><td align="center">Properties</td><td align="center">prop</td></tr><tr><td align="center">Password</td><td align="center">psw</td></tr><tr><td align="center">Pointer</td><td align="center">ptr</td></tr><tr><td align="center">Public</td><td align="center">pub</td></tr><tr><td align="center">rect</td><td align="center">rc</td></tr><tr><td align="center">Reference</td><td align="center">ref</td></tr><tr><td align="center">Register</td><td align="center">reg</td></tr><tr><td align="center">request</td><td align="center">req</td></tr><tr><td align="center">Resource</td><td align="center">res</td></tr><tr><td align="center">return</td><td align="center">ret</td></tr><tr><td align="center">region</td><td align="center">rgn</td></tr><tr><td align="center">screen</td><td align="center">scr</td></tr><tr><td align="center">Second</td><td align="center">sec</td></tr><tr><td align="center">Segment</td><td align="center">seg</td></tr><tr><td align="center">Select</td><td align="center">sel</td></tr><tr><td align="center">Source</td><td align="center">src</td></tr><tr><td align="center">Standard</td><td align="center">std</td></tr><tr><td align="center">Storage</td><td align="center">stg</td></tr><tr><td align="center">Stream</td><td align="center">stm</td></tr><tr><td align="center">String</td><td align="center">str</td></tr><tr><td align="center">Subtract</td><td align="center">sub</td></tr><tr><td align="center">summation</td><td align="center">sum</td></tr><tr><td align="center">Server</td><td align="center">svr</td></tr><tr><td align="center">Synchronization</td><td align="center">sync</td></tr><tr><td align="center">System</td><td align="center">sys</td></tr><tr><td align="center">Table</td><td align="center">tbl</td></tr><tr><td align="center">Temporary</td><td align="center">temp &#x2F; tmp</td></tr><tr><td align="center">translate&#x2F;transation&#x2F;transparent</td><td align="center">tran &#x2F; trans</td></tr><tr><td align="center">Test</td><td align="center">tst</td></tr><tr><td align="center">text</td><td align="center">txt</td></tr><tr><td align="center">Unknown</td><td align="center">unk</td></tr><tr><td align="center">Update</td><td align="center">upd</td></tr><tr><td align="center">Upgrade</td><td align="center">upg</td></tr><tr><td align="center">Utility</td><td align="center">util</td></tr><tr><td align="center">Variable</td><td align="center">var</td></tr><tr><td align="center">Version</td><td align="center">ver</td></tr><tr><td align="center">Vertical</td><td align="center">vert</td></tr><tr><td align="center">Virus</td><td align="center">vir</td></tr><tr><td align="center">Window</td><td align="center">wnd</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 变量命名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 16.04 LTS下安装docker并创建深度学习环境</title>
      <link href="/2022/11/23/ubuntu16-04-lts-xia-an-zhuang-docker-bing-chuang-jian-shen-du-xue-xi-huan-jing/"/>
      <url>/2022/11/23/ubuntu16-04-lts-xia-an-zhuang-docker-bing-chuang-jian-shen-du-xue-xi-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h2><p>ubuntu下安装docker的官方教程：<a href="https://docs.docker.com/engine/install/ubuntu/">点我查看</a></p><p>ubuntu下安装参考教程：<a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu">点我查看</a></p><h3 id="1-1卸载旧版本"><a href="#1-1卸载旧版本" class="headerlink" title="1.1卸载旧版本"></a>1.1卸载旧版本</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt-get remove docker docker-engine docker.io containerd runc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2使用apt安装"><a href="#1-2使用apt安装" class="headerlink" title="1.2使用apt安装"></a>1.2使用apt安装</h3><p>官网提供多种安装方式，这里使用apt安装</p><p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg \    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加docker密匙：</p><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg# 官方密匙curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们需要向 <code>sources.list</code> 中添加 Docker 软件源：</p><pre class="line-numbers language-none"><code class="language-none">echo \  &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \  $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null# 官方源echo \   &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \   $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上命令会添加稳定版本的 Docker APT 镜像源，如果需要测试版本的 Docker 请将 stable 改为 test。</p><p>安装docker:</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3配置阿里云镜像加速器"><a href="#1-3配置阿里云镜像加速器" class="headerlink" title="1.3配置阿里云镜像加速器"></a>1.3配置阿里云镜像加速器</h3><p>参考网址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">点我查看</a></p><p>需要个人注册阿里云账号并开启容器镜像服务，该服务免费。</p><p>然后查看镜像加速地址，例如我的镜像加速地址为：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：这里需要是自己的镜像加速器，否则没有权限访问。</p><p>执行如下命令配置docker：</p><pre class="line-numbers language-none"><code class="language-none"># 生成配置文件docker-machine ssh default# 设置加速器地址：# sed -i &quot;s|EXTRA_ARGS&#x3D;&#39;|EXTRA_ARGS&#x3D;&#39;--registry-mirror&#x3D;自己的镜像加速地址|g&quot; &#x2F;var&#x2F;lib&#x2F;boot2docker&#x2F;profilesed -i &quot;s|EXTRA_ARGS&#x3D;&#39;|EXTRA_ARGS&#x3D;&#39;--registry-mirror&#x3D;https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com|g&quot; &#x2F;var&#x2F;lib&#x2F;boot2docker&#x2F;profile# 退出dockerexit# 重启docker-machine restart default# 查看docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看docker信息后，可以发现 Registory mirrors 项的内容为刚刚设置的阿里云镜像地址。</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-安装-nvidia-docker"><a href="#2-安装-nvidia-docker" class="headerlink" title="2.安装 nvidia-docker"></a>2.安装 nvidia-docker</h2><p>docker 默认是不支持在容器内 GPU 加速的，NVIDIA 官方做了个工具箱来支持容器内 GPU 加速运算，这大大方便了深度学习开发者。</p><p>官方教程：<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installing-on-ubuntu-and-debian">点我查看</a></p><p>参考教程：<a href="https://blog.csdn.net/zhouchen1998/article/details/110679750">点我查看</a></p><p>依次执行如下命令即可：</p><pre class="line-numbers language-none"><code class="language-none">distribution&#x3D;$(. &#x2F;etc&#x2F;os-release;echo $ID$VERSION_ID) \   &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add - \   &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$distribution&#x2F;nvidia-docker.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.listcurl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-container-runtime&#x2F;experimental&#x2F;$distribution&#x2F;nvidia-container-runtime.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-container-runtime.listsudo apt-get updatesudo apt-get install -y nvidia-docker2sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-拉取cuda、cudnn的镜像"><a href="#3-拉取cuda、cudnn的镜像" class="headerlink" title="3.拉取cuda、cudnn的镜像"></a>3.拉取cuda、cudnn的镜像</h2><p>docker hub地址：<a href="https://hub.docker.com/r/nvidia/cuda">点我查看</a></p><p>官网给出多个版本可供拉取，这里使用cuda:10.0-cudnn7-devel-ubuntu16.04</p><pre class="line-numbers language-none"><code class="language-none">docker pull nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-新建容器"><a href="#4-新建容器" class="headerlink" title="4.新建容器"></a>4.新建容器</h2><p>容器与镜像的关系好比：镜像为C++中的类，而容器为镜像的实例话，这里基于拉去的cuda:10.0-cudnn7-devel-ubuntu16.04镜像创建一个新的容器并进入容器中：</p><pre class="line-numbers language-none"><code class="language-none">docker container run --name pytorch1.1-gpu -it --gpus all  nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：</p><ul><li>docker container run：容器启动命令，同时会新建一个容器，因此该命令是在新建容器时使用</li><li>–name ：后的参数为新建容器的名称</li><li>-it：其实是 -i -t 的缩写，该参数使得容器具备交互性并与终端进行连接，将shell切换至终端</li><li>–gpu all：表示允许容器使用宿主机的所有GPU</li><li>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：创建新的容器所基于的镜像名称</li><li>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</li></ul><p>以该命令创建并进入容器后，该容器就具有了nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04镜像的配置，相当于实现了“实例话”</p><p>退出该容器后，可以使用以下命令进行查看：</p><ul><li>查看正在运行的容器：</li></ul><pre class="line-numbers language-none"><code class="language-none">docker container ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看容器运行历史：</li></ul><pre class="line-numbers language-none"><code class="language-none">docker container ls -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以看到刚才运行的容器pytorch1.1-gpu的信息。</p><h3 id="4-1-重启容器"><a href="#4-1-重启容器" class="headerlink" title="4.1.重启容器"></a>4.1.重启容器</h3><p>docker container start + 容器名或容器ID，启动一个已经完成创建并停止运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container start pytorch1.1-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker container exec   命令用于进入正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container exec -it pytorch1.1-gpu &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2停止容器"><a href="#4-2停止容器" class="headerlink" title="4.2停止容器"></a>4.2停止容器</h3><p>docker container stop   用于停止正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container stop pytorch1.1-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3删除容器"><a href="#4-3删除容器" class="headerlink" title="4.3删除容器"></a>4.3删除容器</h3><pre class="line-numbers language-none"><code class="language-none">docker container rm  待删除的容器命令或ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：删除容器之前需要停止容器，避免报错。</p><h2 id="5-安装常用工具"><a href="#5-安装常用工具" class="headerlink" title="5.安装常用工具"></a>5.安装常用工具</h2><pre class="line-numbers language-none"><code class="language-none"># 安装gitapt-get install git -y# 安装vimapt install vim# 安装cmakeapt install cmake# 安装updatedbapt-get install mlocate# 安装wgetapt-get install wget# 安装curlapt-get install curl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-在容器中安装python"><a href="#6-在容器中安装python" class="headerlink" title="6.在容器中安装python"></a>6.在容器中安装python</h2><p>新建的容器默认没有python或pip、vim等工具，除非新建容器时将这些包一并装入，因此需要手动安装一些需要的包。新的容器中 apt-get 或 apt 命令是可以使用的：</p><p>参考网站：<a href="https://www.digitalocean.com/community/questions/unable-to-install-pyhton-3-7-version-on-ubuntu-16-04-error-couldn-t-find-any-package-by-regex-python3-7">点我查看</a></p><pre class="line-numbers language-none"><code class="language-none">#更新源apt update#安装python依赖apt install software-properties-common#添加源add-apt-repository ppa:deadsnakes&#x2F;ppa#更新源apt update#安装pythonapt install python3.7#查看python版本python --version 或 python -Vpython3 --version 或 python3 -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装完python3.7可能需要修改默认python指向才能正常使用python3.7：</p><p>参考网站：<a href="https://blog.csdn.net/qq_33188180/article/details/109723636">点我查看</a></p><p>查看默认python指向：</p><pre class="line-numbers language-none"><code class="language-none">ls -l &#x2F;usr&#x2F;bin | grep python <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除原有python软连接：</p><pre class="line-numbers language-none"><code class="language-none">rm &#x2F;usr&#x2F;bin&#x2F;python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立python到新的软链接python3.7：</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;usr&#x2F;bin&#x2F;python3.7  &#x2F;usr&#x2F;bin&#x2F;python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-在容器中安装pip"><a href="#7-在容器中安装pip" class="headerlink" title="7.在容器中安装pip"></a>7.在容器中安装pip</h2><p>这里也有个小坑！如果你写的是python3-pip 执行安装后，如果系统自带了python3.5，其实pip这时是装在了python3.5环境下了！！正确的指定方式，应该把小版本号也加上！</p><pre class="line-numbers language-none"><code class="language-none">apt-get install python3.7-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是执行上述命令可能会报错，如果报错需要安装下面的方法添加pip安装源：</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py -o get-pip.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于上面已经将python指向了python3，因此下面直接使用python安装即可，否者要使用python3安装：</p><pre class="line-numbers language-none"><code class="language-none">python get-pip.py --force-reinstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看pip位置：</p><pre class="line-numbers language-none"><code class="language-none">which pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在安装后显示安装在：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip</p><p>建立pip软链接：</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip &#x2F;usr&#x2F;bin&#x2F;pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：第一个地址  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip  为  which pip  的显示地址</p><p>查看pip版本：</p><pre class="line-numbers language-none"><code class="language-none">pip -V 或 pip --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我的显示位置为：pip 20.3.4 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages&#x2F;pip (python 3.7)</p><p>至此，python将指向python3.7，pip将指向python 3.7的pip 20.3.4，实现python和pip的版本对应，且目标容器内二者都是唯一存在，不需要再使用python3和pip3调用python3的对应版本，这样使用pip安装的包将默认存放在  &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages  中。</p><h2 id="8-安装PyTorch"><a href="#8-安装PyTorch" class="headerlink" title="8.安装PyTorch"></a>8.安装PyTorch</h2><p>最新版本安装方法：<a href="https://pytorch.org/get-started/locally/">点我查看</a></p><p>历史版本安装方法：<a href="https://pytorch.org/get-started/previous-versions/">点我查看</a></p><pre class="line-numbers language-none"><code class="language-none">pip install torch&#x3D;&#x3D;1.1.0 torchvision&#x3D;&#x3D;0.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-安装eigen3"><a href="#9-安装eigen3" class="headerlink" title="9.安装eigen3"></a>9.安装eigen3</h2><p>参考网址：<a href="https://blog.csdn.net/xiangxianghehe/article/details/81236299?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control">点我查看</a></p><h3 id="9-1安装依赖"><a href="#9-1安装依赖" class="headerlink" title="9.1安装依赖"></a>9.1安装依赖</h3><pre class="line-numbers language-none"><code class="language-none">apt-get install libopenblas-devapt-get install --no-install-recommends libboost1.58-all-devapt-get install libx11-devapt-get install libgl1-mesa-dev apt-get install libglu1-mesa-dev apt-get install freeglut3-devapt-get install doxygenwget https:&#x2F;&#x2F;nchc.dl.sourceforge.net&#x2F;project&#x2F;glew&#x2F;glew&#x2F;2.1.0&#x2F;glew-2.1.0.tgz --no-check-certificatetar -xzvf glew-2.1.0.tgzcd glew-2.1.0&#x2F;make make installldconfig -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2安装Eigen3-3-5"><a href="#9-2安装Eigen3-3-5" class="headerlink" title="9.2安装Eigen3.3.5"></a>9.2安装Eigen3.3.5</h3><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;eigenteam&#x2F;eigen-git-mirror&#x2F;archive&#x2F;3.3.5.tar.gztar -xzvf 3.3.5.tar.gz mv eigen-git-mirror-3.3.5&#x2F; eigen-3.3.5&#x2F;cd eigen-3.3.5&#x2F;mkdir buildcd buildcmake ..makemake install ldconfig -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3测试"><a href="#9-3测试" class="headerlink" title="9.3测试"></a>9.3测试</h3><p>在容器中创建测试文件夹：</p><pre class="line-numbers language-none"><code class="language-none">mkdir install_test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在宿主机上创建如下文件：</p><ul><li>CMakeLists.txt</li></ul><pre class="line-numbers language-none"><code class="language-none">cmake_minimum_required( VERSION 2.8 )project(useEigen)set( CMAKE_BUILD_TYPE &quot;Release&quot; )set( CMAKE_CXX_FLAGS &quot;-O3&quot; )set( CMAKE_CXX_FLAGS &quot;-std&#x3D;c++11&quot;)# 添加Eigen头文件include_directories( &quot;&#x2F;usr&#x2F;local&#x2F;include&#x2F;eigen3&quot; )add_executable(useEigen  main.cpp)find_package(Eigen3 REQUIRED)target_link_libraries($&#123;PROJECT_NAME&#125;  $&#123;EIGEN3_LIBS&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main.cpp</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;vector&gt;#include &lt;Eigen&#x2F;Core&gt;#include &lt;Eigen&#x2F;Dense&gt;#include &lt;Eigen&#x2F;Geometry&gt;#include &lt;Eigen&#x2F;StdVector&gt;using namespace std;int main()&#123;    &#x2F;&#x2F;1.rotation vector to  rotation matrix    Eigen::AngleAxisd rotationVector(M_PI&#x2F;4,Eigen::Vector3d(0,0,1));    Eigen::Matrix3d rotationMatrix&#x3D;Eigen::Matrix3d::Identity();    rotationMatrix&#x3D;rotationVector.toRotationMatrix();    cout&lt;&lt;&quot;rotationMatrix \n&quot;&lt;&lt;rotationMatrix&lt;&lt;endl;    &#x2F;&#x2F;2.rotation vector to quaterniond    Eigen::Quaterniond q&#x3D;Eigen::Quaterniond( rotationVector );    cout&lt;&lt;&quot;rotation quaternion \n&quot;&lt;&lt;q.coeffs()&lt;&lt;endl;    &#x2F;&#x2F;3.rotaion vector to eulerAngles    Eigen::Vector3d eulerAngle&#x3D;rotationVector.matrix().eulerAngles(0,1,2);    cout&lt;&lt;&quot;eulerAngle roll pitch yaw\n&quot;&lt;&lt;180*eulerAngle&#x2F;M_PI&lt;&lt;endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将宿主机上的两个文件拷贝至容器中的install_test里进行测试：</p><pre class="line-numbers language-none"><code class="language-none">docker cp CMakeLists.txt pytorch1.1-gpu:&#x2F;home&#x2F;eigen-3.3.5&#x2F;install_testdocker cp main.cpp  pytorch1.1-gpu:&#x2F;home&#x2F;eigen-3.3.5&#x2F;install_test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">cd install_testcmake  .make.&#x2F;useEigen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若显示结果如下，则说明测试成功。</p><pre class="line-numbers language-none"><code class="language-none">rotationMatrix  0.707107 -0.707107         0 0.707107  0.707107         0        0         0         1rotation quaternion        0       00.382683 0.92388eulerAngle roll pitch yaw-0 045<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-安装tensorflow"><a href="#10-安装tensorflow" class="headerlink" title="10.安装tensorflow"></a>10.安装tensorflow</h2><ul><li>tensorflow与cuda的版本对应关系</li></ul><p><img src="https://i.loli.net/2021/05/21/PEoKmlhbcXisCWt.png"></p><p>安装命令：</p><pre class="line-numbers language-none"><code class="language-none">pip install tensorflow-gpu&#x3D;&#x3D;2.0 -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple --trusted-host pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> docker </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16-04-LTS：anaconda3安装</title>
      <link href="/2022/11/23/ubuntu16-04-lts-anaconda3-an-zhuang/"/>
      <url>/2022/11/23/ubuntu16-04-lts-anaconda3-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载清华源镜像文件"><a href="#1-下载清华源镜像文件" class="headerlink" title="1. 下载清华源镜像文件"></a>1. 下载清华源镜像文件</h1><p>网址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><p>版本：建议安装Anaconda3-5.2.0-Linux-x86_64.sh</p><h1 id="2-进入下载目录执行以下命令进行安装"><a href="#2-进入下载目录执行以下命令进行安装" class="headerlink" title="2. 进入下载目录执行以下命令进行安装"></a>2. 进入下载目录执行以下命令进行安装</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bash Anaconda3<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>Linux<span class="token operator">-</span>x86_64<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/05/16/9curYTMUWmveogb.png"></p><ul><li>一路按回车至底部，出现提示：是否接受安装协议时：回复yes:</li></ul><p><img src="https://i.loli.net/2021/05/16/JU2iRojd3vH4fsY.png"></p><ul><li>默认的路径为&#x2F;home&#x2F;username&#x2F;anaconda3，默认的话直接按ENTER即可，等待安装过程完成即可。</li></ul><p><img src="https://i.loli.net/2021/05/16/iVDa14zUNREPYKs.png"></p><ul><li>询问是否将Anaconda3加入到环境变量中，选：yes</li></ul><p><img src="https://i.loli.net/2021/05/16/DBj5P8VMTzgYu2s.png"></p><ul><li>默认的话直接按ENTER即可，等待安装过程完成即可。</li></ul><h1 id="3-检查是否安装成功"><a href="#3-检查是否安装成功" class="headerlink" title="3.检查是否安装成功"></a>3.检查是否安装成功</h1><p>  使用以下命令可以查看已经存在的conda虚拟环境</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">conda env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  使用以下命令可以查看conda的路径是否添加成功</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">sudo gedit <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  使其立即生效，在终端执行：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">source <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <strong>4.进入任意一个创建的虚拟环境里面检查python</strong></p><p>  在虚拟环境中输入以下命令：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  会出现类似以下含有anaconda的字样：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Python <span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">5</span> <span class="token operator">|</span>Anaconda<span class="token punctuation">,</span> Inc<span class="token punctuation">.</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> Apr <span class="token number">29</span> <span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">56</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">7.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">]</span> on linuxType <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token operator">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  如果没有出现以下字样，说明系统的python版本需要指定，使用以下命令：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">sudo gedit <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  在bashrc中添加一行：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">alias python<span class="token operator">=</span>python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  (注意这里的python3是和安装的anaconda3对应的默认pyrhon对应的，可以在conda虚拟环境中的base环境中查看对应的python版本)</p><p>  然后激活bashrc</p>  <pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  这样就可以使用conda创建的虚拟环境对应的python。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16-04手动安装英伟达显卡驱动</title>
      <link href="/2022/11/23/ubuntu16-04-shou-dong-an-zhuang-ying-wei-da-xian-qia-qu-dong/"/>
      <url>/2022/11/23/ubuntu16-04-shou-dong-an-zhuang-ying-wei-da-xian-qia-qu-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-屏蔽开源驱动"><a href="#1-屏蔽开源驱动" class="headerlink" title="1.屏蔽开源驱动"></a>1.屏蔽开源驱动</h2><p>屏蔽开源驱动nouveau安装过程会询问是否屏蔽，手动屏蔽也有多种操作方式，可以使用如下方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit /etc/modprobe.d/blacklist.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后添加内容到最底段，要回车另起一行。添加的内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blacklist nouveau options nouveau <span class="token assign-left variable">modeset</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存再终端更新内核命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-initramfs <span class="token parameter variable">-u</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会出现如下警告，忽略即可：</p><img src="https://i.loli.net/2021/06/22/lkPBpOvA3MIsfXq.png" style="zoom:50%;" /><h2 id="2-下载驱动"><a href="#2-下载驱动" class="headerlink" title="2.下载驱动"></a>2.下载驱动</h2><p>然后，重启电脑。下载NVIDIA的驱动形如：NVIDIA-Linux-x86_64-384.run 下载网址为：<a href="https://www.geforce.cn/drivers%E3%80%82">https://www.geforce.cn/drivers。</a></p><p>在win10下的设备管理器中可以查看显卡的型号。型号为：NVIDIA GeForce GTX 1050 Ti电脑类型为：笔记本</p><p>所以手动搜索驱动程序时，应该这样选择：</p><p><img src="https://i.loli.net/2021/06/22/S69TiRpgEc3ydPk.png"></p><p>选择第一个驱动版本一般可以安装成功的，但不同电脑可能结果不同，安装失败的话还需要更换版本尝试安装。</p><p>下好的”.run”文件放在home ，目录下，最好将文件名称该为简单点的。</p><h2 id="3-进入root的命令行模型"><a href="#3-进入root的命令行模型" class="headerlink" title="3.进入root的命令行模型"></a>3.进入root的命令行模型</h2><p>安装驱动重启电脑，进入ubuntu高级模式，然后选择下图中的 root 选项：</p><img src="https://i.loli.net/2021/06/22/rnKMFl81T4giEUf.png" style="zoom:50%;" /><p>然后按”回车”：</p><img src="https://i.loli.net/2021/06/22/I1ZeWDCaTcEx5X2.png" style="zoom:50%;" /><h2 id="4-安装驱动"><a href="#4-安装驱动" class="headerlink" title="4.安装驱动"></a>4.安装驱动</h2><p>然后，按”回车”，进入系统目录。安装驱动程序，执行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭当前图形环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> lightdm stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为之前的后缀为”.run”的驱动文件放在home目录下，所以， 到驱动所在文件夹后 执行如下命令修改权限并运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> a+x NVIDIA-Linux-x86_64-xxx.run <span class="token function">sudo</span> <span class="token function">sh</span> NVIDIA-Linux-x86_64-xxx.run -no-opengl-files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后剩余步骤均为默认即可，直接回车执行下一步。</p><ul><li>提示”dkms”安装时，需要安装。</li><li>会提示有”32”字样，选择”OK”继续即可。</li></ul><p>最后重新启动图形环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> lightdm start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-查看是否安装成功"><a href="#5-查看是否安装成功" class="headerlink" title="5.查看是否安装成功"></a>5.查看是否安装成功</h2><p>检查安装是否成功并重启电脑，正常进入系统。</p><p>如果出现循环输入登录密码但是无法登录成功的情况，则为驱动版本和自己的电脑不匹配，需要下载其他显卡驱动版本尝试。</p><p>进一步检查，打开终端输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现如下所示信息，即为安装成功:</p><img src="https://i.loli.net/2021/06/22/gZB9FKjSl2T8wGV.png" style="zoom:50%;" /><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 显卡驱动安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10与ubuntu16-04-LTS双系统安装教程</title>
      <link href="/2022/11/23/win10-yu-ubuntu16-04-lts-shuang-xi-tong-an-zhuang-jiao-cheng/"/>
      <url>/2022/11/23/win10-yu-ubuntu16-04-lts-shuang-xi-tong-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建空闲分区"><a href="#1-创建空闲分区" class="headerlink" title="1.创建空闲分区"></a>1.创建空闲分区</h2><p>在win系统下，在”此电脑”→右键”管理“→“磁盘管理”→右键一个不用的磁盘并”格式化“→”删除卷“，分出一个状态为“未分配”的磁盘用于安装ubuntu16.04 LTS</p><h2 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2.开始安装"></a>2.开始安装</h2><p>插入具有ubuntu16.04 LTS系统的U盘开始安装系统</p><ul><li>选择系统语言，可以是中文或英文。如需要安装tensflow的话建议安装英文版本</li><li>选择安装类型为其它选项</li></ul><img src="https://i.loli.net/2021/06/22/9FEvKkQmATYq7Ip.jpg" style="zoom: 67%;" /><h2 id="3-双击空闲盘进行分区"><a href="#3-双击空闲盘进行分区" class="headerlink" title="3.双击空闲盘进行分区"></a>3.双击空闲盘进行分区</h2><h3 id="3-1-boot分区"><a href="#3-1-boot分区" class="headerlink" title="3.1   &#x2F;boot分区"></a>3.1   &#x2F;boot分区</h3><p>&#x2F;boot：这个就是实现你双系统的原因了，这个就是用于启动 ubuntu 的目录，里面会有系统的引导，这个文件其实只有几十兆，但是我们建议将其划分为 200M 文件格式为 ext4，这个分区必不可少，否则后果你懂得！</p><h3 id="3-2-swap分区"><a href="#3-2-swap分区" class="headerlink" title="3.2   swap分区"></a>3.2   swap分区</h3><p>swap:这个是 Linux 也就是 ubuntu 的交换区目录，这个一般的大小为内存的 2 倍左右， 主要是用来在电脑内存不足的情况下，系统会调用这片区域，来运行程序，我们可以将其分为 4G， 这个把ext4换成交换空间，英文swap</p><h3 id="3-3-分区"><a href="#3-3-分区" class="headerlink" title="3.3    &#x2F;分区"></a>3.3    &#x2F;分区</h3><p>&#x2F;:这是 linux 也就是 ubuntu 的根目录就一个反斜杠表示，相当于windows的C盘， 我们将其分为 10G，文件格式为 ext4，条件允许可以大一点，可以20G，毕竟ubuntu装软件默认是装在这里的，大一点可能会省去后面隐藏的麻烦。</p><h3 id="3-4-home分区"><a href="#3-4-home分区" class="headerlink" title="3.4   &#x2F;home分区"></a>3.4   &#x2F;home分区</h3><p>&#x2F;home:这是 ubuntu 的“其他盘”， 这个也可以说是我们的个人目录，相当于windows的其他盘，所以为了让我们自己的目录大一点，剩下的全分给它，文件格式为 ext4</p><img src="https://i.loli.net/2021/06/22/IZixlEy6FC8vRKn.png" style="zoom: 67%;" /><p>以上两步新建分区后的类似效果：</p><img src="https://i.loli.net/2021/06/22/KxGUtJWhYPMRS3p.png" style="zoom:67%;" /><h2 id="4-选择安装启动引导的设备"><a href="#4-选择安装启动引导的设备" class="headerlink" title="4.选择安装启动引导的设备"></a>4.选择安装启动引导的设备</h2><p>安装启动引导的设备：windows boot manager</p><img src="https://i.loli.net/2021/06/22/v2JbClS7IwjU46a.png" style="zoom:50%;" /><h2 id="5-自动安装"><a href="#5-自动安装" class="headerlink" title="5.自动安装"></a>5.自动安装</h2><img src="https://i.loli.net/2021/06/22/oMECN25eyXsIAKS.jpg" style="zoom: 50%;" /><img src="https://i.loli.net/2021/06/22/T7CP1BcVWb9wxIR.jpg" style="zoom:50%;" /><p>安装完成后可能显示画面模糊，这是因为没有安装显卡驱动，可以按照教程”Ubuntu16.04手动安装英伟达显卡驱动”安装即可</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手眼标定-Ros-Kinetic-Realsense-D435-AUBOi5-Ubuntu-16-04</title>
      <link href="/2022/11/23/shou-yan-biao-ding-ros-kinetic-realsense-d435-auboi5-ubuntu-16-04/"/>
      <url>/2022/11/23/shou-yan-biao-ding-ros-kinetic-realsense-d435-auboi5-ubuntu-16-04/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装AUBOi5的Moveit功能包"><a href="#1-安装AUBOi5的Moveit功能包" class="headerlink" title="1.安装AUBOi5的Moveit功能包"></a>1.安装AUBOi5的Moveit功能包</h2><h3 id="1-1环境配置"><a href="#1-1环境配置" class="headerlink" title="1.1环境配置"></a>1.1环境配置</h3><p>下载Move-it package</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载moveit_visual_tools</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit-visual-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载industrial_core package</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-industrial-core<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2建立ROS工作空间"><a href="#1-2建立ROS工作空间" class="headerlink" title="1.2建立ROS工作空间"></a>1.2建立ROS工作空间</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /opt/ros/kinetic/setup.bash<span class="token comment"># catkin_ws为工作空间名称</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/catkin_ws/src<span class="token builtin class-name">cd</span> ~/catkin_ws/catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-在-catkin-ws-src-目录中下载Moveit功能包，并编译"><a href="#1-2-在-catkin-ws-src-目录中下载Moveit功能包，并编译" class="headerlink" title="1.2 在  ~&#x2F;catkin_ws&#x2F;src  目录中下载Moveit功能包，并编译"></a>1.2 在  ~&#x2F;catkin_ws&#x2F;src  目录中下载Moveit功能包，并编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone https://github.com/lg609/aubo_robot.git<span class="token builtin class-name">cd</span> ~/catkin_ws/catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释：如果提示下列错误，则说明在安装Ros的时候没有安装Ros-moveit功能包：</p><p><img src="https://i.loli.net/2021/05/28/jShBMoz9apcKVXE.png"></p><p>解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：参考网址：<a href="https://github.com/tahsinkose/hector-moveit/issues/4">点我查看</a></p><h2 id="2-安装Realsense-D435相机驱动与功能包"><a href="#2-安装Realsense-D435相机驱动与功能包" class="headerlink" title="2.安装Realsense D435相机驱动与功能包"></a>2.安装Realsense D435相机驱动与功能包</h2><h3 id="2-1驱动安装"><a href="#2-1驱动安装" class="headerlink" title="2.1驱动安装"></a>2.1驱动安装</h3><p>官方安装教程：<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">点我查看</a></p><p>参考教程：<a href="https://zhuanlan.zhihu.com/p/93127918">点我查看</a></p><p>注册公匙：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE <span class="token operator">||</span> <span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加服务器至存储列表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb https://librealsense.intel.com/Debian/apt-repo xenial main"</span> <span class="token parameter variable">-u</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装所需库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dkms<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装功能包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dbg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动连接界面，进行测试，若可以看到相机图像则证明驱动安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">realsense-viewer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2功能包安装"><a href="#2-2功能包安装" class="headerlink" title="2.2功能包安装"></a>2.2功能包安装</h3><p>创建工作空间：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/catkin_ws/src <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ~/catkin_ws/src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载源码，并检查依赖:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token number">2.2</span>.7 https://github.com/IntelRealSense/realsense-ros.git <span class="token builtin class-name">cd</span> realsense-ros/realsense2_camera <span class="token function">git</span> checkout <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> tag <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-V</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-P</span> <span class="token string">"^\d+\.\d+\.\d+"</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-1</span><span class="token variable">`</span></span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-ddynamic-reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_wscatkin_make <span class="token parameter variable">-DCATKIN_ENABLE_TESTING</span><span class="token operator">=</span>False <span class="token parameter variable">-DCMAKE_BUILD_TYPE</span><span class="token operator">=</span>Release catkin_make <span class="token function">install</span> <span class="token builtin class-name">echo</span> <span class="token string">"source ~/catkin_ws/devel/setup.bash"</span> <span class="token operator">>></span> ~/.bashrc <span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，启动相机节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch realsense2_camera rs_camera.launch<span class="token comment"># 查看发布的话题</span>rostopic list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-安装ros-kinetic-visp依赖包"><a href="#3-安装ros-kinetic-visp依赖包" class="headerlink" title="3.安装ros-kinetic-visp依赖包"></a>3.安装ros-kinetic-visp依赖包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-visp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-安装aruco-ros二维码检测功能包"><a href="#4-安装aruco-ros二维码检测功能包" class="headerlink" title="4.安装aruco_ros二维码检测功能包"></a>4.安装aruco_ros二维码检测功能包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone <span class="token parameter variable">-b</span> kinetic-devel https://github.com/pal-robotics/aruco_ros.git<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-安装visp-hand2eye-calibration"><a href="#5-安装visp-hand2eye-calibration" class="headerlink" title="5.安装visp_hand2eye_calibration"></a>5.安装visp_hand2eye_calibration</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone <span class="token parameter variable">-b</span> kinetic-devel https://github.com/lagadic/vision_visp.git<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make <span class="token parameter variable">--pkg</span> visp_hand2eye_calibration<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-安装easy-handeye手眼标定功能包"><a href="#6-安装easy-handeye手眼标定功能包" class="headerlink" title="6.安装easy_handeye手眼标定功能包"></a>6.安装easy_handeye手眼标定功能包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone https://github.com/IFL-CAMP/easy_handeye<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-标定方法"><a href="#7-标定方法" class="headerlink" title="7.标定方法"></a>7.标定方法</h2><h3 id="7-1眼在手上-eye-in-hand标定方法"><a href="#7-1眼在手上-eye-in-hand标定方法" class="headerlink" title="7.1眼在手上 eye-in-hand标定方法"></a>7.1眼在手上 eye-in-hand标定方法</h3><h4 id="7-1-1修改launch文件"><a href="#7-1-1修改launch文件" class="headerlink" title="7.1.1修改launch文件"></a>7.1.1修改launch文件</h4><p>标定过程需启动 ur5 机械臂的相关节点，realsense 节点，aruco 节点，easy_handeye 节点，可以写一个 launch 文件同时启动上述节点，也可以分别启动。easy_handeye 包中给出了用一个 launch 文件实现的示例，在如下的目录中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch/ur5_kinect_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以在此基础上进行修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 launch 文件拷贝到 easy_handeye 功能包的 launch 目录中，顺便改个名字</span><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch<span class="token function">cp</span> ur5_kinect_calibration.launch ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_in_hand_calibration.launchgedit  ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_in_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改 launch 文件如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aubo_i5_kinect_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 169.254.3.20为AUBOi5机械臂的IP地址,根据实际情况修改 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_ip<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The IP address of the UR5 robot<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>169.254.3.20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_size<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Size of the ArUco marker used, in meters<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_id<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The ID of the ArUco marker used<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 1. start the Realsense435 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find realsense2_camera)/launch/rs_camera.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 2. start ArUco --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aruco_tracker<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aruco_ros<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>single<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera_info<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/color/camera_info<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/image<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/color/image_raw<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_is_rectified<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_size<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg marker_size)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_id<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg marker_id)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reference_frame<span class="token punctuation">"</span></span>    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_frame<span class="token punctuation">"</span></span>       <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_frame<span class="token punctuation">"</span></span>       <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_marker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 3. start the robot --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find aubo_i5_moveit_config)/launch/moveit_planning_execution.launch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 4. start easy_handeye --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find easy_handeye)/launch/calibrate.launch<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- true：相机安装在机械臂末端 false: 相机安装在机械臂外--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- tracking_base_frame 为相机坐标系 camera_color_frame --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_marker_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_marker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- robot_base_frame 为机器人基座坐标系 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- robot_effector_frame 为工具坐标系，即：与相机相连的关节名称 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrist3_Link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>freehand_robot_movement<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_velocity_scaling<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_acceleration_scaling<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>move_group<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manipulator_i5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2启动-launch-文件，开始标定"><a href="#7-1-2启动-launch-文件，开始标定" class="headerlink" title="7.1.2启动 launch 文件，开始标定"></a>7.1.2启动 launch 文件，开始标定</h4><p>启动 launch 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch easy_handeye eye_to_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功运行后，会同时打开三个界面：</p><img src="https://i.loli.net/2021/05/28/4Xmzb3hFrnd5R7c.jpg" alt="界面1" style="zoom:50%;" /><img src="https://i.loli.net/2021/05/28/Av7F6K9Gu8pfZs3.jpg"  alt="界面2" style="zoom: 67%;" /><p><img src="https://i.loli.net/2021/05/28/2ydewHu76InBqfs.jpg" alt="界面3"></p><p>在界面 2 中，点击菜单栏(菜单栏在屏幕左上角)的 Plugins -&gt; Visulization -&gt; Image View，选择 &#x2F;aruco_tracker&#x2F;result 话题，界面会如下所示：</p><img src="https://i.loli.net/2021/05/28/YTKPw46HouZGpk9.jpg" style="zoom: 50%;" /><h4 id="7-1-3标定步骤"><a href="#7-1-3标定步骤" class="headerlink" title="7.1.3标定步骤"></a>7.1.3标定步骤</h4><ol><li>手动调节机械臂，使 aruco 二维码移动至相机视野中心处附近，作为 home config。在界面 3 中，点击 check starting pose，若检查成功，界面会出现： 0&#x2F;17，ready to start</li><li>界面 3 中依次点击 Next Pose，Plan，Execute，机械臂会移动至新的位置，若二维码在相机视野范围内，且能检测成功，则进行下一步</li><li>界面 2 中点击 Take Sample，若 Samples 对话框中出现有效信息，说明第一个点标定成功</li><li>重复执行步骤 2 和步骤 3，直至 17 个点全部标定完毕</li><li>界面 2 中点击 Compute，则 Result 对话框中会出现结果</li><li>界面 2 中 Save，会将结果保存为一个 YAML 文件，路径为 <code>~/.ros/easy_handeye</code></li></ol><p><img src="https://i.loli.net/2021/05/28/gV9AWphbyU5mFlP.jpg"></p><h3 id="7-2眼在手外-eye-to-hand标定方法"><a href="#7-2眼在手外-eye-to-hand标定方法" class="headerlink" title="7.2眼在手外 eye-to-hand标定方法"></a>7.2眼在手外 eye-to-hand标定方法</h3><p>方法与“眼在手上”基本相同，需要修改一下 launch 文件，注意两个 launch 文件不要重名。</p><p>唯一修改的地方是 easy_handeye 功能包 calibrate.launch 文件中 “eye_on_hand” 参数改成 true，如下所示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 launch 文件拷贝到 easy_handeye 功能包的 launch 目录中，顺便改个名字</span><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch<span class="token function">cp</span> ur5_kinect_calibration.launch ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_to_hand_calibration.launchgedit  ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_to_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-将标定结果发送至TF树"><a href="#8-将标定结果发送至TF树" class="headerlink" title="8.将标定结果发送至TF树"></a>8.将标定结果发送至TF树</h2><p>easy_handeye 功能包提供了 publish.launch 文件，可以将标定好的 TF 发布出去</p><h3 id="8-1眼在手上eye-in-hand"><a href="#8-1眼在手上eye-in-hand" class="headerlink" title="8.1眼在手上eye-in-hand"></a>8.1眼在手上eye-in-hand</h3><p>修改publish.launch 文件,要修改 “namespace_prefix” 参数，与眼在手上标定 launch 文件中的 “namespace_prefix” 一致，这样才能找到标定好的 YAML 文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye-on-hand instead of eye-on-base<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ur5_realsense_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_hand<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_base<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--it is possible to override the link names saved in the yaml file in case of name clashes, for example--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--publish hand-eye calibration--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_effector_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg tracking_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg inverse)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(anon handeye_publisher)<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>easy_handeye<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish.py<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2眼在手外-eye-to-hand"><a href="#8-2眼在手外-eye-to-hand" class="headerlink" title="8.2眼在手外 eye-to-hand"></a>8.2眼在手外 eye-to-hand</h3><p>修改 “namespace_prefix” 外（同上），还要将 “eye_on_hand” 参数设为false</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye-on-hand instead of eye-on-base<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ur5_realsense_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_hand<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_base<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--it is possible to override the link names saved in the yaml file in case of name clashes, for example--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--publish hand-eye calibration--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_effector_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg tracking_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg inverse)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(anon handeye_publisher)<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>easy_handeye<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish.py<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9.测试"></a>9.测试</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启 publish.luanch 文件，以眼在手上为例</span>roslaunch easy_handeye publish.launch<span class="token comment"># 查看 TF（改成自己的工具坐标系与相机坐标系）</span>rosrun tf tf_echo /tool0_controller /camera_color_frame<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/05/28/BgCzvN85MxAsUJV.jpg"></p><p>注意：这里四元数的顺序是 [qx, qy, qz, qw]</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 机器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手眼标定 </tag>
            
            <tag> AUBOi5 </tag>
            
            <tag> Realsense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm使用ssh连接服务器中的docker容器</title>
      <link href="/2022/11/23/pycharm-shi-yong-ssh-lian-jie-fu-wu-qi-zhong-de-docker-rong-qi/"/>
      <url>/2022/11/23/pycharm-shi-yong-ssh-lian-jie-fu-wu-qi-zhong-de-docker-rong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-拉取cuda、cudnn的docker镜像"><a href="#1-拉取cuda、cudnn的docker镜像" class="headerlink" title="1.拉取cuda、cudnn的docker镜像"></a>1.拉取cuda、cudnn的docker镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-新建并启动交互式容器"><a href="#2-新建并启动交互式容器" class="headerlink" title="2.新建并启动交互式容器"></a>2.新建并启动交互式容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> tensorflow1.2.1-gpu <span class="token parameter variable">-v</span> /home/docker_share/:/home/ <span class="token parameter variable">-p</span> <span class="token number">2201</span>:22 <span class="token parameter variable">--gpus</span> all nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：</p><p>–name ：设置新容器的名称为tensorflow1.2.1-gpu</p><p>-v ：设置文件映射，将宿主机的文件&#x2F;home&#x2F;docker_share&#x2F;映射到该容器的&#x2F;home&#x2F;目录下</p><p>-p ：设置容器的端口与宿主机的端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></p><p>–gpus all 许容器使用所有GPU</p><p>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：容器的依赖镜像</p><p>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</p><p>注释：</p><p>为了构建有序且规范的端口映射关系，这里设置一个默认规则用于设置容器的端口与宿主机的端口映射：主机端口固定，容器端口以主机端口为起始位依次排开</p><pre class="line-numbers language-none"><code class="language-none">容器端口主机端口220122220222<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-进入容器后修改容器的root密码"><a href="#3-进入容器后修改容器的root密码" class="headerlink" title="3.进入容器后修改容器的root密码"></a>3.进入容器后修改容器的root密码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置用户名为root,密码为passwd(将其该为自己想要的密码)</span><span class="token builtin class-name">echo</span> <span class="token string">'root:passwd'</span> <span class="token operator">|</span> chpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-安装openssh-server并启动"><a href="#4-安装openssh-server并启动" class="headerlink" title="4.安装openssh-server并启动"></a>4.安装openssh-server并启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新源</span><span class="token function">apt-get</span> update<span class="token comment">#或</span><span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token comment"># 安装openssh-server</span><span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span class="token comment"># 启动之前需手动创建/var/run/sshd，不然启动sshd的时候会报错</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/run/sshd<span class="token comment"># sshd以守护进程运行</span>/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span class="token comment"># 安装netstat，查看sshd是否监听22端口</span><span class="token function">apt-get</span> <span class="token function">install</span> net-tools<span class="token function">netstat</span> <span class="token parameter variable">-apn</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span class="token comment"># 显示如下</span><span class="token comment"># root@a78aa2e72670:/# netstat -apn | grep ssh</span><span class="token comment"># tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1266/sshd</span><span class="token comment"># tcp6       0      0 :::22                   :::*                    LISTEN      1266/sshd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-ssh登录设置"><a href="#5-ssh登录设置" class="headerlink" title="5.ssh登录设置"></a>5.ssh登录设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成ssh key</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token comment"># 然后提示的设置用默认设置，一直回车即可</span><span class="token comment"># 修改sshd-config允许root登陆</span><span class="token function">vim</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查下面的命令是否被注释，会后面的参数是否为yes，若没有该命令需要在文件尾部新增该命令以允许root用户使用ssh登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PermitRootLogin <span class="token function">yes</span> <span class="token comment"># 约在28行：将PermitRootLogin prohibit-password改为PermitRootLogin yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改完sshd-config之后需要重启sshd服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找到sshd的进程pid</span><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span class="token comment"># 杀掉sshd的进程pid</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> sshd的进程pid号<span class="token comment"># 重启</span>/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span class="token comment"># 再次查看</span><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a78aa2e72670:/<span class="token comment"># ps -aux | grep ssh</span>root      <span class="token number">1266</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5468</span> pts/0    S    01:14   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root      <span class="token number">1301</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">932</span> pts/0    S+   01:18   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span>root@a78aa2e72670:/<span class="token comment"># kill -9 1266</span>root@a78aa2e72670:/<span class="token comment"># /usr/sbin/sshd -D &amp;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">1302</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   Killed                  /usr/sbin/sshd <span class="token parameter variable">-D</span>root@a78aa2e72670:/<span class="token comment"># ps -aux | grep ssh</span>root      <span class="token number">1302</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5756</span> pts/0    S    01:19   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root      <span class="token number">1304</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">944</span> pts/0    S+   01:19   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-退出容器，但不要停止容器，并进行连接测试"><a href="#6-退出容器，但不要停止容器，并进行连接测试" class="headerlink" title="6.退出容器，但不要停止容器，并进行连接测试"></a>6.退出容器，但不要停止容器，并进行连接测试</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在主机登录，需要输入的root密码为前面设置的root密码</span><span class="token function">ssh</span> root@localhost <span class="token parameter variable">-p</span> <span class="token number">8080</span> <span class="token comment"># 8080为刚开始创建容器时候设置的主机端口映射，与容器的22端口形成映射</span><span class="token comment"># 在其他机器上可以使用以下命令登陆，假设宿主机ip为10.12.11.xx</span><span class="token function">ssh</span> root@10.12.11.xx <span class="token parameter variable">-p</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果提示：ssh_exchange_identification: read: Connection reset by peer</p><p>则：可能是容器的 sshd服务未开启，再次进入容器重启sshd服务即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@dc627a3adc4d:/<span class="token comment"># ps -aux | grep ssh</span>root        <span class="token number">32</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">932</span> pts/1    S+   03:43   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span>root@dc627a3adc4d:/<span class="token comment"># /usr/sbin/sshd -D &amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">33</span>root@dc627a3adc4d:/<span class="token comment"># ps -aux | grep ssh</span>root        <span class="token number">33</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5420</span> pts/1    S    03:43   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root        <span class="token number">35</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">936</span> pts/1    S+   03:43   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释：配置完成后可以将容器保存为镜像</p><p>docker commit -a “提交的镜像作者名称” -m “提交时的说明文字” 容器ID或容器名称  保存镜像名称:标签</p><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@dc627a3adc4d:/<span class="token comment"># docker commit -a "runoob.com" -m "my apache" a404c6c174a2  mymysql:v1</span>root@dc627a3adc4d:/<span class="token comment"># docker images mymysql:v1</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmymysql             v1                  37af1236adef        <span class="token number">15</span> seconds ago      <span class="token number">329</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-配置pycharm并连接docker容器"><a href="#7-配置pycharm并连接docker容器" class="headerlink" title="7.配置pycharm并连接docker容器"></a>7.配置pycharm并连接docker容器</h2><p>参考网址：<a href="https://blog.csdn.net/Thanours/article/details/109265315">点我查看</a></p><p>在 Tools &gt;&gt;&gt; Deployment &gt;&gt;&gt; Configuration选项中新建 SFTP 连接：</p><p><img src="https://i.loli.net/2021/05/21/YMm8PE6Hd9ySQ2h.png"></p><img src="https://i.loli.net/2021/05/21/z4dMrhtOH8xvZCR.png"/><p><img src="https://i.loli.net/2021/06/10/TYq9sIE2aRfdyGC.png"></p><ul><li>路径映射(本地程序文件目录与docker文件目录的映射)：</li></ul><p><img src="https://i.loli.net/2021/05/21/yigpdXIMG5QTaLw.png"></p><ul><li>同步本地代码数据到docker容器中：</li></ul><p><img src="https://i.loli.net/2021/05/21/mQJGDp1xaB6EjO9.png"></p><ul><li>上传完代码数据后， 需要选择设置python编译器：</li></ul><p><img src="https://i.loli.net/2021/05/21/htdvCb2qlnOas1Y.png"></p><p><img src="https://i.loli.net/2021/05/21/O3yU6kINc9AT8ea.png"></p><p><img src="https://i.loli.net/2021/05/21/bH5aVPAMXDIz42j.png"></p><p><img src="https://i.loli.net/2021/06/10/BH7mE9diJMrcWCp.png"></p><ul><li>设置好python解释器就可以run代码了：</li></ul><p><img src="https://i.loli.net/2021/05/21/jDGmP8npQtaFCY7.png"></p><p>这里要注意一下，代码所要的运行环境还需要在docker容器安装配置好，比如我这里需要pytorch环境以及python代码运行所需的依赖库都已经在docker容器中通过pip安装好了。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> Pycharm </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数参数传递之引用与指针</title>
      <link href="/2022/11/12/han-shu-can-shu-chuan-di-zhi-yin-yong-yu-zhi-zhen/"/>
      <url>/2022/11/12/han-shu-can-shu-chuan-di-zhi-yin-yong-yu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p><strong>形参是实参的拷贝</strong>，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参-&gt;形参），参数的值只能传入，不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递。</p><h2 id="指针传递"><a href="#指针传递" class="headerlink" title="指针传递"></a>指针传递</h2><p><strong>形参为指向实参地址的指针</strong>，当对形参的指向操作时，就相当于对实参本身进行的操作</p><h2 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h2><p><strong>形参相当于是实参的“别名”</strong>，对形参的操作其实就是对实参的操作，在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p><p>引用引入了对象的一个同义词。定义引用的表示方法与定义指针相似，只是用“&amp;”代替了“*”。例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Point <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Point <span class="token operator">&amp;</span>pt2<span class="token operator">=</span>pt1<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义了pt2为pt1的引用。通过这样的定义，pt1和pt2表示同一对象。需要特别强调的是引用并不产生对象的副本，仅仅是对象的同义词。因此，当下面的语句执行后：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pt1<span class="token punctuation">.</span>offset（<span class="token number">2</span>，<span class="token number">2</span>）；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pt1和pt2都具有（12，12）的值。<br>引用必须在定义时马上被初始化，因为它必须是某个东西的同义词。你不能先定义一个引用后才<br>初始化它。例如下面语句是非法的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Point <span class="token operator">&amp;</span>pt3；pt3<span class="token operator">=</span>pt1；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="引用传递和指针传递的区别与联系"><a href="#引用传递和指针传递的区别与联系" class="headerlink" title="引用传递和指针传递的区别与联系"></a>引用传递和指针传递的区别与联系</h1><h2 id="引用的规则"><a href="#引用的规则" class="headerlink" title="引用的规则"></a>引用的规则</h2><ul><li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。 </li><li>不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）。 </li><li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li></ul><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>-都是地址的概念：指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li><p>指针是一个实体，而引用仅是个别名；</p></li><li><p>引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p></li><li><p>引用没有const，指针有const，const的指针不可变；（具体指没有int&amp; const a这种形式，而const int&amp; a是有 的， 前者指引用本身即别名不可以改变，这是当然的，所以不需要这种形式，后者指引用所指的值不可以改变）</p></li><li><p>引用不能为空，指针可以为空；</p></li><li><p>“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p></li><li><p>指针和引用的自增(++)运算意义不一样；</p></li><li><p>引用是类型安全的，而指针不是 (引用比指针多了类型检查</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从概念上讲，<strong>指针从本质上讲就是存放变量地址的一个变量</strong>，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p><p>而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p><p>在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</p><p>指针传递参数本质上是值传递的方式，它所传递的是一个地址值。<em>值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（这里是在说实参指针本身的地址值不会变）</em></p><p>而在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时<strong>存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量</strong>。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p><p><strong>引用传递和指针传递是不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针传递的参数，如果改变被调函数中的指针地址，它将影响不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量，那就得使用指向指针的指针，或者指针引用。</strong></p><p>为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p><p>程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为<strong>指针变量的地址值</strong>，指针变量中的值为其指向变量的地址；而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改.</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>使用引用传递参数和使用指针传递参数都可传递变量的地址，但对于int,float等占用内存较少，其作为函数参数时一般使用引用传递参数；而对于结构体而言一般采用指针传递结构体变量的地址。</p><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="传递可变参数"><a href="#传递可变参数" class="headerlink" title="传递可变参数"></a>传递可变参数</h2><p>传统的c中，函数在调用时参数是通过值来传递的，这就是说函数的参数不具备返回值的能力。所以在传统的c中，如果需要函数的参数具有返回值的能力，往往是通过指针来实现的。比如，实现两整数变量值交换的c程序如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用引用机制后，以上程序的c++版本为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span>a<span class="token punctuation">;</span>    a<span class="token operator">=</span>b<span class="token punctuation">;</span>    b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用该函数的c++方法为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">swap_int<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>c++自动把x,y的地址作为参数传递给swap_int函数。</p><h2 id="给函数传递大型对象"><a href="#给函数传递大型对象" class="headerlink" title="给函数传递大型对象"></a>给函数传递大型对象</h2><p>当大型对象被传递给函数时，使用引用参数可使参数传递效率得到提高，因为引用并不产生对象的副本，也就是参数传递时，对象无须复制。下面的例子定义了一个有限整数集合的类：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> maxCard<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>Class Set<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> elems<span class="token punctuation">[</span>maxCard<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 集和中的元素，maxCard 表示集合中元素个数的最大值。</span>    <span class="token keyword">int</span> card<span class="token punctuation">;</span> <span class="token comment">// 集合中元素的个数。</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>card<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//构造函数</span>    <span class="token keyword">friend</span> Set <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Set <span class="token punctuation">,</span>Set <span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//重载运算符号*，用于计算集合的交集 用对象作为传值参数</span>    <span class="token comment">// friend Set operator * (Set &amp; ,Set &amp; ) 重载运算符号*，用于计算集合的交集 用对象的引用作为传值参数</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先考虑集合交集的实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Set <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span> Set Set1<span class="token punctuation">,</span>Set Set2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Set res<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Set1<span class="token punctuation">.</span>card<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">></span>Set2<span class="token punctuation">.</span>card<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Set1<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>Set2<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>res<span class="token punctuation">.</span>card<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>Set1<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于重载运算符不能对指针单独操作，我们必须把运算数声明为 Set 类型而不是 Set * 。每次使用*做交集运算时，整个集合都被复制，这样效率很低。我们可以用引用来避免这种情况。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Set <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span> Set <span class="token operator">&amp;</span>Set1<span class="token punctuation">,</span>Set <span class="token operator">&amp;</span>Set2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     Set res<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Set1<span class="token punctuation">.</span>card<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">></span>Set2<span class="token punctuation">.</span>card<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Set1<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>Set2<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>res<span class="token punctuation">.</span>card<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>Set1<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用返回值"><a href="#引用返回值" class="headerlink" title="引用返回值"></a>引用返回值</h2><p>如果一个函数返回了引用，那么该函数的调用也可以被赋值。这里有一函数，它拥有两个引用参数并返回一个双精度数的引用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token operator">&amp;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>d1<span class="token punctuation">,</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>d2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> d1<span class="token operator">></span>d2<span class="token operator">?</span>d1<span class="token operator">:</span>d2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于max()函数返回一个对双精度数的引用，那么我们就可以用max() 来对其中较大的双精度数加1：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+=</span><span class="token number">1.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在函数的使用过程中，我们都明白传指针和传引用会使实参的值发生改变。那么能够通过传指针改变指针所指向的地址吗？<br>在解决这个问题之前，也许我们应该先了解指针非常容易混淆的三个属性：</p><ul><li>指针变量地址（&amp;p）</li><li>指针变量指向的地址（p，存储数据的地址）</li><li>指针变量指向的地址的值（*p）</li></ul><p>当我们将指针变量与其它变量比较之后就会发现，指针变量同其它变量是相似的，只是多了最后一种操作。比如一个int类型的变量,<code>int x=5;</code>,<code>&amp;x</code>取出存储<code>5</code>这个数据的地址，同样，<code>&amp;p</code>也是存储指针的地址，<code>p</code>就是这个地址里面保存的值，也就是指向的地址。只是与其它变量不同的是，它除了这两种操作之外，还有一个解引用操作符<code>*p</code>去获取指针变量指向的地址里面保存的值。</p><h2 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//试图改变p指向的地址</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//指针变量指向一个int类型的地址</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">"value:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token string">"value:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token function">make</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token string">"value:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：我们这里虽然使用的是传指针，但是却不是直接改变指针变量指向的地址的值，却是想通过改变指针变量指向的地址来修改它的值，显然这样失败了。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/no.png"></p><p>如果我们希望在函数里面修改指针变量存储的地址而不是它的值，这个时候就需要指针引用了。类似于普通变量传入变量引用，我们也传入一个指针引用，在函数里面，你可以将pp认为和p都是这个指针变量（&amp;p&#x3D;&#x3D;&amp;pp），不似传入指针参数的时候形参和实参的变量（&amp;p！&#x3D;&amp;pp）地址不一样。此时我们操作pp的值就是更改了p的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">&amp;</span>pp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//改变p指向的地址</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：当我们修改传入参数为指针的引用的时候就可以修改指针变量所指向的地址了，可以看见，传入指针引用可以修改指针变量的值（p）和指向的值（*p）。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes.png"></p><h2 id="二级指针-1"><a href="#二级指针-1" class="headerlink" title="二级指针"></a>二级指针</h2><p>指向指针的指针变量称为二级指针。<br>如果pp是一个二级指针，那么有如下属性：</p><ul><li>二级指针的地址（&amp;pp）</li><li>二级指针的地址保存的地址（pp）</li><li>二级指针的地址保存的地址，该地址里面保存的地址（*pp）</li><li>二级指针的地址保存的地址，该地址里面保存的地址里面的数据（**pp）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/kuangtu.png"> </p><p>除了上面传入指针引用改变一级指针指向的地址以外，我们还可以通过传入一个二级指针去修改它对应的一级指针指向的地址，同样达到了修改指针变量的效果。二级指针的指向的地址存储的值就是一级指针指向的地址。对一级指针变量解引用得到的是指针指向的地址存储的数据，二级指针变量解引用得到的也是该二级指针指向的地址存储的地址值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> <span class="token operator">*</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>pp<span class="token operator">=</span>p<span class="token punctuation">;</span> <span class="token comment">//二级指针的解引用被赋值需要得到一个一级指针变量，上图中二级指针的示意图中*pp=p</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token operator">=</span><span class="token operator">&amp;</span>q<span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>pp<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>pp<span class="token operator">&lt;&lt;</span><span class="token string">"    "</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>q<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span>q<span class="token operator">&lt;&lt;</span><span class="token string">"       value:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>q<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token function">make</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>pp<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>pp<span class="token operator">&lt;&lt;</span><span class="token string">"    "</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>q<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span>q<span class="token operator">&lt;&lt;</span><span class="token string">"       value:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>q<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：通过对二级指针的解引用赋值成功修改了一级指针指向的地址。如果仅仅在make函数里面对**pp&#x3D;66;操作，那么所有的地址不会改变，仅仅会改变值为66。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes2.png"></p><h1 id="各种类型的函数参数传递"><a href="#各种类型的函数参数传递" class="headerlink" title="各种类型的函数参数传递"></a>各种类型的函数参数传递</h1><h2 id="声明-h"><a href="#声明-h" class="headerlink" title="声明.h"></a>声明.h</h2><pre class="line-numbers language-C" data-language="C"><div class="caption"><span>++</span></div><code class="language-C">&#x2F;&#x2F; 结构体数组   (in_ldc)void getLdc(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS]);&#x2F;&#x2F; cv::Mat  (in_MatK)void getMatK(cv::Mat *in_MatK);&#x2F;&#x2F; 内存块(map)  (in_BEMap)void getBEMap(unsigned short *&amp;in_BEMap);&#x2F;&#x2F; cv::Rect数组 (in_BESetRoi)void getBESetRoi(cv::Rect *in_BESetRoi);&#x2F;&#x2F; cv::Mat 数组 (in_wide_angle_map)void getWideAngleMap(float **in_wide_angle_map);&#x2F;&#x2F; 整数 (in_wide_angle_width,in_wide_angle_height)void getWideAngleSize(int &amp;in_wide_angle_width, int &amp;in_wide_angle_height);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义-cpp"><a href="#定义-cpp" class="headerlink" title="定义.cpp"></a>定义.cpp</h2><ul><li><p>结构体数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> distCenterX<span class="token punctuation">;</span>    <span class="token keyword">float</span> distCenterY<span class="token punctuation">;</span>    <span class="token keyword">float</span> distFocalLength<span class="token punctuation">;</span>    <span class="token keyword">float</span> distFocalLengthInv<span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>lut_d2u<span class="token punctuation">;</span>    <span class="token keyword">int32_t</span> lut_d2u_indMax<span class="token punctuation">;</span>    <span class="token keyword">float</span> lut_d2u_step<span class="token punctuation">;</span>    <span class="token keyword">float</span> lut_d2u_stepInv<span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>lut_u2d<span class="token punctuation">;</span>    <span class="token keyword">int32_t</span> lut_u2d_indMax<span class="token punctuation">;</span>    <span class="token keyword">float</span> lut_u2d_step<span class="token punctuation">;</span>    <span class="token keyword">float</span> lut_u2d_stepInv<span class="token punctuation">;</span>    <span class="token keyword">bool</span> if_get_matrix <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat intrinsics <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Scalar</span><span class="token double-colon punctuation">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat distortionCoeff <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Scalar</span><span class="token double-colon punctuation">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> TLensDistortionCorrection<span class="token punctuation">;</span>TLensDistortionCorrection TLdc<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">getLdc</span><span class="token punctuation">(</span><span class="token function">TLensDistortionCorrection</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>in_ldc<span class="token punctuation">)</span><span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        in_ldc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TLdc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>map</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>BEMap <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>BEMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token operator">*</span> BEGetRoiSize <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getBEMap</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token operator">&amp;</span>in_BEMap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    in_BEMap <span class="token operator">=</span> BEMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// cv::Rect</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rect_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rect_index <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> rect_index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BESetRoi<span class="token punctuation">[</span>rect_index<span class="token punctuation">]</span> <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Rect</span><span class="token punctuation">(</span>BE_set_roi<span class="token punctuation">[</span>rect_index <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> BE_set_roi<span class="token punctuation">[</span>rect_index <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                        BE_set_roi<span class="token punctuation">[</span>rect_index <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> BE_set_roi<span class="token punctuation">[</span>rect_index <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getBESetRoi</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Rect <span class="token operator">*</span>in_BESetRoi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        in_BESetRoi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> BESetRoi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cv::Mat []</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token operator">*</span>wideAngleViewMap<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    wideAngleViewMap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>wideAngle_width <span class="token operator">*</span> wideAngle_height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">getWideAngleMap</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token operator">*</span>in_wide_angle_map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wideAngleViewMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            in_wide_angle_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> wideAngleViewMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"getWideAngleMap failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>int</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> wideAngle_width <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span> <span class="token comment">//广角视图的尺寸，需要为偶数</span><span class="token keyword">int</span> wideAngle_height <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">getWideAngleSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>in_wide_angle_width<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>in_wide_angle_height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    in_wide_angle_width <span class="token operator">=</span> wideAngle_width<span class="token punctuation">;</span>    in_wide_angle_height <span class="token operator">=</span> wideAngle_height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="使用-cpp"><a href="#使用-cpp" class="headerlink" title="使用.cpp"></a>使用.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// </span>TLensDistortionCorrection m_ldc<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">getLdc</span><span class="token punctuation">(</span>my_avm_bsd<span class="token punctuation">.</span>m_ldc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span>cv<span class="token double-colon punctuation">::</span>Mat m_MatK<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">getMatK</span><span class="token punctuation">(</span>my_avm_bsd<span class="token punctuation">.</span>m_MatK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>BE_Map<span class="token punctuation">;</span><span class="token function">getBEMap</span><span class="token punctuation">(</span>my_BB_YUV<span class="token punctuation">.</span>BE_Map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span>cv<span class="token double-colon punctuation">::</span>Rect BE_SetRoi<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">getBESetRoi</span><span class="token punctuation">(</span>my_BB_YUV<span class="token punctuation">.</span>BE_SetRoi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">float</span> <span class="token operator">*</span>wide_angle_map<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">getWideAngleMap</span><span class="token punctuation">(</span>g_avm_set<span class="token operator">-></span>wide_angle_map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">int</span> m_wideAngle_width<span class="token punctuation">;</span><span class="token keyword">int</span> m_wideAngle_height<span class="token punctuation">;</span><span class="token function">getWideAngleSize</span><span class="token punctuation">(</span>g_avm_set<span class="token operator">-></span>m_wideAngle_width<span class="token punctuation">,</span> g_avm_set<span class="token operator">-></span>m_wideAngle_height<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://www.pudn.com/news/62615ba10e75e420124071b2.html">C++中引用传递与指针传递区别（进一步整理）</a> </li><li><a href="https://blog.csdn.net/qq_32483145/article/details/52901230">二级指针和指针引用函数传参（C++）</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数参数传递 </tag>
            
            <tag> 引用与指针 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
