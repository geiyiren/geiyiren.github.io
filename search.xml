<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单例模式</title>
      <link href="/2023/05/19/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/05/19/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul><li>当存在一个或多个变量仅初始化一次，却被多个文件多次使用的情况下考虑单例模式</li><li>可实现一次初始化，多文件多次使用</li><li>例如 ：相机的内参和外参一般只初始化一次，然后直接使用。</li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h1 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h1><h3 id="ParametersInit-h"><a href="#ParametersInit-h" class="headerlink" title="ParametersInit.h"></a>ParametersInit.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __PARAMETERS_INIT_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PARAMETERS_INIT_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for thread-safe singleton</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParametersInit</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> ParametersInit *m_instance;</span><br><span class="line">    <span class="type">static</span> <span class="type">pthread_once_t</span> _once;</span><br><span class="line">    <span class="type">int</span> m_test;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ParametersInit</span>(<span class="comment">/* args */</span>);</span><br><span class="line">    ~<span class="built_in">ParametersInit</span>();</span><br><span class="line">    <span class="comment">//使用pthread_once保证init()只调用一次</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ParametersInit *<span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">camParametersInit</span><span class="params">(<span class="type">int</span> in_test)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getTest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ParametersInit-cpp"><a href="#ParametersInit-cpp" class="headerlink" title="ParametersInit.cpp"></a>ParametersInit.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/ParametersInit.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员函数必须初始化后使用</span></span><br><span class="line"><span class="type">pthread_once_t</span> ParametersInit::_once = <span class="number">0</span>;</span><br><span class="line">ParametersInit *ParametersInit::m_instance=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ParametersInit::<span class="built_in">ParametersInit</span>(<span class="comment">/* args */</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ParametersInit::~<span class="built_in">ParametersInit</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ParametersInit::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!m_instance)</span><br><span class="line">    &#123;</span><br><span class="line">        m_instance = <span class="keyword">new</span> <span class="built_in">ParametersInit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ParametersInit *<span class="title">ParametersInit::GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_once</span>(&amp;_once, ParametersInit::init);</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ParametersInit::camParametersInit</span><span class="params">(<span class="type">int</span> in_test)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_test = in_test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ParametersInit::getTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="init-cpp"><a href="#init-cpp" class="headerlink" title="init.cpp"></a>init.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ParametersInit.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ParametersInit *m_Instance = ParametersInit::<span class="built_in">GetInstance</span>();</span><br><span class="line">m_Instance-&gt;<span class="built_in">camParametersInit</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="use1-cpp"><a href="#use1-cpp" class="headerlink" title="use1.cpp"></a>use1.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ParametersInit.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ParametersInit *m_Instance = ParametersInit::<span class="built_in">GetInstance</span>();</span><br><span class="line"><span class="comment">// 这里可以直接使用init.cpp初始化的参数ParametersInit::m_test</span></span><br><span class="line"><span class="type">int</span> m_test = m_Instance-&gt;<span class="built_in">getTest</span>();<span class="comment">//m_test=100</span></span><br></pre></td></tr></table></figure><blockquote><p>参考网站: <a href="https://blog.csdn.net/CoderAldrich/article/details/83114881">https://blog.csdn.net/CoderAldrich/article/details/83114881</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多线程常用案例</title>
      <link href="/2023/05/10/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
      <url>/2023/05/10/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h1><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p>使用C++11 std库中的线程和条件变量实现notify_one的一个简单例子。在这个例子中，我们有一个线程向一个队列中添加元素，另一个线程从队列中删除元素。线程通过条件变量进行同步。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::queue&lt;<span class="type">int</span>&gt; queue;</span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; value; ++i) &#123;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>)); <span class="comment">// 模拟生产</span></span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        queue.<span class="built_in">push</span>(i);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Produced: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">        cv.<span class="built_in">notify_one</span>(); <span class="comment">// 通知消费者</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        cv.<span class="built_in">wait</span>(lock, []&#123; <span class="keyword">return</span> !queue.<span class="built_in">empty</span>(); &#125;); <span class="comment">// 等待直到队列不为空</span></span><br><span class="line">        <span class="type">int</span> value = queue.<span class="built_in">front</span>();</span><br><span class="line">        queue.<span class="built_in">pop</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Consumed: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(producer, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(consumer)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，生产者线程在每次添加一个元素到队列后都会调用notify_one()来通知消费者线程。消费者线程在wait()函数中等待，直到收到通知并且队列不为空才会继续执行。</p><p>需要注意的是，虽然在上述代码中我们的消费者线程是一个无限循环，但在实际的程序中，你需要有一种机制来结束这个线程。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能指针的使用</title>
      <link href="/2023/05/10/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/10/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在 C++ 中，智能指针是一种对象，它处理内存管理的问题，使程序员更加专注于业务逻辑而不是内存管理。C++ 标准库中提供了几种类型的智能指针，包括：</p><ul><li><p><code>std::unique_ptr</code>: 它代表独占所有权的概念。一个 <code>std::unique_ptr</code> 对象在任何时间都拥有它所指向的对象。当 <code>std::unique_ptr</code> 被销毁（例如，当离开其作用域时），它所指向的对象也会被销毁（即调用其析构函数）。</p></li><li><p><code>std::shared_ptr</code>: 它代表共享所有权的概念。多个 <code>std::shared_ptr</code> 对象可以拥有同一个对象。当最后一个拥有该对象的 <code>std::shared_ptr</code> 被销毁时，它所指向的对象也会被销毁。</p></li><li><p><code>std::weak_ptr</code>: 它是为了配合 <code>std::shared_ptr</code> 而存在的，它提供了一种方式访问 <code>std::shared_ptr</code> 所管理的对象，但是不增加引用计数。这对于解决 <code>std::shared_ptr</code> 循环引用的问题（即，两个 <code>std::shared_ptr</code> 相互引用，导致它们都不会被销毁）是很有用的。</p></li></ul><p>智能指针的使用可以极大地简化内存管理，避免内存泄漏和其他与生命周期管理相关的错误。然而，它们并不能解决所有的内存管理问题，仍然需要程序员小心谨慎地设计他们的代码。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="std-unique-ptr示例"><a href="#std-unique-ptr示例" class="headerlink" title="std::unique_ptr示例"></a><code>std::unique_ptr</code>示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="built_in">Foo</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Foo::Foo\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Foo</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Foo::~Foo\n&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;Foo::bar\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">const</span> Foo &amp;)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;f(const Foo&amp;)\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Foo&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Foo)</span></span>;  <span class="comment">// p1 独占 Foo</span></span><br><span class="line"></span><br><span class="line">    p1-&gt;<span class="built_in">bar</span>();  <span class="comment">// 输出 &quot;Foo::bar&quot;</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_ptr&lt;Foo&gt; <span class="title">p2</span><span class="params">(std::move(p1))</span></span>;  <span class="comment">// 现在 p2 独占 Foo</span></span><br><span class="line">        <span class="built_in">f</span>(*p2);</span><br><span class="line">        p1 = std::<span class="built_in">move</span>(p2);  <span class="comment">// 现在 p1 独占 Foo</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p1-&gt;<span class="built_in">bar</span>();  <span class="comment">// 输出 &quot;Foo::bar&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Foo 的析构器在这里被调用，因为 p1 被销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="std-shared-ptr示例"><a href="#std-shared-ptr示例" class="headerlink" title="std::shared_ptr示例"></a><code>std::shared_ptr</code>示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="built_in">Foo</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Foo::Foo\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Foo</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Foo::~Foo\n&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;Foo::bar\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::shared_ptr&lt;Foo&gt; p1 = std::<span class="built_in">make_shared</span>&lt;Foo&gt;();</span><br><span class="line">    <span class="comment">// 这里，我们不再需要使用 new。std::make_shared 是一个更安全，更高效的方式来分配共享对象。</span></span><br><span class="line">    </span><br><span class="line">    p1-&gt;<span class="built_in">bar</span>();  <span class="comment">// 输出 &quot;Foo::bar&quot;</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        std::shared_ptr&lt;Foo&gt; p2 = p1;</span><br><span class="line">        p2-&gt;<span class="built_in">bar</span>();  <span class="comment">// 输出 &quot;Foo::bar&quot;</span></span><br><span class="line">        <span class="comment">// Foo 的实例仍未被删除，因为 p1 和 p2 都还在作用域内</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    p1-&gt;<span class="built_in">bar</span>();  <span class="comment">// 输出 &quot;Foo::bar&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Foo 的析构器在这里被调用，因为 p1 离开了作用域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="std-weak-ptr示例"><a href="#std-weak-ptr示例" class="headerlink" title="std::weak_ptr示例"></a><code>std::weak_ptr</code>示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="built_in">Foo</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Foo::Foo\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Foo</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Foo::~Foo\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::weak_ptr&lt;Foo&gt; weak;</span><br><span class="line">    &#123;</span><br><span class="line">        std::shared_ptr&lt;Foo&gt; shared = std::<span class="built_in">make_shared</span>&lt;Foo&gt;();</span><br><span class="line">        weak = shared;</span><br><span class="line">        <span class="comment">// 在 shared 存在的时候，我们可以使用 weak 来获取一个新的 shared_ptr 实例</span></span><br><span class="line">        <span class="keyword">auto</span> p = weak.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Object has not been deleted\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里，shared 被销毁，因此 Foo 被删除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为 Foo 已经被删除，所以我们不能再从 weak 中获取一个 shared_ptr</span></span><br><span class="line">    <span class="keyword">auto</span> p = weak.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Object has been deleted\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p>智能指针的 reset 方法是用于释放智能指针当前拥有的对象，并可能接管新的对象。</p><p>以下是 std::unique_ptr 和 std::shared_ptr 的 reset 方法的使用：</p><ul><li><code>std::unique_ptr</code> 的 <code>reset</code> 方法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="built_in">Foo</span>(<span class="type">int</span> val) : <span class="built_in">value</span>(val) &#123; std::cout &lt;&lt; <span class="string">&quot;Foo &quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot; constructed.\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Foo</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Foo &quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot; destructed.\n&quot;</span>; &#125;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Foo&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> Foo(<span class="number">1</span>))</span></span>;  <span class="comment">// p 现在指向一个新的 Foo 对象</span></span><br><span class="line"></span><br><span class="line">    p.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Foo</span>(<span class="number">2</span>));  <span class="comment">// p 释放旧的 Foo 对象并指向一个新的 Foo 对象</span></span><br><span class="line">    <span class="comment">// 在这一步，&quot;Foo 1 destructed.&quot; 被打印到控制台</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>std::shared_ptr</code> 的 <code>reset</code> 方法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="built_in">Foo</span>(<span class="type">int</span> val) : <span class="built_in">value</span>(val) &#123; std::cout &lt;&lt; <span class="string">&quot;Foo &quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot; constructed.\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Foo</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Foo &quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot; destructed.\n&quot;</span>; &#125;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::shared_ptr&lt;Foo&gt; p1 = std::<span class="built_in">make_shared</span>&lt;Foo&gt;(<span class="number">1</span>);  <span class="comment">// p1 现在指向一个新的 Foo 对象</span></span><br><span class="line"></span><br><span class="line">    std::shared_ptr&lt;Foo&gt; p2 = p1;  <span class="comment">// p2 也指向同一个 Foo 对象</span></span><br><span class="line"></span><br><span class="line">    p1.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Foo</span>(<span class="number">2</span>));  <span class="comment">// p1 释放旧的 Foo 对象并指向一个新的 Foo 对象</span></span><br><span class="line">    <span class="comment">// 但是，&quot;Foo 1 destructed.&quot; 并未被打印到控制台，因为 p2 仍然拥有它</span></span><br><span class="line"></span><br><span class="line">    p2.<span class="built_in">reset</span>();  <span class="comment">// p2 释放它的 Foo 对象</span></span><br><span class="line">    <span class="comment">// 在这一步，&quot;Foo 1 destructed.&quot; 被打印到控制台</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 智能指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的封装与函数绑定用法解析</title>
      <link href="/2023/05/10/%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85%E4%B8%8E%E5%87%BD%E6%95%B0%E7%BB%91%E5%AE%9A%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/05/10/%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85%E4%B8%8E%E5%87%BD%E6%95%B0%E7%BB%91%E5%AE%9A%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h1><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><p>src&#x2F;adas_proc&#x2F;adas_app&#x2F;adas_app.cpp —&gt; 629行</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> AdasProcWrapper = ac::ObjWrapper&lt;ac::AdasProcInterface, HAC_CreateAdasProc, HAC_DestroyAdasProc&gt;;</span><br><span class="line">AdasProcWrapper                        adas_proc_;</span><br></pre></td></tr></table></figure><ul><li><code>AdasProcWrapper</code> 是一个类型别名（using 声明），用于定义 <code>adas_proc_</code>对象。它是由 <code>ac::ObjWrapper</code> 模板类实例化而来。  </li><li><code>ac::ObjWrapper</code> 是一个模板类，接受三个模板参数：<code>ac::AdasProcInterface、HAC_CreateAdasProc 和 HAC_DestroyAdasProc</code>。</li></ul><p>ObjWrapper模板类的定义如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 一个简单的wrapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">using</span> ObjCreateType  = <span class="built_in">HAC_Handle</span>(*)(<span class="type">const</span> <span class="type">char</span> *);</span><br><span class="line"><span class="keyword">using</span> ObjDestroyType = <span class="built_in">void</span>(*)(HAC_Handle);</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, ObjCreateType Create, ObjDestroyType Destroy&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjWrapper</span> <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ObjWrapper</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        obj_ = <span class="built_in">reinterpret_cast</span>&lt;T *&gt;(<span class="built_in">Create</span>(config));</span><br><span class="line">        <span class="keyword">if</span> (obj_ == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">StringException</span>(<span class="built_in">StringFormatWithPrefix</span>(<span class="string">&quot;error: Create obj failed.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ObjWrapper</span>()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">ObjWrapper</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Destroy</span>(<span class="built_in">reinterpret_cast</span>&lt;HAC_Handle&gt;(obj_));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T *<span class="keyword">operator</span>-&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj_ == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">StringException</span>(<span class="built_in">StringFormatWithPrefix</span>(<span class="string">&quot;error: obj is nullptr.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T *<span class="title">Get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Reset</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> obj = <span class="built_in">reinterpret_cast</span>&lt;T *&gt;(<span class="built_in">Create</span>(config));</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">StringException</span>(<span class="built_in">StringFormatWithPrefix</span>(<span class="string">&quot;error: Create obj failed.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Destroy</span>(<span class="built_in">reinterpret_cast</span>&lt;HAC_Handle&gt;(obj_));</span><br><span class="line">        obj_ = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ObjWrapper</span>(<span class="type">const</span> ObjWrapper &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    ObjWrapper&amp; <span class="keyword">operator</span>=(<span class="type">const</span> ObjWrapper &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *obj_ = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由模板类的定义可知，该模板类有三个模板参数：</p><ul><li><code>typename T</code>：这是一个类型参数，用于指定被包装的对象的类型。</li><li><code>ObjCreateType Create</code>：这是一个函数指针类型，用于指定创建对象的函数。</li><li><code>ObjDestroyType Destroy</code>：这是一个函数指针类型，用于指定销毁对象的函数。</li></ul><p>因此，<code>AdasProcWrapper</code> 类型的 <code>adas_proc_</code> 对象是一个使用 <code>ac::ObjWrapper</code> 封装的 ADAS 处理实例。这个封装提供了一种方便的方式来创建和销毁 ADAS 处理实例，并提供了 ADAS 处理接口的访问。<code>adas_proc_</code>为封装类<code>ac::ObjWrapper</code>实例化后的对象。</p><h2 id="封装类的使用1"><a href="#封装类的使用1" class="headerlink" title="封装类的使用1"></a>封装类的使用1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adas_proc_.<span class="built_in">Reset</span>(json_config_str.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><p>封装类对象adas_proc_调用了模板类<code>ac::ObjWrapper</code>中的<code>Reset</code>函数，该函数调用了模板类创建时传入的参数2：<code>HAC_CreateAdasProc</code>,该参数是一个函数指针类型，用于指定创建对象的函数。该函数的定义如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 创造对象</span></span><br><span class="line"><span class="comment"> * @param config json字符串，参考，assets目录下的配置文件,会从中读取各种配置信息，</span></span><br><span class="line"><span class="comment"> *               包括摄像头信息，模型文件路径,以及其他配置信息等等</span></span><br><span class="line"><span class="comment"> * @note 当句柄不为NULL时候，最后一定要调用HAC_DestroyAdasProc进行销毁，</span></span><br><span class="line"><span class="comment"> *       如果为NULL，调用或者不调用HAC_DestroyAdasProc都可以。</span></span><br><span class="line"><span class="comment"> * @return HAC_Handle 句柄,需要判断返回值是否是NULL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">HQ_FLAG_DLL_API HAC_Handle <span class="title">HAC_CreateAdasProc</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;HAC_Handle&gt;(<span class="keyword">new</span> ac::<span class="built_in">AdasProcImpl</span>(config));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装类的使用2"><a href="#封装类的使用2" class="headerlink" title="封装类的使用2"></a>封装类的使用2</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adas_proc_-&gt;<span class="built_in">SetAdasInfoEvent</span>(std::<span class="built_in">bind</span>(&amp;Impl::OnAdasInfo,</span><br><span class="line">            <span class="keyword">this</span>, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));</span><br></pre></td></tr></table></figure><p>其中，<code>SetAdasInfoEvent</code>函数的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AdasProcImpl::SetAdasInfoEvent</span><span class="params">(<span class="type">const</span> AdasInfoEvent &amp;event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    on_adas_info_ = event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>OnAdasInfo</code>函数的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">OnAdasInfo</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *buffer, <span class="type">uint32_t</span> size, <span class="type">int64_t</span> tickcount)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    **************</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就有点绕了，模板类中并没有SetAdasInfoEvent函数，这里怎么能使用呢？其实这个函数的定义在<code>ac::AdasProcInterface</code>类中，由于在模板类中重载了<code>-&gt;</code>运算符，因此<code>adas_proc_-&gt;SetAdasInfoEvent</code>中的<code>-&gt;</code>是被重载后的运算符，<code>adas_proc_-&gt;</code>等同于<code>adas_proc_.obj_</code>,故<code>adas_proc_-&gt;SetAdasInfoEvent</code>等同于<code>adas_proc_.obj_.SetAdasInfoEvent</code>。</p><p>这里封装类重载了<code>-&gt;</code>运算符，因此看起来封装后的类可以直接访问模板参数1指向类<code>ac::AdasProcInterface</code>的成员函数。</p><p>到此为止，可以基本了解封装类的定义和使用示例。</p><h1 id="函数的绑定"><a href="#函数的绑定" class="headerlink" title="函数的绑定"></a>函数的绑定</h1><p>紧接上文，在调用<code>SetAdasInfoEvent</code>函数时使用了<code>std::bind</code>进行了函数的绑定。<code>std::bind</code> 是 C++ 标准库中的一个函数模板，它允许你创建一个函数对象，将参数绑定到可调用对象上。它位于 <code>&lt;functional&gt;</code> 头文件中，用于泛化函数调用。</p><p>std::bind 函数可以将一个可调用对象和一些参数绑定在一起，生成一个新的函数对象。这个新的函数对象可以延迟执行或者在需要时进行调用，而且可以自定义绑定的参数。</p><p>因此,这里是将<code>Impl::OnAdasInfo</code>与其参数进行绑定后生成一个新的可调用对象，同时将其作为函数<code>SetAdasInfoEvent</code>的参数传递给<code>on_adas_info_</code>,也就是说<code>on_adas_info_=std::bind(&amp;Impl::OnAdasInfo, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3)</code>。这样<code>on_adas_info_</code>就可以在使用时传递参数并执行<code>OnAdasInfo</code>函数。</p><p><code>on_adas_info_</code>的调用场景如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AdasProcImpl::OnAlarmInfo</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *buffer, <span class="type">uint32_t</span> size, <span class="type">int64_t</span> tickcount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置输出信息到buffer中</span></span><br><span class="line">    <span class="comment">// 把决策模块会掉出来的内容添加到out_buffer_中，然后回调到外面</span></span><br><span class="line">    <span class="keyword">if</span> (on_adas_info_ != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">decltype</span>(out_buffer_)  tmp;</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lck</span><span class="params">(buf_mutex_)</span></span>;</span><br><span class="line">            <span class="comment">// 把buffer中内容放入out_buffer中</span></span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> out_buffer_length = out_buffer_.<span class="built_in">size</span>();</span><br><span class="line">            out_buffer_.<span class="built_in">resize</span>(out_buffer_length + size);</span><br><span class="line">            std::<span class="built_in">memcpy</span>(out_buffer_.<span class="built_in">data</span>() + out_buffer_length, buffer, size);</span><br><span class="line">            tmp = out_buffer_;</span><br><span class="line">            out_buffer_.<span class="built_in">resize</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">on_adas_info_</span>(tmp.<span class="built_in">data</span>(), tmp.<span class="built_in">size</span>(), tickcount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，可以基本了解函数绑定的定义和使用示例。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类的封装 </tag>
            
            <tag> 函数绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++接口定义</title>
      <link href="/2023/05/10/C++%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89/"/>
      <url>/2023/05/10/C++%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要定义接口类"><a href="#为什么要定义接口类" class="headerlink" title="为什么要定义接口类?"></a>为什么要定义接口类?</h1><p>在软件开发这个行业中，一个较大的软件项目，一般由几个小组共同开发完成，为了将小组之间的影响降低到最低，定义好接口软件成为双方关注的焦点，对于要求在短时间开发完成的接口更是如此。那么如何才能定义好的接口呢? 第一，接口名字和实际的功能相符合；第二、接口要对数据进行封装，不允许客户直接操作接口之下的数据，尤其是使用new和delete在堆上操作内存数据。因为客户很容易由于操作不当造成错误，误以为是设计的接口有问题。</p><h1 id="两种常见的接口定义方法？"><a href="#两种常见的接口定义方法？" class="headerlink" title="两种常见的接口定义方法？"></a>两种常见的接口定义方法？</h1><p>c++中实现对接口与实现进行分离有两种方法，一种是将对象的实现细目隐藏于指针背后，简单的说就是将其分成两个类，一个类只提供接口，另一个负责实现该接口，这种设计手法常称为Pimpl Idiom(pointer to implementation)。<br>另一种方法就是将接口定义为抽象类，接口全被定义为纯虚函数的形式（纯虚函数没有具体的实现方法），派生类的成员函数负责实现这些接口。这种设计手法称为对象接口（Object Interface）。千万不要忘记把抽象接口类的析构函数定义为virtual函数，可能会造成内存泄漏。</p><h1 id="“对象接口”方式"><a href="#“对象接口”方式" class="headerlink" title="“对象接口”方式"></a>“对象接口”方式</h1><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><h3 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义?"></a>如何定义?</h3><p>首先给接口类下了定义：接口类应该是只提供方法声明，而自身不提供方法定义的抽象类。接口类自身不能实例化，接口类的方法定义&#x2F;实现只能由接口类的子类来完成。</p><p>而对于C++，其接口类一般具有以下特征：</p><ul><li>1.最好不要有成员变量，但可以有静态常量（static const或enum）</li><li>2.要有纯虚接口方法</li><li>3.要有虚析构函数，并提供默认实现</li><li>4.不要声明构造函数</li></ul><p>如下就是一个最简单的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Testable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> START = <span class="number">1</span>;  <span class="comment">// #1</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> STOP = <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>= <span class="number">0</span>;  <span class="comment">// #2： 接口方法</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Testable</span>() &#123;&#125;;   <span class="comment">// #3： 从C++11开始可以： virtual ~Testable() = default;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>#1.</code><br>如果成员变量，尤其是可变的成员变量，定义在接口中，等于是把实现细节暴露出来了，不符合接口定义的要求，所以一般不在接口中定义可变的成员变量。<br>而常量可以定义在接口中，因为有时接口需要返回状态，而这些状态可以定义成常量放在接口中。</p><p><code>#2.</code><br>由于不能让接口类自身能够实例化，并且需要子类必须实现接口暴露的方法，所以接口方法都要声明成纯虚函数。<br>声明成纯虚函数意味着接口类自身不需要提供方法的定义，方法的定义需要由接口类的子类提供，并且接口类自身也因此变成了抽象类而不能被实例化。</p><p><code>#3.</code><br>a). 在使用接口类的指针访问接口类的子类的实例时，当对接口类的指针做delete时，如果接口类的析构函数不是虚析构函数的话，将只会调用接口类的析构函数，接口类的子类的析构函数将不会被调用，内存泄露将会产生，所以接口类的析构函数必须定义成虚析构函数。<br>b). 如果接口类的析构函数不提供默认实现，即如果接口类的析构函数是纯虚析构函数的话，接口类的子类将被迫必须提供析构函数的实现，这样对接口类的子类不友好。<br>c). 在C++11中也可以用：  virtual ~Testable() &#x3D; default; 替代 virtual ~Testable() {};</p><p><code>#4.</code><br>不要显式定义任何的构造函数，但也不要在接口中加入如下代码来禁止生成构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Testable</span>() = <span class="keyword">delete</span>;</span><br><span class="line"><span class="built_in">Testable</span>(<span class="type">const</span> Testable&amp;) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><p>因为C++的调用机制要求子类的构造函数调用时一定会先调用父类的构造函数，如果禁止生成构造函数，代码编译时会报错。如果程序员不显式的提供构造函数，编译器也会隐式的加上构造函数的，虽然这些构造函数对于接口类来说实际没有什么意义。</p><p>C++中如何定义标识接口（marker interface）类?<br>标识接口是没有任何方法和属性的接口。这种接口在java中出现的较多，比如：java.io.Serializable、java.rmi.Remote、java.util.EventListener、java.util.RandomAccess</p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Testable</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Testable</span>() = <span class="number">0</span> &#123;&#125;; <span class="comment">// #5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>#5.</code><br>只要对纯虚析构函数提供一个默认实现就可以了。这种对纯虚函数提供实现的写法看似很奇怪，但C++的确是支持的。</p><h3 id="如何正确的使用接口类"><a href="#如何正确的使用接口类" class="headerlink" title="如何正确的使用接口类"></a>如何正确的使用接口类</h3><p>提供接口与实现<br>首先，声明一个接口：</p><ul><li><code>circle.h</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle.h</span></span><br><span class="line"><span class="comment">// 圆的接口类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Circle</span>() &#123;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 接口方法：面积</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过继承的方式实现这个接口：</p><ul><li><code>circle_impl.h</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle_impl.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;circle.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 圆的具体实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleImpl</span> : <span class="keyword">public</span> Circle &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CircleImpl</span>(<span class="type">double</span> radius);</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>circle_impl.cpp</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle_impl.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;circle_impl.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">pi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">atan</span>(<span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">CircleImpl::<span class="built_in">CircleImpl</span>(<span class="type">double</span> _radius) : <span class="built_in">radius</span>(_radius) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">CircleImpl::area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pi</span>() * radius * radius;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，通过管理类创建接口派生类的实例，或者销毁接口派生类的实例：</p><ul><li><code>circle_manager.h</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle_manager.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;circle.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 圆的创建工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleManager</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Circle* <span class="title">create</span><span class="params">(<span class="type">double</span> radius)</span></span>;     <span class="comment">// 创建circle实例</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">(Circle* circlePtr)</span></span>;   <span class="comment">// 销毁circle实例</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>circle_manager.cpp</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle_manager.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;circle_manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;circle_impl.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function">Circle* <span class="title">CircleManager::create</span><span class="params">(<span class="type">double</span> radius)</span> </span>&#123;</span><br><span class="line">    Circle* circlePtr = <span class="keyword">new</span> <span class="built_in">CircleImpl</span>(radius);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> circlePtr;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CircleManager::destroy</span><span class="params">(Circle* circlePtr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> circlePtr;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><ul><li>代码目录结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proj-+</span><br><span class="line">     |-inc-+</span><br><span class="line">     |     |-circle.h</span><br><span class="line">     |     |-circle_manager.h</span><br><span class="line">     |</span><br><span class="line">     |-src-+</span><br><span class="line">           |-circle_impl.h</span><br><span class="line">           |-circle_impl.cpp</span><br><span class="line">           |-circle_manager.cpp</span><br></pre></td></tr></table></figure><p>其中inc目录用于存放Circle接口类和Circle管理类的声明，src目录中存放Circle实现类CircleImpl的声明和定义、Circle管理类CircleManager的定义。</p><p>然后，可以将以上代码编译成静态库circle.lib，并和inc目录中的头文件一起提供给外部调用：</p><blockquote><ul><li><code>如何使用静态库？</code><br>外部使用者编译时，需要做如下配置：</li></ul><ul><li><p>1 把inc目录添加到“附加包含目录”中。</p></li><li><p>2 “附加依赖项”中添加circle.lib。</p></li><li><p>3 把circle.lib所在目录的路径添加到“附加库目录”中。</p></li></ul></blockquote><p>外部使用者的代码如下：</p><ul><li><code>main.cpp</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;circle_manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;circle.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Circle* circlePtr = CircleManager::<span class="built_in">create</span>(<span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; circlePtr-&gt;<span class="built_in">area</span>() &lt;&lt;endl;</span><br><span class="line">    CircleManager::<span class="built_in">destroy</span>(circlePtr);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码只提供给外部circle的接口，circle的实现完全被隐藏了起来，外部将无从知晓，外部使用者只能通过circle管理类生成circle的派生类的实例。外部使用者得到circle派生类的实例后，除了能调用接口暴露的方法area()外，其它什么也做不了，这样就完全达到了使用接口的最终目标。</p><p><code>如何编译成动态库？</code><br>首先，添加一个新的头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dll_export.h </span></span><br><span class="line"><span class="comment">// if windows .dll </span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WINDLL </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DLL_API_EXPORTS </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API __declspec(dllexport) </span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API __declspec(dllimport) </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// else if Linux or macOS .so </span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>添加此头文件后，代码可以在windows、Linux下都可编译生成动态库，只需在编译时设置不同参数就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">windows： /D <span class="string">&quot;DLL_API_EXPORTS&quot;</span> /D <span class="string">&quot;_WINDLL&quot;</span></span><br><span class="line">Linux： 不用配置额外参数</span><br><span class="line">circle.h和circle_manager.h也要做相应改动：</span><br></pre></td></tr></table></figure><p>编译完成后将生成”circle.lib“和”circle.dll“文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">proj-+</span><br><span class="line">     |-inc-+</span><br><span class="line">     |     |-circle.h</span><br><span class="line">     |     |-circle_manager.h</span><br><span class="line">     |</span><br><span class="line">     |-src-+</span><br><span class="line">     |     |-circle_impl.h</span><br><span class="line">     |     |-circle_impl.cpp</span><br><span class="line">     |     |-circle_manager.cpp</span><br><span class="line">     |</span><br><span class="line">     |-bin-+</span><br><span class="line">           |-circle.lib</span><br><span class="line">           |-circlr.dll</span><br></pre></td></tr></table></figure><p><code>如何使用动态库？</code><br>外部使用者编译时，需要做如下配置：</p><ul><li><p>1 代码中添加#pragma comment(lib,”circle.lib”)， 这里是circle.lib，不是circle.dll。</p></li><li><p>2 把inc目录添加到“附加包含目录”中。</p></li><li><p>3 附加依赖项”中添加circle.lib，这里也是circle.lib，不是circle.dll。</p></li><li><p>4 把bin目录所在路径添加到”附加库目录“中。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里有几点需要说明一下：</p><p>1、为什么CircleManager类即在提供创建实例的方法又要提供销毁实例的方法？</p><p>由于编译器的实现方式不同，dll的堆空间可能跟调用方的堆空间不同，它可能是由dll自己单独管理的，所以从dll中创建的实例，最好还是在dll中销毁。</p><p>2、对动态库的调用本文是通过隐式调用的方式完成的，对动态库的调用也可以使用显式调用的方式，但由于windows和Linux在使用显式调用时的API是不同的，不好提供统一的代码，所以本文没有举例，以后有机会再单独行文介绍。</p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><ul><li><code>Animal.h</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Animal</span>()&#123;&#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Animal</span>()&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string&amp; <span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setName</span><span class="params">(string&amp; name)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">Animal* <span class="title">creat</span><span class="params">(string&amp; name, <span class="type">int</span> age)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>RealAnimal.h</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Animal.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealAnimal</span>: <span class="keyword">public</span> Animal </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RealAnimal</span>(string&amp; name, <span class="type">int</span> age);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">RealAnimal</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="function">string&amp; <span class="title">getName</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string&amp; name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Animal* <span class="title">creat</span><span class="params">(string&amp; name, <span class="type">int</span> age)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string&amp; mName;</span><br><span class="line">    <span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>RealAnimal.cpp</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RealAnimal.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line">RealAnimal::<span class="built_in">RealAnimal</span>(string&amp; name, <span class="type">int</span> age):</span><br><span class="line">    <span class="built_in">mName</span>(name),</span><br><span class="line">    <span class="built_in">mAge</span>(age)</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">RealAnimal::~<span class="built_in">RealAnimal</span>()</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string&amp; <span class="title">RealAnimal::getName</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mName;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RealAnimal::setName</span><span class="params">(string&amp; name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mName = name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RealAnimal::getAge</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mAge;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RealAnimal::setAge</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Animal* <span class="title">creat</span><span class="params">(string&amp; name, <span class="type">int</span> age)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RealAnimal</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如前面所说，Animal* creat(string&amp; name, int age)确实只是实例化一个RealAnimal对象，返回的却是Animal接口对象，所以必须将类Animal 的析构函数声明为虚函数，不然会造成内存泄漏。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>对象接口的形式就是定义一个接口类，类内函数为纯虚函数(继承者必须实现)，放在一个接口头文件中，对外开放；然后定义一个实现上述接口的类，这个类继承了接口类，必须对类内的函数进行实现。这个外部只能看到接口头文件中内容，可以使用接口中定义的方法，但是无法修改和访问方法实现的细节。</p><h1 id="“指针实现”方式"><a href="#“指针实现”方式" class="headerlink" title="“指针实现”方式"></a>“指针实现”方式</h1><h2 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h2><ul><li><code>personImpl.h</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonImpl</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">PersonImpl</span>(string&amp; name, <span class="type">int</span> age);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">PersonImpl</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="function">string&amp; <span class="title">getName</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string&amp; name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string&amp; mName;</span><br><span class="line">    <span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>personImpl.cpp</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;personImpl.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line">PersonImpl::<span class="built_in">PersonImpl</span>(string&amp; name, <span class="type">int</span> age):<span class="built_in">mName</span>(name),<span class="built_in">mAge</span>(age)</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">PersonImpl::~<span class="built_in">PersonImpl</span>() </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string&amp; <span class="title">PersonImpl::getName</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mName;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PersonImpl::setName</span><span class="params">(string&amp; name)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mName = name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">PersonImpl::getAge</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mAge;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PersonImpl::setAge</span><span class="params">(<span class="type">int</span> age)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mAge = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>person.h</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonImpl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string&amp; name, <span class="type">int</span> age);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Person</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="function">string&amp; <span class="title">getName</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string&amp; name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function">PersonImpl * <span class="title">getImp</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    PersonImpl *mPersonImpl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>person.cpp</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;person.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;personImpl.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line">Person::<span class="built_in">Person</span>(string&amp; name, <span class="type">int</span> age):<span class="built_in">mPersonImpl</span>(<span class="keyword">new</span> <span class="built_in">PersonImpl</span>(name, age))</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;construct Person&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Person::~<span class="built_in">Person</span>() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> mPersonImpl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;deconstruct Person&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string&amp; <span class="title">Person::getName</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mPersonImpl-&gt;<span class="built_in">getName</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::setName</span><span class="params">(string&amp; name)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mPersonImpl-&gt;<span class="built_in">setName</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Person::getAge</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mPersonImpl-&gt;<span class="built_in">getAge</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::setAge</span><span class="params">(<span class="type">int</span> age)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mPersonImpl-&gt;<span class="built_in">setAge</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">PersonImpl* Person:: <span class="built_in">getImp</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> mPersonImpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>main.cpp</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;person.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;personImpl.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    string str= <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="function">Person <span class="title">person</span><span class="params">(str,<span class="number">30</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    PersonImpl *personImp = person.<span class="built_in">getImp</span>();</span><br><span class="line"> </span><br><span class="line">    string name = personImp-&gt;<span class="built_in">getName</span>();</span><br><span class="line">    <span class="type">int</span> age =personImp-&gt;<span class="built_in">getAge</span>();</span><br><span class="line">    cout&lt;&lt;name.<span class="built_in">c_str</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;age&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h2><ul><li><p><code>adas_app.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdasApp</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// json字符串</span></span><br><span class="line">    <span class="built_in">AdasApp</span>(<span class="type">const</span> std::string &amp;config);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AdasApp</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Impl</span>;</span><br><span class="line">    std::unique_ptr&lt;Impl&gt; impl_<span class="comment">/* = nullptr*/</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>adas_app.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdasApp</span>::Impl <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 解析得到前向目标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">std::vector&lt;ac::ObstacleInfo&gt; <span class="title">DecodeObjects</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *buffer, <span class="type">uint32_t</span> size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ...具体实现...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 解析得到车道线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">std::vector&lt;ac::CurveInfo&gt; <span class="title">DecodeCurves</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *buffer, <span class="type">uint32_t</span> size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ...具体实现...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Impl</span>(<span class="type">const</span> std::string &amp;config)</span><br><span class="line">    &#123;</span><br><span class="line">        ...具体实现...</span><br><span class="line">        <span class="built_in">DecodeObjects</span>();</span><br><span class="line">        <span class="built_in">DecodeCurves</span>();</span><br><span class="line">    &#125;</span><br><span class="line">      ~<span class="built_in">Impl</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        ...具体实现...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AdasApp</span>(<span class="type">const</span> std::string &amp;config)</span><br><span class="line">    : <span class="built_in">impl_</span>(<span class="keyword">new</span> <span class="built_in">Impl</span>(config))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">AdasApp</span>()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>main.cpp</code></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="function">AdasApp <span class="title">obj</span><span class="params">(ac::LoadTextFile(config))</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子使用了智能指针实现adad的实现类<code>class Impl;</code> <code>std::unique_ptr&lt;Impl&gt; impl_/* = nullptr*/;</code>在adas_app.h中看不到真正的实现，但实际声明了一个智能指针<code>impl_</code>，在adas_app.cpp中将该指针指针指向了一个new对象<code>impl_(new Impl(config)</code>，并将其new对象的构造函数<code>Impl&#123;&#125;</code>进行了真正的实现。</p><hr><blockquote><p>版权声明：本文为CSDN博主「netyeaxi」的原创文章，遵循CC4.0BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/netyeaxi/article/details/80887646">https://blog.csdn.net/netyeaxi/article/details/80887646</a><br>原文链接：<a href="https://blog.csdn.net/netyeaxi/article/details/80724557">https://blog.csdn.net/netyeaxi/article/details/80724557</a><br>原文链接：<a href="https://blog.csdn.net/qq_20853741/article/details/121244189">https://blog.csdn.net/qq_20853741/article/details/121244189</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 接口定义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓OpenGL渲染画面闪烁原因分析</title>
      <link href="/2023/03/16/%E5%AE%89%E5%8D%93OpenGL%E6%B8%B2%E6%9F%93%E7%94%BB%E9%9D%A2%E9%97%AA%E7%83%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/"/>
      <url>/2023/03/16/%E5%AE%89%E5%8D%93OpenGL%E6%B8%B2%E6%9F%93%E7%94%BB%E9%9D%A2%E9%97%AA%E7%83%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>1.硬件接触不良<br>2.opengl双缓存未开启<br>3.opengl双缓存开启但离屏数据为更新<br>4.相机数据被覆盖<br>4.1相机数据格式不对<br>4.2申请内存与访问内存越界问题</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 待整理android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> opengl </tag>
            
            <tag> 画面闪烁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用指南</title>
      <link href="/2023/02/28/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2023/02/28/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="git-config-设置用户名称和邮件地址"><a href="#git-config-设置用户名称和邮件地址" class="headerlink" title="git config 设置用户名称和邮件地址"></a><code>git config</code> 设置用户名称和邮件地址</h2><ul><li>设置用户名称<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;goto456&quot;</span></span><br></pre></td></tr></table></figure></li><li>设置邮件地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;goto456@126.com&quot;</span> </span><br></pre></td></tr></table></figure></li><li>列出当前Git所有的配置信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list </span><br></pre></td></tr></table></figure></li></ul><h2 id="git-init-初始化本地仓库"><a href="#git-init-初始化本地仓库" class="headerlink" title="git init 初始化本地仓库"></a><code>git init</code> 初始化本地仓库</h2><p>获取一个 Git 仓库有两种方法：<br>1.本地初始化一个仓库<br>2.从远程克隆一个仓库到本地<br>对于第1种方式，如果想对本地现有的一个项目用 Git 来管理，可以直接进入该项目的目录下执行如下命令，就可以将其初始化成一个 Git 仓库了。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="git-clone-克隆远程仓库到本地"><a href="#git-clone-克隆远程仓库到本地" class="headerlink" title="git clone 克隆远程仓库到本地"></a><code>git clone</code> 克隆远程仓库到本地</h2><ul><li>通过ssh方式克隆<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:goto456/leetcode.git</span><br></pre></td></tr></table></figure></li><li>通过https方式克隆<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/goto456/leetcode.git </span><br></pre></td></tr></table></figure><blockquote><p>https方式：不管是谁，只要拿到该项目的 url 可以随便 clone，但是在 push 到远程的时候需要验证用户名和密码；<br>ssh方式：需要现将你电脑的SSH key（SSH公钥）添加到GitHub（或者其他代码托管网站）上，这样在 clone 项目和 push 项目到远程时都不需要输入用户名和密码。</p></blockquote></li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git%E6%95%99%E7%A8%8B.pdf">参考文档</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的lambda表达式使用方法</title>
      <link href="/2023/02/14/C++%E7%9A%84lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/14/C++%E7%9A%84lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数参数传递 </tag>
            
            <tag> lambda表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码规范</title>
      <link href="/2023/02/14/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/2023/02/14/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="C-编码规范"><a href="#C-编码规范" class="headerlink" title="C++编码规范"></a>C++编码规范</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%2B%2B%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C++编码规范</a></p><blockquote><p>C++编码规范.pdf的升级版本</p></blockquote><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%2B%2B%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83C1.pdf">C++编码规范.pdf的升级版本</a></p><h1 id="C编码规范"><a href="#C编码规范" class="headerlink" title="C编码规范"></a>C编码规范</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/%E5%B5%8C%E5%85%A5%E5%BC%8FC%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C编码规范</a></p><h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/Java%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C#编码规范</a></p><h1 id="C-编码规范-1"><a href="#C-编码规范-1" class="headerlink" title="C#编码规范"></a>C#编码规范</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%E4%BA%95%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83C1.pdf">C#编码规范</a></p><h1 id="google编程风格指南"><a href="#google编程风格指南" class="headerlink" title="google编程风格指南"></a>google编程风格指南</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/google%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97.pdf">google编程风格指南</a></p><h1 id="移动机器人开发代码规范说明书"><a href="#移动机器人开发代码规范说明书" class="headerlink" title="移动机器人开发代码规范说明书"></a>移动机器人开发代码规范说明书</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">移动机器人开发代码规范说明书</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编码规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> java </tag>
            
            <tag> C </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity和SurfaceView的生命周期</title>
      <link href="/2023/02/10/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2023/02/10/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>当用户浏览、退出和返回到您的应用时，您应用中的 Activity 实例会在其生命周期的不同状态间转换。Activity 类会提供许多回调，这些回调会让 Activity 知晓某个状态已经更改：系统正在创建、停止或恢复某个 Activity，或者正在销毁该 Activity 所在的进程。</p><p>在生命周期回调方法中，您可以声明用户离开和再次进入 Activity 时 Activity 的行为方式。例如，如果您正构建流媒体视频播放器，当用户切换至另一应用时，您可能要暂停视频或终止网络连接。当用户返回时，您可以重新连接网络并允许用户从同一位置继续播放视频。换言之，每个回调都支持您执行适合给定状态变更的特定作业。在合适的时间执行正确的作业，并妥善处理转换，这将提升应用的稳健性和性能。例如，良好的生命周期回调实现有助于防止应用出现以下问题：</p><ul><li>当用户在使用应用时接听来电，或切换至另一应用时崩溃。</li><li>当用户未主动使用它时，消耗宝贵的系统资源。</li><li>当用户离开应用并在稍后返回时，丢失用户的进度。</li><li>当屏幕在横向和纵向之间旋转时，崩溃或丢失用户的进度。</li></ul><h1 id="Activity-生命周期概念"><a href="#Activity-生命周期概念" class="headerlink" title="Activity 生命周期概念"></a>Activity 生命周期概念</h1><p>为了在 Activity 生命周期的各个阶段之间导航转换，Activity 类提供六个核心回调：onCreate()、onStart()、onResume()、onPause()、onStop() 和 onDestroy()。当 Activity 进入新状态时，系统会调用其中每个回调。</p><p>下图是对此范例的直观展现。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_surfaceView.png">  </p><p>当用户开始离开 Activity 时，系统会调用方法来销毁该 Activity。在某些情况下，此销毁只是部分销毁；Activity 仍然驻留在内存中（例如当用户切换至另一应用时），并且仍然可以返回到前台。如果用户返回到该 Activity，Activity 会从用户离开时的位置继续运行。除了少数例外，应用在后台运行时会受到限制，无法启动 Activity。</p><p>系统终止给定进程及其中 Activity 的可能性取决于当时 Activity 的状态。Activity 状态和从内存中弹出 会更详细地介绍状态与弹出漏洞之间的关系。</p><p>根据 Activity 的复杂程度，您可能不需要实现所有生命周期方法。但是，请务必了解每个方法，并实现能够确保应用按用户预期方式运行的方法，这非常重要。</p><blockquote><p>具体细节参考：<a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java">https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java</a></p></blockquote><h1 id="Activity和SurfaceView的生命周期"><a href="#Activity和SurfaceView的生命周期" class="headerlink" title="Activity和SurfaceView的生命周期"></a>Activity和SurfaceView的生命周期</h1><ul><li><p>程序打开<br>Activity 调用顺序:<code>onCreate()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceCreated()</code>-&gt;<code>surfaceChanged()</code>  </p></li><li><p>程序关闭（按 BACK 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code>-&gt;<code>onDestory()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p></li><li><p>程序切到后台（按 HOME 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p></li><li><p>程序切到前台<br>Activity 调用顺序: <code>onRestart()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceChanged()</code>-&gt;<code>surfaceCreated()</code>  </p></li><li><p>屏幕锁定（挂断键或锁定屏幕）<br>Activity 调用顺序: <code>onPause()</code><br>SurfaceView 什么方法都不调用  </p></li><li><p>屏幕解锁<br>Activity 调用顺序:<code>onResume()</code><br>SurfaceView 什么方法都不调用</p></li></ul><blockquote><p>总结SurfaceView在页面可见或者不可见时触发  </p></blockquote><p>示例图如下所示:  </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_lifecycle.png"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> activity </tag>
            
            <tag> surfaceView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装opencv与opencv_contrib</title>
      <link href="/2023/01/31/ubuntu%E5%AE%89%E8%A3%85opencv%E4%B8%8Eopencv_contrib/"/>
      <url>/2023/01/31/ubuntu%E5%AE%89%E8%A3%85opencv%E4%B8%8Eopencv_contrib/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential  </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake git libgtk2<span class="number">.0</span>-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev  </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394<span class="number">-22</span>-dev  </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential qt5-<span class="keyword">default</span> ccache libv4l-dev libavresample-dev  libgphoto2-dev libopenblas-base libopenblas-dev doxygen  openjdk<span class="number">-8</span>-jdk pylint libvtk6-dev</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pkg-config</span><br></pre></td></tr></table></figure><h2 id="下载源文件"><a href="#下载源文件" class="headerlink" title="下载源文件"></a>下载源文件</h2><p><a href="https://github.com/opencv/opencv">opencv</a><br><a href="https://github.com/opencv/opencv_contrib">opencv_contrib</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip opencv-x.x.x.zip</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip opencv_contrib-x.x.x.zip</span><br></pre></td></tr></table></figure><h2 id="将opencv-contrib移动到opencv目录下，同时在该目录下新建一个文件夹build"><a href="#将opencv-contrib移动到opencv目录下，同时在该目录下新建一个文件夹build" class="headerlink" title="将opencv_contrib移动到opencv目录下，同时在该目录下新建一个文件夹build"></a>将opencv_contrib移动到opencv目录下，同时在该目录下新建一个文件夹build</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r opencv_contrib-x.x.x opencv-x.x.x  </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> opencv-x.x.x</span><br><span class="line"><span class="built_in">mkdir</span> build                             </span><br></pre></td></tr></table></figure><h2 id="现在进入到opencv-x-x-x目录下，查看文件结构"><a href="#现在进入到opencv-x-x-x目录下，查看文件结构" class="headerlink" title="现在进入到opencv-x.x.x目录下，查看文件结构"></a>现在进入到opencv-x.x.x目录下，查看文件结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><blockquote><p>3rdparty cmake data LICENSE platforms apps CMakeLists.txt doc modules README.md build CONTRIBUTING.md include pencv_contrib-x.x.x samples</p></blockquote><h2 id="进入build目录，并且执行cmake生成makefile文件"><a href="#进入build目录，并且执行cmake生成makefile文件" class="headerlink" title="进入build目录，并且执行cmake生成makefile文件"></a>进入build目录，并且执行cmake生成makefile文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build  </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=/home/files/opencv-x.x.x/opencv_contrib-x.x.x/modules/ .. </span><br></pre></td></tr></table></figure><blockquote><p>注意：OPENCV_EXTRA_MODULES_PATH就是你 opencv_contrib-3.3.1下面的modules目录，请按照自己的实际目录修改地址。<br>接下来就是漫长的等待了…<br>生成完毕提示：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--   Install path:                  /usr/local</span><br><span class="line">-- </span><br><span class="line">--   cvconfig.h is <span class="keyword">in</span>:              /home/files/opencv-x.x.x/build</span><br><span class="line">-- -----------------------------------------------------------------</span><br><span class="line">-- </span><br><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /home/files/opencv-x.x.x/build</span><br></pre></td></tr></table></figure><h2 id="在cmake成功之后，就可以在build文件下make了"><a href="#在cmake成功之后，就可以在build文件下make了" class="headerlink" title="在cmake成功之后，就可以在build文件下make了"></a>在cmake成功之后，就可以在build文件下make了</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>接下来就是更漫长的等待 … 具体时间因人而异</p><h2 id="链接库共享"><a href="#链接库共享" class="headerlink" title="链接库共享"></a>链接库共享</h2><p>编译安装完毕之后，为了让你的链接库被系统共享，让编译器发现，需要执行管理命令ldconfig：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig -v  </span><br></pre></td></tr></table></figure><h1 id="bug解决"><a href="#bug解决" class="headerlink" title="bug解决"></a>bug解决</h1><h2 id="解决编译opencv时，卡在IPPICV"><a href="#解决编译opencv时，卡在IPPICV" class="headerlink" title="解决编译opencv时，卡在IPPICV"></a>解决编译opencv时，卡在IPPICV</h2><h3 id="手动下载缺少文件"><a href="#手动下载缺少文件" class="headerlink" title="手动下载缺少文件"></a>手动下载缺少文件</h3><p><a href="https://github.com/geiyiren/MyBlog/blob/main/source/_posts/ubuntu%E5%AE%89%E8%A3%85opencv%E4%B8%8Eopencv_contrib/.cache/ippicv/7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz">ippicv_2020_lnx_intel64_20191018_general.tgz</a></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit opencv-x.x.x/3rdparty/ippicv.cmake</span><br></pre></td></tr></table></figure><p>找到<code>&quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/$&#123;IPPICV_COMMIT&#125;/ippicv/&quot;</code></p><p>将其改为ippicv_2020_lnx_intel64_20191018_general.tgz保存的目录。比如：<code>&quot;file:///home/downloads/&quot;</code>,格式为<code>&quot;file://路径&quot;</code><br>最后重新执行编译命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure><h2 id="终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题"><a href="#终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题" class="headerlink" title="终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题"></a>终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题</h2><p>卡在这里的原因是因为在cmake编译的时候没有下载成功，这里使用手动下载与替换进行补救</p><h2 id="手动下载缺少文件-1"><a href="#手动下载缺少文件-1" class="headerlink" title="手动下载缺少文件"></a>手动下载缺少文件</h2><p><a href="https://pan.baidu.com/s/1OrfTdsNczKlNvJPg_gD0VA?pwd=1633">百度网盘:ubuntu安装opencv与opencv_contrib</a></p><h2 id="替换本地文件"><a href="#替换本地文件" class="headerlink" title="替换本地文件"></a>替换本地文件</h2><p>在<code>opencv源文件目录</code>下找到隐藏文件夹<code>.cache</code>，然后分别替换其中的文件。注意下载的文件中每个对应文件的开头字符串为临时校验码，需要以自己本次安装时生成的校验码为准。例如<code>7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz</code>中<code>7421de0095c7a39162ae13a6098782f9</code>为安装校验码，这个在替换文件时候需要改为本次安装自动生成的校验码。</p><h2 id="cache文件目录"><a href="#cache文件目录" class="headerlink" title=".cache文件目录"></a>.cache文件目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.cache</span><br><span class="line">├── data</span><br><span class="line">│   └── 7505c44ca4eb54b4ab1e4777cb96ac05-face_landmark_model.dat</span><br><span class="line">├── ippicv</span><br><span class="line">│   └── 7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz</span><br><span class="line">└── xfeatures2d</span><br><span class="line">    ├── boostdesc</span><br><span class="line">    │   ├── 0ae0675534aa318d9668f2a179c2a052-boostdesc_lbgm.i</span><br><span class="line">    │   ├── 0ea90e7a8f3f7876d450e4149c97c74f-boostdesc_bgm.i</span><br><span class="line">    │   ├── 202e1b3e9fec871b04da31f7f016679f-boostdesc_binboost_064.i</span><br><span class="line">    │   ├── 232c966b13651bd0e46a1497b0852191-boostdesc_bgm_bi.i</span><br><span class="line">    │   ├── 324426a24fa56ad9c5b8e3e0b3e5303e-boostdesc_bgm_hd.i</span><br><span class="line">    │   ├── 98ea99d399965c03d555cef3ea502a0b-boostdesc_binboost_128.i</span><br><span class="line">    │   └── e6dcfa9f647779eb1ce446a8d759b6ea-boostdesc_binboost_256.i</span><br><span class="line">    └── vgg</span><br><span class="line">        ├── 151805e03568c9f490a5e3a872777b75-vgg_generated_120.i</span><br><span class="line">        ├── 7126a5d9a8884ebca5aea5d63d677225-vgg_generated_64.i</span><br><span class="line">        ├── 7cd47228edec52b6d82f46511af325c5-vgg_generated_80.i</span><br><span class="line">        └── e8d0dcd54d1bcfdc29203d011a797179-vgg_generated_48.i</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_39936818/article/details/104951448">一次性解决opencv源码安装文件下载问题：ippicv_2017u3_lnx, face_landmark_model.dat, tiny-dnn</a><br><a href="https://blog.csdn.net/weixin_45846977/article/details/112396739">ubuntu安装opencv问题解决——缺少boostdesc_bgm.i文件</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 待整理opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> opencv </tag>
            
            <tag> opencv_contrib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客常用模板</title>
      <link href="/2023/01/31/%E5%86%99%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/01/31/%E5%86%99%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="插入思维导图"><a href="#插入思维导图" class="headerlink" title="插入思维导图"></a>插入思维导图</h1><p>基于百度脑图的开源库 kityminder 很不错，实现了markdown文档中使用思维导图的方法。使用 Hexo 的 pullquote 将思维导图的内容包裹起来，mindmap 是思维导图渲染的标志，尺寸有三种规格：mindmap-sm、mindmap-md 和 mindmap-lg。<br>思维导图的内容和层级关系通过无序列表表示，支持基本的文字和超链接。举个例子，撰写文章时在需要的位置添加如下内容:  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line"><span class="bullet">-</span> [<span class="string">在 Hexo 中使用思维导图</span>](<span class="link">https://hunterx.xyz/use-mindmap-in-hexo.html</span>)</span><br><span class="line"><span class="bullet">  -</span> 前言</span><br><span class="line"><span class="bullet">  -</span> 操作指南</span><br><span class="line"><span class="bullet">    -</span> 准备需要的文件</span><br><span class="line"><span class="bullet">    -</span> 为主题添加 CSS/JS 文件</span><br><span class="line"><span class="bullet">  -</span> 使用方法</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><p>效果如下：  </p><blockquote class="pullquote mindmap mindmap-md"><ul><li><a href="https://hunterx.xyz/use-mindmap-in-hexo.html">在 Hexo 中使用思维导图</a><ul><li>前言</li><li>操作指南<ul><li>准备需要的文件</li><li>为主题添加 CSS&#x2F;JS 文件</li></ul></li><li>使用方法</li></ul></li></ul></blockquote><h1 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/用户名/仓库名称/仓库下的图像路径</span>)</span><br></pre></td></tr></table></figure><ul><li>例如：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/车辆动态辅助轨迹线生成方法8.png</span>)  </span><br></pre></td></tr></table></figure><h1 id="插入pdf"><a href="#插入pdf" class="headerlink" title="插入pdf"></a>插入pdf</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;仓库路径&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> <span class="attr">type</span>=<span class="string">&quot;application/pdf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;仓库下pdf路径&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>例如：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;https://github.com/geiyiren/MyBlogFile1/blob/pdf/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> <span class="attr">type</span>=<span class="string">&quot;application/pdf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;git%E6%95%99%E7%A8%8B.pdf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上述方法适用用私人github仓库中的pdf文件；如果插入其他链接直达的pdf文档，可以使用：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf PDF直达链接 %&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc申请内存访问时容易出现的访问越界问题</title>
      <link href="/2022/12/15/malloc%E7%94%B3%E8%AF%B7%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E6%97%B6%E5%AE%B9%E6%98%93%E5%87%BA%E7%8E%B0%E7%9A%84%E8%AE%BF%E9%97%AE%E8%B6%8A%E7%95%8C%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/15/malloc%E7%94%B3%E8%AF%B7%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E6%97%B6%E5%AE%B9%E6%98%93%E5%87%BA%E7%8E%B0%E7%9A%84%E8%AE%BF%E9%97%AE%E8%B6%8A%E7%95%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="malloc相关"><a href="#malloc相关" class="headerlink" title="malloc相关"></a>malloc相关</h1><h2 id="malloc申请内存访问bug"><a href="#malloc申请内存访问bug" class="headerlink" title="malloc申请内存访问bug"></a>malloc申请内存访问bug</h2><ul><li>在访问malloc申请的内存时，如果访问越界时不会提示错误，而是继续操作错误的内存块，这一类的错误较为隐秘。</li><li>例如：在构建图像变换的map映射表时，申请存放map映射关系的内存块的大小并不是输出图像对应的大小，而是输出图像大小的2倍，因此此时存储的是像素位置(x,y)的映射关系。  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建4路YUV鱼眼图像去畸变映射关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dist2undist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> point_u_tmp[<span class="number">2</span>], point_d_tmp[<span class="number">2</span>];</span><br><span class="line">    <span class="type">float</span> sf = <span class="number">1.5</span>;</span><br><span class="line">    <span class="type">int</span> img_out_height = <span class="number">720</span> * img_out_h_scale;</span><br><span class="line">    <span class="type">int</span> img_out_width = <span class="number">1280</span> * img_out_w_scale;</span><br><span class="line">    <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;dist2undist begin !,img_out size(%d,%d)&quot;</span>, img_out_height, img_out_width);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt; NUM_CAMERAS; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 这里就是bug所在</span></span><br><span class="line">        undist_map[index] = (<span class="type">float</span> *)<span class="built_in">malloc</span>(undistView_width * undistView_height * <span class="number">3</span> / <span class="number">2</span> * <span class="number">2</span> * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (undist_map[index] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;undist_map malloc failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; img_out_height; i += <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; img_out_width; j += <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                point_u_tmp[<span class="number">0</span>] = j / img_out_w_scale;</span><br><span class="line">                point_u_tmp[<span class="number">1</span>] = i / img_out_h_scale;</span><br><span class="line">                <span class="built_in">LDC_UndistToDistExt</span>(&amp;ldc[<span class="number">0</span>], point_u_tmp, point_d_tmp, sf);</span><br><span class="line"></span><br><span class="line">                undist_map[index][(i * img_out_width + j) * <span class="number">2</span>] = point_d_tmp[<span class="number">0</span>] * img_in_w_scale;</span><br><span class="line">                undist_map[index][(i * img_out_width + j) * <span class="number">2</span> + <span class="number">1</span>] = point_d_tmp[<span class="number">1</span>] * img_in_h_scale;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">int</span>(j % <span class="number">2</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    undist_map[index][(i / <span class="number">2</span> * img_out_width + j + img_out_width * img_out_height) * <span class="number">2</span>] = <span class="built_in">int</span>(point_d_tmp[<span class="number">0</span>] * img_in_w_scale / <span class="number">2</span>) * <span class="number">2</span>;</span><br><span class="line">                    undist_map[index][(i / <span class="number">2</span> * img_out_width + j + img_out_width * img_out_height) * <span class="number">2</span> + <span class="number">1</span>] = <span class="built_in">int</span>(point_d_tmp[<span class="number">1</span>] * img_in_h_scale / <span class="number">2</span>) + <span class="number">720</span> * img_in_h_scale;</span><br><span class="line">                    undist_map[index][(i / <span class="number">2</span> * img_out_width + j + img_out_width * img_out_height + <span class="number">1</span>) * <span class="number">2</span>] = <span class="built_in">int</span>(point_d_tmp[<span class="number">0</span>] * img_in_w_scale / <span class="number">2</span>) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">                    undist_map[index][(i / <span class="number">2</span> * img_out_width + j + img_out_width * img_out_height + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>] = <span class="built_in">int</span>(point_d_tmp[<span class="number">1</span>] * img_in_h_scale / <span class="number">2</span>) + <span class="number">720</span> * img_in_h_scale;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果 #18 行中申请内存为:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">undist_map[index] = (<span class="type">float</span> *)<span class="built_in">malloc</span>(undistView_width * undistView_height * <span class="number">3</span> / <span class="number">2</span> * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br></pre></td></tr></table></figure>那么，后面构建map映射关系时并不会出现越界访问提示，甚至后面如果不再申请内存块的情况下，继续越界访问undist_map中的内容也不会报错；但是，如果后面继续申请内存块来使用的时候，后续的内存块可能就会和undist_map内存冲突。</li></ul><hr><p><font color=Red><strong>总结</strong></font><br>使用malloc申请内存并访问时，注意访问是否越界，且访问越界不报错。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> malloc </tag>
            
            <tag> 内存访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android弹窗界面设置方法</title>
      <link href="/2022/12/14/android%E5%BC%B9%E7%AA%97%E7%95%8C%E9%9D%A2%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>/2022/12/14/android%E5%BC%B9%E7%AA%97%E7%95%8C%E9%9D%A2%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h1><p>点击主界面的一个按钮，然后跳转另一个设置界面，进行参数设置，包括：参数输入、开关按钮、保存、退出等功能。界面的布局采用表格布局，平均分布各个行列。示例代码如下所示。</p><h1 id="MainActivity-java示例"><a href="#MainActivity-java示例" class="headerlink" title="MainActivity.java示例"></a>MainActivity.java示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主界面按钮定义</span></span><br><span class="line"><span class="keyword">private</span> ImageButton mImage_set_btn;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主界面按钮事件</span></span><br><span class="line"><span class="comment">// R.id.image_set_btn为主界面按钮ID</span></span><br><span class="line">mImage_set_btn = (ImageButton) findViewById(R.id.image_set_btn);</span><br><span class="line">mImage_set_btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">LayoutInflater</span> <span class="variable">layoutInflater</span> <span class="operator">=</span> (LayoutInflater)getBaseContext().getSystemService(LAYOUT_INFLATER_SERVICE);</span><br><span class="line"><span class="comment">//R.id.avm_parm_view为跳转界面ID（android:id=&quot;@+id/avm_parm_view&quot;）</span></span><br><span class="line"><span class="type">View</span> <span class="variable">popupView</span> <span class="operator">=</span> layoutInflater.inflate(R.layout.layout_avm_parm, (ViewGroup)findViewById(R.id.avm_parm_view));</span><br><span class="line">mPopupWindow_register = <span class="keyword">new</span> <span class="title class_">PopupWindow</span>(popupView, WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT, <span class="literal">true</span>);</span><br><span class="line">mPopupWindow_register.setTouchable(<span class="literal">true</span>);</span><br><span class="line">mPopupWindow_register.setOutsideTouchable(<span class="literal">true</span>);</span><br><span class="line">mPopupWindow_register.setBackgroundDrawable(<span class="keyword">new</span> <span class="title class_">BitmapDrawable</span>(getResources(), (Bitmap) <span class="literal">null</span>));</span><br><span class="line">mPopupWindow_register.showAsDropDown(view);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------ 获取输入控件的输入内容 ------</span></span><br><span class="line"><span class="comment">//车长</span></span><br><span class="line">editText_car_length = (EditText) mPopupWindow_register.getContentView().findViewById(R.id.EditText_car_length);</span><br><span class="line"><span class="comment">//车宽</span></span><br><span class="line">editText_car_width = (EditText) mPopupWindow_register.getContentView().findViewById(R.id.EditText_car_width);</span><br><span class="line"><span class="comment">//前悬</span></span><br><span class="line">editText_suspension_front = (EditText) mPopupWindow_register.getContentView().findViewById(R.id.EditText_suspension_front);</span><br><span class="line"><span class="comment">//后悬</span></span><br><span class="line">editText_suspension_back = (EditText) mPopupWindow_register.getContentView().findViewById(R.id.EditText_suspension_back);</span><br><span class="line"><span class="comment">//保存按钮</span></span><br><span class="line">delok_btn = popupView.findViewById(R.id.avm_parameter_save);</span><br><span class="line"><span class="comment">//返回按钮</span></span><br><span class="line">delcancel_btn = popupView.findViewById(R.id.avm_parameter_return);</span><br><span class="line"><span class="comment">//车道线开关</span></span><br><span class="line">mTrajectory_Switch=popupView.findViewById(R.id.TrajectoryLine_Switch);</span><br><span class="line"><span class="comment">//BSD开关</span></span><br><span class="line">mBSD_Switch=popupView.findViewById(R.id.BSD_Switch);</span><br><span class="line"><span class="comment">//亮度均衡开关</span></span><br><span class="line">mBE_Switch=popupView.findViewById(R.id.BE_Switch);</span><br><span class="line"><span class="comment">// 获取默认开关参数</span></span><br><span class="line"><span class="type">carParameter</span> <span class="variable">carParm_history</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">carParameter</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">carParm_history=avmSetParm.readJson();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------ 设置输入控件的显示历史数据 ------</span></span><br><span class="line">editText_car_length.setText(String.valueOf(carParm_history.car_length));</span><br><span class="line">editText_car_width.setText(String.valueOf(carParm_history.car_width));</span><br><span class="line">editText_suspension_front.setText(String.valueOf(carParm_history.suspension_front));</span><br><span class="line">editText_suspension_back.setText(String.valueOf(carParm_history.suspension_back));</span><br><span class="line"><span class="keyword">switch</span> (carParm_history.on_TrajectoryLine)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">mTrajectory_Switch.setChecked(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">mTrajectory_Switch.setChecked(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (carParm_history.on_BSD)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">mBSD_Switch.setChecked(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">mBSD_Switch.setChecked(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (carParm_history.on_Bright)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">mBE_Switch.setChecked(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">mBE_Switch.setChecked(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------ 设置保存按钮触发事件 ------</span></span><br><span class="line">delok_btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">car_length</span> <span class="operator">=</span> editText_car_length.getEditableText().toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">car_width</span> <span class="operator">=</span> editText_car_width.getEditableText().toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">suspension_front</span> <span class="operator">=</span> editText_suspension_front.getEditableText().toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">suspension_back</span> <span class="operator">=</span> editText_suspension_back.getEditableText().toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">carParameter</span> <span class="variable">carParm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">carParameter</span>();</span><br><span class="line"></span><br><span class="line">Log.d(<span class="string">&quot;filename_avm_set_json&quot;</span>,<span class="string">&quot;filename_avm_set_json&quot;</span>+avmSetParm.jsonFileName);</span><br><span class="line">carParm.car_length=Integer.parseInt(car_length);</span><br><span class="line">carParm.car_width=Integer.parseInt(car_width);</span><br><span class="line">carParm.suspension_front=Integer.parseInt(suspension_front);</span><br><span class="line">carParm.suspension_back=Integer.parseInt(suspension_back);</span><br><span class="line">carParm.on_BSD=mView.mBSDViewID;</span><br><span class="line">carParm.on_Bright=mView.mBrightID;</span><br><span class="line">carParm.on_TrajectoryLine=mView.mTrajectoryLineViewID;</span><br><span class="line">Log.d(TAG, <span class="string">&quot;car_length&quot;</span>+carParm.car_length);</span><br><span class="line">Log.d(TAG, <span class="string">&quot;car_width&quot;</span>+carParm.car_width);</span><br><span class="line">Log.d(TAG, <span class="string">&quot;suspension_front&quot;</span>+carParm.suspension_front);</span><br><span class="line">Log.d(TAG, <span class="string">&quot;suspension_back&quot;</span>+carParm.suspension_back);</span><br><span class="line">Log.d(TAG, <span class="string">&quot;on_BSD&quot;</span>+carParm.on_BSD);</span><br><span class="line">Log.d(TAG, <span class="string">&quot;on_Bright&quot;</span>+carParm.on_Bright);</span><br><span class="line">Log.d(TAG, <span class="string">&quot;on_TrajectoryLine&quot;</span>+carParm.on_TrajectoryLine);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">avmSetParm.writeJson(carParm);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">mPopupWindow_register.dismiss();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------ 设置按钮触发事件 ------</span></span><br><span class="line"><span class="comment">//车道线</span></span><br><span class="line">mTrajectory_Switch.setOnCheckedChangeListener(<span class="keyword">new</span> <span class="title class_">CompoundButton</span>.OnCheckedChangeListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="type">boolean</span> isChecked)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (buttonView.isChecked())&#123;</span><br><span class="line">mView.mTrajectoryLineViewID=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">mView.mTrajectoryLineViewID=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">mView.avmTrajectoryLineView();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//BSD</span></span><br><span class="line">mBSD_Switch.setOnCheckedChangeListener(<span class="keyword">new</span> <span class="title class_">CompoundButton</span>.OnCheckedChangeListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="type">boolean</span> isChecked)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (buttonView.isChecked())&#123;</span><br><span class="line">mView.mBSDViewID=<span class="number">1</span>;</span><br><span class="line">avmStartBSD();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">mView.mBSDViewID=<span class="number">0</span>;</span><br><span class="line">avmStopBSD();</span><br><span class="line">&#125;</span><br><span class="line">mView.avmBSDView();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//亮度均衡</span></span><br><span class="line">mBE_Switch.setOnCheckedChangeListener(<span class="keyword">new</span> <span class="title class_">CompoundButton</span>.OnCheckedChangeListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="type">boolean</span> isChecked)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (buttonView.isChecked())&#123;</span><br><span class="line">mView.mBrightID=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">mView.mBrightID=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">mView.avmBrightView();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">delcancel_btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">mPopupWindow_register.dismiss();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主界面xml文件"><a href="#主界面xml文件" class="headerlink" title="主界面xml文件"></a>主界面xml文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawer_layout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/layout_root&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@android:color/black&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_no_camera&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/no_camera_info&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#FFFF0000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;36sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/settings_layout&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SurfaceView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/surface_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;1dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;1dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;1dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_set_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;420dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/btn_bg_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_set&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_3d_360_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/btn_bg_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_3d_360_normal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_front_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/btn_bg_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_3d_front_normal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_back_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;180dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/btn_bg_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_3d_back_normal&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--       android:visibility=&quot;gone&quot; /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_left_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;240dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/btn_bg_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_3d_left_normal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_right_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;300dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/btn_bg_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_3d_right_normal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_narrow_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;360dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/btn_bg_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_narrow_normal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_3d_normal_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/btn_bg_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_3d_normal&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="跳转界面xml文件"><a href="#跳转界面xml文件" class="headerlink" title="跳转界面xml文件"></a>跳转界面xml文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/avm_parm_view&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:visibility</span>=<span class="string">&quot;visible&quot;</span>&gt;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 表格1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TableLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#2B2B2B&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:stretchColumns</span>=<span class="string">&quot;1,3&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/Text_car_width&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;  车辆宽度:  &quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/EditText_car_width&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_column</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#CCCFD1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:hint</span>=<span class="string">&quot;毫米/mm&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:inputType</span>=<span class="string">&quot;number&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:selectAllOnFocus</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/Text_suspension_front&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;  车前悬挂:  &quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/EditText_suspension_front&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_column</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#CCCFD1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:hint</span>=<span class="string">&quot;毫米/mm&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:inputType</span>=<span class="string">&quot;number&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:selectAllOnFocus</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/Text_car_length&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;  车辆长度:  &quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/EditText_car_length&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_column</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#CCCFD1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:hint</span>=<span class="string">&quot;毫米/mm&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:inputType</span>=<span class="string">&quot;number&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:selectAllOnFocus</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/Text_suspension_back&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;  车后悬挂:  &quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/EditText_suspension_back&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_column</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#CCCFD1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:hint</span>=<span class="string">&quot;毫米/mm&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:inputType</span>=<span class="string">&quot;number&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:selectAllOnFocus</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/Text_BE_Switch&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;  亮度均衡:  &quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Switch</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/BE_Switch&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/Text_BSD_Switch&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;  BSD开关:  &quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Switch</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/BSD_Switch&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/Text_TrajectoryLine_Switch&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;  动态辅助线:  &quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color_ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Switch</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/TrajectoryLine_Switch&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/avm_parameter_save&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;保存&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/avm_parameter_return&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;返回&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 安卓弹窗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI中成员变量和方法的相互访问</title>
      <link href="/2022/12/14/JNI%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE/"/>
      <url>/2022/12/14/JNI%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JNI"><a href="#什么是JNI" class="headerlink" title="什么是JNI"></a>什么是JNI</h1><p>说明：JNI 是 Java Native Interface 的缩写，它提供了若干的API实现了Java和其他语言的通信（主要是C&amp;C++，但是它并不妨碍你使用其他编程语言，只要调用约定受支持就可以了）。从Java1.1开始，JNI 标准成为 java 平台的一部分，它允许 Java 代码和其他语言写的代码进行交互。总的来说，JNI 就是一个允许Java语言和其他编程语言（主要是C&#x2F;C++）通信的接口。</p><p>原因：C&#x2F;C++ 是系统级的编程语言，可以用来开发任何和系统相关的程序和类库，效率也很高。而 Java 本身编写底层的应用比较难以实现，使用 JNI 可以调用现有的本地库，极大地灵活了 Java 的开发。</p><ul><li><p>缺点：</p><ul><li><p>1、使用java与本地已编译的代码交互，通常会丧失平台可移植性。</p></li><li><p>2、程序不再是绝对安全的，本地代码的不当使用可能导致整个程序崩溃。</p></li></ul></li></ul><p>注：对于上面所说的java使用了JNI 接口会丧失平台的可移植性解释如下</p><p>JNI 提供出来一个功能接口，但是这个功能是使用本地语言进行实现的，通常是C或者C++。</p><p>以 linux 系统和 window 系统的 printf 函数为例，虽然这两个系统都提供了这个打印函数，并且名字也一样，但是在实现上可能会有各自的不同点。同时在 window 下的动态库为 dll 文件，linux 下的动态库为 so 文件。</p><p>所以我原本在 linux 下可以正常使用的一套 JNI 功能，一旦需要转移到 windows 上执行的时候就需要重新编译实现接口的动态库。虽然 java 是跨平台的，但是使用 jni 调用的本地方法却是与平台相依赖的，会在进行编译的过程中会出现这样或者那样的兼容性问题，一般不能直接拿来即用。</p><ul><li>实现JNI的基本步骤<ul><li>编写带有 native 声明的方法的java类。</li><li>使用 javah + 类名生成扩展名为.h的头文件。</li><li>使用 C&#x2F;C++ 实现本地方法。</li><li>将 C&#x2F;C++ 编写的文件生成动态链接库。</li><li>在 java 类中引用该动态链接库并完成调用。</li><li>注：可以先写 java 的调用，也可以先写 C&#x2F;C++ 的实现，只要两边约定好接口的名称，参数，返回值等信息即可。</li></ul></li></ul><h1 id="涉及数据类型对照表"><a href="#涉及数据类型对照表" class="headerlink" title="涉及数据类型对照表"></a>涉及数据类型对照表</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/JNI%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE/1.png"> </p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/JNI%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE/2.png"> </p><h1 id="java访问C-的变量"><a href="#java访问C-的变量" class="headerlink" title="java访问C++的变量"></a><code>java</code>访问<code>C++</code>的变量</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jint JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_fibocom_multicamera_AvmSurfaceViewNative_nativeGetViewInfo</span><span class="params">(JNIEnv *env,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                    jclass type,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                    jint cmd,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                    jobject output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jclass objectClass = env-&gt;<span class="built_in">GetObjectClass</span>(output);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过GetFieldID方法得到这个对象的dist属性</span></span><br><span class="line">    jfieldID m3DBtnOn = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;m3DBtnOn&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">    jfieldID viewID = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;viewID&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">    jfieldID wheelViewID = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;wheelViewID&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">    jfieldID trajectoryLineViewID = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;trajectoryLineViewID&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">    jfieldID bsdViewID = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;bsdViewID&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">    jfieldID brightID = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;brightID&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    jfieldID dist_l = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;dist_l&quot;</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">    jfieldID dist_r = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;dist_r&quot;</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">    jfieldID upon = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;upon&quot;</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">    jfieldID angle = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;angle&quot;</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">    jfieldID viewPointX = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;viewPointX&quot;</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">    jfieldID viewPointY = env-&gt;<span class="built_in">GetFieldID</span>(objectClass, <span class="string">&quot;viewPointY&quot;</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ParametersInit *m_Instance = ParametersInit::<span class="built_in">GetInstance</span>();</span><br><span class="line">    avmmanager::TAvmViewTag m_view_info;</span><br><span class="line">    m_Instance-&gt;<span class="built_in">getViewInfo</span>(m_view_info);</span><br><span class="line"></span><br><span class="line">    env-&gt;<span class="built_in">SetIntField</span>(output, m3DBtnOn, m_view_info.m3DBtnOn);</span><br><span class="line">    env-&gt;<span class="built_in">SetIntField</span>(output, viewID, m_view_info.viewID);</span><br><span class="line">    env-&gt;<span class="built_in">SetIntField</span>(output, wheelViewID, m_view_info.wheelViewID);</span><br><span class="line">    env-&gt;<span class="built_in">SetIntField</span>(output, trajectoryLineViewID, m_view_info.trajectoryLineViewID);</span><br><span class="line">    env-&gt;<span class="built_in">SetIntField</span>(output, bsdViewID, m_view_info.bsdViewID);</span><br><span class="line">    env-&gt;<span class="built_in">SetIntField</span>(output, brightID, m_view_info.brightID);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    env-&gt;<span class="built_in">SetFloatField</span>(output, dist_l, m_view_info.dist_l);</span><br><span class="line">    env-&gt;<span class="built_in">SetFloatField</span>(output, dist_r, m_view_info.dist_r);</span><br><span class="line">    env-&gt;<span class="built_in">SetFloatField</span>(output, upon, m_view_info.upon);</span><br><span class="line">    env-&gt;<span class="built_in">SetFloatField</span>(output, angle, m_view_info.angle);</span><br><span class="line">    env-&gt;<span class="built_in">SetFloatField</span>(output, viewPointX, m_view_info.viewPointX);</span><br><span class="line">    env-&gt;<span class="built_in">SetFloatField</span>(output, viewPointY, m_view_info.viewPointY);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-访问java的变量"><a href="#C-访问java的变量" class="headerlink" title="C++访问java的变量"></a><code>C++</code>访问<code>java</code>的变量</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_fibocom_multicamera_AvmSurfaceViewNative_nativeBSDInfo</span><span class="params">(JNIEnv *env,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                jobject obj, </span></span></span><br><span class="line"><span class="params"><span class="function">                                                                jobjectArray objectArray)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jint ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 获取数组的长度</span></span><br><span class="line">    jsize length = env-&gt;<span class="built_in">GetArrayLength</span>(objectArray);</span><br><span class="line">    <span class="comment">// <span class="doctag">XXX:</span>数据长度永远为7，目前测试暂时支取第一个结果</span></span><br><span class="line">    <span class="keyword">if</span> (length)</span><br><span class="line">        length = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取Person类的Class对象</span></span><br><span class="line">    jclass class_Rect = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/fibocom/aidl/Rect&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (class_Rect == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====FindClass success===== \n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 获取Person的sayHello方法字段</span></span><br><span class="line">    jmethodID getX1 = env-&gt;<span class="built_in">GetMethodID</span>(class_Rect, <span class="string">&quot;getX1&quot;</span>, <span class="string">&quot;()I&quot;</span>); <span class="comment">//(A)B---A为输入参数，B为输出参数</span></span><br><span class="line">    <span class="keyword">if</span> (getX1 == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    jmethodID getX2 = env-&gt;<span class="built_in">GetMethodID</span>(class_Rect, <span class="string">&quot;getX2&quot;</span>, <span class="string">&quot;()I&quot;</span>); <span class="comment">//(A)B---A为输入参数，B为输出参数</span></span><br><span class="line">    <span class="keyword">if</span> (getX2 == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    jmethodID getY1 = env-&gt;<span class="built_in">GetMethodID</span>(class_Rect, <span class="string">&quot;getY1&quot;</span>, <span class="string">&quot;()I&quot;</span>); <span class="comment">//(A)B---A为输入参数，B为输出参数</span></span><br><span class="line">    <span class="keyword">if</span> (getY1 == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    jmethodID getY2 = env-&gt;<span class="built_in">GetMethodID</span>(class_Rect, <span class="string">&quot;getY2&quot;</span>, <span class="string">&quot;()I&quot;</span>); <span class="comment">//(A)B---A为输入参数，B为输出参数</span></span><br><span class="line">    <span class="keyword">if</span> (getY2 == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    jmethodID getCamID = env-&gt;<span class="built_in">GetMethodID</span>(class_Rect, <span class="string">&quot;getCamID&quot;</span>, <span class="string">&quot;()I&quot;</span>); <span class="comment">//(A)B---A为输入参数，B为输出参数</span></span><br><span class="line">    <span class="keyword">if</span> (getCamID == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    jmethodID getTimestamp = env-&gt;<span class="built_in">GetMethodID</span>(class_Rect, <span class="string">&quot;getTimestamp&quot;</span>, <span class="string">&quot;()J&quot;</span>); <span class="comment">//(A)B---A为输入参数，B为输出参数</span></span><br><span class="line">    <span class="keyword">if</span> (getTimestamp == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 循环调用每个方法</span></span><br><span class="line">    jint aaa=<span class="number">0</span>;</span><br><span class="line">    avmmanager::TBsdBox *avm_bsd = <span class="keyword">new</span> avmmanager::TBsdBox[length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取引用类型数组的对象</span></span><br><span class="line">        jobject element = env-&gt;<span class="built_in">GetObjectArrayElement</span>(objectArray, i);</span><br><span class="line">        <span class="comment">// 判断数组元素是否是Person类对象</span></span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====nativeBSDInfo==== [%d] ===== \n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">if</span> (element != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 调用Person对象的sayHello()方法</span></span><br><span class="line">            avm_bsd[i].left = env-&gt;<span class="built_in">CallIntMethod</span>(element, getX1);</span><br><span class="line">            avm_bsd[i].right = env-&gt;<span class="built_in">CallIntMethod</span>(element, getX2);</span><br><span class="line">            avm_bsd[i].top = env-&gt;<span class="built_in">CallIntMethod</span>(element, getY1);</span><br><span class="line">            avm_bsd[i].bottom = env-&gt;<span class="built_in">CallIntMethod</span>(element, getY2);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> camID = env-&gt;<span class="built_in">CallIntMethod</span>(element, getCamID);</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;CallIntMethod %d \n&quot;</span>, camID);</span><br><span class="line">            <span class="keyword">switch</span> (camID)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                avm_bsd[i].cam_index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                avm_bsd[i].cam_index = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                avm_bsd[i].cam_index = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                avm_bsd[i].cam_index = <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;nativeBSDInfo cam_index %d \n&quot;</span>, camID);</span><br><span class="line">                avm_bsd[i].cam_index = camID;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            avm_bsd[i].timestamp = env-&gt;<span class="built_in">CallLongMethod</span>(element, getTimestamp);</span><br><span class="line">            avm_bsd[i].size = length;</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====nativeBSDInfo==== X1[%d] %d  \n&quot;</span>, i, avm_bsd[i].left);</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====nativeBSDInfo==== X2[%d] %d  \n&quot;</span>, i, avm_bsd[i].right);</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====nativeBSDInfo==== Y1[%d] %d  \n&quot;</span>, i, avm_bsd[i].top);</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====nativeBSDInfo==== Y2[%d] %d  \n&quot;</span>, i, avm_bsd[i].bottom);</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====nativeBSDInfo==== id[%d] %d  \n&quot;</span>, i, avm_bsd[i].cam_index);</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====nativeBSDInfo==== timestamp[%d] %ld  \n&quot;</span>, i, avm_bsd[i].timestamp);</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>, <span class="string">&quot;====nativeBSDInfo==== size[%d] %d  \n&quot;</span>, i, avm_bsd[i].size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EventSystem::<span class="built_in">Instance</span>()-&gt;<span class="built_in">SendEvent</span>(<span class="string">&quot;avm_get_bsd_info&quot;</span>, avm_bsd, [](<span class="type">void</span> *ptr_event)</span><br><span class="line">                                       &#123;</span><br><span class="line">        Event *event = (Event *) ptr_event;</span><br><span class="line">        <span class="type">bool</span> *buf = (<span class="type">bool</span> *) event-&gt;<span class="built_in">Parameter</span>();</span><br><span class="line">        <span class="keyword">delete</span> buf;</span><br><span class="line">        <span class="keyword">delete</span> event; &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> jni </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json文件读写</title>
      <link href="/2022/12/14/Json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
      <url>/2022/12/14/Json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="java读写Json文件"><a href="#java读写Json文件" class="headerlink" title="java读写Json文件"></a>java读写Json文件</h1><h2 id="json格式介绍"><a href="#json格式介绍" class="headerlink" title="json格式介绍"></a>json格式介绍</h2><p>json与xml相比, 对数据的描述性比XML较差,但是数据体积小,传递速度更快.  </p><p>json数据的书写格式是”名称:值对”,比如:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;John&quot;</span>                        <span class="comment">//name为名称,值对为&quot;john&quot;字符串</span></span><br></pre></td></tr></table></figure><p>值对类型共分为:  </p><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号[]中）</li><li>对象（在花括号{}中）</li><li>null<br>当然数组也可以包含多对象:  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;employees&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;Age&quot;</span><span class="punctuation">:</span><span class="number">19</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anna&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;Age&quot;</span><span class="punctuation">:</span><span class="number">22</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Peter&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;Age&quot;</span><span class="punctuation">:</span><span class="number">23</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>表示”employees”对象中有3个对象数组(每个对象数组表示一条员工信息),其中并列的数据都必须用逗号”,”隔开.</li></ul><h2 id="json文件读写示例"><a href="#json文件读写示例" class="headerlink" title="json文件读写示例"></a>json文件读写示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fibocom.multicamera;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONException;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">carParameter</span>  <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> on_TrajectoryLine;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> on_BSD;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> on_Bright;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> scale_size; <span class="comment">// 缩放</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> car_length;<span class="comment">//车辆长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> car_width;<span class="comment">//车辆宽度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> suspension_front;<span class="comment">//前悬挂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> suspension_back;<span class="comment">//后悬挂</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AvmSetParm</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String jsonFileName;</span><br><span class="line">    <span class="keyword">public</span> carParameter <span class="title function_">readJson</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            carParameter carParm=<span class="keyword">new</span> <span class="title class_">carParameter</span>();</span><br><span class="line">            <span class="type">char</span> cbuf[] = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10000</span>];</span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(jsonFileName)),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span>input.read(cbuf);</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">String</span>(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            <span class="comment">//1.构造一个json对象</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(text.substring(text.indexOf(<span class="string">&quot;&#123;&quot;</span>)));   <span class="comment">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取数组</span></span><br><span class="line">            <span class="type">JSONArray</span> <span class="variable">dataArr</span> <span class="operator">=</span> obj.getJSONArray(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">carParameterObj</span> <span class="operator">=</span>dataArr.getJSONObject(<span class="number">3</span>);</span><br><span class="line">            JSONObject carParameter=carParameterObj.getJSONObject(<span class="string">&quot;carParameter&quot;</span>);</span><br><span class="line"></span><br><span class="line">            carParm.car_length=carParameter.getInt(<span class="string">&quot;car_length&quot;</span>);</span><br><span class="line">            carParm.car_width=carParameter.getInt(<span class="string">&quot;car_width&quot;</span>);</span><br><span class="line">            carParm.suspension_front=carParameter.getInt(<span class="string">&quot;suspension_front&quot;</span>);</span><br><span class="line">            carParm.suspension_back=carParameter.getInt(<span class="string">&quot;suspension_back&quot;</span>);</span><br><span class="line">            carParm.scale_size=carParameter.getDouble(<span class="string">&quot;scale_size&quot;</span>);</span><br><span class="line">            carParm.on_Bright=carParameter.getInt(<span class="string">&quot;BE_Switch&quot;</span>);</span><br><span class="line">            carParm.on_BSD=carParameter.getInt(<span class="string">&quot;BSD_Switch&quot;</span>);</span><br><span class="line">            carParm.on_TrajectoryLine=carParameter.getInt(<span class="string">&quot;TrajectoryLine_Switch&quot;</span>);</span><br><span class="line">            input.close();</span><br><span class="line"></span><br><span class="line">            Log.d(<span class="string">&quot;AvmSetParm&quot;</span>,<span class="string">&quot;car_length:&quot;</span>+carParm.car_length);</span><br><span class="line">            Log.d(<span class="string">&quot;AvmSetParm&quot;</span>,<span class="string">&quot;car_width:&quot;</span>+carParm.car_width);</span><br><span class="line">            Log.d(<span class="string">&quot;AvmSetParm&quot;</span>,<span class="string">&quot;suspension_front:&quot;</span>+carParm.suspension_front);</span><br><span class="line">            Log.d(<span class="string">&quot;AvmSetParm&quot;</span>,<span class="string">&quot;suspension_back:&quot;</span>+carParm.suspension_back);</span><br><span class="line">            Log.d(<span class="string">&quot;AvmSetParm&quot;</span>,<span class="string">&quot;scale_size:&quot;</span>+carParm.scale_size);</span><br><span class="line">            <span class="keyword">return</span> carParm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeJson</span><span class="params">(carParameter carParm)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">char</span> cbuf[] = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10000</span>];</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(jsonFileName)),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span>input.read(cbuf);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">String</span>(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        <span class="comment">//1.构造一个json对象</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(text.substring(text.indexOf(<span class="string">&quot;&#123;&quot;</span>)));   <span class="comment">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数组</span></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">data</span> <span class="operator">=</span> obj.getJSONArray(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">carParameterObj</span> <span class="operator">=</span>data.getJSONObject(<span class="number">3</span>);</span><br><span class="line">        JSONObject carParameter=carParameterObj.getJSONObject(<span class="string">&quot;carParameter&quot;</span>);</span><br><span class="line"></span><br><span class="line">        carParameter.put(<span class="string">&quot;car_length&quot;</span>,carParm.car_length);</span><br><span class="line">        carParameter.put(<span class="string">&quot;car_width&quot;</span>,carParm.car_width);</span><br><span class="line">        carParameter.put(<span class="string">&quot;suspension_front&quot;</span>,carParm.suspension_front);</span><br><span class="line">        carParameter.put(<span class="string">&quot;suspension_back&quot;</span>,carParm.suspension_back);</span><br><span class="line">        carParameter.put(<span class="string">&quot;BE_Switch&quot;</span>,carParm.on_Bright);</span><br><span class="line">        carParameter.put(<span class="string">&quot;BSD_Switch&quot;</span>,carParm.on_BSD);</span><br><span class="line">        carParameter.put(<span class="string">&quot;TrajectoryLine_Switch&quot;</span>,carParm.on_TrajectoryLine);</span><br><span class="line">        Log.d(<span class="string">&quot;AvmSetParm&quot;</span>, <span class="string">&quot;car_length&quot;</span>+carParm.car_length);</span><br><span class="line">        Log.d(<span class="string">&quot;AvmSetParm&quot;</span>, <span class="string">&quot;car_width&quot;</span>+carParm.car_width);</span><br><span class="line">        Log.d(<span class="string">&quot;AvmSetParm&quot;</span>, <span class="string">&quot;suspension_front&quot;</span>+carParm.suspension_front);</span><br><span class="line">        Log.d(<span class="string">&quot;AvmSetParm&quot;</span>, <span class="string">&quot;suspension_back&quot;</span>+carParm.suspension_back);</span><br><span class="line">        Log.d(<span class="string">&quot;AvmSetParm&quot;</span>, <span class="string">&quot;BE_Switch&quot;</span>+carParm.on_Bright);</span><br><span class="line">        Log.d(<span class="string">&quot;AvmSetParm&quot;</span>, <span class="string">&quot;BSD_Switch&quot;</span>+carParm.on_BSD);</span><br><span class="line">        Log.d(<span class="string">&quot;AvmSetParm&quot;</span>, <span class="string">&quot;TrajectoryLine_Switch&quot;</span>+carParm.on_TrajectoryLine);</span><br><span class="line"></span><br><span class="line">        carParameterObj.put(<span class="string">&quot;carParameter&quot;</span>,carParameter);</span><br><span class="line">        data.put(<span class="number">3</span>,carParameterObj);</span><br><span class="line">        obj.put(<span class="string">&quot;data&quot;</span>,data);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>( <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(jsonFileName),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        osw.write(obj.toString(<span class="number">4</span>));</span><br><span class="line">        osw.flush();<span class="comment">//清空缓冲区，强制输出数据</span></span><br><span class="line">        osw.close();<span class="comment">//关闭输出流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="c-读写Json文件"><a href="#c-读写Json文件" class="headerlink" title="c++读写Json文件"></a>c++读写Json文件</h1><ul><li><p>模板函数定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 从文本中加载json</span></span><br><span class="line"><span class="comment"> * @tparam R json类型</span></span><br><span class="line"><span class="comment"> * @tparam T 自动推断的字符串类型</span></span><br><span class="line"><span class="comment"> * @param config json字符串</span></span><br><span class="line"><span class="comment"> * @return R</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> R <span class="title">LoadJsonFromText</span><span class="params">(<span class="type">const</span> T &amp;config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// static_assert(JsonHasParse&lt;R&gt;::value,</span></span><br><span class="line">    <span class="comment">//               &quot;error: the type must has static method [parse].&quot;);</span></span><br><span class="line">    <span class="comment">// nlohmann json</span></span><br><span class="line">    <span class="keyword">return</span> R::<span class="built_in">parse</span>(config, <span class="literal">nullptr</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 通用类型</span></span><br><span class="line"><span class="comment"> * @tparam R</span></span><br><span class="line"><span class="comment"> * @tparam T</span></span><br><span class="line"><span class="comment"> * @tparam U</span></span><br><span class="line"><span class="comment"> * @param config</span></span><br><span class="line"><span class="comment"> * @param key</span></span><br><span class="line"><span class="comment"> * @param val</span></span><br><span class="line"><span class="comment"> * @return R</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> R <span class="title">OptionalContain</span><span class="params">(<span class="type">const</span> T &amp;config, <span class="type">const</span> U &amp;key, <span class="type">const</span> R &amp;val, JsonGenericType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="built_in">count</span>(key) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> config.<span class="built_in">at</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> nlohmann::json;</span><br><span class="line">std::string config= <span class="string">&quot;example.jsonc&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> json_config = <span class="built_in">LoadJsonFromText</span>&lt;json&gt;(config);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> &amp;vs_config = json_config[<span class="string">&quot;video_source&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> width  = vs_config[<span class="string">&quot;width&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> height = vs_config[<span class="string">&quot;height&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> width1  = json_config[<span class="string">&quot;video_source&quot;</span>][<span class="string">&quot;width&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> height1 = json_config[<span class="string">&quot;video_source&quot;</span>][<span class="string">&quot;height&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">json_config[<span class="string">&quot;video_source&quot;</span>][<span class="string">&quot;width&quot;</span>]  = <span class="number">720</span>;</span><br><span class="line">json_config[<span class="string">&quot;video_source&quot;</span>][<span class="string">&quot;height&quot;</span>] = <span class="number">480</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将jsonc文件转换为string</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> &amp;json_config_str = json_config.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> &amp;fake_config = vs_config[<span class="string">&quot;fake&quot;</span>];</span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> fake_enable = ac::<span class="built_in">OptionalContain</span>(fake_config, <span class="string">&quot;enable&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>json.hpp</code><br><img src="https://github.com/geiyiren/MyBlogFile1/blob/other/json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/json.hpp" alt="json.hpp"></p></li><li><p><code>example.jsonc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 当前配置文件的版本，此版本用于兼容性处理</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0.0&quot;,</span><br><span class="line">    &quot;camera_id&quot;: &quot;camera_1&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;video_source&quot;: &#123;</span><br><span class="line">        &quot;width&quot; : 1280,                        // 需要设置为平台相应的分辨率</span><br><span class="line">        &quot;height&quot;: 720,</span><br><span class="line">        &quot;format&quot;: &quot;kRGB888&quot;,                  // 内部自行生成, 这里实际上无效</span><br><span class="line">        &quot;device&quot;: &quot;/dev/video0&quot;,</span><br><span class="line">        &quot;fps&quot;   : 20,</span><br><span class="line">        &quot;connect&quot;: true,                      // true：把回调的图像送入算法； false：不给算法送入图像。</span><br><span class="line">                                              // 这个选项对假视频源依然有效</span><br><span class="line">        &quot;fake&quot;: &#123;</span><br><span class="line">            &quot;enable&quot;: false,                  // true表示启用假视频源</span><br><span class="line">            &quot;img&quot;: &quot;assets/ssd_test_img.jpg&quot;, // 使用这张图片来冒充，注意仅支持jpg格式图片，且最好是720或1080P图像</span><br><span class="line">            &quot;out_fmt&quot;: &quot;kYUV422SP&quot;            // 假视频源的输出格式（模拟输出的视频格式）</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>参考连接： <a href="https://cloud.tencent.com/developer/article/1556944">https://cloud.tencent.com/developer/article/1556944</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> json文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车辆动态辅助轨迹线生成方法</title>
      <link href="/2022/12/14/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"/>
      <url>/2022/12/14/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="汽车动力学原理"><a href="#汽车动力学原理" class="headerlink" title="汽车动力学原理"></a>汽车动力学原理</h1><p>在研究辅助泊车时，第一要研究一下汽车在运动的时候的轨迹，要建立一个汽车在泊车时的运动学模型来作为后面研究的理论基础。车辆在泊车的过程中有一个特点即它是低速行驶的，这时<strong>车轮在滚动过程中不会发生侧方向的滑动</strong>，由于汽车在缓慢行驶的过程中不会有侧向力，这时系统的约束条件是允许车轮发生滚动和侧转，但不会有滑动的发生，由此建立了车辆的运动学模型。下面是倒车的时候汽车的运动学模型：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/Vehicle_dynamics_model.png"> </p><p>其中：(x_{f},y_{f})为汽车前轴中心点的坐标；(x_{r},y_{r})为汽车的后轴中心点的坐标；v指前轴中心点的速度；l_{m}为轴距；h_{r}为后轮距；φ为前轴中心的转向角；θ为汽车的航向角，指汽车的中心轴与参考方向上的夹角。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/1.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/2.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/3.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/4.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/5.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/6.png"> </p><p>总结：</p><ul><li>轨迹和速度没有关系</li><li>车辆的两个后轮是沿着圆在运动的</li><li><strong>汽车在低速行驶且不考虑有侧滑的情况下，汽车的车身上每一点的运动轨迹都是指向同样的一个圆心的圆，并且只和汽车的转向角有关系，和汽车的车速没有关系</strong></li></ul><h2 id="阿克曼转弯几何原理"><a href="#阿克曼转弯几何原理" class="headerlink" title="阿克曼转弯几何原理"></a>阿克曼转弯几何原理</h2><ul><li><p>示意图：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/Ackerman_turning_geometry.png"></p></li><li><p>讲解视频：<a href="https://www.youtube.com/watch?v=8AimxDPWKcM">https://www.youtube.com/watch?v=8AimxDPWKcM</a></p></li></ul><h1 id="参考专利"><a href="#参考专利" class="headerlink" title="参考专利"></a>参考专利</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/%E4%B9%98%E7%94%A8%E8%BD%A6%E5%8A%A8%E6%80%81%E5%80%92%E8%BD%A6%E8%BE%85%E5%8A%A9%E7%BA%BF%E8%AE%BE%E8%AE%A1.pdf">参考专利</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 辅助驾驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 辅助驾驶 </tag>
            
            <tag> 360环视 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2022/12/12/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/12/12/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 位置 -name <span class="string">&#x27;名称&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="aiApp执行命令"><a href="#aiApp执行命令" class="headerlink" title="aiApp执行命令"></a>aiApp执行命令</h1><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -F /mnt/data/log/ylog | grep aiApp</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/hq/bin/hqsetprop ctl.start aiApp</span><br></pre></td></tr></table></figure><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/hq/bin/hqsetprop ctl.stop aiApp</span><br></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/hq/bin/hqsetprop ctl.restart aiApp</span><br></pre></td></tr></table></figure><h1 id="查看与转换YUV图像："><a href="#查看与转换YUV图像：" class="headerlink" title="查看与转换YUV图像："></a>查看与转换YUV图像：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -pixel_format nv12 -f rawvideo -video_size 240x576 stitch_view.yuv</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -pix_fmt nv12 -video_size 1280x720 -i src_1.yuv -y src_1.jpg</span><br></pre></td></tr></table></figure><h1 id="ubuntu终端查看历史命令"><a href="#ubuntu终端查看历史命令" class="headerlink" title="ubuntu终端查看历史命令"></a>ubuntu终端查看历史命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> | grep some_command</span><br></pre></td></tr></table></figure><h1 id="查看cup限制"><a href="#查看cup限制" class="headerlink" title="查看cup限制"></a>查看cup限制</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps | grep <span class="built_in">limit</span> </span><br></pre></td></tr></table></figure><h1 id="1126关闭DNS验证"><a href="#1126关闭DNS验证" class="headerlink" title="1126关闭DNS验证"></a>1126关闭DNS验证</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nsswitch.conf</span><br></pre></td></tr></table></figure><p>或者直接替换对应字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/dns/#dns/g&quot;</span> `grep <span class="string">&quot;dns&quot;</span> -rl /etc/nsswitch.conf`</span><br></pre></td></tr></table></figure><ul><li>注释 dns选项，如下所示：<blockquote><p>hosts:          files #dns<br>networks:       files #dns</p></blockquote></li></ul><h1 id="强制关闭窗口"><a href="#强制关闭窗口" class="headerlink" title="强制关闭窗口"></a>强制关闭窗口</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xkill</span><br></pre></td></tr></table></figure><ul><li>然后移动鼠标点击需要关闭的窗口即可</li></ul><h1 id="修改aiapp的cpu限制"><a href="#修改aiapp的cpu限制" class="headerlink" title="修改aiapp的cpu限制"></a>修改aiapp的cpu限制</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /exapp/sh/run.sh</span><br></pre></td></tr></table></figure><ul><li>修改允许aiapp使用的cpu百分比 XX<blockquote><p>#……………aiApp…CPU………<br>&#x2F;data&#x2F;hq&#x2F;bin&#x2F;cpulimit -l XX -e aiApp &amp;</p></blockquote></li></ul><h1 id="本地gitlab库添加远程库信任"><a href="#本地gitlab库添加远程库信任" class="headerlink" title="本地gitlab库添加远程库信任"></a>本地gitlab库添加远程库信任</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --add safe.directory /media/geiyiren/MyCode/AVM/avm_2d/master/avm_cpu_algo</span><br></pre></td></tr></table></figure><h1 id="保存yuv-buf图像"><a href="#保存yuv-buf图像" class="headerlink" title="保存yuv buf图像"></a>保存yuv buf图像</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp_dump = <span class="built_in">fopen</span>(<span class="string">&quot;bsd_1.yuv&quot;</span>, <span class="string">&quot;wb+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp_dump == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fp_dump open fail\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fp_dump cam  yuv open success\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> bytes_write = <span class="built_in">fwrite</span>(p_yuv_buf[<span class="number">1</span>], width * height * <span class="number">3</span> / <span class="number">2</span> , <span class="number">1</span>, fp_dump);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bytes_write &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;write raw_stream fail !!!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(fp_dump);</span><br></pre></td></tr></table></figure><h1 id="批量将jpg转换为yuv"><a href="#批量将jpg转换为yuv" class="headerlink" title="批量将jpg转换为yuv"></a>批量将jpg转换为yuv</h1><pre><code>#! /bin/bashfiles=$(ls $folder)yuv=&quot;yuv&quot;for file in $filesdo  echo $&#123;file:0:13&#125;  file_name=$&#123;file:0:13&#125;  str=$file_name$yuv  ffmpeg -i $file -s 1280*720 -pix_fmt nv12 $strdone</code></pre><h1 id="abd-常用命令"><a href="#abd-常用命令" class="headerlink" title="abd 常用命令"></a>abd 常用命令</h1><h2 id="打开调试端口"><a href="#打开调试端口" class="headerlink" title="打开调试端口"></a>打开调试端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect 10.10.200.140</span><br></pre></td></tr></table></figure><h2 id="进入远程终端"><a href="#进入远程终端" class="headerlink" title="进入远程终端"></a>进入远程终端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure><h2 id="重新挂载"><a href="#重新挂载" class="headerlink" title="重新挂载"></a>重新挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb remount</span><br></pre></td></tr></table></figure><h2 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br></pre></td></tr></table></figure><h2 id="安卓录制屏幕"><a href="#安卓录制屏幕" class="headerlink" title="安卓录制屏幕"></a>安卓录制屏幕</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord  --time-limit 12 /sdcard/name.mp4</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="安卓设备开启USB"><a href="#安卓设备开启USB" class="headerlink" title="安卓设备开启USB"></a>安卓设备开启USB</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setprop persist.otg.mode device</span><br></pre></td></tr></table></figure><ul><li>远程登录后使用上述命令</li></ul><h1 id="远程为安卓设备安装软件"><a href="#远程为安卓设备安装软件" class="headerlink" title="远程为安卓设备安装软件"></a>远程为安卓设备安装软件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install Launcher3.apk</span><br></pre></td></tr></table></figure><ul><li>在本地执行上述命令</li></ul><h1 id="查看当前文件下所有文件大小"><a href="#查看当前文件下所有文件大小" class="headerlink" title="查看当前文件下所有文件大小"></a>查看当前文件下所有文件大小</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以M为单位查看当前文件下所有文件的大小，包含隐藏文件</span></span><br><span class="line"><span class="built_in">du</span> -sm .[!.]* * | <span class="built_in">sort</span> -hr</span><br></pre></td></tr></table></figure><h1 id="查看磁盘剩余空间"><a href="#查看磁盘剩余空间" class="headerlink" title="查看磁盘剩余空间"></a>查看磁盘剩余空间</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -hl</span><br></pre></td></tr></table></figure><h1 id="github访问加速"><a href="#github访问加速" class="headerlink" title="github访问加速"></a>github访问加速</h1><h2 id="查询IP"><a href="#查询IP" class="headerlink" title="查询IP"></a>查询IP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#github.global.ssl.fastly.net 网站IP</span></span><br><span class="line">nslookup github.global.ssl.fastly.net</span><br><span class="line"><span class="comment">#github.com 网站IP</span></span><br><span class="line">nslookup github.com</span><br></pre></td></tr></table></figure><h2 id="更改host文件"><a href="#更改host文件" class="headerlink" title="更改host文件"></a>更改host文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/hosts</span><br></pre></td></tr></table></figure><ul><li>将上述查询到的IP复制到对应位置</li></ul><h2 id="更新host文件"><a href="#更新host文件" class="headerlink" title="更新host文件"></a>更新host文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/network-manager restart</span><br></pre></td></tr></table></figure><h1 id="BSD测试程序运行命令"><a href="#BSD测试程序运行命令" class="headerlink" title="BSD测试程序运行命令"></a>BSD测试程序运行命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#801-s(rv1126)测试BSD程序运行命令</span></span><br><span class="line"><span class="built_in">cd</span> /exapp/app</span><br><span class="line">./bsd_proc_test -d /dev/video0 -w 1280 -h 720</span><br></pre></td></tr></table></figure><h1 id="鸿鹄"><a href="#鸿鹄" class="headerlink" title="鸿鹄"></a>鸿鹄</h1><h2 id="鸿鹄设备常用命令"><a href="#鸿鹄设备常用命令" class="headerlink" title="鸿鹄设备常用命令"></a>鸿鹄设备常用命令</h2><ul><li>以root身份挂载<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb root &amp;&amp; adb remount</span><br></pre></td></tr></table></figure></li><li>推送apk<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /media/geiyiren/MyCode/AVM/avm_gpu_algo/branch/MultiCameraDemo/avm_gpu_algo/app/build/outputs/apk/debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push MultiCameraDemo.apk /system/priv-app/MultiCameraDemo/</span><br></pre></td></tr></table></figure></li><li>推送库文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /media/geiyiren/MyCode/AVM/avm_gpu_algo/branch/AVM_BSD_honghu/avm_gpu_algo/libs/arm64-v8a</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push libavmjni.so /system/priv-app/MultiCameraDemo/lib/arm64/</span><br></pre></td></tr></table></figure></li><li>查看log日志<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell logcat &gt; log.txt</span><br></pre></td></tr></table></figure></li><li>保存NATIVE_LOG日志(cpp端打印信息)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell logcat -s NATIVE_LOG &gt; log.txt</span><br></pre></td></tr></table></figure></li><li>保存程序运行严重错误日志(一般程序异常退出时打印该log)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell logcat *:F &gt; log.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="鸿鹄设备资源存储位置"><a href="#鸿鹄设备资源存储位置" class="headerlink" title="鸿鹄设备资源存储位置"></a>鸿鹄设备资源存储位置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── gpu0------------</span><br><span class="line">    ├── calibrate</span><br><span class="line">    │   ├── **CALMAT.BIN**</span><br><span class="line">    │   └── **LENS.BIN**</span><br><span class="line">    └── shader</span><br><span class="line">        ├── **avm_3d_blend_lut.bin**</span><br><span class="line">        ├── **avm_3d_indices.bin**</span><br><span class="line">        ├── **avm_3d_lut.bin**</span><br><span class="line">        ├── car_model_line.fs</span><br><span class="line">        ├── car_model_line.vs</span><br><span class="line">        ├── car_model_test.fs</span><br><span class="line">        ├── car_model_test.vs</span><br></pre></td></tr></table></figure><h2 id="鸿鹄Bug查询关键字"><a href="#鸿鹄Bug查询关键字" class="headerlink" title="鸿鹄Bug查询关键字"></a>鸿鹄Bug查询关键字</h2><table><thead><tr><th>关键字</th><th align="left">说明</th></tr></thead><tbody><tr><td>dlopen</td><td align="left">文件缺失标志</td></tr><tr><td>crash</td><td align="left">程序报错抛出异常标志</td></tr><tr><td>NATIVE_LOG</td><td align="left">AVM cpp端的打印</td></tr></tbody></table><h2 id="鸿鹄CPU占用与GPU占用查看"><a href="#鸿鹄CPU占用与GPU占用查看" class="headerlink" title="鸿鹄CPU占用与GPU占用查看"></a>鸿鹄CPU占用与GPU占用查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># adb登录后执行如下命令:</span></span><br><span class="line"><span class="comment">## GPU</span></span><br><span class="line"><span class="built_in">cat</span> /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage</span><br><span class="line">watch -n 1 <span class="built_in">cat</span> /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage</span><br><span class="line"><span class="comment">## CPU</span></span><br><span class="line">top</span><br></pre></td></tr></table></figure><blockquote><p>更加详细的资源查看可参照：软件snapdragonprofiler_external_linux</p><p>Snapdragon Profiler是高通开发的用于调试分析高通Adreno GPU的一款桌面应用，支持Windows、MacOS 和 Linux 。在调试opengles应用程序上能发挥非常重要的作用。该工具能够捕捉CPU、GPU、DSP、内存、功率、网络连接和设备运行时的发热数据等，具有Realtime、Trace Capture、Snapshot Capture 三种模式。实时(Realtime)模式用于实时跟踪数据，跟踪(Trace Capture)模式用于跟踪事件和数据，默认最大值是10秒。快照(Snapshot Capture)模式用于捕获OpenGL ES应用程序的当前帧并可以进行调试，包括单步调试绘制指令，查看和编辑着色器、程序、纹理以及查看像素历史的能力。着色器代码是通过反编译得到，得到的代码跟原glsl代码基本一致，并且可以在截图后修改glsl进行调试。</p><p>作者：cain_huang<br>链接：<a href="https://www.jianshu.com/p/d8d1a231dada">https://www.jianshu.com/p/d8d1a231dada</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="ssh相关"><a href="#ssh相关" class="headerlink" title="ssh相关"></a>ssh相关</h1><h2 id="主机A免密登录主机B"><a href="#主机A免密登录主机B" class="headerlink" title="主机A免密登录主机B"></a>主机A免密登录主机B</h2><p>在主机A执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id 主机B的用户名@主机B的IP地址</span><br></pre></td></tr></table></figure><h1 id="NEON优化相关函数"><a href="#NEON优化相关函数" class="headerlink" title="NEON优化相关函数"></a>NEON优化相关函数</h1><h2 id="internal-prefetch"><a href="#internal-prefetch" class="headerlink" title="internal::prefetch()"></a>internal::prefetch()</h2><p>作用：将数据放在缓存中</p><h2 id="vld1q"><a href="#vld1q" class="headerlink" title="vld1q()"></a>vld1q()</h2><p>作用：加载数据</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float32x4_t</span> q0 = <span class="built_in">vld1q_f32</span>(d0); <span class="comment">// 加载 d0 地址起始的 4 个 float 数据到 q0</span></span><br></pre></td></tr></table></figure><h2 id="internal-getRowPtr"><a href="#internal-getRowPtr" class="headerlink" title="internal::getRowPtr()"></a>internal::getRowPtr()</h2><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">internal::<span class="built_in">getRowPtr</span>(src0Base, src0Stride, y);  <span class="comment">//返回src0Base+src0Stride*y的地址</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++变量命名常用缩写表</title>
      <link href="/2022/12/12/C++%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E5%B8%B8%E7%94%A8%E7%BC%A9%E5%86%99%E8%A1%A8/"/>
      <url>/2022/12/12/C++%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E5%B8%B8%E7%94%A8%E7%BC%A9%E5%86%99%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">全 称</th><th align="center">缩 写</th></tr></thead><tbody><tr><td align="center">Address</td><td align="center">addr</td></tr><tr><td align="center">Administrator</td><td align="center">adm</td></tr><tr><td align="center">average</td><td align="center">avg</td></tr><tr><td align="center">Application</td><td align="center">app</td></tr><tr><td align="center">Argument</td><td align="center">arg</td></tr><tr><td align="center">Database</td><td align="center">DB</td></tr><tr><td align="center">assemble</td><td align="center">asm</td></tr><tr><td align="center">Bitmap</td><td align="center">bmp</td></tr><tr><td align="center">back</td><td align="center">bk</td></tr><tr><td align="center">asynchronization</td><td align="center">asyn</td></tr><tr><td align="center">Button</td><td align="center">btn</td></tr><tr><td align="center">Buffer</td><td align="center">buf</td></tr><tr><td align="center">Calculate</td><td align="center">calc</td></tr><tr><td align="center">Character</td><td align="center">char</td></tr><tr><td align="center">Change</td><td align="center">chg</td></tr><tr><td align="center">Click</td><td align="center">clk</td></tr><tr><td align="center">color</td><td align="center">clr</td></tr><tr><td align="center">Command</td><td align="center">cmd</td></tr><tr><td align="center">Compare</td><td align="center">cmp</td></tr><tr><td align="center">Column</td><td align="center">col</td></tr><tr><td align="center">coordinates</td><td align="center">coord</td></tr><tr><td align="center">copy</td><td align="center">cpy</td></tr><tr><td align="center">Control</td><td align="center">ctl &#x2F; ctrl</td></tr><tr><td align="center">Current</td><td align="center">cur</td></tr><tr><td align="center">Cylinder</td><td align="center">cyl</td></tr><tr><td align="center">Debug</td><td align="center">dbg</td></tr><tr><td align="center">Double</td><td align="center">dbl</td></tr><tr><td align="center">Decrease</td><td align="center">dec</td></tr><tr><td align="center">default</td><td align="center">def</td></tr><tr><td align="center">Delete</td><td align="center">del</td></tr><tr><td align="center">Destination</td><td align="center">dest &#x2F; dst</td></tr><tr><td align="center">Device</td><td align="center">dev</td></tr><tr><td align="center">dictionary</td><td align="center">dict</td></tr><tr><td align="center">different</td><td align="center">diff</td></tr><tr><td align="center">directory</td><td align="center">dir</td></tr><tr><td align="center">Display</td><td align="center">disp</td></tr><tr><td align="center">Divide</td><td align="center">div</td></tr><tr><td align="center">Dialog</td><td align="center">dlg</td></tr><tr><td align="center">Document</td><td align="center">doc</td></tr><tr><td align="center">Driver</td><td align="center">drv</td></tr><tr><td align="center">Dynamic</td><td align="center">dyna</td></tr><tr><td align="center">Environment</td><td align="center">env</td></tr><tr><td align="center">error</td><td align="center">err</td></tr><tr><td align="center">Extend</td><td align="center">ex&#x2F;ext</td></tr><tr><td align="center">execute</td><td align="center">exec</td></tr><tr><td align="center">flag</td><td align="center">flg</td></tr><tr><td align="center">Frame</td><td align="center">frm</td></tr><tr><td align="center">Function</td><td align="center">func &#x2F; fn</td></tr><tr><td align="center">group</td><td align="center">grp</td></tr><tr><td align="center">Horizontal</td><td align="center">horz</td></tr><tr><td align="center">Index</td><td align="center">idx &#x2F; ndx</td></tr><tr><td align="center">Image</td><td align="center">img</td></tr><tr><td align="center">Implement</td><td align="center">Impl</td></tr><tr><td align="center">Increase</td><td align="center">inc</td></tr><tr><td align="center">Information</td><td align="center">info</td></tr><tr><td align="center">Initial&#x2F;Initialize&#x2F;Initialization</td><td align="center">init</td></tr><tr><td align="center">Insert</td><td align="center">ins</td></tr><tr><td align="center">Instance</td><td align="center">inst</td></tr><tr><td align="center">Interrupt</td><td align="center">INT &#x2F; intr</td></tr><tr><td align="center">Length</td><td align="center">len</td></tr><tr><td align="center">Library</td><td align="center">lib</td></tr><tr><td align="center">Link</td><td align="center">lnk</td></tr><tr><td align="center">logical</td><td align="center">log</td></tr><tr><td align="center">List</td><td align="center">lst</td></tr><tr><td align="center">maximum</td><td align="center">max</td></tr><tr><td align="center">Memory</td><td align="center">mem</td></tr><tr><td align="center">Manage &#x2F; Manager</td><td align="center">mgr &#x2F; man</td></tr><tr><td align="center">middle</td><td align="center">mid</td></tr><tr><td align="center">minimum</td><td align="center">min</td></tr><tr><td align="center">Message</td><td align="center">msg</td></tr><tr><td align="center">Multiply</td><td align="center">mul</td></tr><tr><td align="center">Number</td><td align="center">num</td></tr><tr><td align="center">Object</td><td align="center">obj</td></tr><tr><td align="center">Offset</td><td align="center">ofs</td></tr><tr><td align="center">Origin &#x2F; Original</td><td align="center">org</td></tr><tr><td align="center">Parameter</td><td align="center">param</td></tr><tr><td align="center">picture</td><td align="center">pic</td></tr><tr><td align="center">package</td><td align="center">pkg</td></tr><tr><td align="center">Point</td><td align="center">pnt &#x2F; pt</td></tr><tr><td align="center">Position</td><td align="center">pos</td></tr><tr><td align="center">previous</td><td align="center">pre &#x2F; prev</td></tr><tr><td align="center">program</td><td align="center">prg</td></tr><tr><td align="center">Print</td><td align="center">prn</td></tr><tr><td align="center">Process &#x2F; Procedure</td><td align="center">proc</td></tr><tr><td align="center">Properties</td><td align="center">prop</td></tr><tr><td align="center">Password</td><td align="center">psw</td></tr><tr><td align="center">Pointer</td><td align="center">ptr</td></tr><tr><td align="center">Public</td><td align="center">pub</td></tr><tr><td align="center">rect</td><td align="center">rc</td></tr><tr><td align="center">Reference</td><td align="center">ref</td></tr><tr><td align="center">Register</td><td align="center">reg</td></tr><tr><td align="center">request</td><td align="center">req</td></tr><tr><td align="center">Resource</td><td align="center">res</td></tr><tr><td align="center">return</td><td align="center">ret</td></tr><tr><td align="center">region</td><td align="center">rgn</td></tr><tr><td align="center">screen</td><td align="center">scr</td></tr><tr><td align="center">Second</td><td align="center">sec</td></tr><tr><td align="center">Segment</td><td align="center">seg</td></tr><tr><td align="center">Select</td><td align="center">sel</td></tr><tr><td align="center">Source</td><td align="center">src</td></tr><tr><td align="center">Standard</td><td align="center">std</td></tr><tr><td align="center">Storage</td><td align="center">stg</td></tr><tr><td align="center">Stream</td><td align="center">stm</td></tr><tr><td align="center">String</td><td align="center">str</td></tr><tr><td align="center">Subtract</td><td align="center">sub</td></tr><tr><td align="center">summation</td><td align="center">sum</td></tr><tr><td align="center">Server</td><td align="center">svr</td></tr><tr><td align="center">Synchronization</td><td align="center">sync</td></tr><tr><td align="center">System</td><td align="center">sys</td></tr><tr><td align="center">Table</td><td align="center">tbl</td></tr><tr><td align="center">Temporary</td><td align="center">temp &#x2F; tmp</td></tr><tr><td align="center">translate&#x2F;transation&#x2F;transparent</td><td align="center">tran &#x2F; trans</td></tr><tr><td align="center">Test</td><td align="center">tst</td></tr><tr><td align="center">text</td><td align="center">txt</td></tr><tr><td align="center">Unknown</td><td align="center">unk</td></tr><tr><td align="center">Update</td><td align="center">upd</td></tr><tr><td align="center">Upgrade</td><td align="center">upg</td></tr><tr><td align="center">Utility</td><td align="center">util</td></tr><tr><td align="center">Variable</td><td align="center">var</td></tr><tr><td align="center">Version</td><td align="center">ver</td></tr><tr><td align="center">Vertical</td><td align="center">vert</td></tr><tr><td align="center">Virus</td><td align="center">vir</td></tr><tr><td align="center">Window</td><td align="center">wnd</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 变量命名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 16.04 LTS下安装docker并创建深度学习环境</title>
      <link href="/2022/11/23/ubuntu16_04_LTS%E4%B8%8B%E5%AE%89%E8%A3%85docker%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/11/23/ubuntu16_04_LTS%E4%B8%8B%E5%AE%89%E8%A3%85docker%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h2><p>ubuntu下安装docker的官方教程：<a href="https://docs.docker.com/engine/install/ubuntu/">点我查看</a></p><p>ubuntu下安装参考教程：<a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu">点我查看</a></p><h3 id="1-1卸载旧版本"><a href="#1-1卸载旧版本" class="headerlink" title="1.1卸载旧版本"></a>1.1卸载旧版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h3 id="1-2使用apt安装"><a href="#1-2使用apt安装" class="headerlink" title="1.2使用apt安装"></a>1.2使用apt安装</h3><p>官网提供多种安装方式，这里使用apt安装</p><p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br></pre></td></tr></table></figure><p>添加docker密匙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 官方密匙</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>然后，我们需要向 <code>sources.list</code> 中添加 Docker 软件源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span><br><span class="line">  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 官方源</span><br><span class="line">echo \</span><br><span class="line">   &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line">   $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>以上命令会添加稳定版本的 Docker APT 镜像源，如果需要测试版本的 Docker 请将 stable 改为 test。</p><p>安装docker:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="1-3配置阿里云镜像加速器"><a href="#1-3配置阿里云镜像加速器" class="headerlink" title="1.3配置阿里云镜像加速器"></a>1.3配置阿里云镜像加速器</h3><p>参考网址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">点我查看</a></p><p>需要个人注册阿里云账号并开启容器镜像服务，该服务免费。</p><p>然后查看镜像加速地址，例如我的镜像加速地址为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://znrurdgu.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure><p>注意：这里需要是自己的镜像加速器，否则没有权限访问。</p><p>执行如下命令配置docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 生成配置文件</span><br><span class="line">docker-machine ssh default</span><br><span class="line"># 设置加速器地址：</span><br><span class="line"># sed -i &quot;s|EXTRA_ARGS=&#x27;|EXTRA_ARGS=&#x27;--registry-mirror=自己的镜像加速地址|g&quot; /var/lib/boot2docker/profile</span><br><span class="line">sed -i &quot;s|EXTRA_ARGS=&#x27;|EXTRA_ARGS=&#x27;--registry-mirror=https://znrurdgu.mirror.aliyuncs.com|g&quot; /var/lib/boot2docker/profile</span><br><span class="line"># 退出docker</span><br><span class="line">exit</span><br><span class="line"># 重启</span><br><span class="line">docker-machine restart default</span><br><span class="line"># 查看</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><p>查看docker信息后，可以发现 Registory mirrors 项的内容为刚刚设置的阿里云镜像地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://znrurdgu.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="2-安装-nvidia-docker"><a href="#2-安装-nvidia-docker" class="headerlink" title="2.安装 nvidia-docker"></a>2.安装 nvidia-docker</h2><p>docker 默认是不支持在容器内 GPU 加速的，NVIDIA 官方做了个工具箱来支持容器内 GPU 加速运算，这大大方便了深度学习开发者。</p><p>官方教程：<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installing-on-ubuntu-and-debian">点我查看</a></p><p>参考教程：<a href="https://blog.csdn.net/zhouchen1998/article/details/110679750">点我查看</a></p><p>依次执行如下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \</span><br><span class="line">   &amp;&amp; curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \</span><br><span class="line">   &amp;&amp; curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-container-runtime/experimental/$distribution/nvidia-container-runtime.list | sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="3-拉取cuda、cudnn的镜像"><a href="#3-拉取cuda、cudnn的镜像" class="headerlink" title="3.拉取cuda、cudnn的镜像"></a>3.拉取cuda、cudnn的镜像</h2><p>docker hub地址：<a href="https://hub.docker.com/r/nvidia/cuda">点我查看</a></p><p>官网给出多个版本可供拉取，这里使用cuda:10.0-cudnn7-devel-ubuntu16.04</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04</span><br></pre></td></tr></table></figure><h2 id="4-新建容器"><a href="#4-新建容器" class="headerlink" title="4.新建容器"></a>4.新建容器</h2><p>容器与镜像的关系好比：镜像为C++中的类，而容器为镜像的实例话，这里基于拉去的cuda:10.0-cudnn7-devel-ubuntu16.04镜像创建一个新的容器并进入容器中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run --name pytorch1.1-gpu -it --gpus all  nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 /bin/bash</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>docker container run：容器启动命令，同时会新建一个容器，因此该命令是在新建容器时使用</li><li>–name ：后的参数为新建容器的名称</li><li>-it：其实是 -i -t 的缩写，该参数使得容器具备交互性并与终端进行连接，将shell切换至终端</li><li>–gpu all：表示允许容器使用宿主机的所有GPU</li><li>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：创建新的容器所基于的镜像名称</li><li>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</li></ul><p>以该命令创建并进入容器后，该容器就具有了nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04镜像的配置，相当于实现了“实例话”</p><p>退出该容器后，可以使用以下命令进行查看：</p><ul><li>查看正在运行的容器：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls</span><br></pre></td></tr></table></figure><ul><li>查看容器运行历史：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure><p>这里可以看到刚才运行的容器pytorch1.1-gpu的信息。</p><h3 id="4-1-重启容器"><a href="#4-1-重启容器" class="headerlink" title="4.1.重启容器"></a>4.1.重启容器</h3><p>docker container start + 容器名或容器ID，启动一个已经完成创建并停止运行的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container start pytorch1.1-gpu</span><br></pre></td></tr></table></figure><p>查看正在运行的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls</span><br></pre></td></tr></table></figure><p>docker container exec   命令用于进入正在运行的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container exec -it pytorch1.1-gpu /bin/bash</span><br></pre></td></tr></table></figure><h3 id="4-2停止容器"><a href="#4-2停止容器" class="headerlink" title="4.2停止容器"></a>4.2停止容器</h3><p>docker container stop   用于停止正在运行的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop pytorch1.1-gpu</span><br></pre></td></tr></table></figure><h3 id="4-3删除容器"><a href="#4-3删除容器" class="headerlink" title="4.3删除容器"></a>4.3删除容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm  待删除的容器命令或ID</span><br></pre></td></tr></table></figure><p>注意：删除容器之前需要停止容器，避免报错。</p><h2 id="5-安装常用工具"><a href="#5-安装常用工具" class="headerlink" title="5.安装常用工具"></a>5.安装常用工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 安装git</span><br><span class="line">apt-get install git -y</span><br><span class="line"></span><br><span class="line"># 安装vim</span><br><span class="line">apt install vim</span><br><span class="line"></span><br><span class="line"># 安装cmake</span><br><span class="line">apt install cmake</span><br><span class="line"></span><br><span class="line"># 安装updatedb</span><br><span class="line">apt-get install mlocate</span><br><span class="line"></span><br><span class="line"># 安装wget</span><br><span class="line">apt-get install wget</span><br><span class="line"># 安装curl</span><br><span class="line">apt-get install curl</span><br></pre></td></tr></table></figure><h2 id="6-在容器中安装python"><a href="#6-在容器中安装python" class="headerlink" title="6.在容器中安装python"></a>6.在容器中安装python</h2><p>新建的容器默认没有python或pip、vim等工具，除非新建容器时将这些包一并装入，因此需要手动安装一些需要的包。新的容器中 apt-get 或 apt 命令是可以使用的：</p><p>参考网站：<a href="https://www.digitalocean.com/community/questions/unable-to-install-pyhton-3-7-version-on-ubuntu-16-04-error-couldn-t-find-any-package-by-regex-python3-7">点我查看</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#更新源</span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line">#安装python依赖</span><br><span class="line">apt install software-properties-common</span><br><span class="line"></span><br><span class="line">#添加源</span><br><span class="line">add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line"></span><br><span class="line">#更新源</span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line">#安装python</span><br><span class="line">apt install python3.7</span><br><span class="line"></span><br><span class="line">#查看python版本</span><br><span class="line">python --version 或 python -V</span><br><span class="line">python3 --version 或 python3 -V</span><br></pre></td></tr></table></figure><p>安装完python3.7可能需要修改默认python指向才能正常使用python3.7：</p><p>参考网站：<a href="https://blog.csdn.net/qq_33188180/article/details/109723636">点我查看</a></p><p>查看默认python指向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /usr/bin | grep python </span><br></pre></td></tr></table></figure><p>删除原有python软连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /usr/bin/python</span><br></pre></td></tr></table></figure><p>建立python到新的软链接python3.7：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/bin/python3.7  /usr/bin/python</span><br></pre></td></tr></table></figure><h2 id="7-在容器中安装pip"><a href="#7-在容器中安装pip" class="headerlink" title="7.在容器中安装pip"></a>7.在容器中安装pip</h2><p>这里也有个小坑！如果你写的是python3-pip 执行安装后，如果系统自带了python3.5，其实pip这时是装在了python3.5环境下了！！正确的指定方式，应该把小版本号也加上！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3.7-pip</span><br></pre></td></tr></table></figure><p>但是执行上述命令可能会报错，如果报错需要安装下面的方法添加pip安装源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure><p>由于上面已经将python指向了python3，因此下面直接使用python安装即可，否者要使用python3安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python get-pip.py --force-reinstall</span><br></pre></td></tr></table></figure><p>查看pip位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which pip</span><br></pre></td></tr></table></figure><p>我在安装后显示安装在：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip</p><p>建立pip软链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/bin/pip /usr/bin/pip</span><br></pre></td></tr></table></figure><p>注意：第一个地址  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip  为  which pip  的显示地址</p><p>查看pip版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -V 或 pip --version</span><br></pre></td></tr></table></figure><p>我的显示位置为：pip 20.3.4 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages&#x2F;pip (python 3.7)</p><p>至此，python将指向python3.7，pip将指向python 3.7的pip 20.3.4，实现python和pip的版本对应，且目标容器内二者都是唯一存在，不需要再使用python3和pip3调用python3的对应版本，这样使用pip安装的包将默认存放在  &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages  中。</p><h2 id="8-安装PyTorch"><a href="#8-安装PyTorch" class="headerlink" title="8.安装PyTorch"></a>8.安装PyTorch</h2><p>最新版本安装方法：<a href="https://pytorch.org/get-started/locally/">点我查看</a></p><p>历史版本安装方法：<a href="https://pytorch.org/get-started/previous-versions/">点我查看</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch==1.1.0 torchvision==0.3.0</span><br></pre></td></tr></table></figure><h2 id="9-安装eigen3"><a href="#9-安装eigen3" class="headerlink" title="9.安装eigen3"></a>9.安装eigen3</h2><p>参考网址：<a href="https://blog.csdn.net/xiangxianghehe/article/details/81236299?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control">点我查看</a></p><h3 id="9-1安装依赖"><a href="#9-1安装依赖" class="headerlink" title="9.1安装依赖"></a>9.1安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libopenblas-dev</span><br><span class="line">apt-get install --no-install-recommends libboost1.58-all-dev</span><br><span class="line">apt-get install libx11-dev</span><br><span class="line">apt-get install libgl1-mesa-dev </span><br><span class="line">apt-get install libglu1-mesa-dev </span><br><span class="line">apt-get install freeglut3-dev</span><br><span class="line">apt-get install doxygen</span><br><span class="line">wget https://nchc.dl.sourceforge.net/project/glew/glew/2.1.0/glew-2.1.0.tgz --no-check-certificate</span><br><span class="line">tar -xzvf glew-2.1.0.tgz</span><br><span class="line">cd glew-2.1.0/</span><br><span class="line">make </span><br><span class="line">make install</span><br><span class="line">ldconfig -v</span><br></pre></td></tr></table></figure><h3 id="9-2安装Eigen3-3-5"><a href="#9-2安装Eigen3-3-5" class="headerlink" title="9.2安装Eigen3.3.5"></a>9.2安装Eigen3.3.5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/eigenteam/eigen-git-mirror/archive/3.3.5.tar.gz</span><br><span class="line">tar -xzvf 3.3.5.tar.gz </span><br><span class="line">mv eigen-git-mirror-3.3.5/ eigen-3.3.5/</span><br><span class="line">cd eigen-3.3.5/</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">make install </span><br><span class="line">ldconfig -v</span><br></pre></td></tr></table></figure><h3 id="9-3测试"><a href="#9-3测试" class="headerlink" title="9.3测试"></a>9.3测试</h3><p>在容器中创建测试文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir install_test</span><br></pre></td></tr></table></figure><p>在宿主机上创建如下文件：</p><ul><li>CMakeLists.txt</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required( VERSION 2.8 )</span><br><span class="line">project(useEigen)</span><br><span class="line"></span><br><span class="line">set( CMAKE_BUILD_TYPE &quot;Release&quot; )</span><br><span class="line">set( CMAKE_CXX_FLAGS &quot;-O3&quot; )</span><br><span class="line">set( CMAKE_CXX_FLAGS &quot;-std=c++11&quot;)</span><br><span class="line"></span><br><span class="line"># 添加Eigen头文件</span><br><span class="line">include_directories( &quot;/usr/local/include/eigen3&quot; )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_executable(useEigen  main.cpp)</span><br><span class="line">find_package(Eigen3 REQUIRED)</span><br><span class="line">target_link_libraries($&#123;PROJECT_NAME&#125;  $&#123;EIGEN3_LIBS&#125;)</span><br></pre></td></tr></table></figure><ul><li>main.cpp</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;Eigen/Core&gt;</span><br><span class="line">#include &lt;Eigen/Dense&gt;</span><br><span class="line">#include &lt;Eigen/Geometry&gt;</span><br><span class="line">#include &lt;Eigen/StdVector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //1.rotation vector to  rotation matrix</span><br><span class="line">    Eigen::AngleAxisd rotationVector(M_PI/4,Eigen::Vector3d(0,0,1));</span><br><span class="line">    Eigen::Matrix3d rotationMatrix=Eigen::Matrix3d::Identity();</span><br><span class="line">    rotationMatrix=rotationVector.toRotationMatrix();</span><br><span class="line">    cout&lt;&lt;&quot;rotationMatrix \n&quot;&lt;&lt;rotationMatrix&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    //2.rotation vector to quaterniond</span><br><span class="line">    Eigen::Quaterniond q=Eigen::Quaterniond( rotationVector );</span><br><span class="line">    cout&lt;&lt;&quot;rotation quaternion \n&quot;&lt;&lt;q.coeffs()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    //3.rotaion vector to eulerAngles</span><br><span class="line">    Eigen::Vector3d eulerAngle=rotationVector.matrix().eulerAngles(0,1,2);</span><br><span class="line">    cout&lt;&lt;&quot;eulerAngle roll pitch yaw\n&quot;&lt;&lt;180*eulerAngle/M_PI&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将宿主机上的两个文件拷贝至容器中的install_test里进行测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp CMakeLists.txt pytorch1.1-gpu:/home/eigen-3.3.5/install_test</span><br><span class="line">docker cp main.cpp  pytorch1.1-gpu:/home/eigen-3.3.5/install_test</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd install_test</span><br><span class="line">cmake  .</span><br><span class="line">make</span><br><span class="line">./useEigen</span><br></pre></td></tr></table></figure><p>若显示结果如下，则说明测试成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rotationMatrix </span><br><span class="line"> 0.707107 -0.707107         0</span><br><span class="line"> 0.707107  0.707107         0</span><br><span class="line">        0         0         1</span><br><span class="line">rotation quaternion </span><br><span class="line">       0</span><br><span class="line">       0</span><br><span class="line">0.382683</span><br><span class="line"> 0.92388</span><br><span class="line">eulerAngle roll pitch yaw</span><br><span class="line">-0</span><br><span class="line"> 0</span><br><span class="line">45</span><br></pre></td></tr></table></figure><h2 id="10-安装tensorflow"><a href="#10-安装tensorflow" class="headerlink" title="10.安装tensorflow"></a>10.安装tensorflow</h2><ul><li>tensorflow与cuda的版本对应关系</li></ul><p><img src="https://i.loli.net/2021/05/21/PEoKmlhbcXisCWt.png"></p><p>安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.0 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> docker </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16-04-LTS：anaconda3安装</title>
      <link href="/2022/11/23/ubuntu16_04_LTS_anaconda3%E5%AE%89%E8%A3%85/"/>
      <url>/2022/11/23/ubuntu16_04_LTS_anaconda3%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载清华源镜像文件"><a href="#1-下载清华源镜像文件" class="headerlink" title="1. 下载清华源镜像文件"></a>1. 下载清华源镜像文件</h1><p>网址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><p>版本：建议安装Anaconda3-5.2.0-Linux-x86_64.sh</p><h1 id="2-进入下载目录执行以下命令进行安装"><a href="#2-进入下载目录执行以下命令进行安装" class="headerlink" title="2. 进入下载目录执行以下命令进行安装"></a>2. 进入下载目录执行以下命令进行安装</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3<span class="number">-5.2</span><span class="number">.0</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/16/9curYTMUWmveogb.png"></p><ul><li>一路按回车至底部，出现提示：是否接受安装协议时：回复yes:</li></ul><p><img src="https://i.loli.net/2021/05/16/JU2iRojd3vH4fsY.png"></p><ul><li>默认的路径为&#x2F;home&#x2F;username&#x2F;anaconda3，默认的话直接按ENTER即可，等待安装过程完成即可。</li></ul><p><img src="https://i.loli.net/2021/05/16/iVDa14zUNREPYKs.png"></p><ul><li>询问是否将Anaconda3加入到环境变量中，选：yes</li></ul><p><img src="https://i.loli.net/2021/05/16/DBj5P8VMTzgYu2s.png"></p><ul><li>默认的话直接按ENTER即可，等待安装过程完成即可。</li></ul><h1 id="3-检查是否安装成功"><a href="#3-检查是否安装成功" class="headerlink" title="3.检查是否安装成功"></a>3.检查是否安装成功</h1><p>  使用以下命令可以查看已经存在的conda虚拟环境</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><p>  使用以下命令可以查看conda的路径是否添加成功</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>  使其立即生效，在终端执行：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>  <strong>4.进入任意一个创建的虚拟环境里面检查python</strong></p><p>  在虚拟环境中输入以下命令：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>  会出现类似以下含有anaconda的字样：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.6</span><span class="number">.5</span> |Anaconda, Inc.| (<span class="keyword">default</span>, Apr <span class="number">29</span> <span class="number">2018</span>, <span class="number">16</span>:<span class="number">14</span>:<span class="number">56</span>) </span><br><span class="line">[GCC <span class="number">7.2</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p>  如果没有出现以下字样，说明系统的python版本需要指定，使用以下命令：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>  在bashrc中添加一行：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias python=python3</span><br></pre></td></tr></table></figure><p>  (注意这里的python3是和安装的anaconda3对应的默认pyrhon对应的，可以在conda虚拟环境中的base环境中查看对应的python版本)</p><p>  然后激活bashrc</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>  这样就可以使用conda创建的虚拟环境对应的python。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16-04手动安装英伟达显卡驱动</title>
      <link href="/2022/11/23/ubuntu16_04%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E8%8B%B1%E4%BC%9F%E8%BE%BE%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/11/23/ubuntu16_04%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E8%8B%B1%E4%BC%9F%E8%BE%BE%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-屏蔽开源驱动"><a href="#1-屏蔽开源驱动" class="headerlink" title="1.屏蔽开源驱动"></a>1.屏蔽开源驱动</h2><p>屏蔽开源驱动nouveau安装过程会询问是否屏蔽，手动屏蔽也有多种操作方式，可以使用如下方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>然后添加内容到最底段，要回车另起一行。添加的内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau </span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>保存再终端更新内核命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>可能会出现如下警告，忽略即可：</p><img src="https://i.loli.net/2021/06/22/lkPBpOvA3MIsfXq.png" style="zoom:50%;" /><h2 id="2-下载驱动"><a href="#2-下载驱动" class="headerlink" title="2.下载驱动"></a>2.下载驱动</h2><p>然后，重启电脑。下载NVIDIA的驱动形如：NVIDIA-Linux-x86_64-384.run 下载网址为：<a href="https://www.geforce.cn/drivers%E3%80%82">https://www.geforce.cn/drivers。</a></p><p>在win10下的设备管理器中可以查看显卡的型号。型号为：NVIDIA GeForce GTX 1050 Ti电脑类型为：笔记本</p><p>所以手动搜索驱动程序时，应该这样选择：</p><p><img src="https://i.loli.net/2021/06/22/S69TiRpgEc3ydPk.png"></p><p>选择第一个驱动版本一般可以安装成功的，但不同电脑可能结果不同，安装失败的话还需要更换版本尝试安装。</p><p>下好的”.run”文件放在home ，目录下，最好将文件名称该为简单点的。</p><h2 id="3-进入root的命令行模型"><a href="#3-进入root的命令行模型" class="headerlink" title="3.进入root的命令行模型"></a>3.进入root的命令行模型</h2><p>安装驱动重启电脑，进入ubuntu高级模式，然后选择下图中的 root 选项：</p><img src="https://i.loli.net/2021/06/22/rnKMFl81T4giEUf.png" style="zoom:50%;" /><p>然后按”回车”：</p><img src="https://i.loli.net/2021/06/22/I1ZeWDCaTcEx5X2.png" style="zoom:50%;" /><h2 id="4-安装驱动"><a href="#4-安装驱动" class="headerlink" title="4.安装驱动"></a>4.安装驱动</h2><p>然后，按”回车”，进入系统目录。安装驱动程序，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/用户名</span><br></pre></td></tr></table></figure><p>关闭当前图形环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>因为之前的后缀为”.run”的驱动文件放在home目录下，所以， 到驱动所在文件夹后 执行如下命令修改权限并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> a+x NVIDIA-Linux-x86_64-xxx.run </span><br><span class="line">sudo sh NVIDIA-Linux-x86_64-xxx.run -no-opengl-files</span><br></pre></td></tr></table></figure><p>然后剩余步骤均为默认即可，直接回车执行下一步。</p><ul><li>提示”dkms”安装时，需要安装。</li><li>会提示有”32”字样，选择”OK”继续即可。</li></ul><p>最后重新启动图形环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm start</span><br></pre></td></tr></table></figure><h2 id="5-查看是否安装成功"><a href="#5-查看是否安装成功" class="headerlink" title="5.查看是否安装成功"></a>5.查看是否安装成功</h2><p>检查安装是否成功并重启电脑，正常进入系统。</p><p>如果出现循环输入登录密码但是无法登录成功的情况，则为驱动版本和自己的电脑不匹配，需要下载其他显卡驱动版本尝试。</p><p>进一步检查，打开终端输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>出现如下所示信息，即为安装成功:</p><img src="https://i.loli.net/2021/06/22/gZB9FKjSl2T8wGV.png" style="zoom:50%;" /><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 显卡驱动安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10与ubuntu16-04-LTS双系统安装教程</title>
      <link href="/2022/11/23/win10%E4%B8%8Eubuntu16_04_LTS%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2022/11/23/win10%E4%B8%8Eubuntu16_04_LTS%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建空闲分区"><a href="#1-创建空闲分区" class="headerlink" title="1.创建空闲分区"></a>1.创建空闲分区</h2><p>在win系统下，在”此电脑”→右键”管理“→“磁盘管理”→右键一个不用的磁盘并”格式化“→”删除卷“，分出一个状态为“未分配”的磁盘用于安装ubuntu16.04 LTS</p><h2 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2.开始安装"></a>2.开始安装</h2><p>插入具有ubuntu16.04 LTS系统的U盘开始安装系统</p><ul><li>选择系统语言，可以是中文或英文。如需要安装tensflow的话建议安装英文版本</li><li>选择安装类型为其它选项</li></ul><img src="https://i.loli.net/2021/06/22/9FEvKkQmATYq7Ip.jpg" style="zoom: 67%;" /><h2 id="3-双击空闲盘进行分区"><a href="#3-双击空闲盘进行分区" class="headerlink" title="3.双击空闲盘进行分区"></a>3.双击空闲盘进行分区</h2><h3 id="3-1-x2F-boot分区"><a href="#3-1-x2F-boot分区" class="headerlink" title="3.1   &#x2F;boot分区"></a>3.1   &#x2F;boot分区</h3><p>&#x2F;boot：这个就是实现你双系统的原因了，这个就是用于启动 ubuntu 的目录，里面会有系统的引导，这个文件其实只有几十兆，但是我们建议将其划分为 200M 文件格式为 ext4，这个分区必不可少，否则后果你懂得！</p><h3 id="3-2-swap分区"><a href="#3-2-swap分区" class="headerlink" title="3.2   swap分区"></a>3.2   swap分区</h3><p>swap:这个是 Linux 也就是 ubuntu 的交换区目录，这个一般的大小为内存的 2 倍左右， 主要是用来在电脑内存不足的情况下，系统会调用这片区域，来运行程序，我们可以将其分为 4G， 这个把ext4换成交换空间，英文swap</p><h3 id="3-3-x2F-分区"><a href="#3-3-x2F-分区" class="headerlink" title="3.3    &#x2F;分区"></a>3.3    &#x2F;分区</h3><p>&#x2F;:这是 linux 也就是 ubuntu 的根目录就一个反斜杠表示，相当于windows的C盘， 我们将其分为 10G，文件格式为 ext4，条件允许可以大一点，可以20G，毕竟ubuntu装软件默认是装在这里的，大一点可能会省去后面隐藏的麻烦。</p><h3 id="3-4-x2F-home分区"><a href="#3-4-x2F-home分区" class="headerlink" title="3.4   &#x2F;home分区"></a>3.4   &#x2F;home分区</h3><p>&#x2F;home:这是 ubuntu 的“其他盘”， 这个也可以说是我们的个人目录，相当于windows的其他盘，所以为了让我们自己的目录大一点，剩下的全分给它，文件格式为 ext4</p><img src="https://i.loli.net/2021/06/22/IZixlEy6FC8vRKn.png" style="zoom: 67%;" /><p>以上两步新建分区后的类似效果：</p><img src="https://i.loli.net/2021/06/22/KxGUtJWhYPMRS3p.png" style="zoom:67%;" /><h2 id="4-选择安装启动引导的设备"><a href="#4-选择安装启动引导的设备" class="headerlink" title="4.选择安装启动引导的设备"></a>4.选择安装启动引导的设备</h2><p>安装启动引导的设备：windows boot manager</p><img src="https://i.loli.net/2021/06/22/v2JbClS7IwjU46a.png" style="zoom:50%;" /><h2 id="5-自动安装"><a href="#5-自动安装" class="headerlink" title="5.自动安装"></a>5.自动安装</h2><img src="https://i.loli.net/2021/06/22/oMECN25eyXsIAKS.jpg" style="zoom: 50%;" /><img src="https://i.loli.net/2021/06/22/T7CP1BcVWb9wxIR.jpg" style="zoom:50%;" /><p>安装完成后可能显示画面模糊，这是因为没有安装显卡驱动，可以按照教程”Ubuntu16.04手动安装英伟达显卡驱动”安装即可</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手眼标定-Ros-Kinetic-Realsense-D435-AUBOi5-Ubuntu-16-04</title>
      <link href="/2022/11/23/%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A_Ros_Kinetic_Realsense_D435_AUBOi5_Ubuntu_16_04/"/>
      <url>/2022/11/23/%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A_Ros_Kinetic_Realsense_D435_AUBOi5_Ubuntu_16_04/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装AUBOi5的Moveit功能包"><a href="#1-安装AUBOi5的Moveit功能包" class="headerlink" title="1.安装AUBOi5的Moveit功能包"></a>1.安装AUBOi5的Moveit功能包</h2><h3 id="1-1环境配置"><a href="#1-1环境配置" class="headerlink" title="1.1环境配置"></a>1.1环境配置</h3><p>下载Move-it package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-moveit</span><br></pre></td></tr></table></figure><p>下载moveit_visual_tools</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-moveit-visual-tools</span><br></pre></td></tr></table></figure><p>下载industrial_core package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-industrial-core</span><br></pre></td></tr></table></figure><h3 id="1-2建立ROS工作空间"><a href="#1-2建立ROS工作空间" class="headerlink" title="1.2建立ROS工作空间"></a>1.2建立ROS工作空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/ros/kinetic/setup.bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># catkin_ws为工作空间名称</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="1-2-在-x2F-catkin-ws-x2F-src-目录中下载Moveit功能包，并编译"><a href="#1-2-在-x2F-catkin-ws-x2F-src-目录中下载Moveit功能包，并编译" class="headerlink" title="1.2 在  ~&#x2F;catkin_ws&#x2F;src  目录中下载Moveit功能包，并编译"></a>1.2 在  ~&#x2F;catkin_ws&#x2F;src  目录中下载Moveit功能包，并编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/lg609/aubo_robot.git</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><p>注释：如果提示下列错误，则说明在安装Ros的时候没有安装Ros-moveit功能包：</p><p><img src="https://i.loli.net/2021/05/28/jShBMoz9apcKVXE.png"></p><p>解决办法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-moveit*</span><br></pre></td></tr></table></figure><p>注：参考网址：<a href="https://github.com/tahsinkose/hector-moveit/issues/4">点我查看</a></p><h2 id="2-安装Realsense-D435相机驱动与功能包"><a href="#2-安装Realsense-D435相机驱动与功能包" class="headerlink" title="2.安装Realsense D435相机驱动与功能包"></a>2.安装Realsense D435相机驱动与功能包</h2><h3 id="2-1驱动安装"><a href="#2-1驱动安装" class="headerlink" title="2.1驱动安装"></a>2.1驱动安装</h3><p>官方安装教程：<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">点我查看</a></p><p>参考教程：<a href="https://zhuanlan.zhihu.com/p/93127918">点我查看</a></p><p>注册公匙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE</span><br></pre></td></tr></table></figure><p>添加服务器至存储列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb https://librealsense.intel.com/Debian/apt-repo xenial main&quot;</span> -u</span><br></pre></td></tr></table></figure><p>安装所需库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install librealsense2-dkms</span><br><span class="line">sudo apt-get install librealsense2-utils</span><br></pre></td></tr></table></figure><p>安装功能包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install librealsense2-dev</span><br><span class="line">sudo apt-get install librealsense2-dbg</span><br></pre></td></tr></table></figure><p>启动连接界面，进行测试，若可以看到相机图像则证明驱动安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">realsense-viewer</span><br></pre></td></tr></table></figure><h3 id="2-2功能包安装"><a href="#2-2功能包安装" class="headerlink" title="2.2功能包安装"></a>2.2功能包安装</h3><p>创建工作空间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src &amp;&amp; <span class="built_in">cd</span> ~/catkin_ws/src</span><br></pre></td></tr></table></figure><p>下载源码，并检查依赖:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b 2.2.7 https://github.com/IntelRealSense/realsense-ros.git </span><br><span class="line"><span class="built_in">cd</span> realsense-ros/realsense2_camera git checkout `git tag | <span class="built_in">sort</span> -V | grep -P <span class="string">&quot;^\d+\.\d+\.\d+&quot;</span> | <span class="built_in">tail</span> -1`</span><br><span class="line">sudo apt-get install ros-kinetic-ddynamic-reconfigure</span><br></pre></td></tr></table></figure><p>编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make -DCATKIN_ENABLE_TESTING=False -DCMAKE_BUILD_TYPE=Release </span><br><span class="line">catkin_make install </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/catkin_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>测试，启动相机节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看发布的话题</span></span><br><span class="line">rostopic list</span><br></pre></td></tr></table></figure><h2 id="3-安装ros-kinetic-visp依赖包"><a href="#3-安装ros-kinetic-visp依赖包" class="headerlink" title="3.安装ros-kinetic-visp依赖包"></a>3.安装ros-kinetic-visp依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-visp</span><br></pre></td></tr></table></figure><h2 id="4-安装aruco-ros二维码检测功能包"><a href="#4-安装aruco-ros二维码检测功能包" class="headerlink" title="4.安装aruco_ros二维码检测功能包"></a>4.安装aruco_ros二维码检测功能包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> -b kinetic-devel https://github.com/pal-robotics/aruco_ros.git</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><h2 id="5-安装visp-hand2eye-calibration"><a href="#5-安装visp-hand2eye-calibration" class="headerlink" title="5.安装visp_hand2eye_calibration"></a>5.安装visp_hand2eye_calibration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> -b kinetic-devel https://github.com/lagadic/vision_visp.git</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">catkin_make --pkg visp_hand2eye_calibration</span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><h2 id="6-安装easy-handeye手眼标定功能包"><a href="#6-安装easy-handeye手眼标定功能包" class="headerlink" title="6.安装easy_handeye手眼标定功能包"></a>6.安装easy_handeye手眼标定功能包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/IFL-CAMP/easy_handeye</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><h2 id="7-标定方法"><a href="#7-标定方法" class="headerlink" title="7.标定方法"></a>7.标定方法</h2><h3 id="7-1眼在手上-eye-in-hand标定方法"><a href="#7-1眼在手上-eye-in-hand标定方法" class="headerlink" title="7.1眼在手上 eye-in-hand标定方法"></a>7.1眼在手上 eye-in-hand标定方法</h3><h4 id="7-1-1修改launch文件"><a href="#7-1-1修改launch文件" class="headerlink" title="7.1.1修改launch文件"></a>7.1.1修改launch文件</h4><p>标定过程需启动 ur5 机械臂的相关节点，realsense 节点，aruco 节点，easy_handeye 节点，可以写一个 launch 文件同时启动上述节点，也可以分别启动。easy_handeye 包中给出了用一个 launch 文件实现的示例，在如下的目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch/ur5_kinect_calibration.launch</span><br></pre></td></tr></table></figure><p>我们可以在此基础上进行修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 launch 文件拷贝到 easy_handeye 功能包的 launch 目录中，顺便改个名字</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch</span><br><span class="line"><span class="built_in">cp</span> ur5_kinect_calibration.launch ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_in_hand_calibration.launch</span><br><span class="line">gedit  ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_in_hand_calibration.launch</span><br></pre></td></tr></table></figure><p>修改 launch 文件如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;namespace_prefix&quot;</span> <span class="attr">default</span>=<span class="string">&quot;aubo_i5_kinect_handeyecalibration&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 169.254.3.20为AUBOi5机械臂的IP地址,根据实际情况修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;robot_ip&quot;</span> <span class="attr">doc</span>=<span class="string">&quot;The IP address of the UR5 robot&quot;</span> <span class="attr">default</span>=<span class="string">&quot;169.254.3.20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;marker_size&quot;</span> <span class="attr">doc</span>=<span class="string">&quot;Size of the ArUco marker used, in meters&quot;</span> <span class="attr">default</span>=<span class="string">&quot;0.1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;marker_id&quot;</span> <span class="attr">doc</span>=<span class="string">&quot;The ID of the ArUco marker used&quot;</span> <span class="attr">default</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1. start the Realsense435 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find realsense2_camera)/launch/rs_camera.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. start ArUco --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;aruco_tracker&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;aruco_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;single&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;/camera_info&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/camera/color/camera_info&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;/image&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/camera/color/image_raw&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;image_is_rectified&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;marker_size&quot;</span>        <span class="attr">value</span>=<span class="string">&quot;$(arg marker_size)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;marker_id&quot;</span>          <span class="attr">value</span>=<span class="string">&quot;$(arg marker_id)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;reference_frame&quot;</span>    <span class="attr">value</span>=<span class="string">&quot;camera_color_frame&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;camera_frame&quot;</span>       <span class="attr">value</span>=<span class="string">&quot;camera_color_frame&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;marker_frame&quot;</span>       <span class="attr">value</span>=<span class="string">&quot;camera_marker&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. start the robot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find aubo_i5_moveit_config)/launch/moveit_planning_execution.launch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. start easy_handeye --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find easy_handeye)/launch/calibrate.launch&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;namespace_prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg namespace_prefix)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- true：相机安装在机械臂末端 false: 相机安装在机械臂外--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;eye_on_hand&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- tracking_base_frame 为相机坐标系 camera_color_frame --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;tracking_base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;camera_color_frame&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;tracking_marker_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;camera_marker&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- robot_base_frame 为机器人基座坐标系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;robot_base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- robot_effector_frame 为工具坐标系，即：与相机相连的关节名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;robot_effector_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wrist3_Link&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;freehand_robot_movement&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;robot_velocity_scaling&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;robot_acceleration_scaling&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;move_group&quot;</span> <span class="attr">value</span>=<span class="string">&quot;manipulator_i5&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-1-2启动-launch-文件，开始标定"><a href="#7-1-2启动-launch-文件，开始标定" class="headerlink" title="7.1.2启动 launch 文件，开始标定"></a>7.1.2启动 launch 文件，开始标定</h4><p>启动 launch 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch easy_handeye eye_to_hand_calibration.launch</span><br></pre></td></tr></table></figure><p>成功运行后，会同时打开三个界面：</p><img src="https://i.loli.net/2021/05/28/4Xmzb3hFrnd5R7c.jpg" alt="界面1" style="zoom:50%;" /><img src="https://i.loli.net/2021/05/28/Av7F6K9Gu8pfZs3.jpg"  alt="界面2" style="zoom: 67%;" /><p><img src="https://i.loli.net/2021/05/28/2ydewHu76InBqfs.jpg" alt="界面3"></p><p>在界面 2 中，点击菜单栏(菜单栏在屏幕左上角)的 Plugins -&gt; Visulization -&gt; Image View，选择 &#x2F;aruco_tracker&#x2F;result 话题，界面会如下所示：</p><img src="https://i.loli.net/2021/05/28/YTKPw46HouZGpk9.jpg" style="zoom: 50%;" /><h4 id="7-1-3标定步骤"><a href="#7-1-3标定步骤" class="headerlink" title="7.1.3标定步骤"></a>7.1.3标定步骤</h4><ol><li>手动调节机械臂，使 aruco 二维码移动至相机视野中心处附近，作为 home config。在界面 3 中，点击 check starting pose，若检查成功，界面会出现： 0&#x2F;17，ready to start</li><li>界面 3 中依次点击 Next Pose，Plan，Execute，机械臂会移动至新的位置，若二维码在相机视野范围内，且能检测成功，则进行下一步</li><li>界面 2 中点击 Take Sample，若 Samples 对话框中出现有效信息，说明第一个点标定成功</li><li>重复执行步骤 2 和步骤 3，直至 17 个点全部标定完毕</li><li>界面 2 中点击 Compute，则 Result 对话框中会出现结果</li><li>界面 2 中 Save，会将结果保存为一个 YAML 文件，路径为 <code>~/.ros/easy_handeye</code></li></ol><p><img src="https://i.loli.net/2021/05/28/gV9AWphbyU5mFlP.jpg"></p><h3 id="7-2眼在手外-eye-to-hand标定方法"><a href="#7-2眼在手外-eye-to-hand标定方法" class="headerlink" title="7.2眼在手外 eye-to-hand标定方法"></a>7.2眼在手外 eye-to-hand标定方法</h3><p>方法与“眼在手上”基本相同，需要修改一下 launch 文件，注意两个 launch 文件不要重名。</p><p>唯一修改的地方是 easy_handeye 功能包 calibrate.launch 文件中 “eye_on_hand” 参数改成 true，如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 launch 文件拷贝到 easy_handeye 功能包的 launch 目录中，顺便改个名字</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch</span><br><span class="line"><span class="built_in">cp</span> ur5_kinect_calibration.launch ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_to_hand_calibration.launch</span><br><span class="line">gedit  ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_to_hand_calibration.launch</span><br></pre></td></tr></table></figure><h2 id="8-将标定结果发送至TF树"><a href="#8-将标定结果发送至TF树" class="headerlink" title="8.将标定结果发送至TF树"></a>8.将标定结果发送至TF树</h2><p>easy_handeye 功能包提供了 publish.launch 文件，可以将标定好的 TF 发布出去</p><h3 id="8-1眼在手上eye-in-hand"><a href="#8-1眼在手上eye-in-hand" class="headerlink" title="8.1眼在手上eye-in-hand"></a>8.1眼在手上eye-in-hand</h3><p>修改publish.launch 文件,要修改 “namespace_prefix” 参数，与眼在手上标定 launch 文件中的 “namespace_prefix” 一致，这样才能找到标定好的 YAML 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;eye_on_hand&quot;</span> <span class="attr">doc</span>=<span class="string">&quot;eye-on-hand instead of eye-on-base&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;namespace_prefix&quot;</span> <span class="attr">default</span>=<span class="string">&quot;ur5_realsense_handeyecalibration&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">if</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;namespace&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg namespace_prefix)_eye_on_hand&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;namespace&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg namespace_prefix)_eye_on_base&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--it is possible to override the link names saved in the yaml file in case of name clashes, for example--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">if</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_effector_frame&quot;</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_base_frame&quot;</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;tracking_base_frame&quot;</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;inverse&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--publish hand-eye calibration--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;$(arg namespace)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;eye_on_hand&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg robot_base_frame)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">if</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_effector_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg robot_effector_frame)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;tracking_base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg tracking_base_frame)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;inverse&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg inverse)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;$(anon handeye_publisher)&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;easy_handeye&quot;</span> <span class="attr">type</span>=<span class="string">&quot;publish.py&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2眼在手外-eye-to-hand"><a href="#8-2眼在手外-eye-to-hand" class="headerlink" title="8.2眼在手外 eye-to-hand"></a>8.2眼在手外 eye-to-hand</h3><p>修改 “namespace_prefix” 外（同上），还要将 “eye_on_hand” 参数设为false</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;eye_on_hand&quot;</span> <span class="attr">doc</span>=<span class="string">&quot;eye-on-hand instead of eye-on-base&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;namespace_prefix&quot;</span> <span class="attr">default</span>=<span class="string">&quot;ur5_realsense_handeyecalibration&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">if</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;namespace&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg namespace_prefix)_eye_on_hand&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;namespace&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg namespace_prefix)_eye_on_base&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--it is possible to override the link names saved in the yaml file in case of name clashes, for example--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">if</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_effector_frame&quot;</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_base_frame&quot;</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;tracking_base_frame&quot;</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;inverse&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--publish hand-eye calibration--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;$(arg namespace)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;eye_on_hand&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg robot_base_frame)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">if</span>=<span class="string">&quot;$(arg eye_on_hand)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_effector_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg robot_effector_frame)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;tracking_base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg tracking_base_frame)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;inverse&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg inverse)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;$(anon handeye_publisher)&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;easy_handeye&quot;</span> <span class="attr">type</span>=<span class="string">&quot;publish.py&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9.测试"></a>9.测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 publish.luanch 文件，以眼在手上为例</span></span><br><span class="line">roslaunch easy_handeye publish.launch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 TF（改成自己的工具坐标系与相机坐标系）</span></span><br><span class="line">rosrun tf tf_echo /tool0_controller /camera_color_frame</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/28/BgCzvN85MxAsUJV.jpg"></p><p>注意：这里四元数的顺序是 [qx, qy, qz, qw]</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 机器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手眼标定 </tag>
            
            <tag> AUBOi5 </tag>
            
            <tag> Realsense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm使用ssh连接服务器中的docker容器</title>
      <link href="/2022/11/23/Pycharm%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84docker%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/11/23/Pycharm%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84docker%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-拉取cuda、cudnn的docker镜像"><a href="#1-拉取cuda、cudnn的docker镜像" class="headerlink" title="1.拉取cuda、cudnn的docker镜像"></a>1.拉取cuda、cudnn的docker镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04</span><br></pre></td></tr></table></figure><h2 id="2-新建并启动交互式容器"><a href="#2-新建并启动交互式容器" class="headerlink" title="2.新建并启动交互式容器"></a>2.新建并启动交互式容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name tensorflow1.2.1-gpu -v /home/docker_share/:/home/ -p 2201:22 --gpus all nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 /bin/bash</span><br></pre></td></tr></table></figure><p>解释：</p><p>–name ：设置新容器的名称为tensorflow1.2.1-gpu</p><p>-v ：设置文件映射，将宿主机的文件&#x2F;home&#x2F;docker_share&#x2F;映射到该容器的&#x2F;home&#x2F;目录下</p><p>-p ：设置容器的端口与宿主机的端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></p><p>–gpus all 许容器使用所有GPU</p><p>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：容器的依赖镜像</p><p>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</p><p>注释：</p><p>为了构建有序且规范的端口映射关系，这里设置一个默认规则用于设置容器的端口与宿主机的端口映射：主机端口固定，容器端口以主机端口为起始位依次排开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">容器端口主机端口</span><br><span class="line">220122</span><br><span class="line">220222</span><br></pre></td></tr></table></figure><h2 id="3-进入容器后修改容器的root密码"><a href="#3-进入容器后修改容器的root密码" class="headerlink" title="3.进入容器后修改容器的root密码"></a>3.进入容器后修改容器的root密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户名为root,密码为passwd(将其该为自己想要的密码)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;root:passwd&#x27;</span> | chpasswd</span><br></pre></td></tr></table></figure><h2 id="4-安装openssh-server并启动"><a href="#4-安装openssh-server并启动" class="headerlink" title="4.安装openssh-server并启动"></a>4.安装openssh-server并启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新源</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">apt-get -y update</span><br><span class="line"><span class="comment"># 安装openssh-server</span></span><br><span class="line">apt-get install openssh-server</span><br><span class="line"><span class="comment"># 启动之前需手动创建/var/run/sshd，不然启动sshd的时候会报错</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/run/sshd</span><br><span class="line"><span class="comment"># sshd以守护进程运行</span></span><br><span class="line">/usr/sbin/sshd -D &amp;</span><br><span class="line"><span class="comment"># 安装netstat，查看sshd是否监听22端口</span></span><br><span class="line">apt-get install net-tools</span><br><span class="line">netstat -apn | grep ssh</span><br><span class="line"><span class="comment"># 显示如下</span></span><br><span class="line"><span class="comment"># root@a78aa2e72670:/# netstat -apn | grep ssh</span></span><br><span class="line"><span class="comment"># tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1266/sshd</span></span><br><span class="line"><span class="comment"># tcp6       0      0 :::22                   :::*                    LISTEN      1266/sshd</span></span><br></pre></td></tr></table></figure><h2 id="5-ssh登录设置"><a href="#5-ssh登录设置" class="headerlink" title="5.ssh登录设置"></a>5.ssh登录设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成ssh key</span></span><br><span class="line">ssh-keygen -t rsa </span><br><span class="line"><span class="comment"># 然后提示的设置用默认设置，一直回车即可</span></span><br><span class="line"><span class="comment"># 修改sshd-config允许root登陆</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>检查下面的命令是否被注释，会后面的参数是否为yes，若没有该命令需要在文件尾部新增该命令以允许root用户使用ssh登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin <span class="built_in">yes</span> <span class="comment"># 约在28行：将PermitRootLogin prohibit-password改为PermitRootLogin yes</span></span><br></pre></td></tr></table></figure><p>修改完sshd-config之后需要重启sshd服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到sshd的进程pid</span></span><br><span class="line">ps -aux | grep ssh</span><br><span class="line"><span class="comment"># 杀掉sshd的进程pid</span></span><br><span class="line"><span class="built_in">kill</span> -9 sshd的进程pid号</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">/usr/sbin/sshd -D &amp;</span><br><span class="line"><span class="comment"># 再次查看</span></span><br><span class="line">ps -aux | grep ssh</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@a78aa2e72670:/<span class="comment"># ps -aux | grep ssh</span></span><br><span class="line">root      1266  0.0  0.0  65512  5468 pts/0    S    01:14   0:00 /usr/sbin/sshd -D</span><br><span class="line">root      1301  0.0  0.0  11284   932 pts/0    S+   01:18   0:00 grep --color=auto ssh</span><br><span class="line">root@a78aa2e72670:/<span class="comment"># kill -9 1266</span></span><br><span class="line">root@a78aa2e72670:/<span class="comment"># /usr/sbin/sshd -D &amp;</span></span><br><span class="line">[2] 1302</span><br><span class="line">[1]   Killed                  /usr/sbin/sshd -D</span><br><span class="line">root@a78aa2e72670:/<span class="comment"># ps -aux | grep ssh</span></span><br><span class="line">root      1302  0.0  0.0  65512  5756 pts/0    S    01:19   0:00 /usr/sbin/sshd -D</span><br><span class="line">root      1304  0.0  0.0  11284   944 pts/0    S+   01:19   0:00 grep --color=auto ssh</span><br></pre></td></tr></table></figure><h2 id="6-退出容器，但不要停止容器，并进行连接测试"><a href="#6-退出容器，但不要停止容器，并进行连接测试" class="headerlink" title="6.退出容器，但不要停止容器，并进行连接测试"></a>6.退出容器，但不要停止容器，并进行连接测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在主机登录，需要输入的root密码为前面设置的root密码</span></span><br><span class="line">ssh root@localhost -p 8080 <span class="comment"># 8080为刚开始创建容器时候设置的主机端口映射，与容器的22端口形成映射</span></span><br><span class="line"><span class="comment"># 在其他机器上可以使用以下命令登陆，假设宿主机ip为10.12.11.xx</span></span><br><span class="line">ssh root@10.12.11.xx -p 8080</span><br></pre></td></tr></table></figure><p>这里如果提示：ssh_exchange_identification: read: Connection reset by peer</p><p>则：可能是容器的 sshd服务未开启，再次进入容器重启sshd服务即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/sshd -D &amp;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@dc627a3adc4d:/<span class="comment"># ps -aux | grep ssh</span></span><br><span class="line">root        32  0.0  0.0  11284   932 pts/1    S+   03:43   0:00 grep --color=auto ssh</span><br><span class="line">root@dc627a3adc4d:/<span class="comment"># /usr/sbin/sshd -D &amp;</span></span><br><span class="line">[1] 33</span><br><span class="line">root@dc627a3adc4d:/<span class="comment"># ps -aux | grep ssh</span></span><br><span class="line">root        33  0.0  0.0  65512  5420 pts/1    S    03:43   0:00 /usr/sbin/sshd -D</span><br><span class="line">root        35  0.0  0.0  11284   936 pts/1    S+   03:43   0:00 grep --color=auto ssh</span><br></pre></td></tr></table></figure><p>注释：配置完成后可以将容器保存为镜像</p><p>docker commit -a “提交的镜像作者名称” -m “提交时的说明文字” 容器ID或容器名称  保存镜像名称:标签</p><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@dc627a3adc4d:/<span class="comment"># docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1</span></span><br><span class="line">root@dc627a3adc4d:/<span class="comment"># docker images mymysql:v1</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mymysql             v1                  37af1236adef        15 seconds ago      329 MB</span><br></pre></td></tr></table></figure><h2 id="7-配置pycharm并连接docker容器"><a href="#7-配置pycharm并连接docker容器" class="headerlink" title="7.配置pycharm并连接docker容器"></a>7.配置pycharm并连接docker容器</h2><p>参考网址：<a href="https://blog.csdn.net/Thanours/article/details/109265315">点我查看</a></p><p>在 Tools &gt;&gt;&gt; Deployment &gt;&gt;&gt; Configuration选项中新建 SFTP 连接：</p><p><img src="https://i.loli.net/2021/05/21/YMm8PE6Hd9ySQ2h.png"></p><img src="https://i.loli.net/2021/05/21/z4dMrhtOH8xvZCR.png"/><p><img src="https://i.loli.net/2021/06/10/TYq9sIE2aRfdyGC.png"></p><ul><li>路径映射(本地程序文件目录与docker文件目录的映射)：</li></ul><p><img src="https://i.loli.net/2021/05/21/yigpdXIMG5QTaLw.png"></p><ul><li>同步本地代码数据到docker容器中：</li></ul><p><img src="https://i.loli.net/2021/05/21/mQJGDp1xaB6EjO9.png"></p><ul><li>上传完代码数据后， 需要选择设置python编译器：</li></ul><p><img src="https://i.loli.net/2021/05/21/htdvCb2qlnOas1Y.png"></p><p><img src="https://i.loli.net/2021/05/21/O3yU6kINc9AT8ea.png"></p><p><img src="https://i.loli.net/2021/05/21/bH5aVPAMXDIz42j.png"></p><p><img src="https://i.loli.net/2021/06/10/BH7mE9diJMrcWCp.png"></p><ul><li>设置好python解释器就可以run代码了：</li></ul><p><img src="https://i.loli.net/2021/05/21/jDGmP8npQtaFCY7.png"></p><p>这里要注意一下，代码所要的运行环境还需要在docker容器安装配置好，比如我这里需要pytorch环境以及python代码运行所需的依赖库都已经在docker容器中通过pip安装好了。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> Pycharm </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数参数传递之引用与指针</title>
      <link href="/2022/11/12/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/"/>
      <url>/2022/11/12/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p><strong>形参是实参的拷贝</strong>，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参-&gt;形参），参数的值只能传入，不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递。</p><h2 id="指针传递"><a href="#指针传递" class="headerlink" title="指针传递"></a>指针传递</h2><p><strong>形参为指向实参地址的指针</strong>，当对形参的指向操作时，就相当于对实参本身进行的操作</p><h2 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h2><p><strong>形参相当于是实参的“别名”</strong>，对形参的操作其实就是对实参的操作，在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p><p>引用引入了对象的一个同义词。定义引用的表示方法与定义指针相似，只是用“&amp;”代替了“*”。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Point <span class="title">pt1</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">Point &amp;pt2=pt1; </span><br></pre></td></tr></table></figure><p>定义了pt2为pt1的引用。通过这样的定义，pt1和pt2表示同一对象。需要特别强调的是引用并不产生对象的副本，仅仅是对象的同义词。因此，当下面的语句执行后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt1.offset（<span class="number">2</span>，<span class="number">2</span>）；</span><br></pre></td></tr></table></figure><p>pt1和pt2都具有（12，12）的值。<br>引用必须在定义时马上被初始化，因为它必须是某个东西的同义词。你不能先定义一个引用后才<br>初始化它。例如下面语句是非法的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Point &amp;pt3；</span><br><span class="line">pt3=pt1；</span><br></pre></td></tr></table></figure><h1 id="引用传递和指针传递的区别与联系"><a href="#引用传递和指针传递的区别与联系" class="headerlink" title="引用传递和指针传递的区别与联系"></a>引用传递和指针传递的区别与联系</h1><h2 id="引用的规则"><a href="#引用的规则" class="headerlink" title="引用的规则"></a>引用的规则</h2><ul><li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。 </li><li>不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）。 </li><li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li></ul><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>-都是地址的概念：指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li><p>指针是一个实体，而引用仅是个别名；</p></li><li><p>引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p></li><li><p>引用没有const，指针有const，const的指针不可变；（具体指没有int&amp; const a这种形式，而const int&amp; a是有 的， 前者指引用本身即别名不可以改变，这是当然的，所以不需要这种形式，后者指引用所指的值不可以改变）</p></li><li><p>引用不能为空，指针可以为空；</p></li><li><p>“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p></li><li><p>指针和引用的自增(++)运算意义不一样；</p></li><li><p>引用是类型安全的，而指针不是 (引用比指针多了类型检查</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从概念上讲，<strong>指针从本质上讲就是存放变量地址的一个变量</strong>，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p><p>而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p><p>在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</p><p>指针传递参数本质上是值传递的方式，它所传递的是一个地址值。<em>值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（这里是在说实参指针本身的地址值不会变）</em></p><p>而在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时<strong>存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量</strong>。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p><p><strong>引用传递和指针传递是不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针传递的参数，如果改变被调函数中的指针地址，它将影响不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量，那就得使用指向指针的指针，或者指针引用。</strong></p><p>为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p><p>程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为<strong>指针变量的地址值</strong>，指针变量中的值为其指向变量的地址；而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改.</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>使用引用传递参数和使用指针传递参数都可传递变量的地址，但对于int,float等占用内存较少，其作为函数参数时一般使用引用传递参数；而对于结构体而言一般采用指针传递结构体变量的地址。</p><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="传递可变参数"><a href="#传递可变参数" class="headerlink" title="传递可变参数"></a>传递可变参数</h2><p>传统的c中，函数在调用时参数是通过值来传递的，这就是说函数的参数不具备返回值的能力。所以在传统的c中，如果需要函数的参数具有返回值的能力，往往是通过指针来实现的。比如，实现两整数变量值交换的c程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_int</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp=*a;</span><br><span class="line">    a=*b;</span><br><span class="line">    *b=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用引用机制后，以上程序的c++版本为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_int</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该函数的c++方法为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swap_int,y); </span><br></pre></td></tr></table></figure><p>c++自动把x,y的地址作为参数传递给swap_int函数。</p><h2 id="给函数传递大型对象"><a href="#给函数传递大型对象" class="headerlink" title="给函数传递大型对象"></a>给函数传递大型对象</h2><p>当大型对象被传递给函数时，使用引用参数可使参数传递效率得到提高，因为引用并不产生对象的副本，也就是参数传递时，对象无须复制。下面的例子定义了一个有限整数集合的类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> maxCard=<span class="number">100</span>;</span><br><span class="line">Class Set</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> elems[maxCard]; <span class="comment">// 集和中的元素，maxCard 表示集合中元素个数的最大值。</span></span><br><span class="line">    <span class="type">int</span> card; <span class="comment">// 集合中元素的个数。</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Set</span> () &#123;card=<span class="number">0</span>;&#125; <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">friend</span> Set <span class="keyword">operator</span> * (Set ,Set ) ; <span class="comment">//重载运算符号*，用于计算集合的交集 用对象作为传值参数</span></span><br><span class="line">    <span class="comment">// friend Set operator * (Set &amp; ,Set &amp; ) 重载运算符号*，用于计算集合的交集 用对象的引用作为传值参数</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先考虑集合交集的实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Set <span class="keyword">operator</span> *( Set Set1,Set Set2)</span><br><span class="line">&#123;</span><br><span class="line">    Set res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Set1.card;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&gt;Set2.card;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Set1.elems[i]==Set2.elems[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    res.elems[res.card++]=Set1.elems[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于重载运算符不能对指针单独操作，我们必须把运算数声明为 Set 类型而不是 Set * 。每次使用*做交集运算时，整个集合都被复制，这样效率很低。我们可以用引用来避免这种情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Set <span class="keyword">operator</span> *( Set &amp;Set1,Set &amp;Set2)</span><br><span class="line">&#123; </span><br><span class="line">    Set res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Set1.card;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&gt;Set2.card;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Set1.elems[i]==Set2.elems[j])</span><br><span class="line">            &#123;</span><br><span class="line">                res.elems[res.card++]=Set1.elems[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用返回值"><a href="#引用返回值" class="headerlink" title="引用返回值"></a>引用返回值</h2><p>如果一个函数返回了引用，那么该函数的调用也可以被赋值。这里有一函数，它拥有两个引用参数并返回一个双精度数的引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> &amp;<span class="title">max</span><span class="params">(<span class="type">double</span> &amp;d1,<span class="type">double</span> &amp;d2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d1&gt;d2?d1:d2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于max()函数返回一个对双精度数的引用，那么我们就可以用max() 来对其中较大的双精度数加1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">max</span>(x,y)+=<span class="number">1.0</span>;</span><br></pre></td></tr></table></figure><h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在函数的使用过程中，我们都明白传指针和传引用会使实参的值发生改变。那么能够通过传指针改变指针所指向的地址吗？<br>在解决这个问题之前，也许我们应该先了解指针非常容易混淆的三个属性：</p><ul><li>指针变量地址（&amp;p）</li><li>指针变量指向的地址（p，存储数据的地址）</li><li>指针变量指向的地址的值（*p）</li></ul><p>当我们将指针变量与其它变量比较之后就会发现，指针变量同其它变量是相似的，只是多了最后一种操作。比如一个int类型的变量,<code>int x=5;</code>,<code>&amp;x</code>取出存储<code>5</code>这个数据的地址，同样，<code>&amp;p</code>也是存储指针的地址，<code>p</code>就是这个地址里面保存的值，也就是指向的地址。只是与其它变量不同的是，它除了这两种操作之外，还有一个解引用操作符<code>*p</code>去获取指针变量指向的地址里面保存的值。</p><h2 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">make</span><span class="params">(<span class="type">int</span> *pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pp=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">66</span>); <span class="comment">//试图改变p指向的地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> a=<span class="number">5</span>;</span><br><span class="line">     <span class="type">int</span> *p=&amp;a; <span class="comment">//指针变量指向一个int类型的地址</span></span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;address:&quot;</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">&quot;value:&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;address:&quot;</span>&lt;&lt;p&lt;&lt;<span class="string">&quot;value:&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">     <span class="built_in">make</span>(p);</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;address:&quot;</span>&lt;&lt;p&lt;&lt;<span class="string">&quot;value:&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：我们这里虽然使用的是传指针，但是却不是直接改变指针变量指向的地址的值，却是想通过改变指针变量指向的地址来修改它的值，显然这样失败了。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/no.png"></p><p>如果我们希望在函数里面修改指针变量存储的地址而不是它的值，这个时候就需要指针引用了。类似于普通变量传入变量引用，我们也传入一个指针引用，在函数里面，你可以将pp认为和p都是这个指针变量（&amp;p&#x3D;&#x3D;&amp;pp），不似传入指针参数的时候形参和实参的变量（&amp;p！&#x3D;&amp;pp）地址不一样。此时我们操作pp的值就是更改了p的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">make</span><span class="params">(<span class="type">int</span> *&amp;pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pp=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">66</span>); <span class="comment">//改变p指向的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：当我们修改传入参数为指针的引用的时候就可以修改指针变量所指向的地址了，可以看见，传入指针引用可以修改指针变量的值（p）和指向的值（*p）。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes.png"></p><h2 id="二级指针-1"><a href="#二级指针-1" class="headerlink" title="二级指针"></a>二级指针</h2><p>指向指针的指针变量称为二级指针。<br>如果pp是一个二级指针，那么有如下属性：</p><ul><li>二级指针的地址（&amp;pp）</li><li>二级指针的地址保存的地址（pp）</li><li>二级指针的地址保存的地址，该地址里面保存的地址（*pp）</li><li>二级指针的地址保存的地址，该地址里面保存的地址里面的数据（**pp）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/kuangtu.png"> </p><p>除了上面传入指针引用改变一级指针指向的地址以外，我们还可以通过传入一个二级指针去修改它对应的一级指针指向的地址，同样达到了修改指针变量的效果。二级指针的指向的地址存储的值就是一级指针指向的地址。对一级指针变量解引用得到的是指针指向的地址存储的数据，二级指针变量解引用得到的也是该二级指针指向的地址存储的地址值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">make</span><span class="params">(<span class="type">int</span> **pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> * p=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">66</span>);</span><br><span class="line">    *pp=p; <span class="comment">//二级指针的解引用被赋值需要得到一个一级指针变量，上图中二级指针的示意图中*pp=p</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> a=<span class="number">5</span>;</span><br><span class="line">     <span class="type">int</span> *q=&amp;a;</span><br><span class="line">     <span class="type">int</span> **pp=&amp;q;</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;address:&quot;</span>&lt;&lt;&amp;pp&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;pp&lt;&lt;<span class="string">&quot;    &quot;</span>&lt;&lt;&amp;q&lt;&lt;<span class="string">&quot;   &quot;</span>&lt;&lt;q&lt;&lt;<span class="string">&quot;       value:&quot;</span>&lt;&lt;*q&lt;&lt;endl;</span><br><span class="line">     <span class="built_in">make</span>(pp);</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;address:&quot;</span>&lt;&lt;&amp;pp&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;pp&lt;&lt;<span class="string">&quot;    &quot;</span>&lt;&lt;&amp;q&lt;&lt;<span class="string">&quot;   &quot;</span>&lt;&lt;q&lt;&lt;<span class="string">&quot;       value:&quot;</span>&lt;&lt;*q&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：通过对二级指针的解引用赋值成功修改了一级指针指向的地址。如果仅仅在make函数里面对**pp&#x3D;66;操作，那么所有的地址不会改变，仅仅会改变值为66。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes2.png"></p><h1 id="各种类型的函数参数传递"><a href="#各种类型的函数参数传递" class="headerlink" title="各种类型的函数参数传递"></a>各种类型的函数参数传递</h1><h2 id="声明-h"><a href="#声明-h" class="headerlink" title="声明.h"></a>声明.h</h2><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体数组   (in_ldc)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getLdc</span><span class="params">(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS])</span>;</span><br><span class="line"><span class="comment">// cv::Mat  (in_MatK)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getMatK</span><span class="params">(cv::Mat *in_MatK)</span>;</span><br><span class="line"><span class="comment">// 内存块(map)  (in_BEMap)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getBEMap</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span> *&amp;in_BEMap)</span>;</span><br><span class="line"><span class="comment">// cv::Rect数组 (in_BESetRoi)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getBESetRoi</span><span class="params">(cv::Rect *in_BESetRoi)</span>;</span><br><span class="line"><span class="comment">// cv::Mat 数组 (in_wide_angle_map)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getWideAngleMap</span><span class="params">(<span class="type">float</span> **in_wide_angle_map)</span>;</span><br><span class="line"><span class="comment">// 整数 (in_wide_angle_width,in_wide_angle_height)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getWideAngleSize</span><span class="params">(<span class="type">int</span> &amp;in_wide_angle_width, <span class="type">int</span> &amp;in_wide_angle_height)</span>;</span><br></pre></td></tr></table></figure><h2 id="定义-cpp"><a href="#定义-cpp" class="headerlink" title="定义.cpp"></a>定义.cpp</h2><ul><li><p>结构体数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> distCenterX;</span><br><span class="line">    <span class="type">float</span> distCenterY;</span><br><span class="line">    <span class="type">float</span> distFocalLength;</span><br><span class="line">    <span class="type">float</span> distFocalLengthInv;</span><br><span class="line">    <span class="type">float</span> *lut_d2u;</span><br><span class="line">    <span class="type">int32_t</span> lut_d2u_indMax;</span><br><span class="line">    <span class="type">float</span> lut_d2u_step;</span><br><span class="line">    <span class="type">float</span> lut_d2u_stepInv;</span><br><span class="line">    <span class="type">float</span> *lut_u2d;</span><br><span class="line">    <span class="type">int32_t</span> lut_u2d_indMax;</span><br><span class="line">    <span class="type">float</span> lut_u2d_step;</span><br><span class="line">    <span class="type">float</span> lut_u2d_stepInv;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> if_get_matrix = <span class="literal">false</span>;</span><br><span class="line">    cv::Mat intrinsics = cv::<span class="built_in">Mat</span>(<span class="number">3</span>, <span class="number">3</span>, CV_32FC1, cv::Scalar::<span class="built_in">all</span>(<span class="number">0</span>));</span><br><span class="line">    cv::Mat distortionCoeff = cv::<span class="built_in">Mat</span>(<span class="number">4</span>, <span class="number">1</span>, CV_32FC1, cv::Scalar::<span class="built_in">all</span>(<span class="number">0</span>));</span><br><span class="line">&#125; TLensDistortionCorrection;</span><br><span class="line">TLensDistortionCorrection TLdc[NUM_CAMERAS];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ParametersInit::getLdc</span><span class="params">(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        in_ldc[i] = TLdc[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>map</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">short</span> *BEMap = <span class="literal">NULL</span>;</span><br><span class="line">BEMap = (<span class="type">unsigned</span> <span class="type">short</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">short</span>) * BEGetRoiSize * <span class="number">2</span> * <span class="number">2</span> * <span class="number">4</span>);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getBEMap</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span> *&amp;in_BEMap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    in_BEMap = BEMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cv::Rect</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> rect_index = <span class="number">0</span>; rect_index &lt; <span class="number">4</span>; rect_index++)</span><br><span class="line">&#123;</span><br><span class="line">    BESetRoi[rect_index] = cv::<span class="built_in">Rect</span>(BE_set_roi[rect_index * <span class="number">4</span> + <span class="number">0</span>], BE_set_roi[rect_index * <span class="number">4</span> + <span class="number">1</span>],</span><br><span class="line">                                        BE_set_roi[rect_index * <span class="number">4</span> + <span class="number">2</span>], BE_set_roi[rect_index * <span class="number">4</span> + <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getBESetRoi</span><span class="params">(cv::Rect *in_BESetRoi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        in_BESetRoi[i] = BESetRoi[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>cv::Mat []</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> *wideAngleViewMap[NUM_CAMERAS] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt; NUM_CAMERAS; index++)</span><br><span class="line">&#123;</span><br><span class="line">    wideAngleViewMap[index] = (<span class="type">float</span> *)<span class="built_in">malloc</span>(wideAngle_width * wideAngle_height * <span class="number">3</span> / <span class="number">2</span> * <span class="number">2</span> * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ParametersInit::getWideAngleMap</span><span class="params">(<span class="type">float</span> **in_wide_angle_map)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_CAMERAS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (wideAngleViewMap[i] != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            in_wide_angle_map[i] = wideAngleViewMap[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="number">1</span>,<span class="string">&quot;getWideAngleMap failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>int</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> wideAngle_width = <span class="number">720</span>; <span class="comment">//广角视图的尺寸，需要为偶数</span></span><br><span class="line"><span class="type">int</span> wideAngle_height = <span class="number">720</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ParametersInit::getWideAngleSize</span><span class="params">(<span class="type">int</span> &amp;in_wide_angle_width, <span class="type">int</span> &amp;in_wide_angle_height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    in_wide_angle_width = wideAngle_width;</span><br><span class="line">    in_wide_angle_height = wideAngle_height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-cpp"><a href="#使用-cpp" class="headerlink" title="使用.cpp"></a>使用.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line">TLensDistortionCorrection m_ldc[NUM_CAMERAS];</span><br><span class="line"><span class="built_in">getLdc</span>(my_avm_bsd.m_ldc);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">cv::Mat m_MatK[NUM_CAMERAS];</span><br><span class="line"><span class="built_in">getMatK</span>(my_avm_bsd.m_MatK);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> *BE_Map;</span><br><span class="line"><span class="built_in">getBEMap</span>(my_BB_YUV.BE_Map);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">cv::Rect BE_SetRoi[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">getBESetRoi</span>(my_BB_YUV.BE_SetRoi);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">float</span> *wide_angle_map[NUM_CAMERAS] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="built_in">getWideAngleMap</span>(g_avm_set-&gt;wide_angle_map);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">int</span> m_wideAngle_width;</span><br><span class="line"><span class="type">int</span> m_wideAngle_height;</span><br><span class="line"><span class="built_in">getWideAngleSize</span>(g_avm_set-&gt;m_wideAngle_width, g_avm_set-&gt;m_wideAngle_height);</span><br></pre></td></tr></table></figure><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://www.pudn.com/news/62615ba10e75e420124071b2.html">C++中引用传递与指针传递区别（进一步整理）</a> </li><li><a href="https://blog.csdn.net/qq_32483145/article/details/52901230">二级指针和指针引用函数传参（C++）</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数参数传递 </tag>
            
            <tag> 引用与指针 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
