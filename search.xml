<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>yolo目标检测算法之模型精度计算</title>
      <link href="/2025/07/30/yolo-mu-biao-jian-ce-suan-fa-zhi-mo-xing-jing-du-ji-suan/"/>
      <url>/2025/07/30/yolo-mu-biao-jian-ce-suan-fa-zhi-mo-xing-jing-du-ji-suan/</url>
      
        <content type="html"><![CDATA[<h1 id="评估方法配置"><a href="#评估方法配置" class="headerlink" title="评估方法配置"></a>评估方法配置</h1><p>模型评估时使用的方法配置如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/models/yolo/model.py</span><span class="token decorator annotation punctuation">@property</span><span class="token keyword">def</span> <span class="token function">task_map</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Map head to model, trainer, validator, and predictor classes."""</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"classify"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"model"</span><span class="token punctuation">:</span> ClassificationModel<span class="token punctuation">,</span>                <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>classify<span class="token punctuation">.</span>ClassificationTrainer<span class="token punctuation">,</span>                <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>classify<span class="token punctuation">.</span>ClassificationValidator<span class="token punctuation">,</span>                <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>classify<span class="token punctuation">.</span>ClassificationPredictor<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"detect"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"model"</span><span class="token punctuation">:</span> DetectionModel<span class="token punctuation">,</span>                <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>detect<span class="token punctuation">.</span>DetectionTrainer<span class="token punctuation">,</span>                <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>detect<span class="token punctuation">.</span>DetectionValidator<span class="token punctuation">,</span>                <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>detect<span class="token punctuation">.</span>DetectionPredictor<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"segment"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"model"</span><span class="token punctuation">:</span> SegmentationModel<span class="token punctuation">,</span>                <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>segment<span class="token punctuation">.</span>SegmentationTrainer<span class="token punctuation">,</span>                <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>segment<span class="token punctuation">.</span>SegmentationValidator<span class="token punctuation">,</span>                <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>segment<span class="token punctuation">.</span>SegmentationPredictor<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"pose"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"model"</span><span class="token punctuation">:</span> PoseModel<span class="token punctuation">,</span>                <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>PoseTrainer<span class="token punctuation">,</span>                <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>PoseValidator<span class="token punctuation">,</span>                <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>PosePredictor<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"obb"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"model"</span><span class="token punctuation">:</span> OBBModel<span class="token punctuation">,</span>                <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>obb<span class="token punctuation">.</span>OBBTrainer<span class="token punctuation">,</span>                <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>obb<span class="token punctuation">.</span>OBBValidator<span class="token punctuation">,</span>                <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>obb<span class="token punctuation">.</span>OBBPredictor<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出目标检测模型在进行模型评估时使用的方法为：ultralytics&#x2F;models&#x2F;yolo&#x2F;detect&#x2F;val.py:<code>yolo.detect.DetectionValidator</code>,其中<code>DetectionValidator</code>继承自<code>BaseValidator</code>,且在<code>DetectionValidator</code>中并未对<code>__call__</code>方法进行重新实现，也就是说目标检测的评估方法调用流程实现在父类<code>BaseValidator</code>的<code>__call__</code>中,而调用的计算方法在子类<code>DetectionValidator</code>中实现。</p><h1 id="评估参数计算"><a href="#评估参数计算" class="headerlink" title="评估参数计算"></a>评估参数计算</h1><h2 id="混淆矩阵计算"><a href="#混淆矩阵计算" class="headerlink" title="混淆矩阵计算"></a>混淆矩阵计算</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/models/yolo/detect/val.py</span><span class="token keyword">def</span> <span class="token function">update_metrics</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preds<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> batch<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Update metrics with new predictions and ground truth.        Args:            preds (List[Dict[str, torch.Tensor]]): List of predictions from the model.            batch (Dict[str, Any]): Batch data containing ground truth.        """</span>        <span class="token keyword">for</span> si<span class="token punctuation">,</span> pred <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>seen <span class="token operator">+=</span> <span class="token number">1</span>            pbatch <span class="token operator">=</span> self<span class="token punctuation">.</span>_prepare_batch<span class="token punctuation">(</span>si<span class="token punctuation">,</span> batch<span class="token punctuation">)</span>            predn <span class="token operator">=</span> self<span class="token punctuation">.</span>_prepare_pred<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> pbatch<span class="token punctuation">)</span>            <span class="token comment"># ......省略无关代码......</span>            <span class="token comment"># Evaluate</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>args<span class="token punctuation">.</span>plots<span class="token punctuation">:</span>                <span class="token comment"># 混淆矩阵计算</span>                self<span class="token punctuation">.</span>confusion_matrix<span class="token punctuation">.</span>process_batch<span class="token punctuation">(</span>predn<span class="token punctuation">,</span> pbatch<span class="token punctuation">,</span> conf<span class="token operator">=</span>self<span class="token punctuation">.</span>args<span class="token punctuation">.</span>conf<span class="token punctuation">)</span>    <span class="token comment"># ......省略无关代码......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型精度等评估指标计算"><a href="#模型精度等评估指标计算" class="headerlink" title="模型精度等评估指标计算"></a>模型精度等评估指标计算</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/utils/metrics.py</span><span class="token keyword">def</span> <span class="token function">ap_per_class</span><span class="token punctuation">(</span>    tp<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span>    conf<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span>    pred_cls<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span>    target_cls<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span>    plot<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    on_plot<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    save_dir<span class="token punctuation">:</span> Path <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    names<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    eps<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">1e-16</span><span class="token punctuation">,</span>    prefix<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Compute the average precision per class for object detection evaluation.    Args:        tp (np.ndarray): Binary array indicating whether the detection is correct (True) or not (False).        conf (np.ndarray): Array of confidence scores of the detections.        pred_cls (np.ndarray): Array of predicted classes of the detections.        target_cls (np.ndarray): Array of true classes of the detections.        plot (bool, optional): Whether to plot PR curves or not.        on_plot (callable, optional): A callback to pass plots path and data when they are rendered.        save_dir (Path, optional): Directory to save the PR curves.        names (Dict[int, str], optional): Dictionary of class names to plot PR curves.        eps (float, optional): A small value to avoid division by zero.        prefix (str, optional): A prefix string for saving the plot files.    Returns:        tp (np.ndarray): True positive counts at threshold given by max F1 metric for each class.        fp (np.ndarray): False positive counts at threshold given by max F1 metric for each class.        p (np.ndarray): Precision values at threshold given by max F1 metric for each class.        r (np.ndarray): Recall values at threshold given by max F1 metric for each class.        f1 (np.ndarray): F1-score values at threshold given by max F1 metric for each class.        ap (np.ndarray): Average precision for each class at different IoU thresholds.        unique_classes (np.ndarray): An array of unique classes that have data.        p_curve (np.ndarray): Precision curves for each class.        r_curve (np.ndarray): Recall curves for each class.        f1_curve (np.ndarray): F1-score curves for each class.        x (np.ndarray): X-axis values for the curves.        prec_values (np.ndarray): Precision values at mAP@0.5 for each class.    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="目标匹配"><a href="#目标匹配" class="headerlink" title="目标匹配"></a>目标匹配</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/engine/validator.py</span><span class="token keyword">def</span> <span class="token function">match_predictions</span><span class="token punctuation">(</span>    self<span class="token punctuation">,</span> pred_classes<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">,</span> true_classes<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">,</span> iou<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">,</span> use_scipy<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Match predictions to ground truth objects using IoU.    Args:        pred_classes (torch.Tensor): Predicted class indices of shape (N,).        true_classes (torch.Tensor): Target class indices of shape (M,).        iou (torch.Tensor): An NxM tensor containing the pairwise IoU values for predictions and ground truth.        use_scipy (bool, optional): Whether to use scipy for matching (more precise).    Returns:        (torch.Tensor): Correct tensor of shape (N, 10) for 10 IoU thresholds.    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以选择使用匈牙利匹配算法进行匹配，但默认未使用</li><li>默认使用贪婪匹配方法，选择满足IoU阈值的最大IoU结果作为匹配结果，同时保证匹配的唯一性</li></ul>]]></content>
      
      
      <categories>
          
          <category> ultralytics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精度计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Repulsion loss解释</title>
      <link href="/2025/07/30/repulsionloss-jie-shi/"/>
      <url>/2025/07/30/repulsionloss-jie-shi/</url>
      
        <content type="html"><![CDATA[<p>![在这里插入图片描述](..&#x2F;..&#x2F;..&#x2F;MyBlogImage1&#x2F;0_模板 (copy)&#x2F;37bae19a8207a9f9a8ffa087b36ac48d.png)<br>本文由同济大学和北京大学合作发表于CVPR2018，聚焦于loss层面，为遮挡情况下的行人检测问题提供了一种行之有效的解决方案。<br>论文：<a href="https://arxiv.org/abs/1711.07752">https://arxiv.org/abs/1711.07752</a></p><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>![在这里插入图片描述](..&#x2F;..&#x2F;..&#x2F;MyBlogImage1&#x2F;0_模板 (copy)&#x2F;8b2d3278e970406e472d438e715e2c3f.png)</p><h4 id="行人遮挡会造成什么问题"><a href="#行人遮挡会造成什么问题" class="headerlink" title="行人遮挡会造成什么问题"></a>行人遮挡会造成什么问题</h4><p><strong>当我们在做行人检测时，人与人之间会存在互相遮挡。遮挡会造成2个问题：</strong></p><p>1.设红色框为目标框T（man）的预测框P，旁边也有个真实框B（woman），我们的P可能会被往B去移动（shift）。</p><p>2.检测器对NMS的阈值的选取更为敏感。如果NMS阈值选取过小，周围的目标框会被<strong>过滤</strong>掉；如果NMS阈值选取过大，会带更多的<strong>虚检</strong>。</p><h4 id="非极大抑制选取更敏感"><a href="#非极大抑制选取更敏感" class="headerlink" title="非极大抑制选取更敏感"></a>非极大抑制选取更敏感</h4><p>第二点的影响是不是不太直观？没关系，我们先详细回顾一下非极大抑制NMS的实现过程：</p><p>在检测器中，一张图片可能会有n个检测目标，每个检测目标都会有很多<strong>检测框</strong>（proposals&#x2F;anchors&#x2F;bbox）。<br>对于每个检测目标来讲，它的附近都会有一簇IoU很高的检测框（相较于其他的检测框来说），所以针对<strong>同一个检测目标</strong>，有必要只留下置信度（score）最高的那个检测框作为该物体的检测框，其他的都应该过滤掉。</p><p><strong>实现步骤：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>、假定有<span class="token number">6</span>个带置信率的region proposals，并预设一个IOU的阈值如<span class="token number">0.7</span>。<span class="token number">2</span>、按置信率大小对<span class="token number">6</span>个框排序<span class="token punctuation">:</span> <span class="token number">0.95</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.7</span>。<span class="token number">3</span>、设定置信率为<span class="token number">0.95</span>的region proposals为一个预测框；<span class="token number">4</span>、在剩下<span class="token number">5</span>个region proposals中，去掉与<span class="token number">0.95</span>物体框IOU大于<span class="token number">0.7</span>的。<span class="token number">5</span>、重复<span class="token number">2</span>～<span class="token number">4</span>的步骤，直到没有region proposals为止。<span class="token number">6</span>、每次获取到的最大置信率的region proposals就是我们筛选出来的目标。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么问题来了，对于有遮挡的行人数据集，这里过滤掉的检测框有没有对隔壁检测目标IoU最高却被我们这个检测目标的检测框给抑制掉的呢？看图。</p><p>![在这里插入图片描述](..&#x2F;..&#x2F;..&#x2F;MyBlogImage1&#x2F;0_模板 (copy)&#x2F;a0068cc853c8c3b049bec3bfdda76098.png)<br><strong>NMS阈值选取过小</strong>：针对目标T（man），检测框$P$与T的IoU最大，P会视为T的预测框。如果NMS选取过小，旁边目标B的预测框（woman)假设为K,那么K会被选作T的检测框，然后被P抑制掉。</p><p><strong>NMS阈值选取过大</strong>：与上面是同样的道理，会多出许多检测框，带来更多的假正例。</p><h2 id="Repulsion-loss"><a href="#Repulsion-loss" class="headerlink" title="Repulsion loss"></a>Repulsion loss</h2><p>既然已经清楚影响是怎样造成的，来看看解决方案。Repulsion loss的作用在于，<strong>要求预测框P靠近（吸引）自己的真实目标T的同时，还要求P远离（排斥）T旁边的其他真实框（例如B）</strong>。</p><p>Replusion loss如下：<br>$$<br>L&#x3D;L_{\text{Attr}}+\alpha<em>L_{\text{RepGT}}+\beta</em>L_{\text{RepBox}}<br>$$<br>可以看到该损失函数中包含3个模块，下面来分别作解释。</p><h4 id="L-Attr"><a href="#L-Attr" class="headerlink" title="$L_{Attr}$"></a>$L_{Attr}$</h4><p>该模块的作用是使得预测框和它的目标框尽可能接近。<br>$L_{Attr}$采用的是通用目标检测中的回归loss，可以采用欧式距离，$Smooth_{L1}$距离以及IoU距离。但为了和其他算法有可比性，这里采用的是SmoothL1距离。<br>$$<br>L_\text{Attr}&#x3D;\frac{\sum_{P\in\mathcal{P}<em>+}\text{Smooth}</em>{L1}(B^P,G_{Attr}^P)}{|\mathcal{P}<em>+|}<br>$$<br>$P \in \mathcal{P}</em>+$（所有的正样本)：正样本就是根据设定的IoU阈值来划分出来的检测框$P$的集合。</p><p>$\mathrm{G}_{\mathrm{Attr}}^\mathrm{P}$: 为每一个检测框$P$匹配一个有最大IoU值的真实目标框（Ground truth）</p><p>$\mathrm{B}^{\mathrm{P}}$： 从检测框$P$做回归偏移（shift）后得到的预测框。</p><p>清楚这些基础概念后，这个模块的函数就好理解了,$Smooth_{L1}$的公式如下：<br>$$<br>L_{\mathrm{loc}}(t^u,v)&#x3D;\sum_{i\in{\mathrm{x,y,w,h}}}\operatorname{smooth}_{L_1}(t_i^u-v_i)<br>$$</p><p>$$<br>\text{smooth}_{L_1}(x)&#x3D;\begin{cases}0.5x^2&amp;\text{if}|x|&lt;1\|x|-0.5&amp;\text{otherwise}\end{cases}<br>$$</p><p> 从公式可以很直观的看出，$\mathrm{B}^{\mathrm{P}}$和$\mathrm{G}_{\mathrm{Attr}}^\mathrm{P}$的左上角坐标以及宽高 $(x,y,w,h)$分别进行smoothL1计算，然后累加和。<br>优化的目标就是让两者之间距离缩短，那就达到了预测框和它的目标框尽可能接近的目的。</p><h4 id="L-mathrm-RepGT"><a href="#L-mathrm-RepGT" class="headerlink" title="$L_{\mathrm{RepGT}}$"></a>$L_{\mathrm{RepGT}}$</h4><p>$L_{\mathrm{RepGT}}$是使得预测框P和周围的目标框G尽可能远离 。**<br>$$<br>L_{\mathrm{RepGT}}&#x3D;\frac{\sum_{P\in\mathcal{P}<em>{+}}\mathrm{Smooth}</em>{ln}\left(IoG(B^{P},G_{Rep}^{P})\right)}{|\mathcal{P}_{+}|}<br>$$</p><p>$$<br>\mathrm{Smooth}_{ln}&#x3D;\left{\begin{array}{ll}-\ln\left(1-x\right)&amp;x\leq\sigma\\frac{x-\sigma}{1-\sigma}-\ln\left(1-\sigma\right)&amp;x&gt;\sigma\end{array}\right.<br>$$</p><p>这里的周围的目标框是除了已经匹配上的目标框以外的IoU最大的目标框，用 $G^P_{Rep}$表示。<br>$$<br>G_{Rep}^P&#x3D;\underset{G \in g\backslash{G^P_{Attr}}}{arg max},IoU(G,P)<br>$$</p><p>即 $ G^P_{Rep}$是除了与预测框P匹配了的Ground_truth-A以外，其他剩下的Ground_truth中与预测框P的IoU最大的Ground_truth-B。</p><ul><li>Q1：$ L_{RepGT}$采用的$smooth_{Ln}$和IoG,那么为什么不适用IoU呢？</li></ul><p><strong>A :</strong> 如果选用IoU,那么只要预测框变得足够大（即增大并集）就能使得$ L_{RepGT}$减小。IoG不同，GT是固定的，只能优化分子部分（即增大交集）。</p><ul><li>Q2.为什么采用$smooth_{Ln}$？</li></ul><p><strong>A :</strong> Ln既保留了L1的鲁棒性又吸收L2的快速收敛性。</p><h4 id="L-RepBox"><a href="#L-RepBox" class="headerlink" title="$L_{RepBox}$"></a>$L_{RepBox}$</h4><p> $L_{RepBox}$：使得预测框Pi和周围的预测框$P_j$尽可能远离， $P_i$和 $P_j $分别配上不同的预测框，他们之间的距离采用的是IoU。定义如下：<br>$$<br>L_{\mathrm{RepBox}}&#x3D;\frac{\sum_{i\neq j}\mathrm{Smooth}<em>{ln}\left(IoU(B^{P</em>{i}},B^{P_{j}})\right)}{\sum_{i\neq j}\mathbb{1}[IoU(B^{P_{i}},B^{P_{j}})&gt;0]+\epsilon}<br>$$<br>从式（4）中可以发现当预测框$P_i$和周围的其他预测框$P_j$的IoU越大，则产生的loss也会越大，因此可以有效防止两个预测框因为靠的太近而被NMS过滤掉，进而减少漏检。</p><h1 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h1><ul><li><a href="https://blog.csdn.net/weixin_40557160/article/details/116174316">Repulsion Loss：为解决密集人群检测中遮挡设计的损失函数_repulsion loss:detecting pedestrians in a crowd-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Loss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Repulsion Loss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nms与softNms</title>
      <link href="/2025/07/30/nms-yu-softnms/"/>
      <url>/2025/07/30/nms-yu-softnms/</url>
      
        <content type="html"><![CDATA[<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><ul><li><h3 id="NMS-算法流程"><a href="#NMS-算法流程" class="headerlink" title="NMS 算法流程"></a>NMS 算法流程</h3><ol><li>按照置信度 <code>score</code> 降序排列所有候选框</li><li>初始化 <code>keep = []</code></li><li>依次：<ul><li>取出当前最高分框 <code>B0</code></li><li>将其加入 <code>keep</code></li><li>计算 <code>B0</code> 与其他所有框的 IoU</li><li>删除与 <code>B0</code> IoU 大于阈值的框（比如 0.5）</li></ul></li><li>重复直到候选框为空</li></ol></li></ul><h2 id="Soft-NMS-算法流程"><a href="#Soft-NMS-算法流程" class="headerlink" title="Soft-NMS 算法流程"></a>Soft-NMS 算法流程</h2><ol><li><p>初始化候选框集合 <code>D</code></p></li><li><p>重复直到 <code>D</code> 为空：</p><ul><li><p>从 <code>D</code> 中选出最高分框 <code>B0</code></p></li><li><p>将 <code>B0</code> 加入输出列表 <code>keep</code></p></li><li><p>对于 <code>D</code> 中的其他框 <code>Bi</code>，计算与 <code>B0</code> 的 IoU</p></li><li><p>根据 IoU 衰减 <code>score</code>：</p><ul><li><p><strong>Linear</strong>:<br>$$<br>s_i &#x3D; s_i \cdot (1 - \text{IoU}_{0i})<br>$$</p></li><li><p><strong>Gaussian</strong>:<br>$$<br>s_i &#x3D; s_i \cdot \exp\left(- \frac{\text{IoU}_{0i}^2}{\sigma} \right)<br>$$</p></li></ul></li><li><p>删除 <code>score&lt; score_thresh</code> 的框</p></li></ul></li></ol><h2 id="NMS-vs-Soft-NMS-对比"><a href="#NMS-vs-Soft-NMS-对比" class="headerlink" title="NMS vs Soft-NMS 对比"></a>NMS vs Soft-NMS 对比</h2><table><thead><tr><th>项目</th><th>NMS</th><th>Soft-NMS</th></tr></thead><tbody><tr><td>抑制方式</td><td>IoU &gt; 阈值直接删除</td><td>IoU 越大分数衰减越多（不直接删除）</td></tr><tr><td>是否可微</td><td>否（不适合用于训练）</td><td>否，但分数平滑，有利于优化评估</td></tr><tr><td>适用场景</td><td>常规目标检测</td><td>多目标密集、遮挡严重场景</td></tr><tr><td>算法效率</td><td>较快</td><td>较慢一些（需要更新每个框分数）</td></tr><tr><td>结果平滑性</td><td>较差</td><td>更平滑，避免误删</td></tr></tbody></table><p>python实现代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token comment"># 原始框数据，每行为 [x1, y1, x2, y2, score]</span>Boxes <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">0.72</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">370</span><span class="token punctuation">,</span> <span class="token number">0.92</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0.79</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">355</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">0.81</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">315</span><span class="token punctuation">,</span> <span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">0.95</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">410</span><span class="token punctuation">,</span> <span class="token number">410</span><span class="token punctuation">,</span> <span class="token number">0.85</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">0.65</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">,</span> <span class="token number">335</span><span class="token punctuation">,</span> <span class="token number">0.88</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">275</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">370</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">0.72</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">draw_boxes</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> boxes<span class="token punctuation">,</span> color<span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label_prefix<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""在图像上绘制边框及标签"""</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> box <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>boxes<span class="token punctuation">)</span><span class="token punctuation">:</span>        x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> box<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>        score <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> thickness<span class="token punctuation">)</span>        label <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>label_prefix<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>score<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>image<span class="token punctuation">,</span> label<span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1 <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">iou_batch</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> boxes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算一个 box 与多个 boxes 的 IoU"""</span>    x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y1 <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y2 <span class="token operator">=</span> np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    inter_area <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x2 <span class="token operator">-</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y2 <span class="token operator">-</span> y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    area1 <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    area2 <span class="token operator">=</span> <span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inter_area <span class="token operator">/</span> <span class="token punctuation">(</span>area1 <span class="token operator">+</span> area2 <span class="token operator">-</span> inter_area <span class="token operator">+</span> <span class="token number">1e-6</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">nms</span><span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> iou_thresh<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""标准 NMS 算法，返回保留的框"""</span>    keep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    order <span class="token operator">=</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 按 score 降序排序</span>    <span class="token keyword">while</span> order<span class="token punctuation">.</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> order<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        keep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> order<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        ious <span class="token operator">=</span> iou_batch<span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>order<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        remain <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>ious <span class="token operator">&lt;=</span> iou_thresh<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        order <span class="token operator">=</span> order<span class="token punctuation">[</span>remain <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 注意索引偏移</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>keep<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">soft_nms</span><span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> iou_thresh<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> score_thresh<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">,</span> sigma<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Soft-NMS 算法，返回保留的框（score 衰减但不立即删除）"""</span>    boxes <span class="token operator">=</span> boxes<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    N <span class="token operator">=</span> boxes<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    keep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_idx <span class="token operator">=</span> i <span class="token operator">+</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 当前最大得分框</span>        boxes<span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> max_idx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> boxes<span class="token punctuation">[</span><span class="token punctuation">[</span>max_idx<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">]</span>        max_box <span class="token operator">=</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        rest_boxes <span class="token operator">=</span> boxes<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> rest_boxes<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        ious <span class="token operator">=</span> iou_batch<span class="token punctuation">(</span>max_box<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rest_boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rest_boxes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'linear'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ious<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> iou_thresh<span class="token punctuation">:</span>                    decay <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> ious<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    decay <span class="token operator">=</span> <span class="token number">1.0</span>            <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'gaussian'</span><span class="token punctuation">:</span>                decay <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>ious<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> sigma<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                decay <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token keyword">if</span> ious<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> iou_thresh <span class="token keyword">else</span> <span class="token number">0.0</span>            boxes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*=</span> decay        <span class="token comment"># 只保留当前这个得分尚高的框（分数大于阈值）</span>        <span class="token keyword">if</span> max_box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> score_thresh<span class="token punctuation">:</span>            keep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>max_box<span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>keep<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建空白图像用于绘制</span>    canvas_nms <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span>    canvas_soft <span class="token operator">=</span> canvas_nms<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 执行 NMS 与 Soft-NMS</span>    nms_boxes <span class="token operator">=</span> nms<span class="token punctuation">(</span>Boxes<span class="token punctuation">,</span> iou_thresh<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>    soft_nms_boxes <span class="token operator">=</span> soft_nms<span class="token punctuation">(</span>Boxes<span class="token punctuation">,</span> iou_thresh<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> score_thresh<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token comment"># 绘图（灰色为原始框，红色/蓝色为保留框）</span>    draw_boxes<span class="token punctuation">(</span>canvas_nms<span class="token punctuation">,</span> Boxes<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    draw_boxes<span class="token punctuation">(</span>canvas_nms<span class="token punctuation">,</span> nms_boxes<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> label_prefix<span class="token operator">=</span><span class="token string">"NMS "</span><span class="token punctuation">)</span>    draw_boxes<span class="token punctuation">(</span>canvas_soft<span class="token punctuation">,</span> Boxes<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    draw_boxes<span class="token punctuation">(</span>canvas_soft<span class="token punctuation">,</span> soft_nms_boxes<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> label_prefix<span class="token operator">=</span><span class="token string">"SFT "</span><span class="token punctuation">)</span>    <span class="token comment"># 拼图对比</span>    combined <span class="token operator">=</span> cv2<span class="token punctuation">.</span>hconcat<span class="token punctuation">(</span><span class="token punctuation">[</span>canvas_nms<span class="token punctuation">,</span> canvas_soft<span class="token punctuation">]</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"NMS (Red) vs Soft-NMS (Blue)"</span><span class="token punctuation">,</span> combined<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nms </tag>
            
            <tag> softNms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日计划</title>
      <link href="/2025/07/24/mei-ri-ji-hua/"/>
      <url>/2025/07/24/mei-ri-ji-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="2025-07-24"><a href="#2025-07-24" class="headerlink" title="2025-07-24"></a>2025-07-24</h2><ul><li><input checked="" disabled="" type="checkbox"> yolo目标检测损失计算方法分析<ul><li><input checked="" disabled="" type="checkbox"> 学习笔记:<a href="https://geiyiren.github.io/2025/07/23/yolo-mu-biao-jian-ce-suan-fa-zhi-sun-shi-ji-suan/">yolo目标检测算法之损失计算 | geiyiren</a></li></ul></li></ul><h2 id="2025-07-25"><a href="#2025-07-25" class="headerlink" title="2025-07-25"></a>2025-07-25</h2><ul><li><p><input checked="" disabled="" type="checkbox"> 评估算法IOU计算方法优化</p><p>使用CIoU计算情况如下：</p><table><thead><tr><th align="center">数据集</th><th align="center">iou_small_label_true[IOU]</th><th align="center">iou_small_label_true[CIOU]</th><th align="center">iou_small_label_error[IOU]</th><th align="center">iou_small_label_error[CIOU]</th></tr></thead><tbody><tr><td align="center">fcw_01.tar</td><td align="center">72</td><td align="center">72</td><td align="center">28</td><td align="center">26</td></tr><tr><td align="center">fcw_02.tar</td><td align="center">489</td><td align="center">306</td><td align="center">318</td><td align="center">292</td></tr></tbody></table><p>整体来说对重叠目标的过滤影响不太，IOU和CIoU对重叠目标的匹配效果提升不明显</p></li><li><p><input checked="" disabled="" type="checkbox"> FCW-YOLOv12n训练情况跟进分析</p><ul><li>分类损失的权重为0.5，偏低，可以增加至0.75</li><li>dfl损失的权重为1.5，值适中，影响的是边界框的精细度，可以适当增加至2.0左右看训练是否收敛，避免训练不稳定</li><li>训练时进行nms时iou的阈值配置为0.7，对于小目标不太友好，可以使得降低，设置为0.5尝试</li><li>agnostic_nms可以设置为True，所有框不管类别统一做 NMS，<strong>得分高的框优先保留</strong>，可<strong>有效抑制密集、重复框</strong></li><li>copy_paste建议设置为0.2，是将检测到的目标（通常是分割掩码）复制粘贴到另一图像中，增强目标数量，特别是对小目标非常有帮助。并用 <code>&quot;flip&quot;</code> 模式复制后水平翻转，增加多样性。</li></ul></li></ul><h2 id="2025-07-28"><a href="#2025-07-28" class="headerlink" title="2025-07-28"></a>2025-07-28</h2><ul><li><p><input checked="" disabled="" type="checkbox"> FCW模型训练超参配置与训练</p><p>训练开启后，服务器GPU异常中断，正在重启</p></li><li><p><input checked="" disabled="" type="checkbox"> 自动标定算法流程熟悉与手动开启配置</p><p>在adas_app.jsonc中将cal_enable置为1，然后设置打印等级hq.ai.log info,然后过滤<code>[calib] cal</code>既可以看到标定相关信息</p></li><li><p><input checked="" disabled="" type="checkbox"> ldw右偏不报警或报警频率低问题排查</p></li><li><p><input checked="" disabled="" type="checkbox"> dsm相机和ipc遮挡报警问题排查[版本168]</p><ul><li>dsm和ipc相机在遮挡算法中都可以收到视频流</li><li>dsm遮挡信息上包aiApp后，苏标层收不到报警</li><li>ipc相机报警链路正常，但误报较多，主要原因为ipc相机使用的dsm相机的遮挡模型，应使用通用遮挡模型</li></ul></li></ul><h2 id="2025-07-29"><a href="#2025-07-29" class="headerlink" title="2025-07-29"></a>2025-07-29</h2><ul><li><input checked="" disabled="" type="checkbox"> 通用遮挡模型适配程序调试与板端效果测试</li><li><input checked="" disabled="" type="checkbox"> 通用遮挡配置与算法库更新<ol><li>libblur_det.so  版本号：Build ID: 2025072913374601000000cee79b21</li><li>libdecision_alarm_adas.so 版本号: Build ID: 2025072913443101020300c669f763</li><li>blur_det.ini更新dsm和ipc使用通用遮挡模型，修改遮挡模型为cam_blur.om</li></ol></li><li><input checked="" disabled="" type="checkbox"> 108服务器GPU异常问题排查与解决，开启yolo12模型训练</li></ul><h2 id="2025-07-30"><a href="#2025-07-30" class="headerlink" title="2025-07-30"></a>2025-07-30</h2><ul><li><input disabled="" type="checkbox"> ultralytics工程梯度调整方法配置与生效方法查看</li><li><input checked="" disabled="" type="checkbox"> nms与soft-nms算法对比分析</li><li><input disabled="" type="checkbox"> yolo-backbone常用特征提取组件整理分析</li><li><input checked="" disabled="" type="checkbox"> ultralytics工程混淆矩阵计算、检测结果匹配方法熟悉</li></ul><h2 id="2025-07-31"><a href="#2025-07-31" class="headerlink" title="2025-07-31"></a>2025-07-31</h2><ul><li><p><input disabled="" type="checkbox"> ultralytics工程检测结果异常图像保存</p></li><li><p><input disabled="" type="checkbox"> 新相机内参标定</p></li></ul><h2 id="2025-08-01"><a href="#2025-08-01" class="headerlink" title="2025-08-01"></a>2025-08-01</h2><ul><li><input disabled="" type="checkbox"> FCW-YOLOv12n训练情况跟进分析,整理训练进展</li><li><input disabled="" type="checkbox"> ultralytics工程检测结果异常图像保存</li></ul>]]></content>
      
      
      <categories>
          
          <category> 每日计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolo目标检测算法之损失计算</title>
      <link href="/2025/07/23/yolo-mu-biao-jian-ce-suan-fa-zhi-sun-shi-ji-suan/"/>
      <url>/2025/07/23/yolo-mu-biao-jian-ce-suan-fa-zhi-sun-shi-ji-suan/</url>
      
        <content type="html"><![CDATA[<h2 id="损失函数的调用关系"><a href="#损失函数的调用关系" class="headerlink" title="损失函数的调用关系"></a>损失函数的调用关系</h2><p>ultralytics代码中创建模型后顺手做了对应模型架构的加载，根据输入的 yaml文件将对应的模型加载为torch.nn.Module,同时也根据模型的类型对损失函数进行了选择。因此要想知道模型实际计算损失时使用了哪些损失计算方法就要从<code>model = YOLO(&quot;yolo12n.yaml&quot;)</code>开始入手，因此这一行代码过后模型的损失计算方法就已经设定好了，下面看下具体的流程：</p><ul><li><p>1.创建模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> YOLO<span class="token punctuation">(</span><span class="token string">"yolo12n.yaml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2.生成模型任务类型和调用方法的对应关系</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ultralytics<span class="token operator">/</span>models<span class="token operator">/</span>yolo<span class="token operator">/</span>model<span class="token punctuation">.</span>py└── <span class="token keyword">class</span> <span class="token class-name">YOLO</span>    └── <span class="token keyword">def</span> <span class="token function">task_map</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""Map head to model, trainer, validator, and predictor classes."""</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token string">"classify"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"model"</span><span class="token punctuation">:</span> ClassificationModel<span class="token punctuation">,</span>                    <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>classify<span class="token punctuation">.</span>ClassificationTrainer<span class="token punctuation">,</span>                    <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>classify<span class="token punctuation">.</span>ClassificationValidator<span class="token punctuation">,</span>                    <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>classify<span class="token punctuation">.</span>ClassificationPredictor<span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"detect"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"model"</span><span class="token punctuation">:</span> DetectionModel<span class="token punctuation">,</span>                    <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>detect<span class="token punctuation">.</span>DetectionTrainer<span class="token punctuation">,</span>                    <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>detect<span class="token punctuation">.</span>DetectionValidator<span class="token punctuation">,</span>                    <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>detect<span class="token punctuation">.</span>DetectionPredictor<span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"segment"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"model"</span><span class="token punctuation">:</span> SegmentationModel<span class="token punctuation">,</span>                    <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>segment<span class="token punctuation">.</span>SegmentationTrainer<span class="token punctuation">,</span>                    <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>segment<span class="token punctuation">.</span>SegmentationValidator<span class="token punctuation">,</span>                    <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>segment<span class="token punctuation">.</span>SegmentationPredictor<span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"pose"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"model"</span><span class="token punctuation">:</span> PoseModel<span class="token punctuation">,</span>                    <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>PoseTrainer<span class="token punctuation">,</span>                    <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>PoseValidator<span class="token punctuation">,</span>                    <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>PosePredictor<span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"obb"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"model"</span><span class="token punctuation">:</span> OBBModel<span class="token punctuation">,</span>                    <span class="token string">"trainer"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>obb<span class="token punctuation">.</span>OBBTrainer<span class="token punctuation">,</span>                    <span class="token string">"validator"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>obb<span class="token punctuation">.</span>OBBValidator<span class="token punctuation">,</span>                    <span class="token string">"predictor"</span><span class="token punctuation">:</span> yolo<span class="token punctuation">.</span>obb<span class="token punctuation">.</span>OBBPredictor<span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里返回了不同任务类型的<strong>模型加载器，训练器，评估器和预测器</strong>。可见对于目标检测任务：</p><ul><li>“model”: DetectionModel,</li><li>“trainer”: yolo.detect.DetectionTrainer,</li><li>“validator”: yolo.detect.DetectionValidator,</li><li>“predictor”: yolo.detect.DetectionPredictor,</li></ul></li></ul><p>对于目标检测模型而言，<code>class DetectionModel</code>继承了<code>class BaseModel</code>,而在<code>class BaseModel</code>中定义了<code>loss()</code>函数，该函数的定义如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseModel</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch<span class="token punctuation">,</span> preds<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Compute loss.        Args:            batch (dict): Batch to compute loss on.            preds (torch.Tensor | List[torch.Tensor], optional): Predictions.        """</span>        <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"criterion"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>criterion <span class="token operator">=</span> self<span class="token punctuation">.</span>init_criterion<span class="token punctuation">(</span><span class="token punctuation">)</span>        preds <span class="token operator">=</span> self<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>batch<span class="token punctuation">[</span><span class="token string">"img"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> preds <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> preds        <span class="token keyword">return</span> self<span class="token punctuation">.</span>criterion<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> batch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出在调用loss函数是，首先获得损失计算方法，然后进行模型推理并获得推理结果，最后调用了<code>init_criterion()</code>函数返回的损失计算方法计算损失并返回。但在<code>class BaseModel</code>中定义的<code>init_criterion()</code>函数并未实际实现，当子类<code>DetectionModel</code>继承父类<code>BaseModel</code>的时候对该方法进行了实现:</p><p>父类中定义虚函数:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseModel</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">init_criterion</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the loss criterion for the BaseModel."""</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">"compute_loss() needs to be implemented by task heads"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>子类中实现该函数:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DetectionModel</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">init_criterion</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the loss criterion for the DetectionModel."""</span>        <span class="token keyword">return</span> E2EDetectLoss<span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"end2end"</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">else</span> v8DetectionLoss<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看出如果使用端到端检测模型则使用<code>E2EDetectLoss</code>计算损失，否则使用<code>v8DetectionLoss</code>计算损失，那么<code>end2end</code>又是在哪里配置的:</p><p><code>end2end</code>配置在<code>ultralytics/nn/modules/head.py</code>文件中根据模型使用不同的<code>检测头</code>进行默认的配置，具体情况如下:</p><ul><li>v10Detect<code>检测头</code>配置为True</li><li>Detect<code>检测头</code>配置为False</li></ul><p>因此，除yoloV10外，均使用<code>v8DetectionLoss</code>作为目标检测的损失计算方法</p><h2 id="v8DetectionLoss"><a href="#v8DetectionLoss" class="headerlink" title="v8DetectionLoss"></a>v8DetectionLoss</h2><p>详细计算方法如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/utils/loss.py</span><span class="token keyword">class</span> <span class="token class-name">v8DetectionLoss</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Criterion class for computing training losses for YOLOv8 object detection."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> tal_topk<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># model must be de-paralleled</span>     <span class="token comment"># ......省略无关代码......</span>        self<span class="token punctuation">.</span>assigner <span class="token operator">=</span> TaskAlignedAssigner<span class="token punctuation">(</span>topk<span class="token operator">=</span>tal_topk<span class="token punctuation">,</span> num_classes<span class="token operator">=</span>self<span class="token punctuation">.</span>nc<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">6.0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bbox_loss <span class="token operator">=</span> BboxLoss<span class="token punctuation">(</span>m<span class="token punctuation">.</span>reg_max<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>proj <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>m<span class="token punctuation">.</span>reg_max<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token comment"># ......省略无关代码......</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preds<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> batch<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># ......省略无关代码......</span>        <span class="token comment"># Cls loss</span>        <span class="token comment"># loss[1] = self.varifocal_loss(pred_scores, target_scores, target_labels) / target_scores_sum  # VFL way</span>        loss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>bce<span class="token punctuation">(</span>pred_scores<span class="token punctuation">,</span> target_scores<span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> target_scores_sum  <span class="token comment"># BCE</span>        <span class="token comment"># Bbox loss</span>        <span class="token keyword">if</span> fg_mask<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            target_bboxes <span class="token operator">/=</span> stride_tensor            loss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loss<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>bbox_loss<span class="token punctuation">(</span>                pred_distri<span class="token punctuation">,</span> pred_bboxes<span class="token punctuation">,</span> anchor_points<span class="token punctuation">,</span> target_bboxes<span class="token punctuation">,</span> target_scores<span class="token punctuation">,</span> target_scores_sum<span class="token punctuation">,</span> fg_mask            <span class="token punctuation">)</span>        loss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*=</span> self<span class="token punctuation">.</span>hyp<span class="token punctuation">.</span>box  <span class="token comment"># box gain</span>        loss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*=</span> self<span class="token punctuation">.</span>hyp<span class="token punctuation">.</span>cls  <span class="token comment"># cls gain</span>        loss<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*=</span> self<span class="token punctuation">.</span>hyp<span class="token punctuation">.</span>dfl  <span class="token comment"># dfl gain</span>        <span class="token keyword">return</span> loss <span class="token operator">*</span> batch_size<span class="token punctuation">,</span> loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># loss(box, cls, dfl)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位置损失"><a href="#位置损失" class="headerlink" title="位置损失"></a>位置损失</h3><p>这里的box预测损失使用了<code>BboxLoss</code>方法，该方法的实现细节如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/utils/loss.py</span><span class="token keyword">class</span> <span class="token class-name">BboxLoss</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Criterion class for computing training losses for bounding boxes."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reg_max<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the BboxLoss module with regularization maximum and DFL settings."""</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dfl_loss <span class="token operator">=</span> DFLoss<span class="token punctuation">(</span>reg_max<span class="token punctuation">)</span> <span class="token keyword">if</span> reg_max <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token comment"># ......省略无关代码......)</span>        <span class="token comment"># ......省略无关代码......</span>        weight <span class="token operator">=</span> target_scores<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span>fg_mask<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        iou <span class="token operator">=</span> bbox_iou<span class="token punctuation">(</span>pred_bboxes<span class="token punctuation">[</span>fg_mask<span class="token punctuation">]</span><span class="token punctuation">,</span> target_bboxes<span class="token punctuation">[</span>fg_mask<span class="token punctuation">]</span><span class="token punctuation">,</span> xywh<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> CIoU<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        loss_iou <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> iou<span class="token punctuation">)</span> <span class="token operator">*</span> weight<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> target_scores_sum        <span class="token comment"># DFL loss</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>dfl_loss<span class="token punctuation">:</span>            target_ltrb <span class="token operator">=</span> bbox2dist<span class="token punctuation">(</span>anchor_points<span class="token punctuation">,</span> target_bboxes<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dfl_loss<span class="token punctuation">.</span>reg_max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            loss_dfl <span class="token operator">=</span> self<span class="token punctuation">.</span>dfl_loss<span class="token punctuation">(</span>pred_dist<span class="token punctuation">[</span>fg_mask<span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>dfl_loss<span class="token punctuation">.</span>reg_max<span class="token punctuation">)</span><span class="token punctuation">,</span> target_ltrb<span class="token punctuation">[</span>fg_mask<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> weight            loss_dfl <span class="token operator">=</span> loss_dfl<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> target_scores_sum        <span class="token keyword">else</span><span class="token punctuation">:</span>            loss_dfl <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>pred_dist<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        <span class="token keyword">return</span> loss_iou<span class="token punctuation">,</span> loss_dfl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IOU计算"><a href="#IOU计算" class="headerlink" title="IOU计算"></a>IOU计算</h4><p>这里使用了<code>bbox_iou()</code>函数进行iou计算，详细内容如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/utils/metrics.py</span><span class="token keyword">def</span> <span class="token function">bbox_iou</span><span class="token punctuation">(</span><span class="token comment"># ......省略无关代码......)</span><span class="token comment"># ......省略无关代码......</span>    <span class="token comment"># IoU</span>    iou <span class="token operator">=</span> inter <span class="token operator">/</span> union    <span class="token keyword">if</span> CIoU <span class="token keyword">or</span> DIoU <span class="token keyword">or</span> GIoU<span class="token punctuation">:</span>        cw <span class="token operator">=</span> b1_x2<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>b2_x2<span class="token punctuation">)</span> <span class="token operator">-</span> b1_x1<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>b2_x1<span class="token punctuation">)</span>  <span class="token comment"># convex (smallest enclosing box) width</span>        ch <span class="token operator">=</span> b1_y2<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>b2_y2<span class="token punctuation">)</span> <span class="token operator">-</span> b1_y1<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>b2_y1<span class="token punctuation">)</span>  <span class="token comment"># convex height</span>        <span class="token keyword">if</span> CIoU <span class="token keyword">or</span> DIoU<span class="token punctuation">:</span>  <span class="token comment"># Distance or Complete IoU https://arxiv.org/abs/1911.08287v1</span>            c2 <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> eps  <span class="token comment"># convex diagonal squared</span>            rho2 <span class="token operator">=</span> <span class="token punctuation">(</span>                <span class="token punctuation">(</span>b2_x1 <span class="token operator">+</span> b2_x2 <span class="token operator">-</span> b1_x1 <span class="token operator">-</span> b1_x2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b2_y1 <span class="token operator">+</span> b2_y2 <span class="token operator">-</span> b1_y1 <span class="token operator">-</span> b1_y2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>  <span class="token comment"># center dist**2</span>            <span class="token keyword">if</span> CIoU<span class="token punctuation">:</span>  <span class="token comment"># https://github.com/Zzh-tju/DIoU-SSD-pytorch/blob/master/utils/box/box_utils.py#L47</span>                v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>pi<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>w2 <span class="token operator">/</span> h2<span class="token punctuation">)</span><span class="token punctuation">.</span>atan<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>w1 <span class="token operator">/</span> h1<span class="token punctuation">)</span><span class="token punctuation">.</span>atan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    alpha <span class="token operator">=</span> v <span class="token operator">/</span> <span class="token punctuation">(</span>v <span class="token operator">-</span> iou <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> iou <span class="token operator">-</span> <span class="token punctuation">(</span>rho2 <span class="token operator">/</span> c2 <span class="token operator">+</span> v <span class="token operator">*</span> alpha<span class="token punctuation">)</span>  <span class="token comment"># CIoU</span>            <span class="token keyword">return</span> iou <span class="token operator">-</span> rho2 <span class="token operator">/</span> c2  <span class="token comment"># DIoU</span>        c_area <span class="token operator">=</span> cw <span class="token operator">*</span> ch <span class="token operator">+</span> eps  <span class="token comment"># convex area</span>        <span class="token keyword">return</span> iou <span class="token operator">-</span> <span class="token punctuation">(</span>c_area <span class="token operator">-</span> union<span class="token punctuation">)</span> <span class="token operator">/</span> c_area  <span class="token comment"># GIoU https://arxiv.org/pdf/1902.09630.pdf</span>    <span class="token keyword">return</span> iou  <span class="token comment"># IoU</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>IoU（Intersection over Union）交并比</strong></li></ul><p>公式：<br>$$<br>\text{IoU} &#x3D; \frac{\text{Area}<em>{\text{intersection}}}{\text{Area}</em>{\text{union}}}<br>$$<br>表示预测框和真实框重叠区域占联合区域的比例，范围 $[0, 1]$。</p><ul><li><strong>GIoU（Generalized IoU）</strong></li></ul><p>改进目标： 当预测框与真实框没有重叠时，IoU 为 0，无法反映预测框相对位置。GIoU 引入了最小闭包框（convex hull）进行补偿。</p><p>公式：<br>$$<br>\text{GIoU} &#x3D; \text{IoU} - \frac{|\text{C} - (\text{A} \cup \text{B})|}{|\text{C}|}<br>$$</p><ul><li>$\text{C}$：包含预测框 A 和真实框 B 的最小闭包矩形面积</li><li>$\text{A} \cup \text{B}$：预测框与真实框的并集</li></ul><p>范围： $[-1, 1]$，值越大说明预测越准。</p><ul><li><strong>DIoU（Distance IoU）</strong></li></ul><p>改进目标： 考虑中心点之间的距离。</p><p>公式：<br>$$<br>\text{DIoU} &#x3D; \text{IoU} - \frac{\rho^2(\mathbf{b}, \mathbf{b}^{gt})}{c^2}<br>$$</p><ul><li>$\rho(\cdot)$：预测框中心点和真实框中心点之间的欧几里得距离</li><li>$c$：包含两个框的最小闭包矩形的对角线长度</li></ul><p>特点： 既考虑重叠面积，又考虑中心点远近。</p><ul><li><strong>CIoU（Complete IoU）</strong></li></ul><p>改进目标： 进一步引入了宽高比一致性。</p><p>公式：<br>$$<br>\text{CIoU} &#x3D; \text{IoU} - \frac{\rho^2(\mathbf{b}, \mathbf{b}^{gt})}{c^2} - \alpha v<br>$$<br>其中：</p><ul><li>$v &#x3D; \frac{4}{\pi^2} \left( \arctan\left(\frac{w^{gt}}{h^{gt}}\right) - \arctan\left(\frac{w}{h}\right) \right)^2$：宽高比差异</li><li>$\alpha &#x3D; \frac{v}{1 - \text{IoU} + v}$：权重因子</li></ul><p>特点： 同时考虑重叠面积、中心点距离和长宽比差异。</p><p><strong>在v8DetectionLoss方法中默认使用了CIoU方法对IoU进行计算</strong>，具体计算方法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">iou <span class="token operator">=</span> bbox_iou<span class="token punctuation">(</span>pred_bboxes<span class="token punctuation">[</span>fg_mask<span class="token punctuation">]</span><span class="token punctuation">,</span> target_bboxes<span class="token punctuation">[</span>fg_mask<span class="token punctuation">]</span><span class="token punctuation">,</span> xywh<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> CIoU<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>loss_iou <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> iou<span class="token punctuation">)</span> <span class="token operator">*</span> weight<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> target_scores_sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的权重是指<code>TaskAlignedAssigner</code>算法计算的匹配权重(后面详细解释该方法)，<code>target_scores_sum</code>为所有前景目标的匹配分数之和，这里是进行了归一化，这样计算损失是为了避免训练时梯度消失和有利于训练收敛：</p><ul><li>高分框惩罚更大，影响更强</li><li>所有正样本的损失进行归一平均，防止不同 batch 样本不均衡导致训练不稳定</li><li>另一方面<code>1.0 - iou</code>是一个张量，里面存储了这个bach_size中所有框的iou损失，如果不进行归一化，无法进行损失回传且loss的量级不稳定</li></ul><h4 id="TaskAlignedAssigner"><a href="#TaskAlignedAssigner" class="headerlink" title="TaskAlignedAssigner"></a>TaskAlignedAssigner</h4><p><code>TaskAlignedAssigner</code> 是一种 <strong>用于目标检测中正负样本分配（匹配）的策略</strong>，最初由 <a href="https://arxiv.org/abs/2107.08430">YOLOX</a> 提出(YOLOX 是旷视（Megvii）在 2021 年发布的 YOLO 系列衍生模型，不属于官方 YOLOv1~v10 的系列命名)，并在 YOLOv8 中被广泛使用。它的目标是更好地将预测框和真实框进行<strong>一对一匹配</strong>，尤其在复杂或拥挤场景下，提升小目标、重叠目标的检测性能。</p><p> TaskAlignedAssigner 的匹配策略简单总结为：<strong>根据分类与回归的分数加权的分数选择正样本</strong>。</p><ul><li>计算真实框和预测框的匹配程度。</li></ul><p>$$<br>align_metric &#x3D; s^\alpha \cdot u^\beta<br>$$</p><p>​其中，$s$是预测类别分值，$u$是预测框和真实框的ciou值，$\alpha$和$\beta$为权重超参数，两者相乘就可以衡量匹配程度，当分类的分值越高且ciou越高时，$align_metric$的值就越接近于1,此时预测框就与真实框越匹配，就越符合正样本的标准。</p><p>正负样本分配（匹配）的策略的流程如下:</p><ul><li>初筛正样本      选取中心点在gt_bboxes内的预测点作为正样本匹配位置；</li><li>精选正样本      根据对齐分数$t$在初步筛选的正样本中进一步选取topK个预测点作为正样本匹配位置；</li><li>过滤正样本      若一个预测点匹配到多个gt_bboxs，则选取具有最大CIoU的gt作为该预测点匹配的正样本；</li></ul><p>实际计算代码如下所示:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/utils/tal.py</span><span class="token keyword">class</span> <span class="token class-name">TaskAlignedAssigner</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># ......省略无关代码......</span>    <span class="token keyword">def</span> <span class="token function">get_box_metrics</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pd_scores<span class="token punctuation">,</span> pd_bboxes<span class="token punctuation">,</span> gt_labels<span class="token punctuation">,</span> gt_bboxes<span class="token punctuation">,</span> mask_gt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ......省略无关代码......</span>        na <span class="token operator">=</span> pd_bboxes<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        mask_gt <span class="token operator">=</span> mask_gt<span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># b, max_num_obj, h*w</span>        overlaps <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>bs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_max_boxes<span class="token punctuation">,</span> na<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>pd_bboxes<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>pd_bboxes<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        bbox_scores <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>bs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_max_boxes<span class="token punctuation">,</span> na<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>pd_scores<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>pd_scores<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        ind <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>bs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_max_boxes<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span>  <span class="token comment"># 2, b, max_num_obj</span>        ind<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>end<span class="token operator">=</span>self<span class="token punctuation">.</span>bs<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_max_boxes<span class="token punctuation">)</span>  <span class="token comment"># b, max_num_obj</span>        ind<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> gt_labels<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># b, max_num_obj</span>        <span class="token comment"># 提取每个 GT 匹配位置的分类分数</span>        bbox_scores<span class="token punctuation">[</span>mask_gt<span class="token punctuation">]</span> <span class="token operator">=</span> pd_scores<span class="token punctuation">[</span>ind<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> ind<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>mask_gt<span class="token punctuation">]</span>  <span class="token comment"># b, max_num_obj, h*w</span>        <span class="token comment"># (b, max_num_obj, 1, 4), (b, 1, h*w, 4)</span>        pd_boxes <span class="token operator">=</span> pd_bboxes<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_max_boxes<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span>mask_gt<span class="token punctuation">]</span>        gt_boxes <span class="token operator">=</span> gt_bboxes<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> na<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span>mask_gt<span class="token punctuation">]</span>        overlaps<span class="token punctuation">[</span>mask_gt<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>iou_calculation<span class="token punctuation">(</span>gt_boxes<span class="token punctuation">,</span> pd_boxes<span class="token punctuation">)</span>        align_metric <span class="token operator">=</span> bbox_scores<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span> <span class="token operator">*</span> overlaps<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>beta<span class="token punctuation">)</span>        <span class="token keyword">return</span> align_metric<span class="token punctuation">,</span> overlaps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类别损失"><a href="#类别损失" class="headerlink" title="类别损失"></a>类别损失</h3><p>类别的损失计算方法是<code>nn.BCEWithLogitsLoss</code>,计算方法如下：</p><p>假设：</p><ul><li>$\hat{y} \in (0, 1)$：模型预测的概率（<strong>已经经过 Sigmoid 函数</strong>）</li><li>$y \in {0, 1}$：真实标签（0 或 1）</li></ul><p>那么 BCELoss 的公式是：<br>$$<br>\text{BCELoss}(\hat{y}, y) &#x3D; -[y \cdot \log(\hat{y}) + (1 - y) \cdot \log(1 - \hat{y})]<br>$$</p><blockquote><p>注意：输入必须是概率（0~1 之间），即通常需要先用 <code>sigmoid</code>。</p></blockquote><h3 id="DFL损失"><a href="#DFL损失" class="headerlink" title="DFL损失"></a>DFL损失</h3><p>DFL损失，全称为Distribution Focal Loss：它主要应用在目标检测任务中的边界框回归（bounding box regression）过程。 DFL损失的主要作用是用于校正模型在预测物体边界框时的误差，优化后的效果可以在一定程度上针对有些模糊或者焦点不集中的图片提升对象检测的精度。 在训练过程中DFL损失越低，说明模型在预测边界框方面的性能越好。</p><ul><li><strong>DFL和IoULoss的区别</strong></li></ul><table><thead><tr><th>对比点</th><th>DFL（距离精度）</th><th>IoU Loss（重叠度）</th></tr></thead><tbody><tr><td><strong>关注对象</strong></td><td>每个方向的偏移量（ltrb）</td><td>整体框与 GT 框的 IoU</td></tr><tr><td><strong>误差表现</strong></td><td>数值上与 GT 偏差</td><td>重叠面积比例</td></tr><tr><td><strong>可解释性</strong></td><td>“我左边预测错了 2 像素”</td><td>“我框和目标只有 60% 重叠”</td></tr><tr><td><strong>优化引导方向</strong></td><td>优化边界精度、贴近真实距离</td><td>优化整体框覆盖目标</td></tr><tr><td><strong>结果解码方式</strong></td><td>解码后再计算框</td><td>已解码框直接参与计算</td></tr></tbody></table><blockquote><p> 预测框的anchor_point只有落在标签框的区域内才会进行Iou损失和DFL损失计算</p></blockquote><p>DFL损失计算的步骤如下：</p><ul><li>计算anchor_point和标签框边界的距离，得到$ltrb &#x3D; [左距离，顶距离，右距离，下距离]$</li><li>对这些距离进行限制，强制限制在(0, reg_max - 0.01)范围内</li><li>计算左右 bin 索引和权重</li><li>计算交叉熵损失</li></ul><p>计算公式如下所示:<br>$$<br>\begin{array}{c}<br>\mathrm{DFL}(p,t)&#x3D;w_l\cdot\mathrm{CE}(p,t_l)+w_r\cdot\mathrm{CE}(p,t_r)<br>\end{array}<br>$$<br>其中：</p><ul><li>$t$：目标边界框的连续坐标值（如偏移量）</li><li>$t_l &#x3D; \lfloor t \rfloor$：目标值左侧的整数 bin 索引</li><li>$t_r &#x3D; t_l + 1$：目标值右侧的整数 bin 索引</li><li>$w_l &#x3D; t_r - t$：左侧 bin 的权重</li><li>$w_r &#x3D; t - t_l &#x3D; 1 - w_l$：右侧 bin 的权重</li><li>$p$：模型预测的离散概率分布（长度为 $reg_max + 1$）</li><li>$\text{CE}(p, y) &#x3D; -\log(p_y)$：交叉熵损失（当 $p$ 为概率）或标准交叉熵形式（当 $p$ 为 logits）</li></ul><p>举个例子:</p><p>假设 <code>reg_max=5</code>，GT <code>target=2.6</code>，<code>pred_dist=[0.1, 0.1, 0.2, 0.3, 0.3]</code>，则：</p><ul><li><p><code>tl=2</code>, <code>tr=3</code></p></li><li><p><code>wl=0.4</code>, <code>wr=0.6</code></p><blockquote><p>40% 属于桶 2</p><p>60% 属于桶 3</p></blockquote></li><li><p>loss &#x3D; 0.4 × CrossEntropy(pred, 2) + 0.6 × CrossEntropy(pred, 3)</p></li></ul><p><code>pred_dist</code> 是模型输出的 <strong>分布式回归预测</strong>，即：<strong>每个 bbox 边界（left&#x2F;top&#x2F;right&#x2F;bottom）对某个离散距离桶的概率分布预测。</strong></p><p>DFLoss的实现程序如下所示:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/utils/loss.py</span><span class="token keyword">class</span> <span class="token class-name">DFLoss</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Criterion class for computing Distribution Focal Loss (DFL)."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reg_max<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the DFL module with regularization maximum."""</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reg_max <span class="token operator">=</span> reg_max    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pred_dist<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">,</span> target<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Return sum of left and right DFL losses from https://ieeexplore.ieee.org/document/9792391."""</span>        target <span class="token operator">=</span> target<span class="token punctuation">.</span>clamp_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>reg_max <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.01</span><span class="token punctuation">)</span>        tl <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># target left</span>        tr <span class="token operator">=</span> tl <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># target right</span>        wl <span class="token operator">=</span> tr <span class="token operator">-</span> target  <span class="token comment"># weight left</span>        wr <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> wl  <span class="token comment"># weight right</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>pred_dist<span class="token punctuation">,</span> tl<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>tl<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">*</span> wl            <span class="token operator">+</span> F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>pred_dist<span class="token punctuation">,</span> tr<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>tl<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">*</span> wr        <span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="损失加权计算"><a href="#损失加权计算" class="headerlink" title="损失加权计算"></a>损失加权计算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ultralytics/utils/loss.py</span><span class="token keyword">class</span> <span class="token class-name">v8DetectionLoss</span><span class="token punctuation">:</span>     <span class="token comment"># ......省略无关代码......</span><span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preds<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> batch<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">]</span><span class="token punctuation">:</span>         <span class="token comment"># ......省略无关代码......</span>        loss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*=</span> self<span class="token punctuation">.</span>hyp<span class="token punctuation">.</span>box  <span class="token comment"># box gain</span>        loss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*=</span> self<span class="token punctuation">.</span>hyp<span class="token punctuation">.</span>cls  <span class="token comment"># cls gain</span>        loss<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*=</span> self<span class="token punctuation">.</span>hyp<span class="token punctuation">.</span>dfl  <span class="token comment"># dfl gain</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>box gain</code>、<code>cls gain</code>和<code>dfl gain</code>的值配置如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># ultralytics/cfg/default.yaml</span><span class="token key atrule">box</span><span class="token punctuation">:</span> <span class="token number">7.5</span> <span class="token comment"># (float) box loss gain</span><span class="token key atrule">cls</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment"># (float) cls loss gain (scale with pixels)</span><span class="token key atrule">dfl</span><span class="token punctuation">:</span> <span class="token number">1.5</span> <span class="token comment"># (float) dfl loss gain</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ultralytics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
            <tag> loss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梯度优化器总结与分析</title>
      <link href="/2025/07/21/ti-du-you-hua-qi-zong-jie-yu-fen-xi/"/>
      <url>/2025/07/21/ti-du-you-hua-qi-zong-jie-yu-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>神经网络有许多影响模型性能的超参数。一个最基本的超参数是<a href="https://so.csdn.net/so/search?q=%E5%AD%A6%E4%B9%A0%E7%8E%87&spm=1001.2101.3001.7020">学习率</a>(LR)，它决定了在训练步骤之间模型权重的变化程度。在最简单的情况下，LR值是0到1之间的固定值。选择正确的LR值是具有挑战性。一方面较大的学习率有助于算法快速收敛，但它也会导致算法在最小值附近跳跃而没有达到它，甚至在它太大时跳过它。另一方面，较小的学习率可以更好地收敛到最小值，但是如果优化器太小，可能需要太长时间才能收敛，或者陷入停滞。</p><h3 id="什么是学习率调度器"><a href="#什么是学习率调度器" class="headerlink" title="什么是学习率调度器?"></a><strong>什么是学习率调度器?</strong></h3><p>一种帮助算法快速收敛到最优的解决方案是使用学习率调度器。学习率调度器在训练过程中根据预先定义的时间表调整学习率。</p><p>通常，学习率在训练开始时设置为比较高的值，允许更快的收敛。随着训练的进行，学习率会降低，使收敛到最优，获得更好的性能。在训练过程中降低学习率也称为退火或衰减。</p><p>学习率调度器有很多个，并且我们还可以自定义调度器。本文将介绍PyTorch中不同的预定义学习率调度器如何在训练期间调整学习率</p><h3 id="学习率调度器"><a href="#学习率调度器" class="headerlink" title="学习率调度器"></a><strong>学习率调度器</strong></h3><h3 id="1、StepLR"><a href="#1、StepLR" class="headerlink" title="1、StepLR"></a><strong>1、StepLR</strong></h3><p>在每个预定义的训练步骤数之后，StepLR通过乘法因子降低学习率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> StepLRscheduler <span class="token operator">=</span> StepLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>             step_size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment"># Period of learning rate decay</span>            gamma <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment"># Multiplicative factor of learning rate decay</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps1.jpg" alt="img"> </p><h3 id="2、MultiStepLR"><a href="#2、MultiStepLR" class="headerlink" title="2、MultiStepLR"></a><strong>2、MultiStepLR</strong></h3><p>MultiStepLR -类似于StepLR -也通过乘法因子降低了学习率，但在可以自定义修改学习率的时间节点。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> MultiStepLRscheduler <span class="token operator">=</span> MultiStepLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>               milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># List of epoch indices</span>              gamma <span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment"># Multiplicative factor of learning rate decay</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps2.jpg" alt="img"> </p><h3 id="3、ConstantLR"><a href="#3、ConstantLR" class="headerlink" title="3、ConstantLR"></a><strong>3、ConstantLR</strong></h3><p>ConstantLR通过乘法因子降低学习率，直到训练达到预定义步数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> ConstantLRscheduler <span class="token operator">=</span> ConstantLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>               factor <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment"># The number we multiply learning rate until the milestone.</span>              total_iters <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># The number of steps that the scheduler decays the learning rate</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps3.jpg" alt="img"> </p><p>如果起始因子小于1，那么学习率调度器在训练过程中会提高学习率，而不是降低学习率。</p><h3 id="4、LinearLR"><a href="#4、LinearLR" class="headerlink" title="4、LinearLR"></a><strong>4、LinearLR</strong></h3><p>LinearLR -类似于ConstantLR -在训练开始时通过乘法因子降低了学习率。但是它会在一定数量的训练步骤中线性地改变学习率，直到它达到最初设定的学习率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> LinearLRscheduler <span class="token operator">=</span> LinearLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>              start_factor <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment"># The number we multiply learning rate in the first epoch</span>             total_iters <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># The number of iterations that multiplicative factor reaches to 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps4.jpg" alt="img"> </p><h3 id="5、ExponentialLR"><a href="#5、ExponentialLR" class="headerlink" title="5、ExponentialLR"></a><strong>5、ExponentialLR</strong></h3><p>ExponentialLR在每个训练步骤中通过乘法因子降低学习率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> ExponentialLR  scheduler <span class="token operator">=</span> ExponentialLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>                gamma <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment"># Multiplicative factor of learning rate decay.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps5.jpg" alt="img"> </p><h3 id="6、PolynomialLR"><a href="#6、PolynomialLR" class="headerlink" title="6、PolynomialLR"></a><strong>6、PolynomialLR</strong></h3><p>PolynomialLR通过对定义的步骤数使用多项式函数来降低学习率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> PolynomialLR  scheduler <span class="token operator">=</span> PolynomialLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>                total_iters <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment"># The number of steps that the scheduler decays the learning rate.</span>               power <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># The power of the polynomial.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下图为power&#x3D; 1时的学习率衰减结果。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps6.jpg" alt="img"> </p><p>power&#x3D; 2时，学习率衰减如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps7.jpg" alt="img"> </p><h3 id="7、CosineAnnealingLR"><a href="#7、CosineAnnealingLR" class="headerlink" title="7、CosineAnnealingLR"></a><strong>7、CosineAnnealingLR</strong></h3><p>CosineAnnealingLR通过余弦函数降低学习率。</p><p>可以从技术上安排学习率调整以跟随多个周期，但他的思想是在半个周期内衰减学习率以获得最大的迭代次数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> CosineAnnealingLRscheduler <span class="token operator">=</span> CosineAnnealingLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>                 T_max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token comment"># Maximum number of iterations.</span>                 eta_min <span class="token operator">=</span> <span class="token number">1e-4</span><span class="token punctuation">)</span> <span class="token comment"># Minimum learning rate.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps8.jpg"> </p><p>两位Kaggle大赛大师Philipp Singer和Yauhen Babakhin建议使用余弦衰减作为深度迁移学习[2]的学习率调度器。</p><h3 id="8、CosineAnnealingWarmRestartsLR"><a href="#8、CosineAnnealingWarmRestartsLR" class="headerlink" title="8、CosineAnnealingWarmRestartsLR"></a><strong>8、CosineAnnealingWarmRestartsLR</strong></h3><p>CosineAnnealingWarmRestartsLR类似于CosineAnnealingLR。但是它允许在(例如，每个轮次中)使用初始LR重新启动LR计划。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> CosineAnnealingWarmRestartsscheduler <span class="token operator">=</span> CosineAnnealingWarmRestarts<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>                       T_0 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token comment"># Number of iterations for the first restart</span>                      T_mult <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># A factor increases TiTi after a restart</span>                      eta_min <span class="token operator">=</span> <span class="token number">1e-4</span><span class="token punctuation">)</span> <span class="token comment"># Minimum learning rate</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps9.jpg" alt="img"> </p><p>这个计划调度于2017年[1]推出。虽然增加LR会导致模型发散但是这种有意的分歧使模型能够逃避局部最小值，并找到更好的全局最小值。</p><h3 id="9、CyclicLR"><a href="#9、CyclicLR" class="headerlink" title="9、CyclicLR"></a><strong>9、CyclicLR</strong></h3><p>CyclicLR根据循环学习率策略调整学习率，该策略基于我们在前一节中讨论过的重启的概念。在PyTorch中有三个内置策略。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> CyclicLR scheduler <span class="token operator">=</span> CyclicLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>              base_lr <span class="token operator">=</span> <span class="token number">0.0001</span><span class="token punctuation">,</span> <span class="token comment"># Initial learning rate which is the lower boundary in the cycle for each parameter group</span>             max_lr <span class="token operator">=</span> <span class="token number">1e-3</span><span class="token punctuation">,</span> <span class="token comment"># Upper learning rate boundaries in the cycle for each parameter group</span>             step_size_up <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment"># Number of training iterations in the increasing half of a cycle</span>             mode <span class="token operator">=</span> <span class="token string">"triangular"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当mode &#x3D; “ triangle “时，学习率衰减将遵循一个基本的三角形循环，没有振幅缩放，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps10.jpg" alt="img"> </p><p>对于mode &#x3D; “ triangar2 “，所得到的学习率衰减将遵循一个基本的三角形循环，每个循环将初始振幅缩放一半，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps11.jpg" alt="img"> </p><p>使用mode &#x3D; “exp_range”，得到的学习率衰减将如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps12.jpg" alt="img"> </p><h3 id="10、OneCycleLR"><a href="#10、OneCycleLR" class="headerlink" title="10、OneCycleLR"></a><strong>10、OneCycleLR</strong></h3><p>OneCycleLR根据1cycle学习率策略降低学习率，该策略在2017年[3]的一篇论文中提出。</p><p>与许多其他学习率调度器相比，学习率不仅在训练过程中下降。相反，学习率从初始学习率增加到某个最大学习率，然后再次下降。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> OneCycleLRscheduler <span class="token operator">=</span> OneCycleLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>               max_lr <span class="token operator">=</span> <span class="token number">1e-3</span><span class="token punctuation">,</span> <span class="token comment"># Upper learning rate boundaries in the cycle for each parameter group</span>              steps_per_epoch <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment"># The number of steps per epoch to train for.</span>              epochs <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment"># The number of epochs to train for.</span>              anneal_strategy <span class="token operator">=</span> <span class="token string">'cos'</span><span class="token punctuation">)</span> <span class="token comment"># Specifies the annealing strategy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用anneal_strategy &#x3D; “cos”得到的学习率衰减将如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps13.jpg" alt="img"> </p><p>使用anneal_strategy &#x3D; “linear”，得到的学习率衰减将如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps14.jpg" alt="img"> </p><h3 id="11、ReduceLROnPlateauLR"><a href="#11、ReduceLROnPlateauLR" class="headerlink" title="11、ReduceLROnPlateauLR"></a><strong>11、ReduceLROnPlateauLR</strong></h3><p>当指标度量停止改进时，ReduceLROnPlateau会降低学习率。这很难可视化，因为学习率降低时间取决于您的模型、数据和超参数。</p><h3 id="12、自定义学习率调度器"><a href="#12、自定义学习率调度器" class="headerlink" title="12、自定义学习率调度器"></a><strong>12、自定义学习率调度器</strong></h3><p>如果内置的学习率调度器不能满足需求，我们可以使用lambda函数定义一个调度器。lambda函数是一个返回基于epoch值的乘法因子的函数。</p><p>LambdaLR通过将lambda函数的乘法因子应用到初始LR来调整学习速率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lr_epoch<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> lr_initial <span class="token operator">*</span> <span class="token keyword">lambda</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MultiplicativeLR通过将lambda函数的乘法因子应用到前一个epoch的LR来调整学习速率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lr_epoch<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> lr_epoch<span class="token punctuation">[</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token keyword">lambda</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这些学习率调度器也有点难以可视化，因为它们高度依赖于已定义的lambda函数。</p><h3 id="可视化汇总"><a href="#可视化汇总" class="headerlink" title="可视化汇总"></a><strong>可视化汇总</strong></h3><p>以上就是PyTorch内置的学习率调度器，应该为深度学习项目选择哪种学习率调度器呢？</p><p>答案并不那么容易，ReduceLROnPlateau是一个流行的学习率调度器。而现在其他的方法如CosineAnnealingLR和OneCycleLR或像cosineannealingwarmrestart和CyclicLR这样的热重启方法已经越来越受欢迎。</p><p>所以我们需要运行一些实验来确定哪种学习率调度器最适合要解决问题。但是可以说的是使用任何学习调度器都会影响到模型性能。</p><p>下面是PyTorch中讨论过的学习率调度器的可视化总结。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%A2%AF%E5%BA%A6%E4%BC%98%E5%8C%96%E5%99%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E5%88%86%E6%9E%90/wps15.jpg" alt="img"> </p><p> 下面是来可视化学习率调度器的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> StepLR <span class="token comment"># Import your choice of scheduler here</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>ticker <span class="token keyword">import</span> MultipleLocatorLEARNING_RATE <span class="token operator">=</span> <span class="token number">1e-3</span>EPOCHS <span class="token operator">=</span> <span class="token number">4</span>STEPS_IN_EPOCH <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment"># Set model and optimizer</span>model <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LEARNING_RATE<span class="token punctuation">)</span><span class="token comment"># Define your scheduler here as described above</span><span class="token comment"># ...</span><span class="token comment"># Get learning rates as each training step</span>learning_rates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>EPOCHS<span class="token operator">*</span>STEPS_IN_EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>  optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  learning_rates<span class="token punctuation">.</span>append<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>param_groups<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"lr"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Visualize learinig rate scheduler</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>EPOCHS<span class="token operator">*</span>STEPS_IN_EPOCH<span class="token punctuation">)</span><span class="token punctuation">,</span>     learning_rates<span class="token punctuation">,</span>    marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>     color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> EPOCHS<span class="token operator">*</span>STEPS_IN_EPOCH<span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> LEARNING_RATE <span class="token operator">+</span> <span class="token number">0.0001</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Steps'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Learning Rate'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>MultipleLocator<span class="token punctuation">(</span>STEPS_IN_EPOCH<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_minor_locator<span class="token punctuation">(</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h3><ul><li><a href="https://blog.csdn.net/deephub/article/details/128262227">PyTorch中学习率调度器可视化介绍_python调度问题可视化-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 梯度优化器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梯度优化器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolo训练参数解释</title>
      <link href="/2025/07/14/yolo-xun-lian-can-shu-jie-shi/"/>
      <url>/2025/07/14/yolo-xun-lian-can-shu-jie-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ultralytics 🚀 AGPL-3.0 License</p></blockquote><h1 id="Train"><a href="#Train" class="headerlink" title="Train"></a>Train</h1><table><thead><tr><th>参数名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>model</td><td>str (optional)</td><td></td><td>模型文件路径，如  yolov8n.pt  或配置文件  yolov8n.yaml；需要进行resume时，<mark>这里需要填写需要加载模型的权重</mark></td></tr><tr><td>data</td><td>str (optional)</td><td></td><td>数据集配置文件路径，如  coco8.yaml</td></tr><tr><td>epochs</td><td>int</td><td>100</td><td>训练轮数</td></tr><tr><td>time</td><td>float (optional)</td><td></td><td>指定训练时长（小时），若设定则覆盖  epochs</td></tr><tr><td><strong>patience</strong></td><td>int</td><td>100</td><td><mark>若连续该轮数没有提升，则提前停止训练</mark></td></tr><tr><td>batch</td><td>int</td><td>16</td><td>每批训练图像数量， -1  表示自动调整</td></tr><tr><td>imgsz</td><td>int</td><td>list</td><td>640</td></tr><tr><td>save</td><td>bool</td><td>True</td><td>是否保存训练检查点和预测结果</td></tr><tr><td>save_period</td><td>int</td><td>-1</td><td>每多少 epoch 保存一次模型， -1  表示禁用</td></tr><tr><td><strong>cache</strong></td><td>bool</td><td>str</td><td>False<mark>将数据集加载后保存在内存中或disk上，可以适当提升训练速度</mark></td></tr><tr><td>device</td><td>int</td><td>str</td><td>list</td></tr><tr><td>workers</td><td>int</td><td>8</td><td>加载数据时的线程数（每个 DDP rank）</td></tr><tr><td>project</td><td>str (optional)</td><td></td><td>项目名称</td></tr><tr><td>name</td><td>str (optional)</td><td></td><td>实验名称，结果将保存至  project&#x2F;name  目录下</td></tr><tr><td>exist_ok</td><td>bool</td><td>False</td><td>若目录已存在，是否覆盖</td></tr><tr><td>pretrained</td><td>bool</td><td>str</td><td>True</td></tr><tr><td>optimizer</td><td>str</td><td>auto</td><td>优化器选择，选项有：SGD, Adam, Adamax, AdamW, 等</td></tr><tr><td>verbose</td><td>bool</td><td>True</td><td>是否打印详细信息</td></tr><tr><td>seed</td><td>int</td><td>0</td><td>随机种子，确保可复现性</td></tr><tr><td>deterministic</td><td>bool</td><td>True</td><td>是否启用确定性训练，主要用于确保每次训练结果一致，在调试、复现实验结果时非常重要</td></tr><tr><td>single_cls</td><td>bool</td><td>False</td><td>是否将多类别数据作为单类别训练，model.nc 会被设置为 1，配置文件中配置的多类信息失效</td></tr><tr><td>rect</td><td>bool</td><td>False</td><td>是否使用矩形训练&#x2F;验证</td></tr><tr><td><strong>cos_lr</strong></td><td>bool</td><td>False</td><td>是否使用余弦学习率调度器</td></tr><tr><td>close_mosaic</td><td>int</td><td>10</td><td>最后多少个 epoch 禁用 mosaic 数据增强</td></tr><tr><td><strong>resume</strong></td><td>bool</td><td>False</td><td>恢复训练是否从上次检查点<mark>恢复训练</mark></td></tr><tr><td>amp</td><td>bool</td><td>True</td><td>是否启用自动混合精度（AMP）训练</td></tr><tr><td>fraction</td><td>float</td><td>1.0</td><td>训练集使用比例（如0.1表示只使用10%的训练集）</td></tr><tr><td>profile</td><td>bool</td><td>False</td><td>是否在训练期间测试 profile ONNX 或 TensorRT 推理速度</td></tr><tr><td><strong>freeze</strong></td><td>int</td><td>list</td><td><mark>训练的时候冻结某些层</mark></td></tr><tr><td>multi_scale</td><td>bool</td><td>False</td><td>是否启用多尺度训练</td></tr></tbody></table><h1 id="Val-x2F-Test"><a href="#Val-x2F-Test" class="headerlink" title="Val&#x2F;Test"></a>Val&#x2F;Test</h1><table><thead><tr><th>参数名</th><th>默认值</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>True</td><td>bool</td><td>是否在训练时进行验证&#x2F;测试</td></tr><tr><td>split</td><td>val</td><td>str</td><td>用于验证的数据集划分（val&#x2F;test&#x2F;train）</td></tr><tr><td>save_json</td><td>False</td><td>bool</td><td>是否将结果保存为 JSON 文件</td></tr><tr><td><strong>conf</strong></td><td></td><td>float</td><td>目标检测置信度阈值（默认：预测时0.25，验证时0.001）</td></tr><tr><td><strong>iou</strong></td><td>0.7</td><td>float</td><td>NMS 的 IoU 阈值<mark>在进行nms时iou大于该值的框会被认为时重复框，进而被删除</mark></td></tr><tr><td><strong>max_det</strong></td><td>300</td><td>int</td><td>每张图像的最大检测数</td></tr><tr><td>half</td><td>False</td><td>bool</td><td>是否使用半精度 FP16</td></tr><tr><td>dnn</td><td>False</td><td>bool</td><td>是否使用 OpenCV DNN 模式推理 ONNX</td></tr><tr><td>plots</td><td>True</td><td>bool</td><td>是否在训练&#x2F;验证过程中保存图像和图表</td></tr></tbody></table><h1 id="Predict"><a href="#Predict" class="headerlink" title="Predict"></a>Predict</h1><table><thead><tr><th>参数名</th><th>默认值</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>source</td><td></td><td>str</td><td>输入图像或视频路径</td></tr><tr><td>vid_stride</td><td>1</td><td>int</td><td>视频帧步长</td></tr><tr><td>stream_buffer</td><td>False</td><td>bool</td><td>是否缓冲所有视频流帧</td></tr><tr><td>visualize</td><td>False</td><td>bool</td><td>是否可视化模型特征</td></tr><tr><td>augment</td><td>False</td><td>bool</td><td>是否对预测输入进行增强</td></tr><tr><td>agnostic_nms</td><td>False</td><td>bool</td><td>类别无关的 NMS</td></tr><tr><td>classes</td><td></td><td>int &#x2F; list[int]</td><td>仅保留指定类别的检测结果</td></tr><tr><td>retina_masks</td><td>False</td><td>bool</td><td>使用高分辨率分割掩码</td></tr><tr><td>embed</td><td></td><td>list[int]</td><td>输出指定层的特征向量</td></tr></tbody></table><h1 id="Visualize"><a href="#Visualize" class="headerlink" title="Visualize"></a>Visualize</h1><table><thead><tr><th>参数名</th><th>默认值</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>show</td><td>False</td><td>bool</td><td>是否展示预测图像&#x2F;视频（前提环境支持）</td></tr><tr><td>save_frames</td><td>False</td><td>bool</td><td>是否保存预测视频的帧</td></tr><tr><td>save_txt</td><td>False</td><td>bool</td><td>是否保存结果为 txt 文件</td></tr><tr><td>save_conf</td><td>False</td><td>bool</td><td>是否保存置信度得分</td></tr><tr><td>save_crop</td><td>False</td><td>bool</td><td>是否保存裁剪出的目标图像</td></tr><tr><td>show_labels</td><td>True</td><td>bool</td><td>是否显示预测类别标签</td></tr><tr><td>show_conf</td><td>True</td><td>bool</td><td>是否显示预测置信度</td></tr><tr><td>show_boxes</td><td>True</td><td>bool</td><td>是否显示预测框</td></tr><tr><td>line_width</td><td></td><td>int</td><td>边框线宽（默认根据图像大小自动缩放）</td></tr></tbody></table><h1 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h1><table><thead><tr><th>参数名</th><th>默认值</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>format</td><td>torchscript</td><td>str</td><td>导出格式</td></tr><tr><td>keras</td><td>False</td><td>bool</td><td>是否导出为 Keras 格式</td></tr><tr><td>optimize</td><td>False</td><td>bool</td><td>TorchScript 导出是否优化</td></tr><tr><td>int8</td><td>False</td><td>bool</td><td>CoreML &#x2F; TF 是否使用 INT8 量化</td></tr><tr><td>dynamic</td><td>False</td><td>bool</td><td>ONNX&#x2F;TF&#x2F;TensorRT 是否使用动态轴</td></tr><tr><td>simplify</td><td>True</td><td>bool</td><td>ONNX 模型简化</td></tr><tr><td>opset</td><td></td><td>int</td><td>ONNX 的 opset 版本</td></tr><tr><td>workspace</td><td></td><td>float</td><td>TensorRT 的工作空间（GiB）</td></tr><tr><td>nms</td><td>False</td><td>bool</td><td>CoreML 中是否添加 NMS</td></tr></tbody></table><h1 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h1><table><thead><tr><th>参数名</th><th>默认值</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>lr0</td><td>0.01</td><td>float</td><td>初始学习率（SGD&#x3D;1E-2，Adam&#x3D;1E-3）</td></tr><tr><td>lrf</td><td>0.01</td><td>float</td><td>最终学习率，lr0 × lrf</td></tr><tr><td>momentum</td><td>0.937</td><td>float</td><td>SGD 动量 &#x2F; Adam β1</td></tr><tr><td>weight_decay</td><td>0.0005</td><td>float</td><td>权重衰减</td></tr><tr><td><strong>warmup_epochs</strong></td><td>3.0</td><td>float</td><td>预热轮数</td></tr><tr><td>warmup_momentum</td><td>0.8</td><td>float</td><td>预热初始动量</td></tr><tr><td>warmup_bias_lr</td><td>0.1</td><td>float</td><td>预热初始 bias 学习率</td></tr><tr><td>box</td><td>7.5</td><td>float</td><td><mark>目标框损失权重</mark></td></tr><tr><td>cls</td><td>0.5</td><td>float</td><td><mark>类别损失权重</mark></td></tr><tr><td>dfl</td><td>1.5</td><td>float</td><td><mark>DFL 损失权重</mark></td></tr><tr><td>pose</td><td>12.0</td><td>float</td><td>姿态估计损失权重</td></tr><tr><td>kobj</td><td>1.0</td><td>float</td><td>关键点目标损失权重</td></tr><tr><td>nbs</td><td>64</td><td>int</td><td>名义 batch size</td></tr></tbody></table><ul><li>图像增强参数<table><thead><tr><th>参数名</th><th>默认值</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>hsv_h</td><td>0.015</td><td>float</td><td>HSV 色调增强</td></tr><tr><td>hsv_s</td><td>0.7</td><td>float</td><td>HSV 饱和度增强</td></tr><tr><td>hsv_v</td><td>0.4</td><td>float</td><td>HSV 明度增强</td></tr><tr><td>degrees</td><td>0.0</td><td>float</td><td>旋转角度</td></tr><tr><td>translate</td><td>0.1</td><td>float</td><td>平移</td></tr><tr><td>scale</td><td>0.5</td><td>float</td><td>缩放</td></tr><tr><td>shear</td><td>0.0</td><td>float</td><td>裁剪倾斜角度</td></tr><tr><td>perspective</td><td>0.0</td><td>float</td><td>透视变换</td></tr><tr><td>flipud</td><td>0.0</td><td>float</td><td>上下翻转概率</td></tr><tr><td>fliplr</td><td>0.5</td><td>float</td><td>左右翻转概率</td></tr><tr><td>bgr</td><td>0.0</td><td>float</td><td>BGR 通道扰动概率</td></tr><tr><td>mosaic</td><td>1.0</td><td>float</td><td>mosaic 数据增强概率</td></tr><tr><td>mixup</td><td>0.0</td><td>float</td><td>mixup 概率</td></tr><tr><td>cutmix</td><td>0.0</td><td>float</td><td>cutmix 概率</td></tr><tr><td>copy_paste</td><td>0.0</td><td>float</td><td>segment 拷贝粘贴增强概率</td></tr><tr><td>copy_paste_mode</td><td>flip</td><td>str</td><td>拷贝粘贴方式（flip, mixup）</td></tr><tr><td>auto_augment</td><td>randaugment</td><td>str</td><td>图像自动增强策略</td></tr><tr><td>erasing</td><td>0.4</td><td>float</td><td>分类训练时随机擦除概率（&lt; 1.0）。在训练过程中，对图像的随机区域进行遮挡（擦除），增强模型鲁棒性</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> ultralytics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
            <tag> 训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测指标分析</title>
      <link href="/2025/07/14/mu-biao-jian-ce-zhi-biao-fen-xi/"/>
      <url>/2025/07/14/mu-biao-jian-ce-zhi-biao-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="F1分数"><a href="#F1分数" class="headerlink" title="F1分数"></a>F1分数</h1><ul><li>F1分数计算公式</li></ul><p>$$<br>\text{F1}&#x3D;2\times\frac{\text{Precision}\times\text{Recall}}{\text{Precision}+\text{Recall}} \\<br>&#x3D;2\times\frac{\text{Recall}}{\text{1}+\frac{\text{Recall}}{\text{Precision}}} \\<br>&#x3D;2\times\frac{\text{Precision}}{\frac{\text{Precision}}{\text{Recall}}+1} \\<br>$$</p><h1 id="准确率和召回率"><a href="#准确率和召回率" class="headerlink" title="准确率和召回率"></a>准确率和召回率</h1><table><thead><tr><th>指标名</th><th>公式</th><th>解释</th></tr></thead><tbody><tr><td>Precision（精确率）</td><td>TP &#x2F; (TP + FP)</td><td>被预测为正的样本中，有多少是真正的正类</td></tr><tr><td>Recall（召回率）</td><td>TP &#x2F; (TP + FN)</td><td>所有真正的正类中，有多少被正确预测了</td></tr></tbody></table><ul><li>TP、FP、FN、TN含义</li></ul><table><thead><tr><th></th><th><strong>真实值：Positive（正类）</strong></th><th><strong>真实值：Negative（负类）</strong></th></tr></thead><tbody><tr><td><strong>预测值：Positive（预测为正）</strong></td><td>✅ <strong>TP</strong>检测出目标且正确</td><td>❌ <strong>FP</strong>错误地检测出一个不存在的目标</td></tr><tr><td><strong>预测值：Negative（预测为负）</strong></td><td>❌ <strong>FN</strong>漏掉了真实目标</td><td>✅ <strong>TN</strong>正确地没检测出（背景）</td></tr></tbody></table><p>其中：</p><ul><li>TP：True Positive，预测正确的正样本数（检测对了）</li><li>FP：False Positive，预测为正但实际是负（检测错了）</li><li>FN：False Negative，实际为正但预测为负（漏检）</li><li>TP+FP：所有预测为正类的个数</li><li>TP+FN：所有实际为正类的个数</li></ul><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul><li><p><strong>TP越大，FP越小，准确率越高，此时预测正确的越多，且误检率低 &#x3D;&#x3D;&#x3D;&gt; 准确率越高，误检越少</strong></p></li><li><p><strong>TP越大，FN越小，召回率越高，此时预测正确的越多，且漏检率低 &#x3D;&#x3D;&#x3D;&gt; 召回率越高，漏检越少</strong></p></li><li><p><strong>当召回率和准确率相等时，准确率或召回率越大，F1分数越大</strong></p></li><li><p><strong>当召回率和准去率不相等时，二者越相近越有利于F1分数增大，二者越差距越大越不利于F1分数增大</strong></p></li><li><p><strong>当F1分数比较大时，召回率和准确率都不会太低</strong></p></li></ul><h1 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h1>]]></content>
      
      
      <categories>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> 指标分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolo算子结构可视化</title>
      <link href="/2025/07/10/yolo-suan-zi-jie-gou-ke-shi-hua/"/>
      <url>/2025/07/10/yolo-suan-zi-jie-gou-ke-shi-hua/</url>
      
        <content type="html"><![CDATA[<p>对yolo官方代码中的各个组件进行可视化，代码如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> ultralytics<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>block <span class="token keyword">as</span> block<span class="token keyword">from</span> torchview <span class="token keyword">import</span> draw_graph<span class="token keyword">from</span> ultralytics <span class="token keyword">import</span> YOLOparams_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"A2C2f"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"AAttn"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"dim"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"num_heads"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"ABlock"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"dim"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"num_heads"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"AConv"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"ADown"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"Attention"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"dim"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"Bottleneck"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"BottleneckCSP"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C1"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C2"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C2f"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C2fCIB"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C3"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C3Ghost"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C3f"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C3k"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C3k2"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"C3x"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"CIB"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"ELAN1"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"c3"</span><span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"c4"</span><span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"HGBlock"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"cm"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"HGStem"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"cm"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"Proto"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"RepBottleneck"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"RepC3"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"RepCSP"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"RepNCSPELAN4"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"c3"</span><span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"c4"</span><span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"ResNetBlock"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"ResNetLayer"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"SCDown"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"SPP"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"SPPELAN"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"c3"</span><span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"SPPF"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"c1"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>save_dir <span class="token operator">=</span> <span class="token string">"runs/blocks"</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ModuleWrapper</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>module <span class="token operator">=</span> module    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>module<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">wrap_leaf_modules</span><span class="token punctuation">(</span>module<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name<span class="token punctuation">,</span> child <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        wrapped_child <span class="token operator">=</span> wrap_leaf_modules<span class="token punctuation">(</span>child<span class="token punctuation">)</span>        <span class="token builtin">setattr</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">,</span> wrapped_child<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ModuleWrapper<span class="token punctuation">(</span>module<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> module<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"准备构造并可视化 </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>params_map<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> 个模块"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> cls_name<span class="token punctuation">,</span> params <span class="token keyword">in</span> params_map<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cls <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> cls_name<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> cls <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"⚠️ 模块 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cls_name<span class="token punctuation">&#125;</span></span><span class="token string"> 不存在，跳过"</span></span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            model <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"⚠️ 构造 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cls_name<span class="token punctuation">&#125;</span></span><span class="token string"> 失败: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token comment"># 包装叶子模块，防止展开</span>        wrap_leaf_modules<span class="token punctuation">(</span>model<span class="token punctuation">)</span>        dummy_input <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>  <span class="token comment"># 可根据需要调整</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            graph <span class="token operator">=</span> draw_graph<span class="token punctuation">(</span>                model<span class="token punctuation">,</span>                dummy_input<span class="token punctuation">,</span>                expand_nested<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                filename<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cls_name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">_3"</span></span><span class="token punctuation">,</span>                save_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                directory<span class="token operator">=</span>save_dir<span class="token punctuation">,</span>                depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            <span class="token comment"># 设置高分辨率</span>            <span class="token comment"># graph.visual_graph.attr(dpi="600")</span>            <span class="token comment"># graph.visual_graph.render(</span>            <span class="token comment">#     filename=f"&#123;cls_name.lower()&#125;_3",</span>            <span class="token comment">#     format="png"</span>            <span class="token comment"># )</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"✅ </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cls_name<span class="token punctuation">&#125;</span></span><span class="token string"> 可视化成功"</span></span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"❌ </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cls_name<span class="token punctuation">&#125;</span></span><span class="token string"> 可视化失败: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        dot_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cls_name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>dot_path<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 没有扩展名的 .dot 文件</span>            os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>dot_path<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
            <tag> 算子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolo各组件结构图</title>
      <link href="/2025/07/07/yolo-ge-zu-jian-jie-gou-tu/"/>
      <url>/2025/07/07/yolo-ge-zu-jian-jie-gou-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="a2c2f"><a href="#a2c2f" class="headerlink" title="a2c2f"></a>a2c2f</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/a2c2f_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/a2c2f_all.png" alt="a2c2f_3"></p><h1 id="aattn"><a href="#aattn" class="headerlink" title="aattn"></a>aattn</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/aattn_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/aattn_all.png" alt="a2c2f_3"></p><h1 id="ablock"><a href="#ablock" class="headerlink" title="ablock"></a>ablock</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/ablock_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/ablock_all.png" alt="a2c2f_3"></p><h1 id="aconv"><a href="#aconv" class="headerlink" title="aconv"></a>aconv</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/aconv_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/aconv_all.png" alt="a2c2f_3"></p><h1 id="adown"><a href="#adown" class="headerlink" title="adown"></a>adown</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/adown_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/adown_all.png" alt="a2c2f_3"></p><h1 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/attention_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/attention_all.png" alt="a2c2f_3"></p><h1 id="bottleneck"><a href="#bottleneck" class="headerlink" title="bottleneck"></a>bottleneck</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/bottleneck_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/bottleneck_all.png" alt="a2c2f_3"></p><h1 id="bottleneckcsp"><a href="#bottleneckcsp" class="headerlink" title="bottleneckcsp"></a>bottleneckcsp</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/bottleneckcsp_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/bottleneckcsp_all.png" alt="a2c2f_3"></p><h1 id="c1"><a href="#c1" class="headerlink" title="c1"></a>c1</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c1_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c1_all.png" alt="a2c2f_3"></p><h1 id="c2"><a href="#c2" class="headerlink" title="c2"></a>c2</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c2_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c2_all.png" alt="a2c2f_3"></p><h1 id="c2f"><a href="#c2f" class="headerlink" title="c2f"></a>c2f</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c2f_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c2f_all.png" alt="a2c2f_3"></p><h1 id="c2fcib"><a href="#c2fcib" class="headerlink" title="c2fcib"></a>c2fcib</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c2fcib_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c2fcib_all.png" alt="a2c2f_3"></p><h1 id="c3"><a href="#c3" class="headerlink" title="c3"></a>c3</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3_all.png" alt="a2c2f_3"></p><h1 id="c3f"><a href="#c3f" class="headerlink" title="c3f"></a>c3f</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3f_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3f_all.png" alt="a2c2f_3"></p><h1 id="c3ghost"><a href="#c3ghost" class="headerlink" title="c3ghost"></a>c3ghost</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3ghost_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3ghost_all.png" alt="a2c2f_3"></p><h1 id="c3k2"><a href="#c3k2" class="headerlink" title="c3k2"></a>c3k2</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3k2_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3k2_all.png" alt="a2c2f_3"></p><h1 id="c3k"><a href="#c3k" class="headerlink" title="c3k"></a>c3k</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3k_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3k_all.png" alt="a2c2f_3"></p><h1 id="c3x"><a href="#c3x" class="headerlink" title="c3x"></a>c3x</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3x_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/c3x_all.png" alt="a2c2f_3"></p><h1 id="cib"><a href="#cib" class="headerlink" title="cib"></a>cib</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/cib_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/cib_all.png" alt="a2c2f_3"></p><h1 id="elan1"><a href="#elan1" class="headerlink" title="elan1"></a>elan1</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/elan1_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/elan1_all.png" alt="a2c2f_3"></p><h1 id="hgblock"><a href="#hgblock" class="headerlink" title="hgblock"></a>hgblock</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/hgblock_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/hgblock_all.png" alt="a2c2f_3"></p><h1 id="hgstem"><a href="#hgstem" class="headerlink" title="hgstem"></a>hgstem</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/hgstem_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/hgstem_all.png" alt="a2c2f_3"></p><h1 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/proto_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/proto_all.png" alt="a2c2f_3"></p><h1 id="repbottleneck"><a href="#repbottleneck" class="headerlink" title="repbottleneck"></a>repbottleneck</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/repbottleneck_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/repbottleneck_all.png" alt="a2c2f_3"></p><h1 id="repc3"><a href="#repc3" class="headerlink" title="repc3"></a>repc3</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/repc3_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/repc3_all.png" alt="a2c2f_3"></p><h1 id="repcsp"><a href="#repcsp" class="headerlink" title="repcsp"></a>repcsp</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/repcsp_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/repcsp_all.png" alt="a2c2f_3"></p><h1 id="repncspelan4"><a href="#repncspelan4" class="headerlink" title="repncspelan4"></a>repncspelan4</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/repncspelan4_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/repncspelan4_all.png" alt="a2c2f_3"></p><h1 id="resnetblock"><a href="#resnetblock" class="headerlink" title="resnetblock"></a>resnetblock</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/resnetblock_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/resnetblock_all.png" alt="a2c2f_3"></p><h1 id="resnetlayer"><a href="#resnetlayer" class="headerlink" title="resnetlayer"></a>resnetlayer</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/resnetlayer_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/resnetlayer_all.png" alt="a2c2f_3"></p><h1 id="scdown"><a href="#scdown" class="headerlink" title="scdown"></a>scdown</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/scdown_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/scdown_all.png" alt="a2c2f_3"></p><h1 id="spp"><a href="#spp" class="headerlink" title="spp"></a>spp</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/spp_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/spp_all.png" alt="a2c2f_3"></p><h1 id="sppelan"><a href="#sppelan" class="headerlink" title="sppelan"></a>sppelan</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/sppelan_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/sppelan_all.png" alt="a2c2f_3"></p><h1 id="sppf"><a href="#sppf" class="headerlink" title="sppf"></a>sppf</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/sppf_3.png" alt="a2c2f_3"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo%E5%90%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/sppf_all.png" alt="a2c2f_3"></p>]]></content>
      
      
      <categories>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onnx推理性能测试</title>
      <link href="/2025/07/07/onnx-tui-li-xing-neng-ce-shi/"/>
      <url>/2025/07/07/onnx-tui-li-xing-neng-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="测试注意事项"><a href="#测试注意事项" class="headerlink" title="测试注意事项"></a>测试注意事项</h1><ol><li>gpu推理时如果推理次数比较少的情况下，帧率会不稳定，建议配置推理次数使得推理时间大于10s</li><li></li></ol><h1 id="cudnn环境配置"><a href="#cudnn环境配置" class="headerlink" title="cudnn环境配置"></a>cudnn环境配置</h1><p><strong>PyTorch 自带了自己的 cuDNN 库</strong>（包含在其预编译的二进制包里），不依赖系统的 <code>libcudnn.so</code>，但是 <strong>ONNX Runtime GPU 依赖容器系统环境里存在兼容版本的 <code>libcudnn.so</code></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加 NVIDIA 公钥</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/nvidia-cuda-keyring.gpg<span class="token comment"># 添加 CUDA 软件源</span><span class="token builtin class-name">echo</span> <span class="token string">"deb [signed-by=/usr/share/keyrings/nvidia-cuda-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/nvidia-cuda.list<span class="token comment"># 更新软件源索引</span><span class="token function">apt-get</span> update<span class="token comment">#安装指定版本的cudnn</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token assign-left variable">libcudnn8</span><span class="token operator">=</span><span class="token number">8.1</span>.1.33-1+cuda11.2 libcudnn8-dev<span class="token operator">=</span><span class="token number">8.1</span>.1.33-1+cuda11.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="onnx性能参数分析工具"><a href="#onnx性能参数分析工具" class="headerlink" title="onnx性能参数分析工具"></a>onnx性能参数分析工具</h1><ul><li><p>onnx_tool</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> onnx_tool <span class="token keyword">import</span> model_profilereport <span class="token operator">=</span> model_profile<span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token string">"model.onnx"</span><span class="token punctuation">,</span>save_profile<span class="token operator">=</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="cpu和gpu推理速度测试完整脚本"><a href="#cpu和gpu推理速度测试完整脚本" class="headerlink" title="cpu和gpu推理速度测试完整脚本"></a>cpu和gpu推理速度测试完整脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> onnxruntime <span class="token keyword">as</span> ort<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> time<span class="token keyword">import</span> psutil<span class="token keyword">import</span> os<span class="token keyword">import</span> torch<span class="token keyword">import</span> cpuinfo<span class="token keyword">import</span> pynvml<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">get_process_memory_mb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    process <span class="token operator">=</span> psutil<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mem_bytes <span class="token operator">=</span> process<span class="token punctuation">.</span>memory_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rss    <span class="token keyword">return</span> mem_bytes <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span>  <span class="token comment"># 转成MB</span><span class="token keyword">def</span> <span class="token function">get_gpu_memory_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    gpu_id <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>current_device<span class="token punctuation">(</span><span class="token punctuation">)</span>    mem_bytes <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>memory_allocated<span class="token punctuation">(</span>gpu_id<span class="token punctuation">)</span>    <span class="token keyword">return</span> mem_bytes <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token keyword">def</span> <span class="token function">parse_profiling_json</span><span class="token punctuation">(</span>prof_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>prof_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        events <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    op_times <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 记录总耗时</span>    op_counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 记录次数</span>    <span class="token keyword">for</span> e <span class="token keyword">in</span> events<span class="token punctuation">:</span>        <span class="token keyword">if</span> e<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"Node"</span><span class="token punctuation">:</span>            op_type <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token string">"args"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"op_name"</span><span class="token punctuation">,</span> <span class="token string">"Unknown"</span><span class="token punctuation">)</span>            duration_ms <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token string">"dur"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000</span>  <span class="token comment"># 微秒转毫秒</span>            op_times<span class="token punctuation">[</span>op_type<span class="token punctuation">]</span> <span class="token operator">=</span> op_times<span class="token punctuation">.</span>get<span class="token punctuation">(</span>op_type<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> duration_ms            op_counts<span class="token punctuation">[</span>op_type<span class="token punctuation">]</span> <span class="token operator">=</span> op_counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>op_type<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 计算平均耗时</span>    <span class="token keyword">for</span> op_type <span class="token keyword">in</span> op_times<span class="token punctuation">:</span>        avg_time <span class="token operator">=</span> op_times<span class="token punctuation">[</span>op_type<span class="token punctuation">]</span> <span class="token operator">/</span> op_counts<span class="token punctuation">[</span>op_type<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>op_type<span class="token punctuation">:</span><span class="token format-spec">&lt;20</span><span class="token punctuation">&#125;</span></span><span class="token string"> 平均耗时: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>avg_time<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">&#125;</span></span><span class="token string"> ms (执行次数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>op_counts<span class="token punctuation">[</span>op_type<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span>        <span class="token punctuation">)</span>    <span class="token comment"># 使用完，删除prof_file</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>prof_file<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_onnx_cpu</span><span class="token punctuation">(</span>model_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> runs<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> warmup<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    so <span class="token operator">=</span> ort<span class="token punctuation">.</span>SessionOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>    so<span class="token punctuation">.</span>enable_profiling <span class="token operator">=</span> <span class="token boolean">True</span>    sess <span class="token operator">=</span> ort<span class="token punctuation">.</span>InferenceSession<span class="token punctuation">(</span>        model_path<span class="token punctuation">,</span> sess_options<span class="token operator">=</span>so<span class="token punctuation">,</span> providers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"CPUExecutionProvider"</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span>    input_name <span class="token operator">=</span> sess<span class="token punctuation">.</span>get_inputs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name    input_shape <span class="token operator">=</span> sess<span class="token punctuation">.</span>get_inputs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape    input_shape <span class="token operator">=</span> <span class="token punctuation">[</span>        dim <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>dim<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">and</span> dim <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span> <span class="token keyword">for</span> dim <span class="token keyword">in</span> input_shape    <span class="token punctuation">]</span>    dummy_input <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token operator">*</span>input_shape<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>warmup<span class="token punctuation">)</span><span class="token punctuation">:</span>        _ <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>input_name<span class="token punctuation">:</span> dummy_input<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    mem_start <span class="token operator">=</span> get_process_memory_mb<span class="token punctuation">(</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>runs<span class="token punctuation">)</span><span class="token punctuation">:</span>        _ <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>input_name<span class="token punctuation">:</span> dummy_input<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    mem_end <span class="token operator">=</span> get_process_memory_mb<span class="token punctuation">(</span><span class="token punctuation">)</span>    prof_file <span class="token operator">=</span> sess<span class="token punctuation">.</span>end_profiling<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[CPU]Profiling file generated: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>prof_file<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    parse_profiling_json<span class="token punctuation">(</span>prof_file<span class="token punctuation">)</span>    total_time <span class="token operator">=</span> end <span class="token operator">-</span> start    avg_time <span class="token operator">=</span> total_time <span class="token operator">/</span> runs    mem_used <span class="token operator">=</span> mem_end <span class="token operator">-</span> mem_start    fps <span class="token operator">=</span> runs <span class="token operator">/</span> total_time    info <span class="token operator">=</span> cpuinfo<span class="token punctuation">.</span>get_cpu_info<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=== CPU 推理性能 ==="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"硬件信息: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>info<span class="token punctuation">[</span><span class="token string">'brand_raw'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"推理次数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>runs<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"总耗时: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>total_time<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string"> 秒"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"单次推理平均耗时: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>avg_time <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string"> 毫秒"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"内存变化: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mem_used<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string"> MB"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"帧率: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>fps<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_onnx_gpu</span><span class="token punctuation">(</span>    model_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>    runs<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>    warmup<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>    provider<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"CUDAExecutionProvider"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"CUDA_VISIBLE_DEVICES"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>    so <span class="token operator">=</span> ort<span class="token punctuation">.</span>SessionOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>    so<span class="token punctuation">.</span>enable_profiling <span class="token operator">=</span> <span class="token boolean">True</span>    providers <span class="token operator">=</span> <span class="token punctuation">[</span>provider<span class="token punctuation">]</span>    sess <span class="token operator">=</span> ort<span class="token punctuation">.</span>InferenceSession<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> sess_options<span class="token operator">=</span>so<span class="token punctuation">,</span> providers<span class="token operator">=</span>providers<span class="token punctuation">)</span>    input_name <span class="token operator">=</span> sess<span class="token punctuation">.</span>get_inputs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name    input_shape <span class="token operator">=</span> sess<span class="token punctuation">.</span>get_inputs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape    input_dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>float32    input_shape_fixed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> dim <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> dim <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">else</span> dim <span class="token keyword">for</span> dim <span class="token keyword">in</span> input_shape<span class="token punctuation">]</span>    input_data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token operator">*</span>input_shape_fixed<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>input_dtype<span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>warmup<span class="token punctuation">)</span><span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>input_name<span class="token punctuation">:</span> input_data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    cpu_mem_before <span class="token operator">=</span> get_process_memory_mb<span class="token punctuation">(</span><span class="token punctuation">)</span>    gpu_mem_before <span class="token operator">=</span> get_gpu_memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>runs<span class="token punctuation">)</span><span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>input_name<span class="token punctuation">:</span> input_data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    cpu_mem_after <span class="token operator">=</span> get_process_memory_mb<span class="token punctuation">(</span><span class="token punctuation">)</span>    gpu_mem_after <span class="token operator">=</span> get_gpu_memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span>    prof_file <span class="token operator">=</span> sess<span class="token punctuation">.</span>end_profiling<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[GPU]Profiling file generated: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>prof_file<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    parse_profiling_json<span class="token punctuation">(</span>prof_file<span class="token punctuation">)</span>    total_time <span class="token operator">=</span> end_time <span class="token operator">-</span> start_time    avg_time_ms <span class="token operator">=</span> total_time <span class="token operator">/</span> runs <span class="token operator">*</span> <span class="token number">1000</span>    mem_used_cpu <span class="token operator">=</span> cpu_mem_after <span class="token operator">-</span> cpu_mem_before    mem_used_gpu <span class="token operator">=</span> gpu_mem_after <span class="token operator">-</span> gpu_mem_before    fps <span class="token operator">=</span> runs <span class="token operator">/</span> total_time    <span class="token comment"># GPU info</span>    pynvml<span class="token punctuation">.</span>nvmlInit<span class="token punctuation">(</span><span class="token punctuation">)</span>    handle <span class="token operator">=</span> pynvml<span class="token punctuation">.</span>nvmlDeviceGetHandleByIndex<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> pynvml<span class="token punctuation">.</span>nvmlDeviceGetName<span class="token punctuation">(</span>handle<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n=== GPU 推理性能 ==="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"硬件信息: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"推理次数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>runs<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"总耗时: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>total_time<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string"> 秒"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"单次推理平均耗时: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>avg_time_ms<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string"> 毫秒"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"内存变化: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mem_used_cpu<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string"> MB"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"显存变化: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mem_used_gpu<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string"> MB"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"帧率: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>fps<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> runs<span class="token punctuation">,</span> warmup<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"开始CPU推理测试..."</span></span><span class="token punctuation">)</span>    run_onnx_cpu<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> runs<span class="token punctuation">,</span> warmup<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"开始GPU推理测试..."</span></span><span class="token punctuation">)</span>    run_onnx_gpu<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> runs<span class="token punctuation">,</span> warmup<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> argparse    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"ONNX CPU和GPU推理性能测试"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-m"</span><span class="token punctuation">,</span> <span class="token string">"--model"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"ONNX模型路径"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-r"</span><span class="token punctuation">,</span> <span class="token string">"--runs"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"推理次数"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-w"</span><span class="token punctuation">,</span> <span class="token string">"--warmup"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"预热次数"</span><span class="token punctuation">)</span>        args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    run<span class="token punctuation">(</span>args<span class="token punctuation">.</span>model<span class="token punctuation">,</span> args<span class="token punctuation">.</span>runs<span class="token punctuation">,</span> args<span class="token punctuation">.</span>warmup<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> onnx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> onnx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++引用计数</title>
      <link href="/2025/06/21/c-yin-yong-ji-shu/"/>
      <url>/2025/06/21/c-yin-yong-ji-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/QG-whz/p/4777312.html">https://www.cnblogs.com/QG-whz/p/4777312.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 引用计数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引用计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux自动发送邮件</title>
      <link href="/2025/06/21/linux-zi-dong-fa-song-you-jian/"/>
      <url>/2025/06/21/linux-zi-dong-fa-song-you-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-none"><code class="language-none">apt updateapt install msmtp msmtp-mta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class="line-numbers language-none"><code class="language-none">defaultsauth           ontls            ontls_starttls   offtls_trust_file &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;ca-certificates.crtlogfile        ~&#x2F;.msmtp.logaccount workhost           smtp.exmail.qq.comport           465from           shuaiyang.wang@hopechart.comuser           shuaiyang.wang@hopechart.compassword       Wsy101728account default : work<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>echo -e “Subject: Test Mail\n\nThis is the body.” | msmtp 接收者邮箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 发送邮件函数</span><span class="token function-name function">send_mail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">recipient</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">subject</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">body_file</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$3</span>"</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">model_name</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$4</span>"</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">author</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$5</span>"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$recipient</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$subject</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$body_file</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        log_echo <span class="token string">"[send_mail] 参数错误：需要 收件人、主题、正文文件路径"</span>        <span class="token builtin class-name">return</span> <span class="token number">1</span>    <span class="token keyword">fi</span>    <span class="token punctuation">&#123;</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Subject: <span class="token variable">$subject</span>"</span>        <span class="token builtin class-name">echo</span> <span class="token string">"To: <span class="token variable">$recipient</span>"</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Content-Type: text/plain; charset=UTF-8"</span>        <span class="token builtin class-name">echo</span> -------------------------------------        <span class="token builtin class-name">echo</span> 模型名称: <span class="token variable">$model_name</span>        <span class="token builtin class-name">echo</span> 修改人员: <span class="token variable">$author</span>        <span class="token builtin class-name">echo</span> -------------------------------------        <span class="token builtin class-name">echo</span>        <span class="token builtin class-name">echo</span> 模型信息与测试结果如下        <span class="token builtin class-name">echo</span> <span class="token string">"param.json"</span>        <span class="token function">cat</span> <span class="token string">"<span class="token variable">$body_file</span>"</span>    <span class="token punctuation">&#125;</span> <span class="token operator">|</span> msmtp <span class="token parameter variable">-a</span> default <span class="token string">"<span class="token variable">$recipient</span>"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自动化配置"><a href="#自动化配置" class="headerlink" title="自动化配置"></a>自动化配置</h1><h2 id="crontab配置"><a href="#crontab配置" class="headerlink" title="crontab配置"></a>crontab配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#打开配置文件</span><span class="token function">crontab</span> <span class="token parameter variable">-e</span><span class="token comment">#增加如下内容:</span><span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/bash*/1 * * * * <span class="token function">bash</span> /home/model_val/autoTest.sh <span class="token operator">>></span> /home/model_val/log/autoTest.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">脚本执行频率配置说明:┌───────────── 分钟 (0 - 59)│ ┌─────────── 小时 (0 - 23)│ │ ┌───────── 日 (1 - 31)│ │ │ ┌─────── 月 (1 - 12)│ │ │ │ ┌───── 星期 (0 - 7) (0 或 7 表示周日)│ │ │ │ ││ │ │ │ │* * * * * &lt;命令&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="crontab-启动"><a href="#crontab-启动" class="headerlink" title="crontab 启动"></a>crontab 启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> <span class="token function">cron</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 邮件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 自动发送 </tag>
            
            <tag> 邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32位系统与64位系统编程注意事项</title>
      <link href="/2025/06/16/32-wei-xi-tong-yu-64-wei-xi-tong-bian-cheng-zhu-yi-shi-xiang/"/>
      <url>/2025/06/16/32-wei-xi-tong-yu-64-wei-xi-tong-bian-cheng-zhu-yi-shi-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型差异"><a href="#数据类型差异" class="headerlink" title="数据类型差异"></a>数据类型差异</h1><table><thead><tr><th>类型</th><th>32位系统</th><th>64位系统</th></tr></thead><tbody><tr><td><code>void*</code></td><td>4 字节</td><td>8 字节</td></tr><tr><td><code>intptr_t</code></td><td>4 字节</td><td>8 字节</td></tr><tr><td><code>size_t</code></td><td>4 字节</td><td>8 字节</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 跨架构编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 32位系统 </tag>
            
            <tag> 64位系统 </tag>
            
            <tag> armv7-a </tag>
            
            <tag> armv8-a </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5结构与代码解析</title>
      <link href="/2025/06/04/yolov5-jie-gou-yu-dai-ma-jie-xi/"/>
      <url>/2025/06/04/yolov5-jie-gou-yu-dai-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网页来源：<a href="https://start.oneflow.org/oneflow-yolo-doc/tutorials/01_chapter/yolov5_network_structure_analysis.html">https://start.oneflow.org/oneflow-yolo-doc/tutorials/01_chapter/yolov5_network_structure_analysis.html</a></p></blockquote><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>YOLOv5针对不同大小（n, s, m, l, x）的网络整体架构都是一样的，只不过会在每个子模块中采用不同的深度和宽度，</p><p>分别应对yaml文件中的depth_multiple和width_multiple参数。</p><p>还需要注意一点，官方除了n, s, m, l, x版本外还有n6, s6, m6, l6, x6，区别在于后者是针对更大分辨率的图片比如1280x1280,</p><p>当然结构上也有些差异，前者只会下采样到32倍且采用3个预测特征层 , 而后者会下采样64倍，采用4个预测特征层。</p><p>本章将以 yolov5s为例 ，从配置文件 models&#x2F;<a href="https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml">yolov5s.yaml</a> 到 models&#x2F;<a href="https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolo.py">yolo.py</a> 源码进行解读。</p><h1 id="网络结构配置文件解析"><a href="#网络结构配置文件解析" class="headerlink" title="网络结构配置文件解析"></a>网络结构配置文件解析</h1><p>yolov5s.yaml👇</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">nc</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token comment"># number of classes 数据集中的类别数</span><span class="token key atrule">depth_multiple</span><span class="token punctuation">:</span> <span class="token number">0.33</span>  <span class="token comment"># model depth multiple  模型层数因子(用来调整网络的深度)</span><span class="token key atrule">width_multiple</span><span class="token punctuation">:</span> <span class="token number">0.50</span>  <span class="token comment"># layer channel multiple 模型通道数因子(用来调整网络的宽度)</span><span class="token comment"># 如何理解这个depth_multiple和width_multiple呢?</span><span class="token comment"># 它决定的是整个模型中的深度（层数）和宽度（通道数）,具体怎么调整的结合后面的backbone代码解释。</span><span class="token key atrule">anchors</span><span class="token punctuation">:</span> <span class="token comment"># 表示作用于当前特征图的Anchor大小为 xxx</span><span class="token comment"># 9个anchor，其中P表示特征图的层级，P3/8该层特征图缩放为1/8,是第3层特征</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span>  <span class="token comment"># P3/8， 表示[10,13],[16,30], [33,23]3个anchor</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">]</span>  <span class="token comment"># P4/16</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span><span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">373</span><span class="token punctuation">,</span><span class="token number">326</span><span class="token punctuation">]</span>  <span class="token comment"># P5/32</span><span class="token comment"># YOLOv5s v6.0 backbone</span><span class="token key atrule">backbone</span><span class="token punctuation">:</span>  <span class="token comment"># [from, number, module, args]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 0-P1/2</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 1-P2/4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 3-P3/8</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 5-P4/16</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 7-P5/32</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SPPF<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 9</span>  <span class="token punctuation">]</span><span class="token comment"># YOLOv5s v6.0 head</span><span class="token key atrule">head</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nn.Upsample<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'nearest'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat backbone P4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 13</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nn.Upsample<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'nearest'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat backbone P3</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 17 (P3/8-small)</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat head P4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 20 (P4/16-medium)</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat head P5</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 23 (P5/32-large)</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Detect<span class="token punctuation">,</span> <span class="token punctuation">[</span>nc<span class="token punctuation">,</span> anchors<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># Detect(P3, P4, P5)</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="anchors-解读"><a href="#anchors-解读" class="headerlink" title="anchors 解读"></a>anchors 解读</h2><p>yolov5 初始化了 9 个 anchors，分别在三个特征图 （feature map）中使用，每个 feature map 的每个 grid cell 都有三个 anchor 进行预测。 分配规则：</p><ul><li><p>尺度越大的 feature map 越靠前，相对原图的下采样率越小，感受野越小， 所以相对可以预测一些尺度比较小的物体(小目标)，分配到的 anchors 越小。</p></li><li><p>尺度越小的 feature map 越靠后，相对原图的下采样率越大，感受野越大， 所以可以预测一些尺度比较大的物体(大目标)，所以分配到的 anchors 越大。</p></li><li><p>即在小特征图（feature map）上检测大目标，中等大小的特征图上检测中等目标， 在大特征图上检测小目标。</p></li></ul><h1 id="backbone-amp-head解读"><a href="#backbone-amp-head解读" class="headerlink" title="backbone &amp; head解读"></a>backbone &amp; head解读</h1><h2 id="from-number-module-args-参数"><a href="#from-number-module-args-参数" class="headerlink" title="[from, number, module, args] 参数"></a>[from, number, module, args] 参数</h2><p>四个参数的意义分别是：</p><ul><li><ol><li>第一个参数 from ：从哪一层获得输入，-1表示从上一层获得，[-1, 6]表示从上层和第6层两层获得。</li></ol></li><li><ol start="2"><li>第二个参数 number：表示有几个相同的模块，如果为9则表示有9个相同的模块。</li></ol></li><li><ol start="3"><li>第三个参数 module：模块的名称，这些模块写在common.py中。 4. 第四个参数 args：类的初始化参数，用于解析作为 moudle 的传入参数。</li></ol></li></ul><p>下面以第一个模块Conv 为例介绍下common.py中的模块</p><p>Conv 模块定义如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Conv</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Standard convolution</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># ch_in, ch_out, kernel, stride, padding, groups</span>        <span class="token triple-quoted-string string">"""        @Pargm c1: 输入通道数        @Pargm c2: 输出通道数        @Pargm k : 卷积核大小(kernel_size)        @Pargm s : 卷积步长 (stride)        @Pargm p : 特征图填充宽度 (padding)        @Pargm g : 控制分组，必须整除输入的通道数(保证输入的通道能被正确分组)        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># https://oneflow.readthedocs.io/en/master/generated/oneflow.nn.Conv2d.html?highlight=Conv</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> k<span class="token punctuation">,</span> s<span class="token punctuation">,</span> autopad<span class="token punctuation">(</span>k<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> groups<span class="token operator">=</span>g<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>        <span class="token comment"># 激活函数默认为nn.ReLU，也可为其他nn.Module中的激活函数或为空</span>        self<span class="token punctuation">.</span>act <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> act <span class="token keyword">is</span> <span class="token boolean">True</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>act <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>act<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span> <span class="token keyword">else</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>act<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward_fuse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>act<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卷积层的过程为:输入-&gt;卷积层-&gt;归一化层-&gt;激活层-&gt;输出</p><h2 id="关于调整网络大小的详解说明"><a href="#关于调整网络大小的详解说明" class="headerlink" title="关于调整网络大小的详解说明"></a>关于调整网络大小的详解说明</h2><p>在<a href="https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolo.py">yolo.py</a>的 286 行有对yaml 文件的nc,depth_multiple等参数读取，具体代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">anchors<span class="token punctuation">,</span> nc<span class="token punctuation">,</span> gd<span class="token punctuation">,</span> gw <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token string">'anchors'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">'nc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">'depth_multiple'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">'width_multiple'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"activation"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果把width_multiple设置为了0.5，那么第一个 [64, 6, 2, 2] 就会被解析为 [3,64*0.5&#x3D;32,6,2,2]，其中第一个 3 为输入channel，32 为输出channel。</p></blockquote><p>在<a href="https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolo.py">yolo.py</a>的 300 行有对参数的具体定义：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> n_ <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>n <span class="token operator">*</span> gd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> n  <span class="token comment"># depth gain 暂且将这段代码当作公式(1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 gd 就是depth_multiple的值，n的值就是backbone中列表的第二个参数：</p><p>很容易看出 gd 影响 n 的大小，从而影响网络的结构大小。</p><p>后面各层之间的模块数量、卷积核大小和数量等也都产生了变化，YOLOv5l 与 YOLOv5s 相比较起来训练参数的大小成倍数增长，</p><p>其模型的深度和宽度也会大很多，这就使得 YOLOv5l 的 精度值要比 YOLOv5s 好很多，因此在最终推理时的检测精度高，但是模型的推理速度更慢。</p><p>所以 YOLOv5 提供了不同的选择，如果想要追求推理速度可选用较小一些的模型如 YOLOv5s、YOLOv5m，如果想要追求精度更高对推理速度要求不高的可以选择其他两个稍大的模型。</p><p>如下面这张图：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolov5%E7%BB%93%E6%9E%84%E4%B8%8E%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/image-1.png"></p><h2 id="Conv模块解读"><a href="#Conv模块解读" class="headerlink" title="Conv模块解读"></a>Conv模块解读</h2><h2 id="网络结构预览"><a href="#网络结构预览" class="headerlink" title="网络结构预览"></a>网络结构预览</h2><p>下面是根据<a href="https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml">yolov5s.yaml</a>绘制的网络整体结构简化版。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolov5%E7%BB%93%E6%9E%84%E4%B8%8E%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/image.png"></p><p> 详细结构如下所示：<br><a href="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogFile1/yolo/yolov5%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90.drawio">yolov5结构解析</a></p><p>三个分支的输出[1, 128, 80, 80],[1, 256, 40, 40],[1, 512, 20, 20] 作为输入经过Detect的forward, 接着flow.cat()函数拼接成为output: [1, 25200, 85]。</p><p>Detect层第一个操作为二维卷积，将得到的三个分支的输出转换为通道数为3x(类别数+5)的特征图，然后将特征图进行view和通道顺序变化并进行框的位置解析。</p><h1 id="yolo-py解读"><a href="#yolo-py解读" class="headerlink" title="yolo.py解读"></a>yolo.py解读</h1><p>文件主要包含 三大部分 Detect类， Model类，和 parse_model 函数</p><h2 id="parse-model函数解读"><a href="#parse-model函数解读" class="headerlink" title="parse_model函数解读"></a>parse_model函数解读</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_model</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># model_dict, input_channels(3)</span>    <span class="token triple-quoted-string string">"""用在下面Model模块中    解析模型文件(字典形式)，并搭建网络结构    这个函数其实主要做的就是: 更新当前层的args（参数）,计算c2（当前层的输出channel） =>                          使用当前层的参数搭建当前层 =>                          生成 layers + save    @Params d: model_dict 模型文件 字典形式 &#123;dict:7&#125;  [yolov5s.yaml](https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml)中的6个元素 + ch    #Params ch: 记录模型每一层的输出channel 初始ch=[3] 后面会删除    @return nn.Sequential(*layers): 网络的每一层的层结构    @return sorted(save): 把所有层结构中from不是-1的值记下 并排序 [4, 6, 10, 14, 17, 20, 23]    """</span>    LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">:</span><span class="token format-spec">>3</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'from'</span><span class="token punctuation">:</span><span class="token format-spec">>18</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'n'</span><span class="token punctuation">:</span><span class="token format-spec">>3</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'params'</span><span class="token punctuation">:</span><span class="token format-spec">>10</span><span class="token punctuation">&#125;</span></span><span class="token string">  </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'module'</span><span class="token punctuation">:</span><span class="token format-spec">&lt;40</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'arguments'</span><span class="token punctuation">:</span><span class="token format-spec">&lt;30</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 读取d字典中的anchors和parameters(nc、depth_multiple、width_multiple)</span>    anchors<span class="token punctuation">,</span> nc<span class="token punctuation">,</span> gd<span class="token punctuation">,</span> gw <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token string">'anchors'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">'nc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">'depth_multiple'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">'width_multiple'</span><span class="token punctuation">]</span>    <span class="token comment"># na: number of anchors 每一个predict head上的anchor数 = 3</span>    na <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>anchors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>anchors<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token keyword">else</span> anchors  <span class="token comment"># number of anchors</span>    no <span class="token operator">=</span> na <span class="token operator">*</span> <span class="token punctuation">(</span>nc <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># number of outputs = anchors * (classes + 5) 每一个predict head层的输出channel </span>    <span class="token comment"># 开始搭建网络</span>    <span class="token comment"># layers: 保存每一层的层结构</span>    <span class="token comment"># save: 记录下所有层结构中from中不是-1的层结构序号</span>    <span class="token comment"># c2: 保存当前层的输出channel</span>    layers<span class="token punctuation">,</span> save<span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># layers, savelist, ch out</span>    <span class="token comment"># enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'backbone'</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token string">'head'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># from, number, module, args</span>        m <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">else</span> m  <span class="token comment"># eval strings</span>        <span class="token keyword">for</span> j<span class="token punctuation">,</span> a <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># args是一个列表，这一步把列表中的内容取出来</span>            <span class="token keyword">with</span> contextlib<span class="token punctuation">.</span>suppress<span class="token punctuation">(</span>NameError<span class="token punctuation">)</span><span class="token punctuation">:</span>                args<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">else</span> a  <span class="token comment"># eval strings</span>        <span class="token comment"># 将深度与深度因子相乘，计算层深度。深度最小为1. </span>        n <span class="token operator">=</span> n_ <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>n <span class="token operator">*</span> gd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> n  <span class="token comment"># depth gain</span>        <span class="token comment"># 如果当前的模块m在本项目定义的模块类型中，就可以处理这个模块</span>        <span class="token keyword">if</span> m <span class="token keyword">in</span> <span class="token punctuation">(</span>Conv<span class="token punctuation">,</span> GhostConv<span class="token punctuation">,</span> Bottleneck<span class="token punctuation">,</span> GhostBottleneck<span class="token punctuation">,</span> SPP<span class="token punctuation">,</span> SPPF<span class="token punctuation">,</span> DWConv<span class="token punctuation">,</span> MixConv2d<span class="token punctuation">,</span> Focus<span class="token punctuation">,</span> CrossConv<span class="token punctuation">,</span>                 BottleneckCSP<span class="token punctuation">,</span> C3<span class="token punctuation">,</span> C3TR<span class="token punctuation">,</span> C3SPP<span class="token punctuation">,</span> C3Ghost<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">,</span> DWConvTranspose2d<span class="token punctuation">,</span> C3x<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># c1: 输入通道数 c2：输出通道数</span>            c1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> ch<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>             <span class="token comment"># 该层不是最后一层，则将通道数乘以宽度因子 也就是说，宽度因子作用于除了最后一层之外的所有层</span>            <span class="token keyword">if</span> c2 <span class="token operator">!=</span> no<span class="token punctuation">:</span>  <span class="token comment"># if not output</span>                <span class="token comment"># make_divisible的作用，使得原始的通道数乘以宽度因子之后取整到8的倍数，这样处理一般是让模型的并行性和推理性能更好。</span>                c2 <span class="token operator">=</span> make_divisible<span class="token punctuation">(</span>c2 <span class="token operator">*</span> gw<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token comment"># 将前面的运算结果保存在args中，它也就是这个模块最终的输入参数。</span>            args <span class="token operator">=</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>             <span class="token comment"># 根据每层网络参数的不同，分别处理参数 具体各个类的参数是什么请参考它们的__init__方法这里不再详细解释了</span>            <span class="token keyword">if</span> m <span class="token keyword">in</span> <span class="token punctuation">[</span>BottleneckCSP<span class="token punctuation">,</span> C3<span class="token punctuation">,</span> C3TR<span class="token punctuation">,</span> C3Ghost<span class="token punctuation">,</span> C3x<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment"># 这里的意思就是重复n次，比如conv这个模块重复n次，这个n 是上面算出来的 depth </span>                args<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment"># number of repeats</span>                n <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> m <span class="token keyword">is</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">:</span>            args <span class="token operator">=</span> <span class="token punctuation">[</span>ch<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> m <span class="token keyword">is</span> Concat<span class="token punctuation">:</span>            c2 <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> f<span class="token punctuation">)</span>        <span class="token keyword">elif</span> m <span class="token keyword">is</span> Detect<span class="token punctuation">:</span>            args<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> f<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># number of anchors</span>                args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token keyword">elif</span> m <span class="token keyword">is</span> Contract<span class="token punctuation">:</span>            c2 <span class="token operator">=</span> ch<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">*</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span>        <span class="token keyword">elif</span> m <span class="token keyword">is</span> Expand<span class="token punctuation">:</span>            c2 <span class="token operator">=</span> ch<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">//</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            c2 <span class="token operator">=</span> ch<span class="token punctuation">[</span>f<span class="token punctuation">]</span>        <span class="token comment"># 构建整个网络模块 这里就是根据模块的重复次数n以及模块本身和它的参数来构建这个模块和参数对应的Module</span>        m_ <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> m<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>  <span class="token comment"># module</span>        <span class="token comment"># 获取模块(module type)具体名例如 models.common.Conv , models.common.C3 , models.common.SPPF 等。</span>        t <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'__main__.'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment">#  replace函数作用是字符串"__main__"替换为''，在当前项目没有用到这个替换。</span>        np <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> m_<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># number params</span>        m_<span class="token punctuation">.</span>i<span class="token punctuation">,</span> m_<span class="token punctuation">.</span>f<span class="token punctuation">,</span> m_<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">,</span> m_<span class="token punctuation">.</span>np <span class="token operator">=</span> i<span class="token punctuation">,</span> f<span class="token punctuation">,</span> t<span class="token punctuation">,</span> np  <span class="token comment"># attach index, 'from' index, type, number params</span>        LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token format-spec">>3</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">>18</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>n_<span class="token punctuation">:</span><span class="token format-spec">>3</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>np<span class="token punctuation">:</span><span class="token format-spec">10.0f</span><span class="token punctuation">&#125;</span></span><span class="token string">  </span><span class="token interpolation"><span class="token punctuation">&#123;</span>t<span class="token punctuation">:</span><span class="token format-spec">&lt;40</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">&lt;30</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># print</span>        <span class="token triple-quoted-string string">"""        如果x不是-1，则将其保存在save列表中，表示该层需要保存特征图。        这里 x % i 与 x 等价例如在最后一层 :         f = [17,20,23] , i = 24         y = [ x % i for x in ([f] if isinstance(f, int) else f) if x != -1 ]        print(y) # [17, 20, 23]         # 写成x % i 可能因为：i - 1 = -1 % i (比如 f = [-1]，则 [x % i for x in f] 代表 [11] )        """</span>        save<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">else</span> f<span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># append to savelist</span>        layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m_<span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 如果是初次迭代，则新创建一个ch（因为形参ch在创建第一个网络模块时需要用到，所以创建网络模块之后再初始化ch）</span>            ch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>    <span class="token comment"># 将所有的层封装为nn.Sequential , 对保存的特征图排序</span>    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>save<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Model-类解读"><a href="#Model-类解读" class="headerlink" title="Model 类解读"></a>Model 类解读</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># YOLOv5 model</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token operator">=</span><span class="token string">'[yolov5s.yaml](https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml)'</span><span class="token punctuation">,</span> ch<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> nc<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> anchors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># model, input channels, number of classes</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 如果cfg已经是字典，则直接赋值，否则先加载cfg路径的文件为字典并赋值给self.yaml。</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             self<span class="token punctuation">.</span>yaml <span class="token operator">=</span> cfg  <span class="token comment"># model dict</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># is *.yaml  加载yaml模块</span>            <span class="token keyword">import</span> yaml  <span class="token comment"># for flow hub </span>            self<span class="token punctuation">.</span>yaml_file <span class="token operator">=</span> Path<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">.</span>name            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'ascii'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>yaml <span class="token operator">=</span> yaml<span class="token punctuation">.</span>safe_load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>  <span class="token comment"># model dict  从yaml文件中加载出字典</span>        <span class="token comment"># Define model</span>        <span class="token comment"># ch: 输入通道数。 假如self.yaml有键‘ch’，则将该键对应的值赋给内部变量ch。假如没有‘ch’，则将形参ch赋给内部变量ch</span>        ch <span class="token operator">=</span> self<span class="token punctuation">.</span>yaml<span class="token punctuation">[</span><span class="token string">'ch'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'ch'</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>  <span class="token comment"># input channels</span>        <span class="token comment"># 假如yaml中的nc和方法形参中的nc不一致，则覆盖yaml中的nc。</span>        <span class="token keyword">if</span> nc <span class="token keyword">and</span> nc <span class="token operator">!=</span> self<span class="token punctuation">.</span>yaml<span class="token punctuation">[</span><span class="token string">'nc'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Overriding model.yaml nc=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>yaml<span class="token punctuation">[</span><span class="token string">'nc'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string"> with nc=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>nc<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>yaml<span class="token punctuation">[</span><span class="token string">'nc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> nc  <span class="token comment"># override yaml value</span>        <span class="token keyword">if</span> anchors<span class="token punctuation">:</span> <span class="token comment"># anchors  先验框的配置</span>            LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Overriding model.yaml anchors with anchors=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>anchors<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>yaml<span class="token punctuation">[</span><span class="token string">'anchors'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>anchors<span class="token punctuation">)</span>  <span class="token comment"># override yaml value</span>        <span class="token comment"># 得到模型，以及对应的保存的特征图列表。    </span>        self<span class="token punctuation">.</span>model<span class="token punctuation">,</span> self<span class="token punctuation">.</span>save <span class="token operator">=</span> parse_model<span class="token punctuation">(</span>deepcopy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>yaml<span class="token punctuation">)</span><span class="token punctuation">,</span> ch<span class="token operator">=</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># model, savelist</span>        self<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>yaml<span class="token punctuation">[</span><span class="token string">'nc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># default names 初始化类名列表，默认为[0,1,2...]</span>        <span class="token comment"># self.inplace=True  默认True  节省内存</span>        self<span class="token punctuation">.</span>inplace <span class="token operator">=</span> self<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'inplace'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># Build strides, anchors  确定步长、步长对应的锚框</span>        m <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># Detect()</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> Detect<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 检验模型的最后一层是Detect模块</span>            s <span class="token operator">=</span> <span class="token number">256</span>  <span class="token comment"># 2x min stride</span>            m<span class="token punctuation">.</span>inplace <span class="token operator">=</span> self<span class="token punctuation">.</span>inplace            <span class="token comment"># 计算三个feature map下采样的倍率  [8, 16, 32]</span>            m<span class="token punctuation">.</span>stride <span class="token operator">=</span> flow<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>s <span class="token operator">/</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>flow<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># forward</span>            <span class="token comment"># 检查anchor顺序与stride顺序是否一致 anchor的顺序应该是从小到大，这里排一下序</span>            check_anchor_order<span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment"># must be in pixel-space (not grid-space)</span>            <span class="token comment"># 对应的anchor进行缩放操作，原因：得到anchor在实际的特征图中的位置，因为加载的原始anchor大小是相对于原图的像素，但是经过卷积池化之后，特征图的长宽变小了。</span>            m<span class="token punctuation">.</span>anchors <span class="token operator">/=</span> m<span class="token punctuation">.</span>stride<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>stride <span class="token operator">=</span> m<span class="token punctuation">.</span>stride            self<span class="token punctuation">.</span>_initialize_biases<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># only run once  初始化偏置 </span>        <span class="token comment"># Init weights, biases</span>        <span class="token comment"># 调用oneflow_utils.py下initialize_weights初始化模型权重</span>        initialize_weights<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 打印模型信息</span>        LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 管理前向传播函数</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> augment<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> profile<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> visualize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> augment<span class="token punctuation">:</span><span class="token comment"># 是否在测试时也使用数据增强  Test Time Augmentation(TTA)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_forward_augment<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># augmented inference, None</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_forward_once<span class="token punctuation">(</span>x<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> visualize<span class="token punctuation">)</span>  <span class="token comment"># single-scale inference, train</span>    <span class="token comment"># 带数据增强的前向传播</span>    <span class="token keyword">def</span> <span class="token function">_forward_augment</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        img_size <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># height, width</span>        s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.83</span><span class="token punctuation">,</span> <span class="token number">0.67</span><span class="token punctuation">]</span>  <span class="token comment"># scales</span>        f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>  <span class="token comment"># flips (2-ud, 3-lr)</span>        y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># outputs</span>        <span class="token keyword">for</span> si<span class="token punctuation">,</span> fi <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>            xi <span class="token operator">=</span> scale_img<span class="token punctuation">(</span>x<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>fi<span class="token punctuation">)</span> <span class="token keyword">if</span> fi <span class="token keyword">else</span> x<span class="token punctuation">,</span> si<span class="token punctuation">,</span> gs<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stride<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            yi <span class="token operator">=</span> self<span class="token punctuation">.</span>_forward_once<span class="token punctuation">(</span>xi<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># forward</span>            <span class="token comment"># cv2.imwrite(f'img_&#123;si&#125;.jpg', 255 * xi[0].cpu().numpy().transpose((1, 2, 0))[:, :, ::-1])  # save</span>            yi <span class="token operator">=</span> self<span class="token punctuation">.</span>_descale_pred<span class="token punctuation">(</span>yi<span class="token punctuation">,</span> fi<span class="token punctuation">,</span> si<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>            y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yi<span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>_clip_augmented<span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment"># clip augmented tails</span>        <span class="token keyword">return</span> flow<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">None</span>  <span class="token comment"># augmented inference, train</span>    <span class="token comment"># 前向传播具体实现</span>    <span class="token keyword">def</span> <span class="token function">_forward_once</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> profile<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> visualize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        @params x: 输入图像        @params profile: True 可以做一些性能评估        @params feature_vis: True 可以做一些特征可视化        """</span>        <span class="token comment"># y: 存放着self.save=True的每一层的输出，因为后面的特征融合操作要用到这些特征图</span>        y<span class="token punctuation">,</span> dt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># outputs</span>        <span class="token comment"># 前向推理每一层结构   m.i=index   m.f=from   m.type=类名   m.np=number of params</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>model<span class="token punctuation">:</span>            <span class="token comment"># if not from previous layer   m.f=当前层的输入来自哪一层的输出  s的m.f都是-1</span>            <span class="token keyword">if</span> m<span class="token punctuation">.</span>f <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># if not from previous layer</span>                x <span class="token operator">=</span> y<span class="token punctuation">[</span>m<span class="token punctuation">.</span>f<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>f<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> y<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> m<span class="token punctuation">.</span>f<span class="token punctuation">]</span>  <span class="token comment"># from earlier layers</span>            <span class="token keyword">if</span> profile<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_profile_one_layer<span class="token punctuation">(</span>m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> dt<span class="token punctuation">)</span>            x <span class="token operator">=</span> m<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># run</span>            y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token keyword">if</span> m<span class="token punctuation">.</span>i <span class="token keyword">in</span> self<span class="token punctuation">.</span>save <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># save output</span>            <span class="token keyword">if</span> visualize<span class="token punctuation">:</span>                feature_visualization<span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>i<span class="token punctuation">,</span> save_dir<span class="token operator">=</span>visualize<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token comment"># 将推理结果恢复到原图图片尺寸(逆操作)</span>    <span class="token keyword">def</span> <span class="token function">_descale_pred</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">,</span> flips<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># de-scale predictions following augmented inference (inverse operation)</span>        <span class="token triple-quoted-string string">"""用在上面的__init__函数上        将推理结果恢复到原图图片尺寸  Test Time Augmentation(TTA)中用到         de-scale predictions following augmented inference (inverse operation)        @params p: 推理结果        @params flips:        @params scale:        @params img_size:        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>inplace<span class="token punctuation">:</span>            p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">/=</span> scale  <span class="token comment"># de-scale</span>            <span class="token keyword">if</span> flips <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># de-flip ud</span>            <span class="token keyword">elif</span> flips <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># de-flip lr</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> wh <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> scale<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> scale<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">/</span> scale  <span class="token comment"># de-scale</span>            <span class="token keyword">if</span> flips <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                y <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> y  <span class="token comment"># de-flip ud</span>            <span class="token keyword">elif</span> flips <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                x <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> x  <span class="token comment"># de-flip lr</span>            p <span class="token operator">=</span> flow<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> wh<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token comment"># 这个是TTA的时候对原图片进行裁剪，也是一种数据增强方式，用在TTA测试的时候。</span>    <span class="token keyword">def</span> <span class="token function">_clip_augmented</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Clip YOLOv5 augmented inference tails</span>        nl <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nl  <span class="token comment"># number of detection layers (P3-P5)</span>        g <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">**</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nl<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># grid points</span>        e <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># exclude layer count</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> g<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">**</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># indices</span>        y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span>i<span class="token punctuation">]</span>  <span class="token comment"># large</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> g<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">**</span> <span class="token punctuation">(</span>nl <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># indices</span>        y<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># small</span>        <span class="token keyword">return</span> y    <span class="token comment"># 打印日志信息  前向推理时间</span>    <span class="token keyword">def</span> <span class="token function">_profile_one_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> Detect<span class="token punctuation">)</span>  <span class="token comment"># is final layer, copy input as inplace fix</span>        o <span class="token operator">=</span> thop<span class="token punctuation">.</span>profile<span class="token punctuation">(</span>m<span class="token punctuation">,</span> inputs<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> c <span class="token keyword">else</span> x<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1E9</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">if</span> thop <span class="token keyword">else</span> <span class="token number">0</span>  <span class="token comment"># FLOPs</span>        t <span class="token operator">=</span> time_sync<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token punctuation">(</span>x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> c <span class="token keyword">else</span> x<span class="token punctuation">)</span>        dt<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>time_sync<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> m <span class="token operator">==</span> self<span class="token punctuation">.</span>model<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'time (ms)'</span><span class="token punctuation">:</span><span class="token format-spec">>10s</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'GFLOPs'</span><span class="token punctuation">:</span><span class="token format-spec">>10s</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'params'</span><span class="token punctuation">:</span><span class="token format-spec">>10s</span><span class="token punctuation">&#125;</span></span><span class="token string">  module"</span></span><span class="token punctuation">)</span>        LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dt<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">10.2f</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>o<span class="token punctuation">:</span><span class="token format-spec">10.2f</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span>np<span class="token punctuation">:</span><span class="token format-spec">10.0f</span><span class="token punctuation">&#125;</span></span><span class="token string">  </span><span class="token interpolation"><span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> c<span class="token punctuation">:</span>            LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">10.2f</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'-'</span><span class="token punctuation">:</span><span class="token format-spec">>10s</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'-'</span><span class="token punctuation">:</span><span class="token format-spec">>10s</span><span class="token punctuation">&#125;</span></span><span class="token string">  Total"</span></span><span class="token punctuation">)</span>    <span class="token comment"># initialize biases into Detect(), cf is class frequency</span>    <span class="token keyword">def</span> <span class="token function">_initialize_biases</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cf<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># https://arxiv.org/abs/1708.02002 section 3.3</span>        <span class="token comment"># cf = flow.bincount(flow.tensor(np.concatenate(dataset.labels, 0)[:, 0]).long(), minlength=nc) + 1.</span>        m <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># Detect() module</span>        <span class="token keyword">for</span> mi<span class="token punctuation">,</span> s <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>m<span class="token punctuation">,</span> m<span class="token punctuation">.</span>stride<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># from</span>            b <span class="token operator">=</span> mi<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>view<span class="token punctuation">(</span>m<span class="token punctuation">.</span>na<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># conv.bias(255) to (3,85)</span>            b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">640</span> <span class="token operator">/</span> s<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># obj (8 objects per 640 image)</span>            b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">0.6</span> <span class="token operator">/</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>nc <span class="token operator">-</span> <span class="token number">0.999999</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> cf <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> flow<span class="token punctuation">.</span>log<span class="token punctuation">(</span>cf <span class="token operator">/</span> cf<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># cls</span>            mi<span class="token punctuation">.</span>bias <span class="token operator">=</span> flow<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>b<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">#  打印模型中最后Detect层的偏置biases信息(也可以任选哪些层biases信息)</span>    <span class="token keyword">def</span> <span class="token function">_print_biases</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        打印模型中最后Detect模块里面的卷积层的偏置biases信息(也可以任选哪些层biases信息)        """</span>        m <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># Detect() module</span>        <span class="token keyword">for</span> mi <span class="token keyword">in</span> m<span class="token punctuation">.</span>m<span class="token punctuation">:</span>  <span class="token comment"># from</span>            b <span class="token operator">=</span> mi<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>m<span class="token punctuation">.</span>na<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T  <span class="token comment"># conv.bias(255) to (3,85)</span>            LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span>                <span class="token punctuation">(</span><span class="token string">'%6g Conv2d.bias:'</span> <span class="token operator">+</span> <span class="token string">'%10.3g'</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>mi<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_print_weights</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        打印模型中Bottleneck层的权重参数weights信息(也可以任选哪些层weights信息)        """</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">is</span> Bottleneck<span class="token punctuation">:</span>                LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%10.3g'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>w<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># shortcut weights</span>    <span class="token comment"># fuse()是用来进行conv和bn层合并，为了提速模型推理速度。</span>    <span class="token keyword">def</span> <span class="token function">fuse</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># fuse model Conv2d() + BatchNorm2d() layers</span>        <span class="token triple-quoted-string string">"""用在detect.py、val.py        fuse model Conv2d() + BatchNorm2d() layers        调用oneflow_utils.py中的fuse_conv_and_bn函数和common.py中Conv模块的fuseforward函数        """</span>        LOGGER<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Fusing layers... '</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 如果当前层是卷积层Conv且有bn结构, 那么就调用fuse_conv_and_bn函数讲conv和bn进行融合, 加速推理</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token punctuation">(</span>Conv<span class="token punctuation">,</span> DWConv<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">'bn'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                m<span class="token punctuation">.</span>conv <span class="token operator">=</span> fuse_conv_and_bn<span class="token punctuation">(</span>m<span class="token punctuation">.</span>conv<span class="token punctuation">,</span> m<span class="token punctuation">.</span>bn<span class="token punctuation">)</span>  <span class="token comment"># update conv</span>                <span class="token builtin">delattr</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">'bn'</span><span class="token punctuation">)</span>  <span class="token comment"># remove batchnorm  移除bn remove batchnorm</span>                m<span class="token punctuation">.</span>forward <span class="token operator">=</span> m<span class="token punctuation">.</span>forward_fuse  <span class="token comment"># update forward 更新前向传播 update forward (反向传播不用管, 因为这种推理只用在推理阶段)</span>        self<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 打印conv+bn融合后的模型信息</span>        <span class="token keyword">return</span> self    <span class="token comment"># 打印模型结构信息 在当前类__init__函数结尾处有调用</span>    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> img_size<span class="token operator">=</span><span class="token number">640</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># print model information</span>        model_info<span class="token punctuation">(</span>self<span class="token punctuation">,</span> verbose<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Apply to(), cpu(), cuda(), half() to model tensors that are not parameters or registered buffers</span>        self <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_apply<span class="token punctuation">(</span>fn<span class="token punctuation">)</span>        m <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># Detect()</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> Detect<span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token punctuation">.</span>stride <span class="token operator">=</span> fn<span class="token punctuation">(</span>m<span class="token punctuation">.</span>stride<span class="token punctuation">)</span>            m<span class="token punctuation">.</span>grid <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> m<span class="token punctuation">.</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>anchor_grid<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                m<span class="token punctuation">.</span>anchor_grid <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> m<span class="token punctuation">.</span>anchor_grid<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Detect类解读"><a href="#Detect类解读" class="headerlink" title="Detect类解读"></a>Detect类解读</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Detect</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Detect模块是用来构建Detect层的，将输入feature map 通过一个卷积操作和公式计算到我们想要的shape, 为后面的计算损失或者NMS后处理作准备    """</span>    stride <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># strides computed during build</span>    onnx_dynamic <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># ONNX export parameter</span>    export <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># export mode</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nc<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> anchors<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># detection layer</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#  nc:分类数量</span>        self<span class="token punctuation">.</span>nc <span class="token operator">=</span> nc  <span class="token comment"># number of classes  COCO : 80</span>        <span class="token comment">#  no:每个anchor的输出数 COCO: 80 + 5 = 85 </span>        self<span class="token punctuation">.</span>no <span class="token operator">=</span> nc <span class="token operator">+</span> <span class="token number">5</span>  <span class="token comment"># number of outputs per anchor  Detect的个数 3</span>        <span class="token comment"># nl:预测层数，此次为3</span>        self<span class="token punctuation">.</span>nl <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>anchors<span class="token punctuation">)</span>  <span class="token comment"># number of detection layers</span>        <span class="token comment">#  na:anchors的数量，此次为3</span>        self<span class="token punctuation">.</span>na <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>anchors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment"># number of anchors</span>        <span class="token comment">#  grid:格子坐标系，左上角为(1,1),右下角为(input.w/stride,input.h/stride)</span>        self<span class="token punctuation">.</span>grid <span class="token operator">=</span> <span class="token punctuation">[</span>flow<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>nl  <span class="token comment"># init grid</span>        self<span class="token punctuation">.</span>anchor_grid <span class="token operator">=</span> <span class="token punctuation">[</span>flow<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>nl  <span class="token comment"># init anchor grid</span>        <span class="token comment"># 写入缓存中，并命名为anchors</span>        <span class="token comment"># register_buffer</span>        <span class="token comment"># 模型中需要保存的参数一般有两种：一种是反向传播需要被optimizer更新的，称为parameter; 另一种不要被更新称为buffer</span>        <span class="token comment"># buffer的参数更新是在forward中，而optim.step只能更新nn.parameter类型的参数</span>        self<span class="token punctuation">.</span>register_buffer<span class="token punctuation">(</span><span class="token string">'anchors'</span><span class="token punctuation">,</span> flow<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>anchors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nl<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># shape(nl,na,2)</span>        <span class="token comment"># 将输出通过卷积到 self.no * self.na 的通道，达到全连接的作用</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>no <span class="token operator">*</span> self<span class="token punctuation">.</span>na<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> ch<span class="token punctuation">)</span>  <span class="token comment"># output conv</span>        self<span class="token punctuation">.</span>inplace <span class="token operator">=</span> inplace  <span class="token comment"># use inplace ops (e.g. slice assignment)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># inference output</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>nl<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># conv</span>            bs<span class="token punctuation">,</span> _<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> nx <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shape  <span class="token comment"># x(bs,255,20,20) to x(bs,3,20,20,85)</span>            x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>na<span class="token punctuation">,</span> self<span class="token punctuation">.</span>no<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> nx<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>  <span class="token comment"># inference</span>                <span class="token comment"># 构造网格</span>                <span class="token comment"># 因为推理返回的不是归一化后的网格偏移量 需要再加上网格的位置 得到最终的推理坐标 再送入nms</span>                <span class="token comment"># 所以这里构建网格就是为了记录每个grid的网格坐标 方面后面使用</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>onnx_dynamic <span class="token keyword">or</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token comment"># 向前传播时需要将相对坐标转换到grid绝对坐标系中</span>                    self<span class="token punctuation">.</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>anchor_grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_grid<span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                y <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>inplace<span class="token punctuation">:</span>                    <span class="token comment"># 默认执行 不使用AWS Inferentia</span>                    <span class="token comment"># 这里的公式和yolov3、v4中使用的不一样 是yolov5作者自己用的 效果更好</span>                    y<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>stride<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># xy</span>                    y<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>anchor_grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># wh</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># for YOLOv5 on AWS Inferentia https://github.com/ultralytics/yolov5/pull/2953</span>                    xy<span class="token punctuation">,</span> wh<span class="token punctuation">,</span> conf <span class="token operator">=</span> y<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>nc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># y.tensor_split((2, 4, 5), 4)  </span>                    xy <span class="token operator">=</span> <span class="token punctuation">(</span>xy <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>stride<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># xy</span>                    wh <span class="token operator">=</span> <span class="token punctuation">(</span>wh <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>anchor_grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># wh</span>                    y <span class="token operator">=</span> flow<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>xy<span class="token punctuation">,</span> wh<span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>                <span class="token comment"># z [oneflow.Size([1, 19200, 85])  oneflow.Size([1, 4800, 85]) oneflow.Size([1, 1200, 85])]</span>                z<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">.</span>view<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x <span class="token keyword">if</span> self<span class="token punctuation">.</span>training <span class="token keyword">else</span> <span class="token punctuation">(</span>flow<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>export <span class="token keyword">else</span> <span class="token punctuation">(</span>flow<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token comment"># 相对坐标转换到grid绝对坐标系</span>    <span class="token keyword">def</span> <span class="token function">_make_grid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nx<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> ny<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> self<span class="token punctuation">.</span>anchors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>device        t <span class="token operator">=</span> self<span class="token punctuation">.</span>anchors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype        shape <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>na<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> <span class="token number">2</span>  <span class="token comment"># grid shape</span>        y<span class="token punctuation">,</span> x <span class="token operator">=</span> flow<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>ny<span class="token punctuation">,</span> device<span class="token operator">=</span>d<span class="token punctuation">,</span> dtype<span class="token operator">=</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> flow<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>nx<span class="token punctuation">,</span> device<span class="token operator">=</span>d<span class="token punctuation">,</span> dtype<span class="token operator">=</span>t<span class="token punctuation">)</span>        yv<span class="token punctuation">,</span> xv <span class="token operator">=</span> flow<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> indexing<span class="token operator">=</span><span class="token string">"ij"</span><span class="token punctuation">)</span>        grid <span class="token operator">=</span> flow<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>xv<span class="token punctuation">,</span> yv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expand<span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span>  <span class="token comment"># add grid offset, i.e. y = 2.0 * x - 0.5</span>        anchor_grid <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>anchors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>stride<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>na<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expand<span class="token punctuation">(</span>shape<span class="token punctuation">)</span>        <span class="token keyword">return</span> grid<span class="token punctuation">,</span> anchor_grid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><p>表2.1 <a href="https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml">yolov5s.yaml</a>解析表</p><table><thead><tr><th>层数</th><th>form</th><th>moudule</th><th>arguments</th><th>input</th><th>output</th></tr></thead><tbody><tr><td>0</td><td>-1</td><td>Conv</td><td>[3, 32, 6, 2, 2]</td><td>[3, 640, 640]</td><td>[32, 320, 320]</td></tr><tr><td>1</td><td>-1</td><td>Conv</td><td>[32, 64, 3, 2]</td><td>[32, 320, 320]</td><td>[64, 160, 160]</td></tr><tr><td>2</td><td>-1</td><td>C3</td><td>[64, 64, 1]</td><td>[64, 160, 160]</td><td>[64, 160, 160]</td></tr><tr><td>3</td><td>-1</td><td>Conv</td><td>[64, 128, 3, 2]</td><td>[64, 160, 160]</td><td>[128, 80, 80]</td></tr><tr><td>4</td><td>-1</td><td>C3</td><td>[128, 128, 2]</td><td>[128, 80, 80]</td><td>[128, 80, 80]</td></tr><tr><td>5</td><td>-1</td><td>Conv</td><td>[128, 256, 3, 2]</td><td>[128, 80, 80]</td><td>[256, 40, 40]</td></tr><tr><td>6</td><td>-1</td><td>C3</td><td>[256, 256, 3]</td><td>[256, 40, 40]</td><td>[256, 40, 40]</td></tr><tr><td>7</td><td>-1</td><td>Conv</td><td>[256, 512, 3, 2]</td><td>[256, 40, 40]</td><td>[512, 20, 20]</td></tr><tr><td>8</td><td>-1</td><td>C3</td><td>[512, 512, 1]</td><td>[512, 20, 20]</td><td>[512, 20, 20]</td></tr><tr><td>9</td><td>-1</td><td>SPPF</td><td>[512, 512, 5]</td><td>[512, 20, 20]</td><td>[512, 20, 20]</td></tr><tr><td>10</td><td>-1</td><td>Conv</td><td>[512, 256, 1, 1]</td><td>[512, 20, 20]</td><td>[256, 20, 20]</td></tr><tr><td>11</td><td>-1</td><td>Upsample</td><td>[None, 2, ‘nearest’]</td><td>[256, 20, 20]</td><td>[256, 40, 40]</td></tr><tr><td>12</td><td>[-1, 6]</td><td>Concat</td><td>[1]</td><td>[1, 256, 40, 40],[1, 256, 40, 40]</td><td>[512, 40, 40]</td></tr><tr><td>13</td><td>-1</td><td>C3</td><td>[512, 256, 1, False]</td><td>[512, 40, 40]</td><td>[256, 40, 40]</td></tr><tr><td>14</td><td>-1</td><td>Conv</td><td>[256, 128, 1, 1]</td><td>[256, 40, 40]</td><td>[128, 40, 40]</td></tr><tr><td>15</td><td>-1</td><td>Upsample</td><td>[None, 2, ‘nearest’]</td><td>[128, 40, 40]</td><td>[128, 80, 80]</td></tr><tr><td>16</td><td>[-1, 4]</td><td>Concat</td><td>[1]</td><td>[1, 128, 80, 80],[1, 128, 80, 80]</td><td>[256, 80, 80]</td></tr><tr><td>17</td><td>-1</td><td>C3</td><td>[256, 128, 1, False]</td><td>[256, 80, 80]</td><td>[128, 80, 80]</td></tr><tr><td>18</td><td>-1</td><td>Conv</td><td>[128, 128, 3, 2]</td><td>[128, 80, 80]</td><td>[128, 40, 40]</td></tr><tr><td>19</td><td>[-1, 14]</td><td>Concat</td><td>[1]</td><td>[1, 128, 40, 40],[1, 128, 40, 40]</td><td>[256, 40, 40]</td></tr><tr><td>20</td><td>-1</td><td>C3</td><td>[256, 256, 1, False]</td><td>[256, 40, 40]</td><td>[256, 40, 40]</td></tr><tr><td>21</td><td>-1</td><td>Conv</td><td>[256, 256, 3, 2]</td><td>[256, 40, 40]</td><td>[256, 20, 20]</td></tr><tr><td>22</td><td>[-1, 10]</td><td>Concat</td><td>[1]</td><td>[1, 256, 20, 20],[1, 256, 20, 20]</td><td>[512, 20, 20]</td></tr><tr><td>23</td><td>-1</td><td>C3</td><td>[512, 512, 1, False]</td><td>[512, 20, 20]</td><td>[512, 20, 20]</td></tr><tr><td>24</td><td>[17, 20, 23]</td><td>Detect</td><td>[80, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]</td><td>[1, 128, 80, 80],[1, 256, 40, 40],[1, 512, 20, 20]</td><td>[1, 3, 80, 80, 85],[1, 3, 40, 40, 85],[1, 3, 20, 20, 85]</td></tr></tbody></table><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/436891962?ivk_sa=1025922q">https://zhuanlan.zhihu.com/p/436891962?ivk_sa=1025922q</a></li><li><a href="https://zhuanlan.zhihu.com/p/110204563">https://zhuanlan.zhihu.com/p/110204563</a></li><li><a href="https://www.it610.com/article/1550621248474648576.htm">https://www.it610.com/article/1550621248474648576.htm</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> yolov5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolov5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transformer中的多头注意力详解</title>
      <link href="/2025/05/27/transformer-zhong-de-duo-tou-zhu-yi-li-xiang-jie/"/>
      <url>/2025/05/27/transformer-zhong-de-duo-tou-zhu-yi-li-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Transformer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transformer </tag>
            
            <tag> 注意力机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式开发常用工具指南</title>
      <link href="/2025/04/15/qian-ru-shi-kai-fa-chang-yong-gong-ju-zhi-nan/"/>
      <url>/2025/04/15/qian-ru-shi-kai-fa-chang-yong-gong-ju-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="gdb工具使用"><a href="#gdb工具使用" class="headerlink" title="gdb工具使用"></a>gdb工具使用</h1><ul><li>配置程序段错误生成文件的路径<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"/userdata/core-%e-%p-%t"</span> <span class="token operator">|</span>  <span class="token function">tee</span> /proc/sys/kernel/core_pattern<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>运行<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb adas_app core-%e-%p-%t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>常用命令<ul><li>bt 用于查看程序崩溃时的调用栈 </li><li>frame 4 切换到调用栈中的第 4 层帧</li></ul></li></ul><h1 id="查看库或可执行文件的依赖库"><a href="#查看库或可执行文件的依赖库" class="headerlink" title="查看库或可执行文件的依赖库"></a>查看库或可执行文件的依赖库</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">readelf <span class="token parameter variable">-d</span>  <span class="token operator">&lt;</span>库路径或可执行文件路径<span class="token operator">></span>readelf <span class="token parameter variable">-p</span> .comment <span class="token operator">&lt;</span>executable_file<span class="token operator">></span>strings <span class="token operator">&lt;</span>executable_file<span class="token operator">></span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> gcc <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="查看可执行文件所依赖的动态库"><a href="#查看可执行文件所依赖的动态库" class="headerlink" title="查看可执行文件所依赖的动态库"></a>查看可执行文件所依赖的动态库</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldd <span class="token operator">&lt;</span>fileName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="调整文件系统大小"><a href="#调整文件系统大小" class="headerlink" title="调整文件系统大小"></a>调整文件系统大小</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">resize2fs <span class="token operator">&lt;</span>选项<span class="token operator">></span> <span class="token operator">&lt;</span>设备路径<span class="token operator">></span> <span class="token operator">&lt;</span>大小<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用于调整 ext2&#x2F;ext3&#x2F;ext4 文件系统大小 的命令。它可以 增大或减小 文件系统的大小。&lt;大小&gt;可以省略，表示扩展到设备的最大空间</p><blockquote></blockquote><p>resize2fs &#x2F;dev&#x2F;block&#x2F;by-name&#x2F;externApp<br> 扩展exapp文件系统的大小为最大空间</p><h1 id="以写的方式重新挂载目录"><a href="#以写的方式重新挂载目录" class="headerlink" title="以写的方式重新挂载目录"></a>以写的方式重新挂载目录</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> <span class="token parameter variable">-o</span> rw,remount /exapp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="压缩库或可执行文件"><a href="#压缩库或可执行文件" class="headerlink" title="压缩库或可执行文件"></a>压缩库或可执行文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aarch64-v01c01-linux-gnu-strip <span class="token operator">&lt;</span>文件名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>aarch64-v01c01-linux-gnu-strip为交叉编译工具链中的工具，需要和实际的交叉编译工具链对应</p></blockquote><h1 id="编译加速ccache"><a href="#编译加速ccache" class="headerlink" title="编译加速ccache"></a>编译加速ccache</h1><p>ccache 的作用是：加速 C&#x2F;C++ 编译过程，特别是在源代码没有变化时可以大幅减少编译时间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> ccache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在<code>CMakeLists.txt</code>中配置：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 启用 ccache</span><span class="token keyword">find_program</span><span class="token punctuation">(</span>CCACHE_PROGRAM ccache<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>CCACHE_PROGRAM<span class="token punctuation">)</span>    <span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Using ccache: <span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CCACHE_PROGRAM</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>    <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_COMPILER_LAUNCHER</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CCACHE_PROGRAM</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>    <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_LAUNCHER</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CCACHE_PROGRAM</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查看板端支持的命令"><a href="#查看板端支持的命令" class="headerlink" title="查看板端支持的命令"></a>查看板端支持的命令</h1><p>命令存储位置一般为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/usr/bin//usr/sbin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="降低串口打印级别"><a href="#降低串口打印级别" class="headerlink" title="降低串口打印级别"></a>降低串口打印级别</h1><p>dmesg -n <LEVEL></p><p>LEVEL含义        打印内容<br>1    KERN_EMERG    紧急情况（系统崩溃）<br>3    KERN_ERR    错误信息<br>4    KERN_WARNING    警告信息<br>5    KERN_NOTICE    正常但重要的信息<br>6    KERN_INFO    常规信息<br>7    KERN_DEBUG    所有调试信息（默认）</p><blockquote><p>dmesg -n 1</p></blockquote><h1 id="“-“开头的文件删除"><a href="#“-“开头的文件删除" class="headerlink" title="“ “开头的文件删除"></a>“ “开头的文件删除</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">\</span>"<span class="token punctuation">\</span> <span class="token punctuation">\</span>"<span class="token punctuation">\</span>*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用反斜杠转义空格和引号</p><h1 id="网卡IP配置"><a href="#网卡IP配置" class="headerlink" title="网卡IP配置"></a>网卡IP配置</h1><pre class="line-numbers language-none"><code class="language-none"># IP配置ifconfig eth1 10.10.150.37 # 网卡激活ifconfig eth1 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="设备内存硬件信息查看"><a href="#设备内存硬件信息查看" class="headerlink" title="设备内存硬件信息查看"></a>设备内存硬件信息查看</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dmidecode <span class="token parameter variable">-t</span> memory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="统计指定目录中所有子目录下文件的个数"><a href="#统计指定目录中所有子目录下文件的个数" class="headerlink" title="统计指定目录中所有子目录下文件的个数"></a>统计指定目录中所有子目录下文件的个数</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> ./ <span class="token parameter variable">-mindepth</span> <span class="token number">1</span> <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token parameter variable">-type</span> d <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token function">dir</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">$dir</span>"</span><span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> <span class="token string">"<span class="token variable">$dir</span>"</span> <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token parameter variable">-type</span> f <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">)</span></span>"</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="在linux上查看build-id"><a href="#在linux上查看build-id" class="headerlink" title="在linux上查看build-id"></a>在linux上查看build-id</h1><ul><li><p>1.使用xxd</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xxd <span class="token operator">&lt;</span>file path<span class="token operator">></span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-e</span>  <span class="token string">"GN"</span> <span class="token parameter variable">-e</span> <span class="token string">"NU"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@HQA804:~<span class="token punctuation">]</span><span class="token comment"># xxd /exapp/lib/libdecision_alarm_adas.so |grep -e  "GN" -e "NU"</span>00111580: <span class="token number">7220</span> 552b <span class="token number">3030</span> <span class="token number">3030</span> <span class="token number">2028</span> 4e55 4c29 206d  r U+0000 <span class="token punctuation">(</span>NUL<span class="token punctuation">)</span> m001180c0: <span class="token number">7220</span> 552b <span class="token number">3030</span> <span class="token number">3030</span> <span class="token number">2028</span> 4e55 4c29 206d  r U+0000 <span class="token punctuation">(</span>NUL<span class="token punctuation">)</span> m0014b960: 4e55 0020 <span class="token number">2507</span> <span class="token number">2913</span> <span class="token number">4431</span> 0102 0300 c669  NU. %.<span class="token punctuation">)</span>.D1<span class="token punctuation">..</span><span class="token punctuation">..</span>.i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或显示如下:</p><pre class="line-numbers language-none"><code class="language-none">[root@HQA804:~]# xxd &#x2F;exapp&#x2F;lib&#x2F;libblur_det.so |grep GNU00029030: 0000 0003 0000 0047 4e55 0020 2507 2913  .......GNU. %.).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后查看指定偏移下的完整build-id</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@HQA804:~<span class="token punctuation">]</span><span class="token comment"># xxd -s 0x14b960 -l 32 /exapp/lib/libdecision_alarm_adas.so </span>0014b960: 4e55 0020 <span class="token number">2507</span> <span class="token number">2913</span> <span class="token number">4431</span> 0102 0300 c669  NU. %.<span class="token punctuation">)</span>.D1<span class="token punctuation">..</span><span class="token punctuation">..</span>.i0014b970: f763 0000 2e73 <span class="token number">6873</span> <span class="token number">7472</span> <span class="token number">7461</span> <span class="token number">6200</span> 2e67  .c<span class="token punctuation">..</span>.shstrtab<span class="token punctuation">..</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>20 2507 2913 4431 0102 0300 c669  f763表示:  2025-0729-13:44:31 1.2.3.0  CRC校验码:c669  f763</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@HQA804:~<span class="token punctuation">]</span><span class="token comment"># xxd -s 0x29030 -l 32 /exapp/lib/libblur_det.so</span>00029030: 0000 0003 0000 0047 4e55 0020 <span class="token number">2507</span> <span class="token number">2913</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.GNU. %.<span class="token punctuation">)</span>.00029040: <span class="token number">3746</span> 0100 0000 cee7 9b21 0000 2e73 <span class="token number">6873</span>  7F<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token operator">!</span><span class="token punctuation">..</span>.shs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>20 2507 2913 3746 0100 0000 cee7 9b21 表示:  2025-0729-13:37:46 1.0.0.0  CRC校验码:cee7 9b21</p></blockquote></li><li><p>使用readelf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">readelf <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>file path<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@4488e85a74cc:build<span class="token comment"># readelf -n /exapp/lib/libdecision_alarm_adas.so </span>Displaying notes found in: .note.gnu.build-id  Owner                 Data sizeDescription  GNU                  0x0000000fNT_GNU_BUILD_ID <span class="token punctuation">(</span>unique build ID bitstring<span class="token punctuation">)</span>    Build ID: 2025072913443101020300c669f763<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@4488e85a74cc:build<span class="token comment"># readelf -n /exapp/lib/libdecision_alarm_adas.so</span>Displaying notes found in: .note.gnu.build-id  Owner                 Data sizeDescription  GNU                  0x0000000fNT_GNU_BUILD_ID <span class="token punctuation">(</span>unique build ID bitstring<span class="token punctuation">)</span>    Build ID: 2025072913443101020300c669f763<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transform基础常识</title>
      <link href="/2025/03/13/transform-ji-chu-chang-shi/"/>
      <url>/2025/03/13/transform-ji-chu-chang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="卷积的分类"><a href="#卷积的分类" class="headerlink" title="卷积的分类"></a>卷积的分类</h1><blockquote><p>参考连接:<a href="https://mp.weixin.qq.com/s/li7kIPTrWxFEu5SEkyG_ww">https://mp.weixin.qq.com/s/li7kIPTrWxFEu5SEkyG_ww</a></p></blockquote><h2 id="卷积与互相关"><a href="#卷积与互相关" class="headerlink" title="卷积与互相关"></a>卷积与互相关</h2><p>在信号处理、图像处理和其它工程&#x2F;科学领域,卷积都是一种使用广泛的技术。在深度学习领域,卷积神经网络(CNN)这种模型架构就得名于这种技术。但是,深度学习领域的卷积本质上是信号&#x2F;图像处理领域内的互相关(cross-correlation)。这两种操作之间存在细微的差别。</p><p>无需太过深入细节,我们就能看到这个差别。在信号&#x2F;图像处理领域,卷积的定义是:</p><p>$$<br>\begin{array}{c}<br>(f*g)(t)&#x3D;f(t)g(t-t)dt<br>\end{array}<br>$$</p><p>其定义是两个函数中一个函数经过反转和位移后再相乘得到的积的积分。下面的可视化展示了这一思想:</p><p>信号处理中的卷积。过滤器 g 经过反转,然后再沿水平轴滑动。在每一个位置,我们都计算 f 和反转后的 g 之间相交区域的面积。这个相交区域的面积就是特定位置出的卷积值。</p><p>这里,函数 g 是过滤器。它被反转后再沿水平轴滑动。在每一个位置,我们都计算 f 和反转后的 g 之间相交区域的面积。这个相交区域的面积就是特定位置出的卷积值。</p><p>另一方面,互相关是两个函数之间的滑动点积或滑动内积。互相关中的过滤器不经过反转,而是直接滑过函数 f。f 与 g 之间的交叉区域即是互相关。下图展示了卷积与互相关之间的差异。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image.png" alt="信号处理中卷积与互相关之间的差异"></p><p>在深度学习中,卷积中的过滤器不经过反转。严格来说,这是互相关。我们<strong>本质上是执行逐元素乘法和加法</strong>。但在深度学习中,直接将其称之为卷积更加方便。这没什么问题,因为过滤器的权重是在训练阶段学习到的。如果上面例子中的反转函数 g 是正确的函数,那么经过训练后,学习得到的过滤器看起来就会像是反转后的函数 g。因此,在训练之前,没必要像在真正的卷积中那样首先反转过滤器。</p><h2 id="3D-卷积"><a href="#3D-卷积" class="headerlink" title="3D 卷积"></a>3D 卷积</h2><p>在上一节的解释中,我们看到我们实际上是对一个 3D 体执行卷积。但通常而言,我们仍在深度学习中称之为 2D 卷积。这是在 3D 体积数据上的 2D 卷积。过滤器深度与输入层深度一样。这个 3D 过滤器仅沿两个方向移动(图像的高和宽)。这种操作的输出是一张 2D 图像(仅有一个通道)。</p><p>很自然,3D 卷积确实存在。这是 2D 卷积的泛化。下面就是 3D 卷积,其过滤器深度小于输入层深度(核大小&lt;通道大小)。因此,3D 过滤器可以在所有三个方向(图像的高度、宽度、通道)上移动。在每个位置,逐元素的乘法和加法都会提供一个数值。因为过滤器是滑过一个 3D 空间,所以输出数值也按 3D 空间排布。也就是说输出是一个 3D 数据。</p><p>在 3D 卷积中,3D 过滤器可以在所有三个方向(图像的高度、宽度、通道)上移动。在每个位置,逐元素的乘法和加法都会提供一个数值。因为过滤器是滑过一个 3D 空间,所以输出数值也按 3D 空间排布。也就是说输出是一个 3D 数据。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-1.png"></p><p>与 2D 卷积(编码了 2D 域中目标的空间关系)类似,3D 卷积可以描述 3D 空间中目标的空间关系。对某些应用(比如生物医学影像中的 <strong>3D 分割&#x2F;重构</strong>)而言,这样的 3D 关系很重要,比如在 <strong>CT 和 MRI</strong> 中,血管之类的目标会在 3D 空间中蜿蜒曲折。</p><h2 id="转置卷积-去卷积"><a href="#转置卷积-去卷积" class="headerlink" title="转置卷积(去卷积)"></a>转置卷积(去卷积)</h2><p>对于很多网络架构的很多应用而言,我们往往需要进行与普通卷积方向相反的转换,即我们希望执行上采样。例子包括<strong>生成高分辨率图像</strong>以及将低维特征图映射到高维空间,比如在自动编码器或形义分割中。(在后者的例子中,形义分割首先会提取编码器中的特征图,然后在解码器中恢复原来的图像大小,使其可以分类原始图像中的每个像素。)</p><p>实现<strong>上采样</strong>的传统方法是应用插值方案或人工创建规则。而神经网络等现代架构则倾向于让网络自己自动学习合适的变换,无需人类干预。为了做到这一点,我们可以使用转置卷积。</p><p>转置卷积在文献中也被称为去卷积或 fractionally strided convolution。但是,需要指出「去卷积(deconvolution)」这个名称并不是很合适,因为转置卷积并非信号&#x2F;图像处理领域定义的那种真正的去卷积。从技术上讲,信号处理中的去卷积是卷积运算的逆运算。但这里却不是这种运算。因此,某些作者强烈反对将转置卷积称为去卷积。人们称之为去卷积主要是因为这样说很简单。后面我们会介绍为什么将这种运算称为转置卷积更自然且更合适。</p><p>我们一直都可以使用直接的卷积实现转置卷积。对于下图的例子,我们在一个 2×2 的输入(周围加了 2×2 的单位步长的零填充)上应用一个 3×3 核的转置卷积。上采样输出的大小是 4×4。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-2.png" alt="将 2×2 的输入上采样成 4×4 的输出"></p><p>有趣的是,通过应用各种填充和步长,我们可以将同样的 2×2 输入图像映射到不同的图像尺寸。下面,转置卷积被用在了同一张 2×2 输入上(输入之间插入了一个零,并且周围加了 2×2 的单位步长的零填充),所得输出的大小是 5×5。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%9B%BE%E7%89%871.png" alt="将 2×2 的输入上采样成 5×5 的输出"></p><p>观察上述例子中的转置卷积能帮助我们构建起一些直观认识。但为了泛化其应用,了解其可以如何通过计算机的矩阵乘法实现是有益的。从这一点上我们也可以看到为何「转置卷积」才是合适的名称。</p><p>在卷积中,我们定义 C 为卷积核,Large 为输入图像,Small 为输出图像。经过卷积(矩阵乘法)后,我们将大图像下采样为小图像。这种矩阵乘法的卷积的实现遵照:C x Large &#x3D; Small。</p><p>下面的例子展示了这种运算的工作方式。它将输入平展为 16×1 的矩阵,并将卷积核转换为一个稀疏矩阵(4×16)。然后,在稀疏矩阵和平展的输入之间使用矩阵乘法。之后,再将所得到的矩阵(4×1)转换为 2×2 的输出。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-3.png" alt="卷积的矩阵乘法:将 Large 输入图像(4×4)转换为 Small 输出图像(2×2)"></p><p>现在,如果我们在等式的两边都乘上矩阵的转置 CT,并借助「一个矩阵与其转置矩阵的乘法得到一个单位矩阵」这一性质,那么我们就能得到公式 CT x Small &#x3D; Large,如下图所示:<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-4.png" alt="卷积的矩阵乘法:将 Small 输入图像(2×2)转换为 Large 输出图像(4×4)"></p><p>这里可以看到,我们执行了从小图像到大图像的上采样。这正是我们想要实现的目标。现在。你就知道「转置卷积」这个名字的由来了。</p><p>转置矩阵的算术解释可参阅:<br><a href="https://arxiv.org/abs/1603.07285">https://arxiv.org/abs/1603.07285</a></p><h2 id="扩张卷积-Atrous-卷积"><a href="#扩张卷积-Atrous-卷积" class="headerlink" title="扩张卷积(Atrous 卷积)"></a>扩张卷积(Atrous 卷积)</h2><p>扩张卷积由这两篇引入:</p><p><a href="https://arxiv.org/abs/1412.7062%EF%BC%9B">https://arxiv.org/abs/1412.7062；</a></p><p><a href="https://arxiv.org/abs/1511.07122">https://arxiv.org/abs/1511.07122</a> </p><p>这是一个标准的离散卷积:</p><p>$$<br>(F*k)(\boldsymbol{p})&#x3D;\sum_{s+t&#x3D;p}F(\boldsymbol{s})k(\boldsymbol{t})<br>$$</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-6.png" alt="标准卷积"></p><p>扩张卷积如下:</p><p>$$<br>(F*_{l}k)(\boldsymbol{p})&#x3D;\sum_{s+lt&#x3D;p}F(\boldsymbol{s})k(\boldsymbol{t})<br>$$</p><p>当 l&#x3D;1 时,扩张卷积会变得和标准卷积一样。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-7.png" alt="扩张卷积"><br>直观而言,扩张卷积就是通过在核元素之间插入空格来使核「膨胀」。新增的参数 l(扩张率)表示我们希望将核加宽的程度。具体实现可能各不相同,但<strong>通常是在核元素之间插入 l-1 个空格</strong>。下面展示了 l &#x3D; 1, 2, 4 时的核大小。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-8.png" alt="扩张卷积的感受野"></p><p>在这张图像中,3×3 的红点表示经过卷积后,输出图像是 3×3 像素。尽管所有这三个扩张卷积的输出都是同一尺寸,但模型观察到的感受野有很大的不同。l&#x3D;1 时感受野为 3×3,l&#x3D;2 时为 7×7。l&#x3D;3 时,感受野的大小就增加到了 15×15。有趣的是,与这些操作相关的参数的数量是相等的。我们「观察」更大的感受野不会有额外的成本。因此,<strong>扩张卷积可用于廉价地增大输出单元的感受野,而不会增大其核大小</strong>,这在多个扩张卷积彼此堆叠时尤其有效。</p><p>论文《Multi-scale context aggregation by dilated convolutions》的作者用多个扩张卷积层构建了一个网络,其中扩张率 l 每层都按指数增大。由此,有效的感受野大小随层而指数增长,而参数的数量仅线性增长。</p><p>这篇论文中<strong>扩张卷积的作用是系统性地聚合多个比例的形境信息,而不丢失分辨率</strong>。这篇论文表明其提出的模块能够提升那时候(2016 年)的当前最佳形义分割系统的准确度。请参阅那篇论文了解更多信息。</p><h2 id="可分卷积"><a href="#可分卷积" class="headerlink" title="可分卷积"></a>可分卷积</h2><p>某些神经网络架构使用了可分卷积,比如 <strong>MobileNets</strong>。可分卷积有<em>空间可分卷积和深度可分卷积</em>。</p><h3 id="空间可分卷积"><a href="#空间可分卷积" class="headerlink" title="空间可分卷积"></a>空间可分卷积</h3><p>空间可分卷积操作的是图像的 2D 空间维度,即高和宽。从概念上看,空间可分卷积是将一个卷积分解为两个单独的运算。对于下面的示例,3×3 的 Sobel 核被分成了一个 3×1 核和一个 1×3 核。<br>$$<br>\begin{bmatrix}-1&amp;0&amp;1\-2&amp;0&amp;2\-1&amp;0&amp;1\end{bmatrix}\begin{array}{ccc}&#x3D;&amp;\begin{bmatrix}1\2\1\end{bmatrix}&amp;\times&amp;[-1&amp;0&amp;1]\end{array}<br>$$<br>Sobel 核可分为一个 3x1 和一个 1x3 核在卷积中,3×3 核直接与图像卷积。在空间可分卷积中,3×1 核首先与图像卷积,然后再应用 1×3 核。这样,执行同样的操作时仅需 6 个参数,而不是 9 个。</p><p>此外,使用空间可分卷积时所需的矩阵乘法也更少。给一个具体的例子,5×5 图像与 3×3 核的卷积(步幅&#x3D;1,填充&#x3D;0)要求在 3 个位置水平地扫描核(还有 3 个垂直的位置)。总共就是 9 个位置,表示为下图中的点。在每个位置,会应用 9 次逐元素乘法。总共就是 9×9&#x3D;81 次乘法。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-9.png" alt="具有 1 个通道的标准卷积"></p><p>另一方面,对于空间可分卷积,我们首先在 5×5 的图像上应用一个 3×1 的过滤器。我们可以在水平 5 个位置和垂直 3 个位置扫描这样的核。总共就是 5×3&#x3D;15 个位置,表示为下图中的点。在每个位置,会应用 3 次逐元素乘法。总共就是 15×3&#x3D;45 次乘法。现在我们得到了一个 3×5 的矩阵。这个矩阵再与一个 1×3 核卷积,即在水平 3 个位置和垂直 3 个位置扫描这个矩阵。对于这 9 个位置中的每一个,应用 3 次逐元素乘法。这一步需要 9×3&#x3D;27 次乘法。因此,总体而言,空间可分卷积需要 45+27&#x3D;72 次乘法,少于普通卷积。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-10.png" alt="具有 1 个通道的空间可分卷积"></p><p>我们稍微推广一下上面的例子。假设我们现在将卷积应用于一张 N×N 的图像上,卷积核为 m×m,步幅为 1,填充为 0。传统卷积需要 $(N-2) * (N-2) * m * m$ 次乘法,空间可分卷积需要 $N * (N-2) * m + (N-2) * (N-2) * m &#x3D; (2N-2) * (N-2) * m$ 次乘法。空间可分卷积与标准卷积的计算成本比为:<br>$$<br>\frac2m+\frac2{m(N-2)}<br>$$</p><p>因为图像尺寸 N 远大于过滤器大小(N&gt;&gt;m),所以这个比就变成了 2&#x2F;m。也就是说,在这种渐进情况(N&gt;&gt;m)下,<strong>当过滤器大小为 3×3 时,空间可分卷积的计算成本是标准卷积的 2&#x2F;3。过滤器大小为 5×5 时这一数值是 2&#x2F;5；过滤器大小为 7×7 时则为 2&#x2F;7。</strong></p><p>尽管空间可分卷积能节省成本,但深度学习却很少使用它。一大主要原因是并非所有的核都能分成两个更小的核。如果我们用空间可分卷积替代所有的传统卷积,那么我们就限制了自己在训练过程中搜索所有可能的核。这样得到的训练结果可能是次优的。</p><h3 id="深度可分卷积"><a href="#深度可分卷积" class="headerlink" title="深度可分卷积"></a>深度可分卷积</h3><p>现在来看深度可分卷积,这在深度学习领域要常用得多(比如 MobileNet 和 Xception)。深度可分卷积包含两个步骤:深度卷积和 1×1 卷积。</p><p>在描述这些步骤之前,有必要回顾一下我们之前介绍的 2D 卷积核 1×1 卷积。首先快速回顾标准的 2D 卷积。举一个具体例子,假设输入层的大小是 7×7×3(高×宽×通道),而过滤器的大小是 3×3×3。经过与一个过滤器的 2D 卷积之后,输出层的大小是 5×5×1(仅有一个通道)。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-11.png" alt="用于创建仅有 1 层的输出的标准 2D 卷积,使用 1 个过滤器"></p><p>一般来说,两个神经网络层之间会应用多个过滤器。假设我们这里有 128 个过滤器。在应用了这 128 个 2D 卷积之后,我们有 128 个 5×5×1 的输出映射图(map)。然后我们将这些映射图堆叠成大小为 5×5×128 的单层。通过这种操作,我们可将输入层(7×7×3)转换成输出层(5×5×128)。空间维度(即高度和宽度)会变小,而深度会增大。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-12.png" alt="用于创建有 128 层的输出的标准 2D 卷积,要使用 128 个过滤器"></p><p>现在使用深度可分卷积,看看我们如何实现同样的变换。</p><p>首先,我们将深度卷积应用于输入层。但我们不使用 2D 卷积中大小为 3×3×3 的单个过滤器,而是分开使用 3 个核。每个过滤器的大小为 3×3×1。每个核与输入层的一个通道卷积(仅一个通道,而非所有通道！)。每个这样的卷积都能提供大小为 5×5×1 的映射图。然后我们将这些映射图堆叠在一起,创建一个 5×5×3 的图像。经过这个操作之后,我们得到大小为 5×5×3 的输出。现在我们可以降低空间维度了,但深度还是和之前一样。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-13.png"></p><p>深度可分卷积——第一步:我们不使用 2D 卷积中大小为 3×3×3 的单个过滤器,而是分开使用 3 个核。每个过滤器的大小为 3×3×1。每个核与输入层的一个通道卷积(仅一个通道,而非所有通道！)。每个这样的卷积都能提供大小为 5×5×1 的映射图。然后我们将这些映射图堆叠在一起,创建一个 5×5×3 的图像。经过这个操作之后,我们得到大小为 5×5×3 的输出。</p><p>在深度可分卷积的第二步,为了扩展深度,我们应用一个核大小为 1×1×3 的 1×1 卷积。将 5×5×3 的输入图像与每个 1×1×3 的核卷积,可得到大小为 5×5×1 的映射图。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-14.png"><br>因此,在应用了 128 个 1×1 卷积之后,我们得到大小为 5×5×128 的层。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-15.png"></p><p>通过这两个步骤,深度可分卷积也会将输入层(7×7×3)变换到输出层(5×5×128)。</p><p>下图展示了深度可分卷积的整个过程。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-16.png" alt="深度可分卷积的整个过程"></p><p>所以,深度可分卷积有何优势呢？效率！相比于 2D 卷积,<strong>深度可分卷积所需的操作要少得多</strong>。</p><p>回忆一下我们的 2D 卷积例子的计算成本。有 128 个 3×3×3 个核移动了 5×5 次,也就是 128 x 3 x 3 x 3 x 5 x 5 &#x3D; 86400 次乘法。</p><p>可分卷积又如何呢？在第一个深度卷积步骤,有 3 个 3×3×1 核移动 5×5 次,也就是 3x3x3x1x5x5 &#x3D; 675 次乘法。在 1×1 卷积的第二步,有 128 个 1×1×3 核移动 5×5 次,即 128 x 1 x 1 x 3 x 5 x 5 &#x3D; 9600 次乘法。因此,深度可分卷积共有 675 + 9600 &#x3D; 10275 次乘法。这样的成本大概仅有 2D 卷积的 12%！</p><p>所以,对于任意尺寸的图像,如果我们应用深度可分卷积,我们可以节省多少时间？让我们泛化以上例子。现在,对于大小为 H×W×D 的输入图像,如果使用 Nc 个大小为 h×h×D 的核执行 2D 卷积(步幅为 1,填充为 0,其中 h 是偶数)。为了将输入层(H×W×D)变换到输出层((H-h+1)x (W-h+1) x Nc),所需的总乘法次数为:<br>Nc x h x h x D x (H-h+1) x (W-h+1)<br>另一方面,对于同样的变换,深度可分卷积所需的乘法次数为:<br>D x h x h x 1 x (H-h+1) x (W-h+1) + Nc x 1 x 1 x D x (H-h+1) x (W-h+1) &#x3D; (h x h + Nc) x D x (H-h+1) x (W-h+1)<br>则深度可分卷积与 2D 卷积所需的乘法次数比为:<br>$$<br>\frac{1}{N_{c}}+\frac{1}{h^{2}}<br>$$</p><p>现代大多数架构的输出层通常都有很多通道,可达数百甚至上千。对于这样的层(Nc &gt;&gt; h),则上式可约简为 1 &#x2F; h²。基于此,如果使用 3×3 过滤器,则 2D 卷积所需的乘法次数是深度可分卷积的 9 倍。如果使用 5×5 过滤器,则 2D 卷积所需的乘法次数是深度可分卷积的 25 倍。</p><p><em>使用深度可分卷积有什么坏处吗？当然是有的。深度可分卷积会降低卷积中参数的数量。因此,对于较小的模型而言,如果用深度可分卷积替代 2D 卷积,模型的能力可能会显著下降</em>。因此,得到的模型可能是次优的。但是,如果使用得当,深度可分卷积能在不降低你的模型性能的前提下帮助你实现效率提升。</p><h2 id="分组卷积"><a href="#分组卷积" class="headerlink" title="分组卷积"></a>分组卷积</h2><p>AlexNet 论文(<a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)%E5%9C%A8">https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)在</a> 2012 年引入了分组卷积。实现分组卷积的主要原因是让网络训练可在 2 个内存有限(每个 GPU 有 1.5 GB 内存)的 GPU 上进行。下面的 AlexNet 表明在大多数层中都有两个分开的卷积路径。这是在两个 GPU 上执行模型并行化(当然如果可以使用更多 GPU,还能执行多 GPU 并行化)。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-17.png"><br>这里我们介绍一下分组卷积的工作方式。首先,典型的 2D 卷积的步骤如下图所示。在这个例子中,通过应用 128 个大小为 3×3×3 的过滤器将输入层(7×7×3)变换到输出层(5×5×128)。推广而言,即通过应用 Dout 个大小为 h x w x Din 的核将输入层(Hin x Win x Din)变换到输出层(Hout x Wout x Dout)。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-18.png" alt="标准的 2D 卷积"></p><p>在分组卷积中,过滤器会被分为不同的组。每一组都负责特定深度的典型 2D 卷积。下面的例子能让你更清楚地理解。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-19.png" alt="具有两个过滤器分组的分组卷积"></p><p>上图展示了具有两个过滤器分组的分组卷积。在每个过滤器分组中,每个过滤器的深度仅有名义上的 2D 卷积的一半。它们的深度是 Din&#x2F;2。每个过滤器分组包含 Dout&#x2F;2 个过滤器。第一个过滤器分组(红色)与输入层的前一半([:, :, 0:Din&#x2F;2])卷积,而第二个过滤器分组(橙色)与输入层的后一半([:, :, Din&#x2F;2:Din])卷积。因此,每个过滤器分组都会创建 Dout&#x2F;2 个通道。整体而言,两个分组会创建 2×Dout&#x2F;2 &#x3D; Dout 个通道。然后我们将这些通道堆叠在一起,得到有 Dout 个通道的输出层。</p><ul><li>分组卷积与深度卷积<br>你可能会注意到分组卷积与深度可分卷积中使用的深度卷积之间存在一些联系和差异。如果过滤器分组的数量与输入层通道的数量相同,则每个过滤器的深度都为 Din&#x2F;Din&#x3D;1。这样的过滤器深度就与深度卷积中的一样了。</li></ul><p>另一方面,现在每个过滤器分组都包含 Dout&#x2F;Din 个过滤器。整体而言,输出层的深度为 Dout。这不同于深度卷积的情况——深度卷积并不会改变层的深度。在深度可分卷积中,层的深度之后通过 1×1 卷积进行扩展。</p><p>分组卷积有几个优点。</p><p>第一个优点是高效训练。因为卷积被分成了多个路径,每个路径都可由不同的 GPU 分开处理,所以模型可以并行方式在多个 GPU 上进行训练。相比于在单个 GPU 上完成所有任务,这样的在多个 GPU 上的模型并行化能让网络在每个步骤处理更多图像。人们一般认为模型并行化比数据并行化更好。后者是将数据集分成多个批次,然后分开训练每一批。但是,当批量大小变得过小时,我们本质上是执行随机梯度下降,而非批梯度下降。这会造成更慢,有时候更差的收敛结果。</p><p>在训练非常深的神经网络时,分组卷积会非常重要,正如在 ResNeXt 中那样。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-20.png"></p><p>第二个优点是模型会更高效,即模型参数会随过滤器分组数的增大而减少。在之前的例子中,完整的标准 2D 卷积有 h x w x Din x Dout 个参数。具有 2 个过滤器分组的分组卷积有 (h x w x Din&#x2F;2 x Dout&#x2F;2) x 2 个参数。参数数量减少了一半。</p><p>第三个优点有些让人惊讶。分组卷积也许能提供比标准完整 2D 卷积更好的模型。另一篇出色的博客已经解释了这一点:<a href="https://blog.yani.io/filter-group-tutorial%E3%80%82%E8%BF%99%E9%87%8C%E7%AE%80%E8%A6%81%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E3%80%82">https://blog.yani.io/filter-group-tutorial。这里简要总结一下。</a></p><p>原因和稀疏过滤器的关系有关。下图是相邻层过滤器的相关性。其中的关系是稀疏的。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-21.png"><br>在 CIFAR10 上训练的一个 Network-in-Network 模型中相邻层的过滤器的相关性矩阵。高度相关的过滤器对更明亮,而相关性更低的过滤器则更暗。图片来自:<a href="https://blog.yani.io/filter-group-tutorial">https://blog.yani.io/filter-group-tutorial</a></p><p>分组矩阵的相关性映射图又如何？<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-22.png"></p><p>在 CIFAR10 上训练的一个 Network-in-Network 模型中相邻层的过滤器的相关性,动图分别展示了有 1、2、4、8、16 个过滤器分组的情况。</p><p>上图是当用 1、2、4、8、16 个过滤器分组训练模型时,相邻层的过滤器之间的相关性。那篇文章提出了一个推理:「过滤器分组的效果是在通道维度上学习块对角结构的稀疏性……在网络中,具有高相关性的过滤器是使用过滤器分组以一种更为结构化的方式学习到。从效果上看,不必学习的过滤器关系就不再参数化。这样显著地减少网络中的参数数量能使其不容易过拟合,因此,一种类似正则化的效果让优化器可以学习得到更准确更高效的深度网络。</p><p>AlexNet conv1 过滤器分解:正如作者指出的那样,过滤器分组似乎会将学习到的过滤器结构性地组织成两个不同的分组。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-23.png"><br>此外,每个过滤器分组都会学习数据的一个独特表征。正如 AlexNet 的作者指出的那样,过滤器分组似乎会将学习到的过滤器结构性地组织成两个不同的分组——黑白过滤器和彩色过滤器。</p><h1 id="神经网络的类型"><a href="#神经网络的类型" class="headerlink" title="神经网络的类型"></a>神经网络的类型</h1><h2 id="前馈神经网络-FNN"><a href="#前馈神经网络-FNN" class="headerlink" title="前馈神经网络(FNN)"></a>前馈神经网络(FNN)</h2><p>前馈神经网络 (FNN) 是最简单的人工神经网络,其中信息只朝一个方向移动,即向前移动,从输入节点,经过隐藏节点(如果有),最后到达输出节点。</p><p>网络中没有循环或环路,因此是一种简单的架构。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-24.png"><br>工作原理<br>1.输入层: 输入特征(例如,图像的像素值)被输入到网络中。<br>2.隐藏层 每个隐藏层由处理来自前一层的输入的神经元组成。 每个神经元计算其输入的加权和,添加偏差,并将结果传递给激活函数(例如 ReLU、sigmoid)。<br>3.输出层 最后一层提供网络的输出(例如,分类中的类概率或回归中的连续值)。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token comment"># Build a simple Feedforward Neural Network</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>  Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span>    input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># Hidden layer with 64 neurons</span>  Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token comment"># Another hidden layer</span>  Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>                      <span class="token comment"># Output layer for binary classification</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Compile the model</span> model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Summary of the model</span> model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="卷积神经网络-CNN"><a href="#卷积神经网络-CNN" class="headerlink" title="卷积神经网络(CNN)"></a>卷积神经网络(CNN)</h2><p>卷积神经网络 (CNN) 是一类深度神经网络,专门用于处理结构化网格状数据(例如图像)。</p><p>它们使用卷积层自动且自适应地从输入数据中学习特征的空间层次结构。</p><ul><li>卷积层 将一组过滤器(核)应用于输入,这些过滤器在输入数据上滑动以生成特征图。 </li><li>池化层 降低特征图的维数,使得网络的计算效率更高,并且对输入中的小平移具有不变性。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-25.png"></p><p>工作原理<br>1.输入层 CNN 的输入通常是以像素值矩阵表示的图像。 对于彩色图像,这通常是 3D 矩阵(高度 × 宽度 × 通道)。<br>2.卷积层 CNN 的核心思想是卷积运算,其中一个称为过滤器或内核的小矩阵在输入图像上滑动,并计算过滤器与其覆盖的图像块之间的点积。 此操作生成特征图。<br>3.池化层 池化层减少了特征图的空间维度(高度和宽度),使计算更易于管理,并允许网络专注于最重要的特征。 最常见的类型是最大池化,它从特征图的每个块中获取最大值。<br>4.全连接层 经过几个卷积层和池化层之后,神经网络中的高级推理通过全连接层完成。<br>5.输出层 输出层使用特定的激活函数(对于分类任务,通常是 Softmax)来产生最终预测。输出是所有可能类别的概率分布。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> mnist<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> to_categorical<span class="token comment"># Load dataset</span><span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>X_train <span class="token operator">=</span> X_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>X_test <span class="token operator">=</span> X_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>X_train <span class="token operator">=</span> X_train<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span>X_test <span class="token operator">=</span> X_test<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span> y_train <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> y_test <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># Build the CNN model</span> model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>     Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dense<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Compile the model</span> model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Train the model</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> validation_data<span class="token operator">=</span><span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token comment"># Evaluate the model</span> score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Test accuracy: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">%'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环神经网络-RNN"><a href="#循环神经网络-RNN" class="headerlink" title="循环神经网络(RNN)"></a>循环神经网络(RNN)</h2><p>循环神经网络 (RNN) 是一类用于<em>处理顺序数据</em>的神经网络。与标准神经网络不同,RNN 具有循环,可让其保留先前输入的“记忆”,因此非常适合处理涉及序列的任务。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-26.png"></p><ul><li>LSTM(长短期记忆) 一种 RNN,可以通过维护随每次输入更新的记忆单元来学习长期依赖关系。LSTM 解决了标准 RNN 的梯度消失问题。 </li><li>GRU(门控循环单元) LSTM 的简化版本,将遗忘门和输入门组合成单个更新门。 GRU 计算效率高,性能通常与 LSTM 一样好。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> LSTM<span class="token punctuation">,</span> Dense<span class="token comment"># Build an LSTM for time series prediction</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    LSTM<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># LSTM layer</span>    Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                           <span class="token comment"># Output layer</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Compile the model</span> model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'mse'</span><span class="token punctuation">)</span>  <span class="token comment"># Summary of the model</span> model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p>Transformer与注意力机制已经彻底改变了深度学习领域,为处理序列数据并捕捉长距离依赖关系提供了一种强大的方式。<br>在本文中,我们将深入探讨Transformer的基本原理,以及注意力机制在提升模型性能和连贯性方面的重要性。</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ul><li>注意力机制在Transformer中至关重要,它允许<strong>根据重要性为不同的标记(token)分配权重</strong>,从而增强模型的上下文和输出质量。 </li><li>Transformer通过<strong>自注意力机制</strong>运作,能够在不进行序列处理的情况下捕捉长距离依赖关系。 </li><li>Transformer中的<strong>多头注意力机制</strong>允许模型同时关注输入数据的不同方面,从而提升模型性能。 </li><li>由于其<strong>并行处理能力</strong>,Transformer在处理序列数据时优于循环神经网络(RNN)和长短时记忆网络(LSTM)。 </li><li>Transformer的应用范围涵盖自然语言处理(NLP)、计算机视觉以及最先进的模型开发。</li></ul><h3 id="深度学习中的Transformer演进"><a href="#深度学习中的Transformer演进" class="headerlink" title="深度学习中的Transformer演进"></a>深度学习中的Transformer演进</h3><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-27.png"></p><ul><li>注意力机制的重要性</li></ul><p>在深度学习领域,注意力机制的出现堪称革命性,它使模型能够动态地关注输入数据的相关部分,类似于人类关注视觉场景或对话中的某些方面。</p><p>这种选择性关注在上下文至关重要的任务(如语言理解或图像识别)中尤为重要。</p><p>在Transformer的上下文中,注意力机制用于在产生输出时权衡不同输入标记的影响。</p><p>这不仅仅是人类注意力的复制,而是增强,使机器能够在某些任务上超越人类表现。</p><p>以下是强调注意力机制重要性的几个要点:</p><ul><li>它们通过关注最相关的部分来处理<em>可变大小的输入</em>。 </li><li>基于注意力的模型能够捕捉早期模型(如RNN)难以处理的<em>长距离依赖关系</em>。 </li><li>它们促进了输入数据的<em>并行处理</em>,从而显著提高了计算效率。</li></ul><p>注意力机制简洁而强大,通过使模型能够考虑输入的整个上下文,它们为机器学习开辟了新的可能性,推动了自然语言处理等领域的突破。</p><p>编码器-解码器模型</p><p>编码器-解码器模型的核心是序列数据翻译,其中<strong>编码器处理输入序列并将其提炼为固定长度的表示</strong>,通常称为上下文向量。</p><p>这个向量作为输入的浓缩摘要,捕捉其本质以供解码器解释。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-28.png"></p><p>解码器以与编码器相似的结构开始,用上下文向量初始化其初始隐藏状态。</p><p>它开始生成性探索,构思输出序列的第一个标记,并继续编织后续的标记,每个预测都受到先前实现的标记和上下文向量持续低语的微妙影响。</p><p>这种迭代过程一直持续到由序列结束标记或预定序列长度的边界发出信号,表示叙述完成。</p><p>编码器-解码器模型并非没有挑战,<em>当面临冗长且信息密集的输入序列时,模型在整个解码过程中保持相关性的能力可能会减弱</em>。</p><p>在文本生成的每个阶段,并非输入上下文的所有片段都同样重要。</p><p>例如,在机器翻译中,句子“A boy is eating the banana”中的“boy”一词并不需要整个句子的上下文来进行准确翻译。</p><p>这一认识推动了Transformer架构的采用,它采用专门的注意力机制来明智地分配关注,确保每个解码步骤都由最相关的上下文片段提供信息。</p><h3 id="Transformer架构"><a href="#Transformer架构" class="headerlink" title="Transformer架构"></a>Transformer架构</h3><p>Transformer架构是深度学习领域的一项突破性创新,彻底改变了我们对序列到序列任务的处理方式。<br>其核心由两个主要组件组成:编码器和解码器,每个组件都设计用于执行输入处理和输出生成中不同但互补的功能。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-29.png"><br>编码器的任务是仔细地从输入序列中提取特征,这是通过一系列层实现的,<em>每层包含一个多头注意力机制</em>,后跟一个前馈神经网络。</p><p>这些层还通过归一化和残差连接进一步增强,以确保训练期间的稳定性。</p><p>值得注意的是,整个序列是并行处理的,这与传统循环神经网络(RNN)的序列处理截然不同。</p><p>另一方面,解码器的任务是生成输出序列,它的结构与编码器相似,但包括一个额外的交叉注意力层,允许它在生成输出时关注输入序列的相关部分。</p><p>重要的是要注意,Transformer的架构并非一成不变,它可以表现为仅编码器、仅解码器或经典的编码器-解码器模型。</p><p>每种架构变体都针对特定的学习目标和任务进行了定制,以下是指导Transformer层组织的架构问题的简洁表示:</p><ul><li>架构类型是什么(仅编码器、仅解码器、编码器-解码器)？ </li><li>Nx模块是如何组织的？ </li><li>提出的架构设计如何支持学习目标(任务)？</li></ul><p>Transformer架构的优势是多方面的,其并行处理能力极大地加速了训练和推理时间。<br>结合自注意力机制,该架构能够巧妙地处理长距离依赖关系,捕捉数据中跨越相当长的序列长度的复杂关系。</p><p>这种能力使Transformer特别擅长处理上下文和序列关系重要的任务。</p><h3 id="Transformer的关键组件"><a href="#Transformer的关键组件" class="headerlink" title="Transformer的关键组件"></a>Transformer的关键组件</h3><h4 id="自注意力机制"><a href="#自注意力机制" class="headerlink" title="自注意力机制"></a>自注意力机制</h4><p>自注意力机制是Transformer模型中的关键创新(可能也是人类进化中的关键？),使它能够识别数据中的复杂关系。</p><p>它允许模型独立于它们在序列中的位置来权衡输入不同部分的重要性。</p><p>这在上下文对于理解含义至关重要的场景中特别有用,例如判断给定句子中的“it”是指“wolf”还是“rabbit”。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-30.png"><br>为了实现这一目标,该机制会为每个输入元素计算三个向量:查询向量、键向量和值向量。</p><p>对于一个输入序列，每个位置的表示向量 $x_i$ 会通过不同的线性变换，生成三个向量：</p><ul><li><strong>查询向量（Query）</strong> $Q$：代表我要“问什么”</li><li><strong>键向量（Key）</strong> $K$：代表你能“回答什么”</li><li><strong>值向量（Value）</strong> $V$：代表你真正“携带的信息”</li></ul><p>过程涉及每个查询向量与键向量之间的点积运算,随后使用SoftMax进行归一化处理,最终将得到的权重应用于值向量,生成注意力向量。(每个查询向量与所有键向量做点积，计算相关性；Softmax 得到注意力权重；然后用这些权重对值向量加权，生成输出。)</p><p>这个向量是一种表示,能够捕捉输入中的上下文关系。</p><p>自注意力机制的优雅之处在于,它能够建模元素间的关系,而不受序列中元素间距离的限制。</p><p>这一特性与早期的序列建模方法截然不同,后者在处理长距离依赖时往往力不从心。</p><p>下表总结了自注意力机制所涉及的步骤:<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-31.png"></p><p>通过隔离和处理这些向量,自注意力机制能够对输入进行细致入微的理解,这对于Transformer通常需要完成的复杂任务至关重要。</p><h4 id="多头注意力"><a href="#多头注意力" class="headerlink" title="多头注意力"></a>多头注意力</h4><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-32.png"></p><p>多头注意力机制的巧妙之处在于,它能够通过多个具有独特视角<br>的自注意力层同时处理数据。</p><p>这种并行处理使模型能够捕捉到输入的更丰富表示。通过将注意力过程划分为“头”,该机制能够以不同的方式关注输入序列的不同部分,类似于一组专家分析复杂问题的各个方面。</p><p>想象一个团队正在合作完成一个复杂的项目,比如开发一款软件。每个团队成员都有自己擅长的领域:<br>1.前端开发人员:专注于用户界面和用户体验。<br>2.后端开发人员:负责服务器逻辑和数据库管理。<br>3.测试工程师:专注于软件的质量保证和错误检测。<br>4.产品经理:负责整体项目规划和需求分析。 </p><p>每个团队成员从自己的专业角度出发,关注项目的不同方面。他们各自独立工作,但最终将各自的成果整合在一起,形成一个完整的软件产品。</p><p>同样,多头注意力结合来自多个注意力“专家”的见解,形成对输入数据的完整理解。</p><p>多头注意力的精髓在于,它能够在不显著增加参数数量的情况下,增强注意力层的表达能力。</p><p>这是通过并行运行多个注意力计算,然后合并其结果来实现的。</p><p>Transformer通常采用8个这样的“头”,但这一数量并非固定不变,而是可以根据模型的复杂度和当前任务进行调整。<br><strong>每个头从输入序列中捕获不同的特征,它们的集体输出被拼接在一起,并再次进行线性变换,以产生最终的注意力输出</strong>。</p><p>这种多层面的方法使模型在理解上更加敏锐和细致。</p><h4 id="前馈神经网络"><a href="#前馈神经网络" class="headerlink" title="前馈神经网络"></a>前馈神经网络</h4><p>在Transformer架构中,自注意力层之间嵌套着前馈神经网络(FFNN)。</p><p>这些网络在处理注意力机制获取的信息方面发挥着关键作用,每个FFNN由两个线性变换组成,中间使用ReLU激活函数,这一设计选择能够在原本线性的注意力计算中引入非线性。</p><p>FFNN的作用是独立处理注意力层中每个位置的输出,确保自注意力机制捕捉词元间的关系时,FFNN能够细化词元表示,而不改变其位置。<br>这种并行处理能力与RNN的顺序处理性质截然不同,RNN以逐步的方式处理输入。</p><p>Transformer中FFNN的魅力在于其简洁而强大,它们仅由几个线性层组成,但在注意力层突出显示相关信息后,它们能够建模复杂的关系。<br>FFNN是Transformer模型中的无名英雄,为学习过程提供了深度和复杂性。</p><p>它们是应用相同变换到不同位置的得力助手,使模型能够在从语言理解到图像识别的各种任务中实现专业化。</p><h3 id="模型架构解析"><a href="#模型架构解析" class="headerlink" title="模型架构解析"></a>模型架构解析</h3><p>Transformer模型框架主要由编码器(Encoder)和解码器(Decoder)两部分组成<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-37.png"></p><p>Encoder将输入转化为固定维度的向量，由多个相同的层组成。每层有两个子层，分别是自注意力层(Self-Attention Layer)和前馈全连接层(Feedforward Layer)。其中，自注意力层通过计算输入的每个元素与其他元素的注意力分数来捕捉元素之间的长程依赖关系；而前馈全连接层将每个元素映射到另一个向量空间以捕捉更高级别的特征</p><p>Decoder将Encoder的输出和目标序列(如翻译后的句子)作为输入，生成目标序列中每个元素的概率分布，由多个相同的层组成。每层有三个子层构成，分别是自注意力层、编码器-解码器注意力层(Encoder-Decoder Attention Layer)和前馈全连接层。其中自注意力层和前馈全连接层作用与Encoder相同，而编码器-解码器注意力层则将Encoder当前位置的输入与Decoder所有位置计算注意力分数来获得与目标序列有关的信息</p><p>整个模型可以抽象为以下结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-38.png"></p><h4 id="编码器-Encoder"><a href="#编码器-Encoder" class="headerlink" title="编码器(Encoder)"></a>编码器(Encoder)</h4><p>编码器的主要作用是将输入编码处理为带有注意力信息的连续表示，可以将编码器堆叠N次使得每一层都有机会学习不同的注意力表示，从而提高Transformer的预测能力</p><p>Encoder部分主要包括： </p><ul><li>input Embedding输入嵌入</li><li>Position Encoding位置编码</li><li>Multi-Head Attention多头注意力机制</li><li>Feed Forward前馈网络</li></ul><h5 id="input-Embedding输入嵌入"><a href="#input-Embedding输入嵌入" class="headerlink" title="input Embedding输入嵌入"></a>input Embedding输入嵌入</h5><p>因计算机本身并不能处理文字信息，故将输入文本转换成固定维度的向量表示，使其能够被模型处理<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-39.png"></p><p>例：输入文本&#x3D;“how are you？”，input Embedding层将每个单词映射到长度相等的向量<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-40.png"></p><h5 id="Position-Encoding位置编码"><a href="#Position-Encoding位置编码" class="headerlink" title="Position Encoding位置编码"></a>Position Encoding位置编码</h5><ul><li>为何需要位置编码?<br>由于transformer中使用的都是线性层，编码过程中没有明显的位置信息，字词位置的交换，仅相当于矩阵中行位置的交换。这带来并行计算的优势，但是也弱化了语序信息，因此需要引入位置编码来弥补，具体，我们来看一个例子:<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#假设线性层w</span>w <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#输出</span><span class="token triple-quoted-string string">"""[[22, 28] [49, 64] [76, 100]] """</span> <span class="token comment">#仅交换输入位置</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#输出</span><span class="token triple-quoted-string string">"""[[49, 64] [76, 100] [22, 28]]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="transformer中位置编码"><a href="#transformer中位置编码" class="headerlink" title="transformer中位置编码"></a>transformer中位置编码</h5><p>位置编码通常是一组与input Embedding维度相同的向量，通过特定方式生成</p><p>在transformer中，采用正余弦位置编码:<br>$$<br>PosEnc_{(pos,2i)}&#x3D;sin(\frac{pos}{10000^{\frac{2i}{d_{model}}}})\PosEnc_{(pos,2i+1)}&#x3D;cos(\frac{pos}{10000^{\frac{2i}{d_{model}}}})<br>$$</p><p>其中，$d_{model}$是input Embedding嵌入向量的维度，$pos$是单词在序列中的位置，$i$是嵌入向量中的维度索引，输入句子为“I am a robot”，那么其位置编码如下：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-41.png"></p><h5 id="Multi-Head-Attention多头注意力机制"><a href="#Multi-Head-Attention多头注意力机制" class="headerlink" title="Multi-Head Attention多头注意力机制"></a>Multi-Head Attention多头注意力机制</h5><ul><li>注意力机制的产生<br>注意力机制从本质上讲和人类的选择性注意力机制类似，核心目标是从众多信息中选择对当前任务目标更加关键的信息，它允许模型对输入序列的不同位置分配不同的权重，以便在处理每个序列元素时关注最相关的部分<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-42.png" alt="自注意力机制"></li></ul><p>用公式表示为：<br>$$<br>Attention(Q,K,V)&#x3D;softmax(\frac{QK^T}{\sqrt{d}})V<br>$$<br>注：除以是因为点积数量级增长很大，因此将softmax函数推向梯度极小区域反向传播时导致梯度消失而无法学习</p><p>如上图，注意力分数计算分为三步：<br>1、将一个token embedding分别与三个矩阵做矩阵乘后得到这个token对应的三个向量</p><p>2、为了找到token与其他token的关注关系，将token的向量与其他所有token的向量做内积，除以后得到注意力分数</p><p>3、过softmax将分数归一化到[0,1]之间，那么对于不太需要关注的token权重就会很小<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-43.png" alt="多头注意力机制"></p><p>多头注意力机制是在自注意力机制的基础上发展起来的，是自注意力机制的变体，旨在增强模型的表达能力和泛化能力。通过使用多个独立的注意力头，分别计算注意力权重，并将结果加权求和，从而获得更丰富的表示</p><blockquote><p>为什么要缩放点积？<br>在实际的深度学习训练过程中，查询和键的维度 d_k 可能会很大。如果不进行缩放，点积的结果会随着维度的增大而变得很大。这可能会导致梯度在反向传播时出现问题，从而影响训练的稳定性。因此，通过将点积结果除以 $\sqrt{d_k}$，缩放点积注意力机制能够使得点积的值保持在一个合理的范围内，从而避免数值过大或过小的问题。</p></blockquote><p>举例说明：<br>假设我们有句子 “I love deep learning” 作为输入 X，以下是如何通过注意力机制生成 Q、K 和 V 的详细过程。</p><ul><li>输入 X<br>首先，句子 “I love deep learning” 会被转换成一个矩阵 X，每个单词被映射为一个词向量。假设我们使用的是 4 维嵌入空间（为了简化举例），那么 X 可能如下所示：</li></ul><table><thead><tr><th align="left">词</th><th align="left">词向量（假设为4维）</th></tr></thead><tbody><tr><td align="left">“I”</td><td align="left">[0.1, 0.2, 0.3, 0.4]</td></tr><tr><td align="left">“love”</td><td align="left">[0.5, 0.6, 0.7, 0.8]</td></tr><tr><td align="left">“deep”</td><td align="left">[0.9, 1.0, 1.1, 1.2]</td></tr><tr><td align="left">“learning”</td><td align="left">[1.3, 1.4, 1.5, 1.6]</td></tr></tbody></table><p>因此，输入矩阵 X 的形状为 (4, 4)，其中 4 是句子的长度（4 个词），每个词是一个 4 维的词向量。</p><ul><li>生成 Q、K 和 V<br>接下来，通过对 X 进行线性变换，我们分别得到查询（Q）、键（K）和值（V）：</li></ul><p>Q &#x3D; X * W_Q<br>K &#x3D; X * W_K<br>V &#x3D; X * W_V<br>其中，W_Q、W_K 和 W_V 是模型训练过程中学习到的权重矩阵。它们的维度通常是 (4, d_k) 和 (4, d_v)，其中 d_k 是每个头的键的维度，d_v 是每个头的值的维度。</p><p>假设我们设置：</p><p>d_k &#x3D; 2（查询和键的维度为 2）<br>d_v &#x3D; 2（值的维度为 2）<br>因此，W_Q、W_K 和 W_V 的维度分别为 (4, 2) 和 (4, 2)。</p><p>在进行线性变换时，矩阵乘法将 X 与 W_Q、W_K、W_V 相乘，生成 Q、K 和 V。假设结果如下：</p><p>Q（查询矩阵）：</p><table><thead><tr><th align="left">词</th><th align="left">Q 向量</th></tr></thead><tbody><tr><td align="left">“I”</td><td align="left">[0.12, 0.25]</td></tr><tr><td align="left">“love”</td><td align="left">[0.46, 0.56]</td></tr><tr><td align="left">“deep”</td><td align="left">[0.75, 0.88]</td></tr><tr><td align="left">“learning”</td><td align="left">[1.04, 1.18]</td></tr></tbody></table><p>K（键矩阵）：</p><table><thead><tr><th align="left">词</th><th align="left">K 向量</th></tr></thead><tbody><tr><td align="left">“I”</td><td align="left">[0.08, 0.20]</td></tr><tr><td align="left">“love”</td><td align="left">[0.42, 0.53]</td></tr><tr><td align="left">“deep”</td><td align="left">[0.72, 0.85]</td></tr><tr><td align="left">“learning”</td><td align="left">[1.01, 1.12]</td></tr></tbody></table><p>V（值矩阵）：</p><table><thead><tr><th align="left">词</th><th align="left">V 向量</th></tr></thead><tbody><tr><td align="left">“I”</td><td align="left">[0.14, 0.28]</td></tr><tr><td align="left">“love”</td><td align="left">[0.50, 0.61]</td></tr><tr><td align="left">“deep”</td><td align="left">[0.76, 0.90]</td></tr><tr><td align="left">“learning”</td><td align="left">[1.06, 1.20]</td></tr></tbody></table><ul><li><p>注意力计算<br>查询（Q）和键（K）的相似度： 我们计算 Q 和 K 之间的相似度，通常使用点积来衡量相似度。对于每个查询 Q[i] 和所有键 K[j]，我们计算点积（Q[i] 与 K[j] 的点积）。<br>加权值（V）的加权和： 在计算完相似度后，我们使用 softmax 来将相似度转换为注意力权重（概率）。然后，将这些权重应用到 V 上，通过加权和得到最终的输出。</p></li><li><p>总结<br>在这个例子中：<br>X 是输入的词向量矩阵，表示句子 “I love deep learning”。<br>通过线性变换，得到查询（Q）、键（K）和值（V），它们的维度会根据头数（multi-head）和模型设置（如 d_k、d_v）有所不同。<br>Q 代表每个词的查询，K 代表知识库中所有词的特征，V 是包含词的实际信息的矩阵。<br>通过这种方式，模型能够计算每个词（查询）和其他所有词（键）之间的相关性，然后从其他词（值）中提取相关信息，从而动态地调整每个词的表示。</p></li></ul><h5 id="残差连接"><a href="#残差连接" class="headerlink" title="残差连接"></a>残差连接</h5><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-44.png"><br>残差连接：将多头注意力机制的输出向量加到原始输入向量上，再做层归一化</p><h5 id="Norm层归一化"><a href="#Norm层归一化" class="headerlink" title="Norm层归一化"></a>Norm层归一化</h5><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-45.png"></p><p>Transformer中主要利用Layer-normal层归一化而不是批归一化，有助于避免训练过程中的梯度消失问题，提高模型稳定性</p><ul><li>为什么使用层归一化?<br>在NLP任务中序列长度通常是变化的，层归一化是对单个样本中所有特征进行归一化使得能够更好处理可变长度的情况 </li><li>什么时候使用?<br>在残差(Residual Connection)之后，Transformer模型中每个子层都有一个残差连接，紧接着做层归一化</li></ul><h5 id="Feed-Forward前馈网络层"><a href="#Feed-Forward前馈网络层" class="headerlink" title="Feed Forward前馈网络层"></a>Feed Forward前馈网络层</h5><p>在Transformer中称作Position-wise Feed-Forward Networks(点对点前馈神经网络，简称FFN)</p><p>实质上为两个全连接层：第一个层将输入维度拓展(如从512维升到2048维)，之后过激活函数(一般为ReLU或GELU)；第二个层将升维后的输出缩减到原始维度(如从2048维缩减回512维)</p><p>前馈网络层处理结束后进行残差连接再进行层归一化</p><h4 id="解码器-Decoder"><a href="#解码器-Decoder" class="headerlink" title="解码器(Decoder)"></a>解码器(Decoder)</h4><p>解码器的主要作用是生成文本序列，主要包括：</p><ul><li>Masked Multi-Head Attention具有掩码的多头注意力机制</li><li>Multi-Head Attention多头注意力机制</li><li>Feed Forward前馈网络</li><li>分类器</li></ul><h5 id="Output-Embedding"><a href="#Output-Embedding" class="headerlink" title="Output Embedding"></a>Output Embedding</h5><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-46.png"><br>在Decoder中将目标序列通过Embedding层转换为密集的向量表示，随后通过Position Embedding加入序列中的位置信息，作为解码器的输入，用于模型训练</p><h5 id="Masked-Multi-Head-Attention具有掩码的多头注意力机制"><a href="#Masked-Multi-Head-Attention具有掩码的多头注意力机制" class="headerlink" title="Masked Multi-Head Attention具有掩码的多头注意力机制"></a>Masked Multi-Head Attention具有掩码的多头注意力机制</h5><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-47.png"></p><p>self-attention会计算当前词与其他词关系，但在用Decoder生成序列时，目标是预测当前位置的单词，模型只能使用到该位置之前的信息，其后面的信息不能被注意力机制看到，防止信息泄露，故需要想办法遮挡后面的信息</p><p>在Transformer中主要是通过应用掩码(Mask)操作实现<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-48.png"></p><p>如上图，为防止解码器看到未来的信息，在已得到的注意力分数矩阵上加上一个mask矩阵，使掩码位置注意力变得负无穷大，得到Masked Scores</p><p>这样，Masked Scores经过softmax函数时，相对“当前词”的“未来词”的注意力得分变为0，即不会访问到未来信息</p><h5 id="Multi-Head-Attention多头注意力机制-1"><a href="#Multi-Head-Attention多头注意力机制-1" class="headerlink" title="Multi-Head Attention多头注意力机制"></a>Multi-Head Attention多头注意力机制</h5><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-49.png"></p><p>这里的多头注意力机制原理同Encoder部分，只是来自于Encoder，目标是将解码器当前生成的序列与原始输入序列(经过编码器处理的)联系起来，用于生成下一个目标词</p><h5 id="Feed-Forward前馈网络"><a href="#Feed-Forward前馈网络" class="headerlink" title="Feed Forward前馈网络"></a>Feed Forward前馈网络</h5><p>参考Encoder部分的Feed Forward</p><h5 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h5><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-50.png"></p><p>最后，由一个线性层和一个softmax得到当前词概率</p><h5 id="生成序列停止"><a href="#生成序列停止" class="headerlink" title="生成序列停止"></a>生成序列停止</h5><p>在模型输出”eos”时停止生成<br>至此，整个Transformer模型全部拆解完毕，具体解决了如下问题：</p><ul><li>长距离依赖关系长期依赖问题： 遇到长文本时，传统RNN难以捕捉序列的远距离依赖关系。Transformer通过自注意力机制，能够在不同位置对序列中的每个元素赋予不同的重要性，从而有效地捕捉长距离依赖关系 </li><li>并行计算问题： 传统的RNN训练时需按序列顺序依次进行，无法并行计算导致计算效率低。Transformer采用编码器-解码器框架，允许模型在输入序列上进行编码，然后在输出序列上进行解码，从而实现并行计算，大大提高模型训练的速度 </li><li>特征抽取问题： Transformer通过自注意力机制和多层神经网络结构，能够有效地从输入序列中抽取丰富的特征信息，为后续的任务提供更好的支持</li></ul><h3 id="Transformer与RNN的比较"><a href="#Transformer与RNN的比较" class="headerlink" title="Transformer与RNN的比较"></a>Transformer与RNN的比较</h3><p>顺序处理与并行处理<br><strong>Transformer的出现标志着序列建模方式的范式转变</strong>。Transformer摒弃了RNN的顺序依赖性,能够并行处理整个序列。这一架构创新充分利用了现代计算硬件(如GPU和TPU)的强大功能,显著加速了训练和推理时间。<br>然而,Transformer的并行处理能力并非没有折衷。一个显著的缺点是参数数量增加,这需要更多的内存和计算资源。</p><p>RNN逐步处理数据,通过传递一个包含先前信息的隐藏状态,而Transformer则一次性处理整个序列。<br>这提高了效率,实现了数据的并行处理,但降低了可解释性。下表简洁地对比了RNN和Transformer的处理特性:<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-33.png"></p><p>本质上,虽然RNN在处理具有强烈时间依赖性的任务方面具有天然优势,但Transformer在需要并行处理大序列和捕获长距离依赖的场景中表现出色。</p><p>长距离依赖<br>Transformer最显著的特点之一是能够从容处理长距离依赖。这一特性对于理解序列中相关信息可能相隔甚远时的上下文至关重要。传统的循环神经网络(RNN),包括其更先进的变体如长短期记忆(LSTM)网络,经常受到梯度消失问题的困扰。<br>这个问题导致初始输入的影响随着序列的推进而减弱,使这些模型难以在长序列中保持上下文。</p><p>相比之下,Transformer不受序列长度的限制,其自注意力机制同时计算输入序列所有部分的相关性,从而实现对数据的全局理解。</p><p>这对于需要合成整个序列中分布的信息的任务(如文档摘要或问答)而言,是革命性的。</p><p>下面详细阐述了Transformer在处理长距离依赖方面相对于RNN的优势:</p><ul><li>Transformer:利用自注意力来衡量序列中每个元素的重要性,不受距离影响。 </li><li>RNN:顺序处理可能导致早期元素的影响减弱,尤其是在长序列中。 </li><li>LSTM:通过引入门控机制来更好地随时间保留信息,但在处理非常长的序列时仍然面临挑战。</li></ul><p>本质而言,Transformer架构通过为长期存在的长距离依赖问题提供了稳健的解决方案,从而<strong>重新定义了序列建模的格局</strong>。</p><p>这一进步为机器学习领域开辟了新的视野,尤其是在需要深入理解语境的复杂任务中。</p><h3 id="Transformer的应用"><a href="#Transformer的应用" class="headerlink" title="Transformer的应用"></a>Transformer的应用</h3><h4 id="NLP与语言建模"><a href="#NLP与语言建模" class="headerlink" title="NLP与语言建模"></a>NLP与语言建模</h4><p>在自然语言处理(NLP)领域,Transformer引领了语言建模能力的新时代。</p><p>凭借其注意力机制,Transformer已成为现代NLP的基石,擅长捕捉词语间的语境和关系。</p><p>这促使从情感分析到语言翻译,再到开发高级聊天机器人和虚拟助理等各种应用取得了显著进展。</p><p>Transformer内部的自注意力机制使得语言理解更为细腻,模型能够处理句子中所有词语之间的关联,而非孤立地处理单个词语。<br>下表展示了一些在NLP中利用Transformer架构的开创性模型:<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-34.png"></p><p>尽管Transformer在NLP中能力卓越,但仍面临挑战,语言的微妙性和对语境的依赖是显著障碍。</p><p>Transformer模型的不断演进旨在应对这些复杂性,不断拓展机器所能理解和与人类语言交互的边界。</p><h4 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h4><p>Transformer在计算机视觉领域的出现,标志着对传统卷积神经网络(CNN)的范式转变,后者多年来一直主导该领域。Transformer引入了一种处理视觉数据的新方法,利用自注意力机制捕捉图像内的全局依赖关系。<br>这有助于更细腻地理解视觉语境,对物体检测、图像分割和分类等任务特别有益。</p><p>如<em>Swin Transformer等视觉Transformer的层次结构,使模型能够关注图像的不同尺度,在辨别细节的同时保持全局视角</em>。</p><p>近期进展显示,Transformer已应用于多种医学影像任务,展示了其多功能性和提高诊断准确性的潜力。</p><p>例如,视觉Transformer已用于通过放射学筛查COVID-19、肺癌预后和视网膜血管分割。下表概述了一些关键应用及其参考文献:<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/image-35.png"></p><p>Transformer融入计算机视觉不仅是技术演进,更是重塑了该领域可能性的格局。<br>随着我们不断探索和完善这些模型,可以期待看到更多突破性的应用,不断拓展机器感知和理解能力的边界。</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>问:Transformer中的注意力机制有何重要性？<br>答:注意力机制在Transformer中至关重要,因为它允许根据重要性对输入中的不同tokens赋予不同权重,从而考虑语境,提高输出的质量和连贯性。<br>问:Transformer在处理序列数据时与RNN和LSTM有何不同？<br>答:与RNN和LSTM顺序处理数据不同,Transformer使用自注意力机制同时处理整个序列。这种并行处理能力有助于提高其有效性。<br>问:Transformer的关键组件是什么？<br>答:Transformer的架构包括自注意力机制、多头注意力和前馈神经网络。<br>问:Transformer在深度学习中有哪些应用？<br>答:Transformer广泛应用于NLP、语言建模、计算机视觉和开发最先进的模型。<br>问:Transformer如何在数据处理中捕捉长距离依赖？<br>答:Transformer利用自注意力机制衡量不同输入令牌的重要性,使其能够在无需顺序处理的情况下捕捉长距离依赖。<br>问:Transformer网络的架构是什么？<br>答:Transformer网络由包含多头自注意力机制和前馈神经网络的编码器和解码器层组成,用于有效处理序列数据。</p><p>问：transformer中的attention为什么要除以根号$\sqrt{d_k}$<br>答：<a href="https://blog.csdn.net/qq_43827595/article/details/125800615">https://blog.csdn.net/qq_43827595/article/details/125800615</a></p><h1 id="实战-基于Transformer生成文章标题"><a href="#实战-基于Transformer生成文章标题" class="headerlink" title="实战-基于Transformer生成文章标题"></a>实战-基于Transformer生成文章标题</h1><p>整个模型结构如下，通过执行main.py文件运行整个模型<br>1 project&#x2F;<br>2 │<br>3 ├── transformer&#x2F;<br>4 │   ├── <strong>init</strong>.py<br>5 │   ├── DataLoader.py<br>6 │   ├── Translator.py<br>7 │   └── Modules.py<br>8 │<br>9 ├── config.py<br>10 ├── loader.py<br>11 ├── evaluate.py<br>12 └── main.py</p><h2 id="Transformer框架"><a href="#Transformer框架" class="headerlink" title="Transformer框架"></a>Transformer框架</h2><p>Transformer整体分为以下几个部分：</p><ul><li>1.SubLayers.py： 实现多头注意力机制（MultiHeadAttention）和位置wise前向传播网络（PositionwiseFeedForward） </li><li>2.Modules.py： 实现缩放点积注意力机制（ScaledDotProductAttention） </li><li>3.Layers.py： 基于SubLayers.py实现Encoder和Decoder中的基本层 </li><li>4.Models.py： 实现位置编码，并基于Layers.py实现Encoder和Decoder，并集成Transformer model </li><li>5.Optim.py： 实现优化器调度，原理详见 </li><li>6.Translator.py： 实现篱笆墙解码，提高生成序列质量</li></ul><h2 id="实现多头注意力机制"><a href="#实现多头注意力机制" class="headerlink" title="实现多头注意力机制"></a>实现多头注意力机制</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''SubLayers.py'''</span><span class="token triple-quoted-string string">''' 创建 MultiHeadAttention 和 PositionwiseFeedForward 实例'''</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> transformer<span class="token punctuation">.</span>Modules <span class="token keyword">import</span> ScaledDotProductAttention<span class="token keyword">class</span> <span class="token class-name">MultiHeadAttention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">''' 多头注意力机制q, k, v 分别是查询、键和值矩阵mask 用于掩码，避免某些位置的注意力权重为0计算注意力权重并应用Dropout。计算加权和并进行线性变换返回归一化后的输出和注意力权重'''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_model<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n_head <span class="token operator">=</span> n_head        self<span class="token punctuation">.</span>d_k <span class="token operator">=</span> d_k        self<span class="token punctuation">.</span>d_v <span class="token operator">=</span> d_v        self<span class="token punctuation">.</span>w_qs <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> n_head <span class="token operator">*</span> d_k<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>w_ks <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> n_head <span class="token operator">*</span> d_k<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>w_vs <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> n_head <span class="token operator">*</span> d_v<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_head <span class="token operator">*</span> d_v<span class="token punctuation">,</span> d_model<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attention <span class="token operator">=</span> ScaledDotProductAttention<span class="token punctuation">(</span>temperature<span class="token operator">=</span>d_k <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer_norm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> q<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> mask<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> n_head <span class="token operator">=</span> self<span class="token punctuation">.</span>d_k<span class="token punctuation">,</span> self<span class="token punctuation">.</span>d_v<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_head        sz_b<span class="token punctuation">,</span> len_q<span class="token punctuation">,</span> len_k<span class="token punctuation">,</span> len_v <span class="token operator">=</span> q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        residual <span class="token operator">=</span> q        <span class="token comment"># Pass through the pre-attention projection: b x lq x (n*dv)</span>        <span class="token comment"># Separate different heads: b x lq x n x dv</span>        q <span class="token operator">=</span> self<span class="token punctuation">.</span>w_qs<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>sz_b<span class="token punctuation">,</span> len_q<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">)</span>        k <span class="token operator">=</span> self<span class="token punctuation">.</span>w_ks<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>sz_b<span class="token punctuation">,</span> len_k<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">)</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>w_vs<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>sz_b<span class="token punctuation">,</span> len_v<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_v<span class="token punctuation">)</span>        <span class="token comment"># Transpose for attention dot product: b x n x lq x dv</span>        q<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> q<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> mask <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            mask <span class="token operator">=</span> mask<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># For head axis broadcasting.</span>        q<span class="token punctuation">,</span> attn <span class="token operator">=</span> self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>q<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span>        <span class="token comment"># Transpose to move the head dimension back: b x lq x n x dv</span>        <span class="token comment"># Combine the last two dimensions to concatenate all the heads together: b x lq x (n*dv)</span>        q <span class="token operator">=</span> q<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>sz_b<span class="token punctuation">,</span> len_q<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        q <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        q <span class="token operator">+=</span> residual        q <span class="token operator">=</span> self<span class="token punctuation">.</span>layer_norm<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        <span class="token keyword">return</span> q<span class="token punctuation">,</span> attn<span class="token keyword">class</span> <span class="token class-name">PositionwiseFeedForward</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">'''位置wise前馈网络 通过两个线性层和ReLU激活函数进行前向传播应用Dropout返回处理后的张量'''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d_in<span class="token punctuation">,</span> d_hid<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>w_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_hid<span class="token punctuation">)</span> <span class="token comment"># position-wise</span>        self<span class="token punctuation">.</span>w_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>d_hid<span class="token punctuation">,</span> d_in<span class="token punctuation">)</span> <span class="token comment"># position-wise</span>        self<span class="token punctuation">.</span>layer_norm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        residual <span class="token operator">=</span> x        x <span class="token operator">=</span> self<span class="token punctuation">.</span>w_2<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>w_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">+=</span> residual        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer_norm<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment"># 示例使用</span>d_model <span class="token operator">=</span> <span class="token number">512</span>  <span class="token comment"># 输入维度</span>d_inner <span class="token operator">=</span> <span class="token number">2048</span>  <span class="token comment"># 前馈网络隐藏层维度</span>n_head <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment"># 头的数量</span>d_k <span class="token operator">=</span> <span class="token number">64</span>  <span class="token comment"># 键的维度</span>d_v <span class="token operator">=</span> <span class="token number">64</span>  <span class="token comment"># 值的维度</span>dropout <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment"># Dropout概率</span><span class="token comment"># 创建多头注意力机制实例</span>multi_head_attention <span class="token operator">=</span> MultiHeadAttention<span class="token punctuation">(</span>n_head<span class="token punctuation">,</span> d_model<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>input_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> d_model<span class="token punctuation">)</span>  <span class="token comment"># 示例输入张量，形状为 (batch_size, seq_len, d_model)</span>mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 示例掩码，形状为 (batch_size, seq_len, seq_len)</span>output_tensor<span class="token punctuation">,</span> attn <span class="token operator">=</span> multi_head_attention<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> input_tensor<span class="token punctuation">,</span> input_tensor<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output_tensor<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 输出形状: (1, 10, 512)</span><span class="token keyword">print</span><span class="token punctuation">(</span>attn<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 输出形状: (1, 8, 10, 10)</span><span class="token comment"># 创建位置wise前馈网络实例</span>positionwise_feedforward <span class="token operator">=</span> PositionwiseFeedForward<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>output_tensor <span class="token operator">=</span> positionwise_feedforward<span class="token punctuation">(</span>output_tensor<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output_tensor<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 输出形状: (1, 10, 512)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现缩放点积注意力机制"><a href="#实现缩放点积注意力机制" class="headerlink" title="实现缩放点积注意力机制"></a>实现缩放点积注意力机制</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">ScaledDotProductAttention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 缩放点积注意力机制 '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature<span class="token punctuation">,</span> attn_dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature         self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>attn_dropout<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> q<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> mask<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         attn <span class="token operator">=</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>q <span class="token operator">/</span> self<span class="token punctuation">.</span>temperature<span class="token punctuation">,</span> k<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> mask <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>             attn <span class="token operator">=</span> attn<span class="token punctuation">.</span>masked_fill<span class="token punctuation">(</span>mask <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">)</span>          attn <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>attn<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         output <span class="token operator">=</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>attn<span class="token punctuation">,</span> v<span class="token punctuation">)</span>         <span class="token keyword">return</span> output<span class="token punctuation">,</span> attn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现Encoder和Decoder中的基本层"><a href="#实现Encoder和Decoder中的基本层" class="headerlink" title="实现Encoder和Decoder中的基本层"></a>实现Encoder和Decoder中的基本层</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token triple-quoted-string string">''' Define the Layers '''</span><span class="token number">2</span> <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token number">3</span> <span class="token keyword">import</span> torch<span class="token number">4</span> <span class="token keyword">from</span> transformer<span class="token punctuation">.</span>SubLayers <span class="token keyword">import</span> MultiHeadAttention<span class="token punctuation">,</span> PositionwiseFeedForward<span class="token number">5</span> <span class="token number">6</span> <span class="token keyword">class</span> <span class="token class-name">EncoderLayer</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">7</span>     <span class="token triple-quoted-string string">'''初始化编码器，包含多头注意力机制和位置wise前馈网络，返回处理后的张量和注意力权重'''</span><span class="token number">8</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">9</span>         <span class="token builtin">super</span><span class="token punctuation">(</span>EncoderLayer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">10</span>         self<span class="token punctuation">.</span>slf_attn <span class="token operator">=</span> MultiHeadAttention<span class="token punctuation">(</span>n_head<span class="token punctuation">,</span> d_model<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">11</span>         self<span class="token punctuation">.</span>pos_ffn <span class="token operator">=</span> PositionwiseFeedForward<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">12</span> <span class="token number">13</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> enc_input<span class="token punctuation">,</span> slf_attn_mask<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">14</span>         enc_output<span class="token punctuation">,</span> enc_slf_attn <span class="token operator">=</span> self<span class="token punctuation">.</span>slf_attn<span class="token punctuation">(</span><span class="token number">15</span>             enc_input<span class="token punctuation">,</span> enc_input<span class="token punctuation">,</span> enc_input<span class="token punctuation">,</span> mask<span class="token operator">=</span>slf_attn_mask<span class="token punctuation">)</span><span class="token number">16</span>         enc_output <span class="token operator">=</span> self<span class="token punctuation">.</span>pos_ffn<span class="token punctuation">(</span>enc_output<span class="token punctuation">)</span><span class="token number">17</span>         <span class="token keyword">return</span> enc_output<span class="token punctuation">,</span> enc_slf_attn<span class="token number">18</span> <span class="token number">19</span> <span class="token keyword">class</span> <span class="token class-name">DecoderLayer</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">20</span>     <span class="token triple-quoted-string string">'''方法初始化解码器层，包含自注意力机制、编码器-解码器注意力机制和位置wise前馈网络，返回处理后的张量和注意力权重'''</span><span class="token number">21</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">22</span>         <span class="token builtin">super</span><span class="token punctuation">(</span>DecoderLayer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">23</span>         self<span class="token punctuation">.</span>slf_attn <span class="token operator">=</span> MultiHeadAttention<span class="token punctuation">(</span>n_head<span class="token punctuation">,</span> d_model<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">24</span>         self<span class="token punctuation">.</span>enc_attn <span class="token operator">=</span> MultiHeadAttention<span class="token punctuation">(</span>n_head<span class="token punctuation">,</span> d_model<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">25</span>         self<span class="token punctuation">.</span>pos_ffn <span class="token operator">=</span> PositionwiseFeedForward<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">26</span> <span class="token number">27</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token number">28</span>             self<span class="token punctuation">,</span> dec_input<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span><span class="token number">29</span>             slf_attn_mask<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dec_enc_attn_mask<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">30</span>         dec_output<span class="token punctuation">,</span> dec_slf_attn <span class="token operator">=</span> self<span class="token punctuation">.</span>slf_attn<span class="token punctuation">(</span><span class="token number">31</span>             dec_input<span class="token punctuation">,</span> dec_input<span class="token punctuation">,</span> dec_input<span class="token punctuation">,</span> mask<span class="token operator">=</span>slf_attn_mask<span class="token punctuation">)</span><span class="token number">32</span>         dec_output<span class="token punctuation">,</span> dec_enc_attn <span class="token operator">=</span> self<span class="token punctuation">.</span>enc_attn<span class="token punctuation">(</span><span class="token number">33</span>             dec_output<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span> mask<span class="token operator">=</span>dec_enc_attn_mask<span class="token punctuation">)</span><span class="token number">34</span>         dec_output <span class="token operator">=</span> self<span class="token punctuation">.</span>pos_ffn<span class="token punctuation">(</span>dec_output<span class="token punctuation">)</span><span class="token number">35</span>         <span class="token keyword">return</span> dec_output<span class="token punctuation">,</span> dec_slf_attn<span class="token punctuation">,</span> dec_enc_attn<span class="token number">36</span> <span class="token number">37</span> <span class="token comment"># 示例使用</span><span class="token number">38</span> d_model <span class="token operator">=</span> <span class="token number">512</span>  <span class="token comment"># 输入维度</span><span class="token number">39</span> d_inner <span class="token operator">=</span> <span class="token number">2048</span>  <span class="token comment"># 前馈网络隐藏层维度</span><span class="token number">40</span> n_head <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment"># 头的数量</span><span class="token number">41</span> d_k <span class="token operator">=</span> <span class="token number">64</span>  <span class="token comment"># 键的维度</span><span class="token number">42</span> d_v <span class="token operator">=</span> <span class="token number">64</span>  <span class="token comment"># 值的维度</span><span class="token number">43</span> dropout <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment"># Dropout概率</span><span class="token number">44</span> <span class="token number">45</span> <span class="token comment"># 创建编码器层实例</span><span class="token number">46</span> encoder_layer <span class="token operator">=</span> EncoderLayer<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span><span class="token number">47</span> input_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> d_model<span class="token punctuation">)</span>  <span class="token comment"># 示例输入张量，形状为 (batch_size, seq_len, d_model)</span><span class="token number">48</span> mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 示例掩码，形状为 (batch_size, seq_len, seq_len)</span><span class="token number">49</span> <span class="token number">50</span> output_tensor<span class="token punctuation">,</span> attn <span class="token operator">=</span> encoder_layer<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token number">51</span> <span class="token keyword">print</span><span class="token punctuation">(</span>output_tensor<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 输出形状: (1, 10, 512)</span><span class="token number">52</span> <span class="token keyword">print</span><span class="token punctuation">(</span>attn<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 输出形状: (1, 8, 10, 10)</span><span class="token number">53</span> <span class="token number">54</span> <span class="token comment"># 创建解码器层实例</span><span class="token number">55</span> decoder_layer <span class="token operator">=</span> DecoderLayer<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span><span class="token number">56</span> input_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> d_model<span class="token punctuation">)</span>  <span class="token comment"># 示例输入张量，形状为 (batch_size, seq_len, d_model)</span><span class="token number">57</span> enc_output <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> d_model<span class="token punctuation">)</span>  <span class="token comment"># 示例编码器输出张量，形状为 (batch_size, seq_len, d_model)</span><span class="token number">58</span> mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 示例掩码，形状为 (batch_size, seq_len, seq_len)</span><span class="token number">59</span> enc_mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 示例掩码，形状为 (batch_size, seq_len, seq_len)</span><span class="token number">60</span> <span class="token number">61</span> output_tensor<span class="token punctuation">,</span> slf_attn<span class="token punctuation">,</span> enc_attn <span class="token operator">=</span> decoder_layer<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> enc_mask<span class="token punctuation">)</span><span class="token number">62</span> <span class="token keyword">print</span><span class="token punctuation">(</span>output_tensor<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 输出形状: (1, 10, 512)</span><span class="token number">63</span> <span class="token keyword">print</span><span class="token punctuation">(</span>slf_attn<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 输出形状: (1, 8, 10, 10)</span><span class="token number">64</span> <span class="token keyword">print</span><span class="token punctuation">(</span>enc_attn<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 输出形状: (1, 8, 10, 10)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现位置编码，并基于Layers-py实现Encoder和Decoder，并集成Transformer-model"><a href="#实现位置编码，并基于Layers-py实现Encoder和Decoder，并集成Transformer-model" class="headerlink" title="实现位置编码，并基于Layers.py实现Encoder和Decoder，并集成Transformer model"></a>实现位置编码，并基于Layers.py实现Encoder和Decoder，并集成Transformer model</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token comment">#生成填充掩码</span><span class="token number">2</span> <span class="token keyword">def</span> <span class="token function">get_pad_mask</span><span class="token punctuation">(</span>seq<span class="token punctuation">,</span> pad_idx<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">3</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>seq <span class="token operator">!=</span> pad_idx<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">4</span> <span class="token comment">#生成后续掩码，用于掩蔽后续信息</span><span class="token number">5</span> <span class="token keyword">def</span> <span class="token function">get_subsequent_mask</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">6</span>     sz_b<span class="token punctuation">,</span> len_s <span class="token operator">=</span> seq<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">7</span>     subsequent_mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> torch<span class="token punctuation">.</span>triu<span class="token punctuation">(</span><span class="token number">8</span>         torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len_s<span class="token punctuation">,</span> len_s<span class="token punctuation">)</span><span class="token punctuation">,</span> device<span class="token operator">=</span>seq<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> diagonal<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span>     <span class="token keyword">return</span> subsequent_mask<span class="token number">10</span> <span class="token comment">#正余弦位置编码，将位置编码添加到输入张量上</span><span class="token number">11</span> <span class="token keyword">class</span> <span class="token class-name">PositionalEncoding</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">12</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d_hid<span class="token punctuation">,</span> n_position<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">13</span>         <span class="token builtin">super</span><span class="token punctuation">(</span>PositionalEncoding<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">14</span> <span class="token number">15</span>         <span class="token comment"># Not a parameter</span><span class="token number">16</span>         self<span class="token punctuation">.</span>register_buffer<span class="token punctuation">(</span><span class="token string">'pos_table'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_get_sinusoid_encoding_table<span class="token punctuation">(</span>n_position<span class="token punctuation">,</span> d_hid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">17</span> <span class="token number">18</span>     <span class="token keyword">def</span> <span class="token function">_get_sinusoid_encoding_table</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_position<span class="token punctuation">,</span> d_hid<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">19</span>         <span class="token triple-quoted-string string">''' Sinusoid position encoding table '''</span><span class="token number">20</span>         <span class="token comment"># TODO: make it with torch instead of numpy</span><span class="token number">21</span> <span class="token number">22</span>         <span class="token keyword">def</span> <span class="token function">get_position_angle_vec</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">23</span>             <span class="token keyword">return</span> <span class="token punctuation">[</span>position <span class="token operator">/</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>hid_j <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> d_hid<span class="token punctuation">)</span> <span class="token keyword">for</span> hid_j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>d_hid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token number">24</span> <span class="token number">25</span>         sinusoid_table <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>get_position_angle_vec<span class="token punctuation">(</span>pos_i<span class="token punctuation">)</span> <span class="token keyword">for</span> pos_i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_position<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">26</span>         sinusoid_table<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>sinusoid_table<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># dim 2i</span><span class="token number">27</span>         sinusoid_table<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>sinusoid_table<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># dim 2i+1</span><span class="token number">28</span>         <span class="token keyword">return</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>sinusoid_table<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">29</span> <span class="token number">30</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">31</span>         <span class="token keyword">return</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>pos_table<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">32</span> <span class="token comment">#实现编码器的前向传播</span><span class="token number">33</span> <span class="token keyword">class</span> <span class="token class-name">Encoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">34</span>     <span class="token triple-quoted-string string">''' A encoder model with self attention mechanism. '''</span><span class="token number">35</span> <span class="token number">36</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span><span class="token number">37</span>             self<span class="token punctuation">,</span> n_src_vocab<span class="token punctuation">,</span> d_word_vec<span class="token punctuation">,</span> n_layers<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span><span class="token number">38</span>             d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> pad_idx<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> n_position<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> scale_emb<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">39</span> <span class="token number">40</span>         <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">41</span> <span class="token number">42</span>         self<span class="token punctuation">.</span>src_word_emb <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>n_src_vocab<span class="token punctuation">,</span> d_word_vec<span class="token punctuation">,</span> padding_idx<span class="token operator">=</span>pad_idx<span class="token punctuation">)</span><span class="token number">43</span>         self<span class="token punctuation">.</span>position_enc <span class="token operator">=</span> PositionalEncoding<span class="token punctuation">(</span>d_word_vec<span class="token punctuation">,</span> n_position<span class="token operator">=</span>n_position<span class="token punctuation">)</span><span class="token number">44</span>         self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">45</span>         self<span class="token punctuation">.</span>layer_stack <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">46</span>             EncoderLayer<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">47</span>             <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_layers<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">48</span>         self<span class="token punctuation">.</span>layer_norm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">)</span><span class="token number">49</span>         self<span class="token punctuation">.</span>scale_emb <span class="token operator">=</span> scale_emb<span class="token number">50</span>         self<span class="token punctuation">.</span>d_model <span class="token operator">=</span> d_model<span class="token number">51</span> <span class="token number">52</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> src_seq<span class="token punctuation">,</span> src_mask<span class="token punctuation">,</span> return_attns<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">53</span>         enc_slf_attn_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">54</span> <span class="token number">55</span>         <span class="token comment"># -- Forward</span><span class="token number">56</span>         enc_output <span class="token operator">=</span> self<span class="token punctuation">.</span>src_word_emb<span class="token punctuation">(</span>src_seq<span class="token punctuation">)</span><span class="token number">57</span>         <span class="token keyword">if</span> self<span class="token punctuation">.</span>scale_emb<span class="token punctuation">:</span><span class="token number">58</span>             enc_output <span class="token operator">*=</span> self<span class="token punctuation">.</span>d_model <span class="token operator">**</span> <span class="token number">0.5</span><span class="token number">59</span>         enc_output <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>position_enc<span class="token punctuation">(</span>enc_output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">60</span>         enc_output <span class="token operator">=</span> self<span class="token punctuation">.</span>layer_norm<span class="token punctuation">(</span>enc_output<span class="token punctuation">)</span><span class="token number">61</span> <span class="token number">62</span>         <span class="token keyword">for</span> enc_layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>layer_stack<span class="token punctuation">:</span><span class="token number">63</span>             enc_output<span class="token punctuation">,</span> enc_slf_attn <span class="token operator">=</span> enc_layer<span class="token punctuation">(</span>enc_output<span class="token punctuation">,</span> slf_attn_mask<span class="token operator">=</span>src_mask<span class="token punctuation">)</span><span class="token number">64</span>             enc_slf_attn_list <span class="token operator">+=</span> <span class="token punctuation">[</span>enc_slf_attn<span class="token punctuation">]</span> <span class="token keyword">if</span> return_attns <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">65</span> <span class="token number">66</span>         <span class="token keyword">if</span> return_attns<span class="token punctuation">:</span><span class="token number">67</span>             <span class="token keyword">return</span> enc_output<span class="token punctuation">,</span> enc_slf_attn_list<span class="token number">68</span>         <span class="token keyword">return</span> enc_output<span class="token punctuation">,</span><span class="token number">69</span> <span class="token comment">#实现解码器的前向传播</span><span class="token number">70</span> <span class="token keyword">class</span> <span class="token class-name">Decoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">71</span>     <span class="token triple-quoted-string string">''' A decoder model with self attention mechanism. '''</span><span class="token number">72</span> <span class="token number">73</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span><span class="token number">74</span>             self<span class="token punctuation">,</span> n_trg_vocab<span class="token punctuation">,</span> d_word_vec<span class="token punctuation">,</span> n_layers<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span><span class="token number">75</span>             d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> pad_idx<span class="token punctuation">,</span> n_position<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> scale_emb<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">76</span> <span class="token number">77</span>         <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">78</span> <span class="token number">79</span>         self<span class="token punctuation">.</span>trg_word_emb <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>n_trg_vocab<span class="token punctuation">,</span> d_word_vec<span class="token punctuation">,</span> padding_idx<span class="token operator">=</span>pad_idx<span class="token punctuation">)</span><span class="token number">80</span>         self<span class="token punctuation">.</span>position_enc <span class="token operator">=</span> PositionalEncoding<span class="token punctuation">(</span>d_word_vec<span class="token punctuation">,</span> n_position<span class="token operator">=</span>n_position<span class="token punctuation">)</span><span class="token number">81</span>         self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">82</span>         self<span class="token punctuation">.</span>layer_stack <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">83</span>             DecoderLayer<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> d_inner<span class="token punctuation">,</span> n_head<span class="token punctuation">,</span> d_k<span class="token punctuation">,</span> d_v<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token number">84</span>             <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_layers<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">85</span>         self<span class="token punctuation">.</span>layer_norm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">)</span><span class="token number">86</span>         self<span class="token punctuation">.</span>scale_emb <span class="token operator">=</span> scale_emb<span class="token number">87</span>         self<span class="token punctuation">.</span>d_model <span class="token operator">=</span> d_model<span class="token number">88</span> <span class="token number">89</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> trg_seq<span class="token punctuation">,</span> trg_mask<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span> src_mask<span class="token punctuation">,</span> return_attns<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">90</span> <span class="token number">91</span>         dec_slf_attn_list<span class="token punctuation">,</span> dec_enc_attn_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">92</span> <span class="token number">93</span>         <span class="token comment"># -- Forward</span><span class="token number">94</span>         dec_output <span class="token operator">=</span> self<span class="token punctuation">.</span>trg_word_emb<span class="token punctuation">(</span>trg_seq<span class="token punctuation">)</span><span class="token number">95</span>         <span class="token keyword">if</span> self<span class="token punctuation">.</span>scale_emb<span class="token punctuation">:</span><span class="token number">96</span>             dec_output <span class="token operator">*=</span> self<span class="token punctuation">.</span>d_model <span class="token operator">**</span> <span class="token number">0.5</span><span class="token number">97</span>         dec_output <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>position_enc<span class="token punctuation">(</span>dec_output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">98</span>         dec_output <span class="token operator">=</span> self<span class="token punctuation">.</span>layer_norm<span class="token punctuation">(</span>dec_output<span class="token punctuation">)</span><span class="token number">99</span> <span class="token number">100</span>         <span class="token keyword">for</span> dec_layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>layer_stack<span class="token punctuation">:</span><span class="token number">101</span>             dec_output<span class="token punctuation">,</span> dec_slf_attn<span class="token punctuation">,</span> dec_enc_attn <span class="token operator">=</span> dec_layer<span class="token punctuation">(</span><span class="token number">102</span>                 dec_output<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span> slf_attn_mask<span class="token operator">=</span>trg_mask<span class="token punctuation">,</span> dec_enc_attn_mask<span class="token operator">=</span>src_mask<span class="token punctuation">)</span><span class="token number">103</span>             dec_slf_attn_list <span class="token operator">+=</span> <span class="token punctuation">[</span>dec_slf_attn<span class="token punctuation">]</span> <span class="token keyword">if</span> return_attns <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">104</span>             dec_enc_attn_list <span class="token operator">+=</span> <span class="token punctuation">[</span>dec_enc_attn<span class="token punctuation">]</span> <span class="token keyword">if</span> return_attns <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">105</span> <span class="token number">106</span>         <span class="token keyword">if</span> return_attns<span class="token punctuation">:</span><span class="token number">107</span>             <span class="token keyword">return</span> dec_output<span class="token punctuation">,</span> dec_slf_attn_list<span class="token punctuation">,</span> dec_enc_attn_list<span class="token number">108</span>         <span class="token keyword">return</span> dec_output<span class="token punctuation">,</span><span class="token number">109</span> <span class="token comment">#实现整个Transformer模型的前向传播</span><span class="token number">110</span> <span class="token keyword">class</span> <span class="token class-name">Transformer</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">111</span>     <span class="token triple-quoted-string string">''' A sequence to sequence model with attention mechanism. '''</span><span class="token number">112</span> <span class="token number">113</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span><span class="token number">114</span>             self<span class="token punctuation">,</span> n_src_vocab<span class="token punctuation">,</span> n_trg_vocab<span class="token punctuation">,</span> src_pad_idx<span class="token punctuation">,</span> trg_pad_idx<span class="token punctuation">,</span><span class="token number">115</span>             d_word_vec<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> d_model<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> d_inner<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">,</span><span class="token number">116</span>             n_layers<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> n_head<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> d_k<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> d_v<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> n_position<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">117</span>             trg_emb_prj_weight_sharing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> emb_src_trg_weight_sharing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token number">118</span>             scale_emb_or_prj<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">119</span> <span class="token number">120</span>         <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">121</span> <span class="token number">122</span>         self<span class="token punctuation">.</span>src_pad_idx<span class="token punctuation">,</span> self<span class="token punctuation">.</span>trg_pad_idx <span class="token operator">=</span> src_pad_idx<span class="token punctuation">,</span> trg_pad_idx<span class="token number">123</span> <span class="token number">124</span>         <span class="token keyword">assert</span> scale_emb_or_prj <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'emb'</span><span class="token punctuation">,</span> <span class="token string">'prj'</span><span class="token punctuation">,</span> <span class="token string">'none'</span><span class="token punctuation">]</span><span class="token number">125</span>         scale_emb <span class="token operator">=</span> <span class="token punctuation">(</span>scale_emb_or_prj <span class="token operator">==</span> <span class="token string">'emb'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> trg_emb_prj_weight_sharing <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token number">126</span>         self<span class="token punctuation">.</span>scale_prj <span class="token operator">=</span> <span class="token punctuation">(</span>scale_emb_or_prj <span class="token operator">==</span> <span class="token string">'prj'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> trg_emb_prj_weight_sharing <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token number">127</span>         self<span class="token punctuation">.</span>d_model <span class="token operator">=</span> d_model<span class="token number">128</span> <span class="token number">129</span>         self<span class="token punctuation">.</span>encoder <span class="token operator">=</span> Encoder<span class="token punctuation">(</span><span class="token number">130</span>             n_src_vocab<span class="token operator">=</span>n_src_vocab<span class="token punctuation">,</span> n_position<span class="token operator">=</span>n_position<span class="token punctuation">,</span><span class="token number">131</span>             d_word_vec<span class="token operator">=</span>d_word_vec<span class="token punctuation">,</span> d_model<span class="token operator">=</span>d_model<span class="token punctuation">,</span> d_inner<span class="token operator">=</span>d_inner<span class="token punctuation">,</span><span class="token number">132</span>             n_layers<span class="token operator">=</span>n_layers<span class="token punctuation">,</span> n_head<span class="token operator">=</span>n_head<span class="token punctuation">,</span> d_k<span class="token operator">=</span>d_k<span class="token punctuation">,</span> d_v<span class="token operator">=</span>d_v<span class="token punctuation">,</span><span class="token number">133</span>             pad_idx<span class="token operator">=</span>src_pad_idx<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">,</span> scale_emb<span class="token operator">=</span>scale_emb<span class="token punctuation">)</span><span class="token number">134</span> <span class="token number">135</span>         self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> Decoder<span class="token punctuation">(</span><span class="token number">136</span>             n_trg_vocab<span class="token operator">=</span>n_trg_vocab<span class="token punctuation">,</span> n_position<span class="token operator">=</span>n_position<span class="token punctuation">,</span><span class="token number">137</span>             d_word_vec<span class="token operator">=</span>d_word_vec<span class="token punctuation">,</span> d_model<span class="token operator">=</span>d_model<span class="token punctuation">,</span> d_inner<span class="token operator">=</span>d_inner<span class="token punctuation">,</span><span class="token number">138</span>             n_layers<span class="token operator">=</span>n_layers<span class="token punctuation">,</span> n_head<span class="token operator">=</span>n_head<span class="token punctuation">,</span> d_k<span class="token operator">=</span>d_k<span class="token punctuation">,</span> d_v<span class="token operator">=</span>d_v<span class="token punctuation">,</span><span class="token number">139</span>             pad_idx<span class="token operator">=</span>trg_pad_idx<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">,</span> scale_emb<span class="token operator">=</span>scale_emb<span class="token punctuation">)</span><span class="token number">140</span> <span class="token number">141</span>         self<span class="token punctuation">.</span>trg_word_prj <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> n_trg_vocab<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token number">142</span> <span class="token number">143</span>         <span class="token keyword">for</span> p <span class="token keyword">in</span> self<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">144</span>             <span class="token keyword">if</span> p<span class="token punctuation">.</span>dim<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">145</span>                 nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>xavier_uniform_<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token number">146</span> <span class="token number">147</span>         <span class="token keyword">assert</span> d_model <span class="token operator">==</span> d_word_vec<span class="token punctuation">,</span> \<span class="token number">148</span>         'To facilitate the residual connections<span class="token punctuation">,</span> \<span class="token number">149</span>          the dimensions of <span class="token builtin">all</span> module outputs shall be the same<span class="token punctuation">.</span>'<span class="token number">150</span> <span class="token number">151</span>         <span class="token keyword">if</span> trg_emb_prj_weight_sharing<span class="token punctuation">:</span><span class="token number">152</span>             <span class="token comment"># Share the weight between target word embedding &amp; last dense layer</span><span class="token number">153</span>             self<span class="token punctuation">.</span>trg_word_prj<span class="token punctuation">.</span>weight <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>trg_word_emb<span class="token punctuation">.</span>weight<span class="token number">154</span> <span class="token number">155</span>         <span class="token keyword">if</span> emb_src_trg_weight_sharing<span class="token punctuation">:</span><span class="token number">156</span>             self<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>src_word_emb<span class="token punctuation">.</span>weight <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>trg_word_emb<span class="token punctuation">.</span>weight<span class="token number">157</span> <span class="token number">158</span> <span class="token number">159</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> src_seq<span class="token punctuation">,</span> trg_seq<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">160</span>         src_mask <span class="token operator">=</span> get_pad_mask<span class="token punctuation">(</span>src_seq<span class="token punctuation">,</span> self<span class="token punctuation">.</span>src_pad_idx<span class="token punctuation">)</span><span class="token number">161</span>         trg_mask <span class="token operator">=</span> get_pad_mask<span class="token punctuation">(</span>trg_seq<span class="token punctuation">,</span> self<span class="token punctuation">.</span>trg_pad_idx<span class="token punctuation">)</span> <span class="token operator">&amp;</span> get_subsequent_mask<span class="token punctuation">(</span>trg_seq<span class="token punctuation">)</span><span class="token number">162</span> <span class="token number">163</span>         enc_output<span class="token punctuation">,</span> <span class="token operator">*</span>_ <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span>src_seq<span class="token punctuation">,</span> src_mask<span class="token punctuation">)</span><span class="token number">164</span>         dec_output<span class="token punctuation">,</span> <span class="token operator">*</span>_ <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>trg_seq<span class="token punctuation">,</span> trg_mask<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span> src_mask<span class="token punctuation">)</span><span class="token number">165</span>         seq_logit <span class="token operator">=</span> self<span class="token punctuation">.</span>trg_word_prj<span class="token punctuation">(</span>dec_output<span class="token punctuation">)</span><span class="token number">166</span>         <span class="token keyword">if</span> self<span class="token punctuation">.</span>scale_prj<span class="token punctuation">:</span><span class="token number">167</span>             seq_logit <span class="token operator">*=</span> self<span class="token punctuation">.</span>d_model <span class="token operator">**</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token number">168</span>         <span class="token keyword">return</span> seq_logit<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> seq_logit<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于transformer生成文章标题"><a href="#基于transformer生成文章标题" class="headerlink" title="基于transformer生成文章标题"></a>基于transformer生成文章标题</h2><h4 id="配置参数信息"><a href="#配置参数信息" class="headerlink" title="配置参数信息"></a>配置参数信息</h4><p>首先，我们基于上述的transformer框架，配置模型参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token triple-quoted-string string">"""2 配置参数信息3 """</span><span class="token number">4</span> <span class="token keyword">import</span> os<span class="token number">5</span> <span class="token keyword">import</span> torch<span class="token number">6</span> <span class="token number">7</span> Config <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">8</span>     <span class="token string">"model_path"</span><span class="token punctuation">:</span> <span class="token string">"output"</span><span class="token punctuation">,</span><span class="token number">9</span>     <span class="token string">"input_max_length"</span><span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span><span class="token number">10</span>     <span class="token string">"output_max_length"</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token number">11</span>     <span class="token string">"epoch"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token number">12</span>     <span class="token string">"batch_size"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span><span class="token number">13</span>     <span class="token string">"optimizer"</span><span class="token punctuation">:</span> <span class="token string">"adam"</span><span class="token punctuation">,</span><span class="token number">14</span>     <span class="token string">"learning_rate"</span><span class="token punctuation">:</span><span class="token number">1e-3</span><span class="token punctuation">,</span><span class="token number">15</span>     <span class="token string">"seed"</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">16</span>     <span class="token string">"vocab_size"</span><span class="token punctuation">:</span><span class="token number">6219</span><span class="token punctuation">,</span><span class="token number">17</span>     <span class="token string">"vocab_path"</span><span class="token punctuation">:</span><span class="token string">"vocab.txt"</span><span class="token punctuation">,</span><span class="token number">18</span>     <span class="token string">"train_data_path"</span><span class="token punctuation">:</span> <span class="token string">"sample_data.json"</span><span class="token punctuation">,</span><span class="token number">19</span>     <span class="token string">"valid_data_path"</span><span class="token punctuation">:</span> <span class="token string">"sample_data.json"</span><span class="token punctuation">,</span><span class="token number">20</span>     <span class="token string">"beam_size"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token number">21</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>在这里，我们使用一份104篇包含文章内容和标题的新闻数据sample_data.json，部分示例如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"广州农业局长回应与王林蛇缠脖合影：只是玩游戏"</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"照片上王林上身着黑色透视装，下身仅穿白色内裤，右手抓了三条蛇缠在广州农业局党委书记、局长汤锦华脖子上。汤锦华称2000年与朋友一起去深圳，应邀去见王林时所拍。“那是十多年前的事了，之后再无联系” 大师着装好奇特！ "</span><span class="token number">3</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先需要加载数据集loader.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token keyword">import</span> json<span class="token number">2</span> <span class="token keyword">import</span> re<span class="token number">3</span> <span class="token keyword">import</span> os<span class="token number">4</span> <span class="token keyword">import</span> torch<span class="token number">5</span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token number">6</span> <span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token number">7</span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token number">8</span> <span class="token triple-quoted-string string">"""9 数据加载10 """</span><span class="token number">11</span> <span class="token keyword">class</span> <span class="token class-name">DataGenerator</span><span class="token punctuation">:</span><span class="token number">12</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_path<span class="token punctuation">,</span> config<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">13</span>         self<span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token number">14</span>         self<span class="token punctuation">.</span>logger <span class="token operator">=</span> logger<span class="token number">15</span>         self<span class="token punctuation">.</span>path <span class="token operator">=</span> data_path<span class="token number">16</span>         self<span class="token punctuation">.</span>vocab <span class="token operator">=</span> load_vocab<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"vocab_path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">17</span>         self<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"vocab_size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">)</span><span class="token number">18</span>         self<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"pad_idx"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span><span class="token string">"[PAD]"</span><span class="token punctuation">]</span><span class="token number">19</span>         self<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"start_idx"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span><span class="token string">"[CLS]"</span><span class="token punctuation">]</span><span class="token number">20</span>         self<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"end_idx"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span><span class="token string">"[SEP]"</span><span class="token punctuation">]</span><span class="token number">21</span>         self<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">22</span> <span class="token number">23</span>     <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">24</span>         self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">25</span>         <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token number">26</span>             <span class="token keyword">for</span> i<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">27</span>                 line <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token number">28</span>                 title <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token number">29</span>                 content <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token number">30</span>                 self<span class="token punctuation">.</span>prepare_data<span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token number">31</span>         <span class="token keyword">return</span><span class="token number">32</span> <span class="token number">33</span>     <span class="token comment">#文本到对应的index，头尾分别加入[cls]和[sep]</span><span class="token number">34</span>     <span class="token keyword">def</span> <span class="token function">encode_sentence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">,</span> max_length<span class="token punctuation">,</span> with_cls_token<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> with_sep_token<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">35</span>         input_id <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">36</span>         <span class="token keyword">if</span> with_cls_token<span class="token punctuation">:</span><span class="token number">37</span>             input_id<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span><span class="token string">"[CLS]"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">38</span>         <span class="token keyword">for</span> char <span class="token keyword">in</span> text<span class="token punctuation">:</span><span class="token number">39</span>             input_id<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>get<span class="token punctuation">(</span>char<span class="token punctuation">,</span> self<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span><span class="token string">"[UNK]"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">40</span>         <span class="token keyword">if</span> with_sep_token<span class="token punctuation">:</span><span class="token number">41</span>             input_id<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span><span class="token string">"[SEP]"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">42</span>         input_id <span class="token operator">=</span> self<span class="token punctuation">.</span>padding<span class="token punctuation">(</span>input_id<span class="token punctuation">,</span> max_length<span class="token punctuation">)</span><span class="token number">43</span>         <span class="token keyword">return</span> input_id<span class="token number">44</span> <span class="token number">45</span>     <span class="token comment">#补齐或截断输入的序列，使其可以在一个batch内运算</span><span class="token number">46</span>     <span class="token keyword">def</span> <span class="token function">padding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_id<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">47</span>         input_id <span class="token operator">=</span> input_id<span class="token punctuation">[</span><span class="token punctuation">:</span>length<span class="token punctuation">]</span><span class="token number">48</span>         input_id <span class="token operator">+=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span><span class="token string">"[PAD]"</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">49</span>         <span class="token keyword">return</span> input_id<span class="token number">50</span> <span class="token number">51</span>     <span class="token comment">#输入输出转化成序列</span><span class="token number">52</span>     <span class="token keyword">def</span> <span class="token function">prepare_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> title<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">53</span>         input_seq <span class="token operator">=</span> self<span class="token punctuation">.</span>encode_sentence<span class="token punctuation">(</span>content<span class="token punctuation">,</span> self<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"input_max_length"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment">#输入序列</span><span class="token number">54</span>         output_seq <span class="token operator">=</span> self<span class="token punctuation">.</span>encode_sentence<span class="token punctuation">(</span>title<span class="token punctuation">,</span> self<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"output_max_length"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment">#输出序列</span><span class="token number">55</span>         gold <span class="token operator">=</span> self<span class="token punctuation">.</span>encode_sentence<span class="token punctuation">(</span>title<span class="token punctuation">,</span> self<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"output_max_length"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#不进入模型，用于计算loss</span><span class="token number">56</span>         self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>input_seq<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">57</span>                           torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>output_seq<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">58</span>                           torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>gold<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">59</span>         <span class="token keyword">return</span><span class="token number">60</span> <span class="token number">61</span>     <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">62</span>         <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token number">63</span> <span class="token number">64</span>     <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">65</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token number">66</span> <span class="token number">67</span> <span class="token comment">#加载词表</span><span class="token number">68</span> <span class="token keyword">def</span> <span class="token function">load_vocab</span><span class="token punctuation">(</span>vocab_path<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">69</span>     token_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token number">70</span>     <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>vocab_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token number">71</span>         <span class="token keyword">for</span> index<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">72</span>             token <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">73</span>             token_dict<span class="token punctuation">[</span>token<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token number">74</span>     <span class="token keyword">return</span> token_dict<span class="token number">75</span> <span class="token number">76</span> <span class="token comment">#用torch自带的DataLoader类封装数据</span><span class="token number">77</span> <span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> config<span class="token punctuation">,</span> logger<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">78</span>     dg <span class="token operator">=</span> DataGenerator<span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> config<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token number">79</span>     dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dg<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">"batch_size"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span>shuffle<span class="token punctuation">)</span><span class="token number">80</span>     <span class="token keyword">return</span> dl<span class="token number">81</span> <span class="token number">82</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token number">83</span>     <span class="token keyword">from</span> config <span class="token keyword">import</span> Config<span class="token number">84</span>     dl <span class="token operator">=</span> load_data<span class="token punctuation">(</span>Config<span class="token punctuation">[</span><span class="token string">"train_data_path"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Config<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型效果测试"><a href="#模型效果测试" class="headerlink" title="模型效果测试"></a>模型效果测试</h2><p>通过验证数据集完成模型效果评估类的定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token keyword">class</span> <span class="token class-name">Evaluator</span><span class="token punctuation">:</span><span class="token number">2</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> config<span class="token punctuation">,</span> model<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">3</span>         self<span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token number">4</span>         self<span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token number">5</span>         self<span class="token punctuation">.</span>logger <span class="token operator">=</span> logger<span class="token number">6</span>         self<span class="token punctuation">.</span>valid_data <span class="token operator">=</span> load_data<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"valid_data_path"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> logger<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token number">7</span>         self<span class="token punctuation">.</span>reverse_vocab <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> self<span class="token punctuation">.</span>valid_data<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">8</span>         self<span class="token punctuation">.</span>translator <span class="token operator">=</span> Translator<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">,</span><span class="token number">9</span>                                      config<span class="token punctuation">[</span><span class="token string">"beam_size"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span>                                      config<span class="token punctuation">[</span><span class="token string">"output_max_length"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">11</span>                                      config<span class="token punctuation">[</span><span class="token string">"pad_idx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">12</span>                                      config<span class="token punctuation">[</span><span class="token string">"pad_idx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">13</span>                                      config<span class="token punctuation">[</span><span class="token string">"start_idx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">14</span>                                      config<span class="token punctuation">[</span><span class="token string">"end_idx"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">15</span> <span class="token number">16</span>     <span class="token keyword">def</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">17</span>         self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"开始测试第%d轮模型效果："</span> <span class="token operator">%</span> epoch<span class="token punctuation">)</span><span class="token number">18</span>         self<span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">19</span>         self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">20</span>         self<span class="token punctuation">.</span>stats_dict <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token comment"># 用于存储测试结果</span><span class="token number">21</span>         <span class="token keyword">for</span> index<span class="token punctuation">,</span> batch_data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>valid_data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">22</span>             input_seqs<span class="token punctuation">,</span> target_seqs<span class="token punctuation">,</span> gold <span class="token operator">=</span> batch_data<span class="token number">23</span>             <span class="token keyword">for</span> input_seq <span class="token keyword">in</span> input_seqs<span class="token punctuation">:</span><span class="token number">24</span>                 generate <span class="token operator">=</span> self<span class="token punctuation">.</span>translator<span class="token punctuation">.</span>translate_sentence<span class="token punctuation">(</span>input_seq<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">25</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入："</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>decode_seq<span class="token punctuation">(</span>input_seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">26</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输出："</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>decode_seq<span class="token punctuation">(</span>generate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">27</span>                 <span class="token keyword">break</span><span class="token number">28</span>         <span class="token keyword">return</span><span class="token number">29</span> <span class="token number">30</span>     <span class="token keyword">def</span> <span class="token function">decode_seq</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">31</span>         <span class="token keyword">return</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>reverse_vocab<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> idx <span class="token keyword">in</span> seq<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型主程序"><a href="#模型主程序" class="headerlink" title="模型主程序"></a>模型主程序</h2><p>整个模型我们通过执行main.py文件运行模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token triple-quoted-string string">"""2 模型训练主程序3 """</span><span class="token number">4</span> <span class="token keyword">def</span> <span class="token function">choose_optimizer</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">5</span>     optimizer <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">"optimizer"</span><span class="token punctuation">]</span><span class="token number">6</span>     learning_rate <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">"learning_rate"</span><span class="token punctuation">]</span><span class="token number">7</span>     <span class="token keyword">if</span> optimizer <span class="token operator">==</span> <span class="token string">"adam"</span><span class="token punctuation">:</span><span class="token number">8</span>         <span class="token keyword">return</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token number">9</span>     <span class="token keyword">elif</span> optimizer <span class="token operator">==</span> <span class="token string">"sgd"</span><span class="token punctuation">:</span><span class="token number">10</span>         <span class="token keyword">return</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token number">11</span> <span class="token number">12</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">13</span>     <span class="token comment">#创建保存模型的目录</span><span class="token number">14</span>     <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"model_path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">15</span>         os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"model_path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">16</span>     <span class="token comment">#加载模型</span><span class="token number">17</span>     logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>config<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">18</span>     model <span class="token operator">=</span> Transformer<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"vocab_size"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">"vocab_size"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">19</span>                         d_word_vec<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> d_model<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> d_inner<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">20</span>                         n_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n_head<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> d_k<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> d_v<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">21</span>                         <span class="token punctuation">)</span><span class="token number">22</span>     <span class="token comment"># 标识是否使用gpu</span><span class="token number">23</span>     cuda_flag <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">24</span>     <span class="token keyword">if</span> cuda_flag<span class="token punctuation">:</span><span class="token number">25</span>         logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"gpu可以使用，迁移模型至gpu"</span><span class="token punctuation">)</span><span class="token number">26</span>         model <span class="token operator">=</span> model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">27</span>     <span class="token comment">#加载优化器</span><span class="token number">28</span>     optimizer <span class="token operator">=</span> choose_optimizer<span class="token punctuation">(</span>config<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token number">29</span>     <span class="token comment"># 加载训练数据</span><span class="token number">30</span>     train_data <span class="token operator">=</span> load_data<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"train_data_path"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token number">31</span>     <span class="token comment">#加载效果测试类</span><span class="token number">32</span>     evaluator <span class="token operator">=</span> Evaluator<span class="token punctuation">(</span>config<span class="token punctuation">,</span> model<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token number">33</span>     <span class="token comment">#加载loss</span><span class="token number">34</span>     loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span>ignore_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">35</span>     <span class="token comment">#训练</span><span class="token number">36</span>     <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"epoch"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">37</span>         epoch <span class="token operator">+=</span> <span class="token number">1</span><span class="token number">38</span>         model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">39</span>         <span class="token keyword">if</span> cuda_flag<span class="token punctuation">:</span><span class="token number">40</span>             model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">41</span>         logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"epoch %d begin"</span> <span class="token operator">%</span> epoch<span class="token punctuation">)</span><span class="token number">42</span>         train_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">43</span>         <span class="token keyword">for</span> index<span class="token punctuation">,</span> batch_data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">44</span>             <span class="token keyword">if</span> cuda_flag<span class="token punctuation">:</span><span class="token number">45</span>                 batch_data <span class="token operator">=</span> <span class="token punctuation">[</span>d<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> batch_data<span class="token punctuation">]</span><span class="token number">46</span>             input_seq<span class="token punctuation">,</span> target_seq<span class="token punctuation">,</span> gold <span class="token operator">=</span> batch_data<span class="token number">47</span> <span class="token number">48</span>             pred <span class="token operator">=</span> model<span class="token punctuation">(</span>input_seq<span class="token punctuation">,</span> target_seq<span class="token punctuation">)</span><span class="token number">49</span>             loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> gold<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">50</span> <span class="token number">51</span>             train_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">52</span>             loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">53</span>             optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">54</span>             optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">55</span> <span class="token number">56</span>         logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"epoch average loss: %f"</span> <span class="token operator">%</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">57</span>         evaluator<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token number">58</span>     model_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"model_path"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"epoch_%d.pth"</span> <span class="token operator">%</span> epoch<span class="token punctuation">)</span><span class="token number">59</span>     torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model_path<span class="token punctuation">)</span><span class="token number">60</span>     <span class="token keyword">return</span><span class="token number">61</span> <span class="token number">62</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token number">63</span>     main<span class="token punctuation">(</span>Config<span class="token punctuation">)</span><span class="token number">64</span> <span class="token comment">#输出示例</span><span class="token number">65</span> 输入： 路透社消息，一艘从利比亚横渡地中海开往意大利的偷渡船倾覆，约<span class="token number">400</span>人身亡。船上载有<span class="token number">550</span>多名偷渡客，许多是年轻人和儿童，大部分来自撒哈拉以南非洲地区。事发后意大利海防部队展开搜救，获救的<span class="token number">150</span>人被送往意大利南部港口。<span class="token punctuation">[</span>UNK<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token punctuation">[</span>PAD<span class="token punctuation">]</span><span class="token number">66</span> 输出： <span class="token punctuation">[</span>CLS<span class="token punctuation">]</span>从利叒FII意大利：<span class="token number">400</span>偷渡客沉船身亡<span class="token punctuation">[</span>SEP<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/338817680">知乎: Transformer模型详解(图解最完整版)</a></li><li><a href="https://mp.weixin.qq.com/s/Pze538g8CK4hDeaTKNi5Zg">微信: Transformer原理详解</a></li><li><a href="https://mp.weixin.qq.com/s/ayrwj3rAZTCowFp0S4CEUQ">微信: 看完还不懂什么是Transformer及其注意力机制我直接吃！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Transform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transform </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大模型基础知识点</title>
      <link href="/2025/03/13/da-mo-xing-ji-chu-zhi-shi-dian/"/>
      <url>/2025/03/13/da-mo-xing-ji-chu-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="神经网络的类型"><a href="#神经网络的类型" class="headerlink" title="神经网络的类型"></a>神经网络的类型</h1><h2 id="前馈神经网络（FNN）"><a href="#前馈神经网络（FNN）" class="headerlink" title="前馈神经网络（FNN）"></a>前馈神经网络（FNN）</h2><p>前馈神经网络 (FNN) 是最简单的人工神经网络，其中信息只朝一个方向移动，即向前移动，从输入节点，经过隐藏节点（如果有），最后到达输出节点。网络中没有循环或环路，因此是一种简单的架构。<br><img src="/image.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 大模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海思模型部署笔记</title>
      <link href="/2025/02/17/hai-si-yi-zhi-bi-ji/"/>
      <url>/2025/02/17/hai-si-yi-zhi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="海思技术支持"><a href="#海思技术支持" class="headerlink" title="海思技术支持"></a>海思技术支持</h1><p><a href="https://developers.hisilicon.com/">海思技术论坛</a><br><a href="https://www.hiascend.com/feedback">升腾社区提问</a></p><h1 id="YOLO-v5s后处理"><a href="#YOLO-v5s后处理" class="headerlink" title="YOLO-v5s后处理"></a>YOLO-v5s后处理</h1><p>x,y,w,h,score_box,score_label_1,score_label_2,…,score_label_n</p><h1 id="YuShiQi目标检测后处理"><a href="#YuShiQi目标检测后处理" class="headerlink" title="YuShiQi目标检测后处理"></a>YuShiQi目标检测后处理</h1><p>训练代码:10服务器:\cvz\luofurong\181_backup\gitlab\face_recognition_algo\libfacedetection\tasks\task1\onnx<br>开源代码:<a href="https://github.com/ShiqiYu/libfacedetection">https://github.com/ShiqiYu/libfacedetection</a></p><p>特征图尺寸计算:</p><p>fm_2th &#x3D; 40x40<br>fm_3th &#x3D; 20x20 (第一个特征图)<br>fm_4th &#x3D; 10x10 (第二个特征图)<br>fm_5th &#x3D; 5x5 (第三个特征图)<br>fm_6th &#x3D; 2x2 (第四个特征图)</p><p>每个特征图的anchor数量:</p><p>20x20特征图:每个点3个anchor (10,16,24),共1200个,每20x20个box的缩放系数分别为10,16,24<br>10x10特征图:每个点2个anchor (32,48),共200个,每10下0个box的缩放系数分别为32,48<br>5x5特征图:每个点2个anchor (64,96),共50个,每10x10个box的缩放系数分别为32,48<br>2x2特征图:每个点3个anchor (128,192,256),共12个,每2x2个box的缩放系数分别为32,48</p><p>1462个anchor : 20x20 20x20  20x20 5x5 5x5 10x10 10x10 2x2 2x2 2x2<br>                10    16    24    32  48    64   96   128 192 256<br>总anchor数量 &#x3D; 1200 + 200 + 50 + 12 &#x3D; 1462个anchor boxes</p><p>每个人脸框的参数:box:x,y,w,h;keypoints:[x,y]*5,共14个参数</p><p>conf分支输出的两个置信度分别为背景置信度和人脸置信度</p><h1 id="关键的检测训练代码和量化代码"><a href="#关键的检测训练代码和量化代码" class="headerlink" title="关键的检测训练代码和量化代码"></a>关键的检测训练代码和量化代码</h1><p>训练:10服务器:\cvz\luofurong\181_backup\gitlab\dsm_algo\train_face_landmark<br>训练使用BGR图像</p><p>量化:103服务器::\rknn_toolkit_common\test\zhr_test\face68</p><h1 id="API使用注意事项"><a href="#API使用注意事项" class="headerlink" title="API使用注意事项"></a>API使用注意事项</h1><h2 id="svp-acl-mdl-get-output-dims"><a href="#svp-acl-mdl-get-output-dims" class="headerlink" title="svp_acl_mdl_get_output_dims"></a>svp_acl_mdl_get_output_dims</h2><p><code>svp_acl_mdl_get_output_dims</code>函数在调用时最好将dims进行初始化,否则如果输出的维度不是4,例如回归模型,此时空闲维度信息会被任意值填充</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">svp_acl_mdl_io_dims aclDims<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>aclDims<span class="token punctuation">.</span>dims<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation">(</span>aclDims<span class="token punctuation">.</span>dims<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="atc工具使用注意事项"><a href="#atc工具使用注意事项" class="headerlink" title="atc工具使用注意事项"></a>atc工具使用注意事项</h1><h2 id="导出模型在板端推理时效果较差"><a href="#导出模型在板端推理时效果较差" class="headerlink" title="导出模型在板端推理时效果较差"></a>导出模型在板端推理时效果较差</h2><h2 id="ldw推理结果有点像车道线-但是不准"><a href="#ldw推理结果有点像车道线-但是不准" class="headerlink" title="ldw推理结果有点像车道线,但是不准"></a>ldw推理结果有点像车道线,但是不准</h2><p>编译模式配置时,量化后的数据bit位宽,不影响权重量化的bit位宽,权重固定是8bit量化。使用16bit后效果正常。配置方法:<br>compile_mode&#x3D;1</p><h2 id="dsm的面部关键点检测模型板端推理时得到的结果全部为0"><a href="#dsm的面部关键点检测模型板端推理时得到的结果全部为0" class="headerlink" title="dsm的面部关键点检测模型板端推理时得到的结果全部为0"></a>dsm的面部关键点检测模型板端推理时得到的结果全部为0</h2><ul><li>排查onnx模型,使得onnx模型推理正常<br>原来的onnx类型的dsm面部关键点检测模型中包含了两个输出,但是一个没有使用,尝试遍历素有输出节点并删除无用输出节点后,atc转换模型时并未显示异常提示,但是转换为om模型后在板端推理结果全为0,初步检查发现,删除无用输出节点后的onnx模型无法在pc上正常推理,使用netron打开后发现无用输出节点的上一个节点属性中有输出节点,但是实际该节点已经被删除,即:节点没有删除干净。</li></ul><p>onnx推理异常报错如下:<br>Traceback (most recent call last):<br>  File “script&#x2F;predict_onnx.py”, line 89, in <module><br>    landmark &#x3D; net.forward(to_numpy(img))<br>  File “script&#x2F;predict_onnx.py”, line 70, in forward<br>    self.output_name, input_feed&#x3D;input_feed)<br>ValueError: not enough values to unpack (expected 2, got 1)</p><ul><li>排查哪一层之后的输出有问题<br>使用 cutoff_layer指定那一层删除,然后看剩余网络的输出</li></ul><p>add5和add6之间异常:add5输入正常,add6的输入全为0</p><p>Conv_20和add6之间异常,Conv_20输入正常,add6输入全为0</p><ul><li>排查模型转换问题</li></ul><p>关闭模型,forward_quantization_option&#x3D;0,此时模型大小未变,结果仍旧全为0</p><p>输出数据的类型为svp_acl_format中的 SVP_ACL_FORMAT_ND &#x3D; 2,文档提示  ND:表示支持任意格式,仅有Square、Tanh等这些单输入对自身处理的算子<br>外,其它需要慎用。</p><ul><li><p>尝试使用较多的量化图像<br>无效</p></li><li><p>最终解决办法<br>在动态aipp的情况下需要配置归一化参数<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B5%B7%E6%80%9D%E7%A7%BB%E6%A4%8D%E7%AC%94%E8%AE%B0/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17422589229639.png" alt="alt text"></p></li><li><p>使用MSIT工具排查OM模型精度问题<br><a href="https://www.hiascend.com/forum/thread-0219168838054191038-1-1.html">使用MSIT工具排查OM模型精度问题</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/ascend/msit.git<span class="token comment"># 1. git pull origin 更新最新代码 </span><span class="token builtin class-name">cd</span> msit/msit<span class="token comment"># 2. 安装 msit 包</span>pip <span class="token function">install</span> <span class="token builtin class-name">.</span><span class="token comment"># 3. 通过msit install 命令,安装所需组件,例如需要安装 benchmark 和 compare 时:</span>msit <span class="token function">install</span> benchmark compare<span class="token comment"># 4. 如果需要安装所有组件,可以使用 install all:</span>msit <span class="token function">install</span> all<span class="token comment"># 5. 安装之后可以使用 msit check 命令检查安装是否成功:</span>msit check all <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="mindcmd使用"><a href="#mindcmd使用" class="headerlink" title="mindcmd使用"></a>mindcmd使用</h1><ul><li><p>通过dump数据分析模型精度<br>参考文档：《MindCmd 使用指南.pdf》</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mindcmd compare <span class="token parameter variable">-l</span> /wsy_10/.geiyiren/HQ_Hi3519DV500/model_val/.cache/dataset/dsm_keypoints_01/dump_om/20250309103129/0/dsm_keypoints_val/38/0 <span class="token parameter variable">-r</span> /wsy_10/.geiyiren/HQ_Hi3519DV500/model_val/.cache/test/dump_onnx/2025031003282183_ops  <span class="token parameter variable">-out</span> /wsy_10/.geiyiren/HQ_Hi3519DV500/model_val/.cache/test/compare  <span class="token parameter variable">-q</span> /wsy_10/.geiyiren/HQ_Hi3519DV500/model_val/.cache/models/dsm/keypoints/dsm_keypoints_val.json <span class="token parameter variable">-om</span> /wsy_10/.geiyiren/HQ_Hi3519DV500/model_val/.cache/models/dsm/keypoints/dsm_keypoints_val.om<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>模型输入npy或bin文件生成</p><pre class="line-numbers language-none"><code class="language-none">mindcmd preprocess --model_input_shape 1,3,112,112 --aipp &#x2F;wsy_10&#x2F;.geiyiren&#x2F;HQ_Hi3519DV500&#x2F;model_val&#x2F;.cache&#x2F;test&#x2F;aipp_pub.cfg -i &#x2F;wsy_10&#x2F;.geiyiren&#x2F;HQ_Hi3519DV500&#x2F;model_val&#x2F;.cache&#x2F;test&#x2F;imglist.txt  -o &#x2F;wsy_10&#x2F;.geiyiren&#x2F;HQ_Hi3519DV500&#x2F;model_val&#x2F;.cache&#x2F;test&#x2F;preprocess_output&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>onnx模型dumo数据生成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mindcmd gt onnx <span class="token parameter variable">-m</span> /wsy_10/.geiyiren/HQ_Hi3519DV500/model_val/models/dsm/keypoints/temp/dsm_keypoints.onnx <span class="token parameter variable">-i</span> /wsy_10/.geiyiren/HQ_Hi3519DV500/model_val/.cache/test/preprocess_output/input0_validation_npy_FP32.txt <span class="token parameter variable">-o</span> /wsy_10/.geiyiren/HQ_Hi3519DV500/model_val/.cache/test/dump_onnx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>om模型生成dump数据(pc仿真)</p><pre class="line-numbers language-none"><code class="language-none">app funcsim -m ..&#x2F;models&#x2F;dsm&#x2F;keypoints&#x2F;dsm_keypoints_val_original.om  -i &#x2F;wsy_10&#x2F;.geiyiren&#x2F;HQ_Hi3519DV500&#x2F;model_val&#x2F;.cache&#x2F;test&#x2F;preprocess_output&#x2F;input0_validation_bin_U8.txt dump --output &#x2F;wsy_10&#x2F;.geiyiren&#x2F;HQ_Hi3519DV500&#x2F;model_val&#x2F;.cache&#x2F;test&#x2F;dump_om<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t dt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dt <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>output_data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ai<span class="token double-colon punctuation">::</span>OutputDataSt<span class="token operator">*</span> ds <span class="token operator">=</span> data<span class="token punctuation">.</span>output_data<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>    feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">=</span> ds<span class="token operator">-></span>dims<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span>TAG <span class="token string">"feature_size_h_[dt] = %d\n"</span><span class="token punctuation">,</span> feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">=</span> ds<span class="token operator">-></span>dims<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span>TAG <span class="token string">"feature_size_w_[dt] = %d\n"</span><span class="token punctuation">,</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span>TAG <span class="token string">"feature_length_ = %d\n"</span><span class="token punctuation">,</span> feature_length_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span>TAG <span class="token string">"num_classes_ = %d\n"</span><span class="token punctuation">,</span> num_classes_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span>TAG <span class="token string">"shrink_channels_ = %f\n"</span><span class="token punctuation">,</span> shrink_channels_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span><span class="token operator">*</span>        ptr <span class="token operator">=</span> ds<span class="token operator">-></span>output<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">float</span><span class="token operator">*</span> center_x <span class="token operator">=</span> ptr <span class="token operator">+</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> feature_length_ <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token operator">*</span> center_y <span class="token operator">=</span> ptr <span class="token operator">+</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> feature_length_ <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token operator">*</span> width <span class="token operator">=</span> ptr <span class="token operator">+</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> feature_length_ <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token operator">*</span> height <span class="token operator">=</span> ptr <span class="token operator">+</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> feature_length_ <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token operator">*</span> pred_conf <span class="token operator">=</span> ptr <span class="token operator">+</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> feature_length_ <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token operator">*</span> pred_cls<span class="token punctuation">[</span>num_classes_<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cls <span class="token operator">&lt;</span> num_classes_<span class="token punctuation">;</span> cls<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            pred_cls<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> ptr <span class="token operator">+</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> feature_length_ <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> cls<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> feature_size_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> h <span class="token operator">*</span> feature_size_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>pred_conf <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">></span> min_score_<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">float</span> max_cls_conf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span>   max_cls_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cls <span class="token operator">&lt;</span> num_classes_<span class="token punctuation">;</span> cls<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>max_cls_conf <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>pred_cls<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            max_cls_conf <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>pred_cls<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                            max_cls_index <span class="token operator">=</span> cls<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    tmp_box<span class="token punctuation">.</span>anchor <span class="token operator">=</span> i<span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>feature_pointI <span class="token operator">=</span> w<span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>feature_pointJ <span class="token operator">=</span> h<span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>pred_conf <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>pred_conf <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>pred_cls <span class="token operator">=</span> labels_<span class="token punctuation">[</span>max_cls_index<span class="token punctuation">]</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>pred_cls_idx <span class="token operator">=</span> max_cls_index<span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>xmin <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>center_x <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>ymin <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>center_y <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>width <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>height <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>xmin <span class="token operator">=</span> <span class="token punctuation">(</span>tmp_box<span class="token punctuation">.</span>xmin <span class="token operator">*</span> <span class="token number">2.</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">+</span> tmp_box<span class="token punctuation">.</span>feature_pointI<span class="token punctuation">)</span> <span class="token operator">*</span> shrink_channels_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>ymin <span class="token operator">=</span> <span class="token punctuation">(</span>tmp_box<span class="token punctuation">.</span>ymin <span class="token operator">*</span> <span class="token number">2.</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">+</span> tmp_box<span class="token punctuation">.</span>feature_pointJ<span class="token punctuation">)</span> <span class="token operator">*</span> shrink_channels_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token punctuation">(</span>tmp_box<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>tmp_box<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> anchor_w_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">[</span>tmp_box<span class="token punctuation">.</span>anchor<span class="token punctuation">]</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token punctuation">(</span>tmp_box<span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>tmp_box<span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> anchor_h_<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token punctuation">[</span>tmp_box<span class="token punctuation">.</span>anchor<span class="token punctuation">]</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>xmin <span class="token operator">=</span> tmp_box<span class="token punctuation">.</span>xmin <span class="token operator">-</span> <span class="token keyword">int</span><span class="token punctuation">(</span>tmp_box<span class="token punctuation">.</span>width  <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp_box<span class="token punctuation">.</span>ymin <span class="token operator">=</span> tmp_box<span class="token punctuation">.</span>ymin <span class="token operator">-</span> <span class="token keyword">int</span><span class="token punctuation">(</span>tmp_box<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    real_available_boxes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp_box<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="已经设置设备和context，但仍旧报错的解决办法"><a href="#已经设置设备和context，但仍旧报错的解决办法" class="headerlink" title="已经设置设备和context，但仍旧报错的解决办法"></a>已经设置设备和context，但仍旧报错的解决办法</h1><p>错误提示如下：<br>[Func]:svp_npu_runtime_impl_execute_model [Line]:1773 [Info]:Error, get cur ctx failed when execute model, please set device or create context first<br>解决办法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// create context (set current)</span>svp_acl_error err_ret <span class="token operator">=</span> <span class="token function">svp_acl_rt_set_current_context</span><span class="token punctuation">(</span>context_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err_ret <span class="token operator">!=</span> SVP_ACL_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ERROR_LOG</span><span class="token punctuation">(</span><span class="token string">"acl create context failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> FAILED<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要在每次推理前设置上下文</p><h1 id="数据量化和权重量化"><a href="#数据量化和权重量化" class="headerlink" title="数据量化和权重量化"></a>数据量化和权重量化</h1><ul><li><p>数据量化<br>数据量化是对每个待量化的层&#x2F;算子的输入数据进行统计，每个层&#x2F;算子计算出最优的一组scale和offset。数据是模型推理计算的中间结果，其范围与模型输入相关，因此需要使用一组参考输入（校准数据集）作为激励，从而记录下来待量化层&#x2F;算子的输入数据，搜索得到量化因子（scale和offset）。由于在做数据calibration的过程中，需要占用额外的存储空间（显存&#x2F;内存）来存储用于确定量化因子的输入数据，所以对于显存&#x2F;内存的占用，比仅推理的过程要高，额外占用空间的大小和calibration过程中的batch_size* batch_num正相关。<br>量化的计算公式：<br>$$<br>\mathrm{data}<em>{\mathrm{int}8}&#x3D;\mathrm{clip}</em>{\mathrm{int}8}\left(\mathrm{round}(\frac{\mathrm{data}_{\mathrm{float}}}{\mathrm{scale}})+\mathrm{offset}\right)<br>$$<br>其中,<br>$$<br>\begin{align}<br>\mathrm{scale}\in\left[\mathrm{FLT_EPSILON,}\frac1{\mathrm{FLT_EPSILON}}\right],\mathrm{FLT_EPSILON}\approx1.1920929\times10^{-7}<br>\end{align}<br>$$<br>$$<br>\mathrm{offset}\in[-128,127]<br>$$</p></li><li><p>权重量化<br>训练后模型的权值已经确定，数值的范围也已经确定，因此直接根据权值的数据范围进行量化。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 海思 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 海思 </tag>
            
            <tag> 模型部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于卡尔曼滤波算法的车道线曲线参数跟踪</title>
      <link href="/2024/12/18/ji-yu-qia-er-man-lu-bo-suan-fa-de-che-dao-xian-qu-xian-can-shu-gen-zong/"/>
      <url>/2024/12/18/ji-yu-qia-er-man-lu-bo-suan-fa-de-che-dao-xian-qu-xian-can-shu-gen-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="曲率"><a href="#曲率" class="headerlink" title="曲率"></a>曲率</h2><p>曲率$k$可以表示为曲线长度随着角度变化的快慢，即：<br>$$<br>\begin{equation}<br>k&#x3D;\lim_{\alpha\to0}\left|\frac{\Delta\alpha}{\Delta s}\right|<br>\end{equation}<br>$$<br>$$<br>\begin{equation}<br>k &#x3D; \frac{d\alpha}{ds}<br>\end{equation}<br>$$</p><p>其中，$\alpha$为曲线的切线与x轴的夹角，$s$为曲线的长度。</p><p>首先给出结论，然后再进行详细推导。曲率半径$R$可以表示为：<br>$$<br>\begin{equation}<br>R&#x3D;\frac1k&#x3D;\frac{\left[1+\left(\frac{dy}{dx}\right)^2\right]^{\frac32}}{\frac{d^2y}{dx^2}}&#x3D;\frac{\left[1+\left(f^{\prime}\right)^2\right]^{\frac32}}{f^{\prime\prime}}<br>\end{equation}<br>$$</p><p>下面进行详细的推导，首先需要知道曲线的弧长公式，我们将曲线的方程表示为$y&#x3D;f(x)$：</p><p>曲线弧长的计算公式为：<br>$$<br>\begin{equation}<br>ds&#x3D;\sqrt{(dx)^2+(dy)^2}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>dy&#x3D;y^{\prime}dx<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>ds&#x3D;\sqrt{1+(y^{\prime})^2}dx<br>\end{equation}<br>$$<br>记住上述公式下面要用</p><blockquote><p>进一步解释，弧长的计算可以通过积分得到：<br>$$<br>s&#x3D;\int\sqrt{1+(y^{\prime})^2}dx<br>$$</p></blockquote><p>曲线的方程表示为$y&#x3D;f(x)$，且$f(x)$具有二阶导数。因为$tan(\alpha)&#x3D;y^{\prime}$,设$-\pi&#x2F;2&lt;\alpha&lt;\pi&#x2F;2$,则：<br>$$<br>\begin{equation}<br>\alpha&#x3D;\arctan(y^{\prime})<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>\frac{d\alpha}{dx}&#x3D;\left(arctany^{\prime}\right)^{\prime}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>d\alpha&#x3D;\left(\arctan y^{\prime}\right)^{\prime}dx&#x3D;\frac{y^{\prime\prime}}{1+{y^{\prime}}^2}dx<br>\end{equation}<br>$$</p><p>则：</p><p>$$<br>\begin{equation}<br>k &#x3D; \frac{d\alpha}{ds}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>\frac{d\alpha}{ds}&#x3D;\frac{\frac{y^{\prime\prime}}{1+{y^{\prime}}^2}dx}{\sqrt{1+(y^{\prime})^2}dx} \\<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>\frac{d\alpha}{ds}&#x3D;\frac{\frac{y^{\prime\prime}}{1+{y^{\prime}}^2}}{\sqrt{1+(y^{\prime})^2}} \\<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>\mathbf{k}&#x3D;\frac{d\alpha}{ds}&#x3D;\frac{y^{\prime\prime}}{\left[1+\left(y^{\prime}\right)^{2}\right]^{\frac32}}<br>\end{equation}<br>$$</p><p>可以看出，曲率$k$与曲线的方程$y&#x3D;f(x)$有关，因此，我们可以通过计算曲线的方程来得到曲率$k$。</p><h2 id="曲率和横摆角速度的关系"><a href="#曲率和横摆角速度的关系" class="headerlink" title="曲率和横摆角速度的关系"></a>曲率和横摆角速度的关系</h2><p>按照惯例，先给出结论，再进行推导。</p><p>$$<br>\begin{equation}<br>k &#x3D; \frac{d\alpha}{ds} \approx \frac{\omega}{v_{x}}<br>\end{equation}<br>$$</p><p>其中，$\omega$为横摆角速度，$v_{x}$为车辆行驶速度(纵向)</p><p>在自动驾驶系统中，通过测量车辆的速度和轨迹的曲率，可以预测和控制车辆的横摆角速度，确保车辆稳定地沿着曲线行驶。因此，曲率与横摆角速度之间的关系在自动驾驶系统中具有重要意义。</p><p>由于车辆直线行驶时，车辆的运动轨迹近乎为圆形，且半径很大，车辆在短时间内走过的弧长和车辆行驶的距离基本相等，因此可以近似认为：</p><p>$$<br>\begin{equation}<br>ds\approx dx<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>\frac{d\alpha}{dx}\approx\frac{d\alpha}{ds}<br>\end{equation}<br>$$<br>根据横摆角速度和行驶速度的定义有：</p><p>$$<br>\begin{equation}<br>\frac{d\alpha&#x2F;dt}{ds&#x2F;dt}&#x3D;\frac{\omega}{v_{x}}<br>\end{equation}<br>$$</p><p>综上可得:<br>$$<br>\begin{equation}<br>k &#x3D; \frac{d\alpha}{ds}\approx\frac{\omega}{v_{x}}<br>\end{equation}<br>$$</p><h2 id="曲率和车辆横向偏移的关系"><a href="#曲率和车辆横向偏移的关系" class="headerlink" title="曲率和车辆横向偏移的关系"></a>曲率和车辆横向偏移的关系</h2><p>假设我们有一个半径为$R$的圆弧，圆心为$O$，而车辆当前的位置为$P$，它的距离圆心$O$的原始距离为$R$，但由于某种原因，车辆相对于圆心$O$在水平和垂直方向上发生了偏移,$dx$是车辆在水平方向上的偏移量。$dy$是车辆在垂直方向上的偏移量。$R$ 是车辆原始所在圆弧的半径，即车辆到圆心$O$ 的距离。现在我们考虑车辆的实际位置与原本的圆心位置之间的关系。</p><p>假设车辆的实际位置偏移后，车辆的新位置与原本的圆心之间的几何关系如下：</p><ul><li>车辆原本的位置是$P$，它与圆心$O$的距离是$R$。</li><li>车辆实际的偏移量是$dx$(水平方向)和$dy$(垂直方向)。</li></ul><p>通过坐标系的几何关系，我们可以得到以下方程来描述这种偏移：</p><ul><li>原始情况下，车辆与圆心的距离为R。</li><li>车辆的实际位置偏移：假设车辆在经过$dx$和$dy$的偏移后，车辆与圆心的距离不再是R,而变成了一个新的距离。我们可以通过毕达哥拉斯定理来描述这个偏移。</li></ul><p>在直角坐标系中，车辆原来与圆心的距离为$R$,现在的实际位置$P^{\prime}$与圆心O的距离为新的值。因为车辆的偏移在$x$和$y$方向上是直角的，所以我们可以利用毕达哥拉斯定理计算车辆偏移后的实际距离。<br>假设车辆从原始位置偏移到新位置，我们有：</p><p>$$<br>\begin{equation}<br>\text{新距离}&#x3D;\sqrt{(R-dy)^2+(dx)^2}<br>\end{equation}<br>$$</p><p>这个新距离应该与原始的$R$保持一致。也就是说，车辆在行驶的时候无侧向滑动，那么：</p><p>$$<br>\begin{equation}<br>R^2&#x3D;(R-dy)^2+(dx)^2.<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>R^2&#x3D;R^2-2Rdy+(dy)^2+(dx)^2.<br>\end{equation}<br>$$</p><p>在车辆直线行驶时，车辆的运动轨迹近乎为圆形，且半径很大，因此$dy$很小，那么$(dy)^2$就是二阶无穷小，可以忽略不记：<br>$$<br>\begin{equation}<br>2Rdy&#x3D;(dx)^2.<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>dy&#x3D;\frac1{2R}(dx)^2<br>\end{equation}<br>$$</p><p>曲率半径和曲率的关系为：<br>$$<br>\begin{equation}<br>k&#x3D;\frac1R<br>\end{equation}<br>$$</p><p>则：</p><p>$$<br>\begin{equation}<br>dy&#x3D;\frac{1}{2}k(dx)^2<br>\end{equation}<br>$$</p><p>综和曲率和车辆横向偏移的关系以及曲率和横摆角速度的关系，我们可以得到：</p><p>$$<br>\begin{equation}<br>k &#x3D; \frac{d\alpha}{ds} \approx\frac{\omega}{v_{x}}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>dy&#x3D;\frac{1}{2}\frac{\omega}{v_{x}}(dx)^2<br>\end{equation}<br>$$</p><h1 id="泰勒展开式"><a href="#泰勒展开式" class="headerlink" title="泰勒展开式"></a>泰勒展开式</h1><p>若函数$f(x)$在包含$x0$的某个闭区间$[a,b]$上具有$n$阶导数，且在开区间$(a,b)$上具有$(n+1)$阶导数，则对闭区间$[a,b]$上任意一点$x$，成立下式：</p><p>$$<br>\begin{equation}<br>f\left(x\right)&#x3D;\frac{f\left(x_{0}\right)}{0!}+\frac{f^{\prime}(x_{0})}{1!}\left(x-x_{0}\right)+\frac{f^{\prime\prime}(x_{0})}{2!}\left(x-x_{0}\right)^{2}+…+\frac{f^{(n)}\left(x_{0}\right)}{n!}\left(x-x_{0}\right)^{n}+R_{n}(x)<br>\end{equation}<br>$$</p><p>其中，$f^{(n)}(x)$表示$f(x)$的$n$阶导数，等号后的多项式称为函数$f(x)$在$x0$处的泰勒展开式，剩余的$Rn(x)$是泰勒公式的余项，是$(x-x0)n$的高阶无穷小。<br>对于三次函数，余项$R_n$为零，因为三次函数的四阶及以上导数为零。因此，泰勒展开式在此情形下无截断误差。</p><p>增量形式的泰勒展开式是一种用于描述一个函数在某点附近的增量变化的数学方法。对于一个可微函数$f(x)$,假设$x_0$是某个已知的点，$d_{x}$是从$x_0$到$x_0+d_{x}$的增量，增量的泰勒展开式给出了$f(x_0+d_{x})$近似于$f(x_0)$的一个展开式。</p><p>$$<br>\begin{equation}<br>f(x_0+d_{x})&#x3D;f(x_0)+f^{\prime}(x_0)d_{x}+\frac{f^{\prime\prime}(x_0)}{2!}(d_{x})^2+\frac{f^{(3)}(x_0)}{3!}(d_{x})^3+\cdots<br>\end{equation}<br>$$</p><p>在卡尔曼滤波中一般使用$t$和$t-1$表示当前时刻和上一时刻，注意这里两个时刻的间隔并不是1，而是指相邻两次的采样，采样间隔也不一定相同，所以$f(x_0)$为$x_0$位置或$t-1$时刻的采样值，$f(x_0+d_x)$为在$x_0+d_x$位置或$t$时刻的采样值，所以可以表示为:</p><p>$$<br>\begin{equation}<br>f(t)&#x3D;f(t-1)+f^{\prime}(t-1)d_{x}+\frac{f^{\prime\prime}(t-1)}{2!}(d_{x})^2+\frac{f^{(3)}(t-1)}{3!}(d_{x})^3+\cdots<br>\end{equation}<br>$$</p><p>注意这里的$dx$为两次采样间隔之间$x$的变化量，即$d_{x}&#x3D;v_{x}\Delta{t}$。</p><h2 id="卡尔曼滤波的五个公式"><a href="#卡尔曼滤波的五个公式" class="headerlink" title="卡尔曼滤波的五个公式"></a>卡尔曼滤波的五个公式</h2><ul><li><p>状态预测<br>$$<br>\begin{equation}<br>{\widehat{X}^{-}<em>t}&#x3D;A_t\widehat{X}</em>{t-1}+B_tu_t<br>\end{equation}<br>$$</p></li><li><p>状态协方差预测<br>$$<br>\begin{equation}<br>P_t^-&#x3D;F_tP_{t-1}F_t^T+Q_t<br>\end{equation}<br>$$</p></li><li><p>更新卡尔曼增益<br>$$<br>\begin{equation}<br>K_t&#x3D;P_t^-H_t^T(H_tP_t^-H_t^T+R_t)^{-1}<br>\end{equation}<br>$$</p></li><li><p>更新状态估计<br>$$<br>\begin{equation}<br>\widehat{X}_t&#x3D;\widehat{X}_t^-+K_t(z_t-H\widehat{X}_t^-)<br>\end{equation}<br>$$</p></li><li><p>更新状态协方差<br>$$<br>\begin{equation}<br>P_t&#x3D;(I-K_tH)P_t^-<br>\end{equation}<br>$$</p></li></ul><h1 id="车道线曲线参数跟踪"><a href="#车道线曲线参数跟踪" class="headerlink" title="车道线曲线参数跟踪"></a>车道线曲线参数跟踪</h1><p>通过上述的分析，基本上可以对车辆运动有了基本的了解，本文的目的是使用卡尔曼滤波对车道线的参数进行跟踪，因此，我们接下来需要确定卡尔曼滤波的模型。</p><h2 id="卡尔曼滤波模型"><a href="#卡尔曼滤波模型" class="headerlink" title="卡尔曼滤波模型"></a>卡尔曼滤波模型</h2><p>卡尔曼滤波是一种递归的参数估计方法，它通过递归地计算和更新系统的状态估计，实现对动态系统的最优估计。卡尔曼滤波的基本思想是利用系统的动态模型和观测模型，通过递归地计算和更新系统的状态估计，实现对动态系统的最优估计。</p><p>在工程实践中，由于感知识别到的车道线偶尔存在较大的跳变，导致报警判断或早后晚的出现波动，所以我们需要对感知输入的车道线系数进行平滑处理。</p><p>一般情况下，感知将车道线以三次螺旋曲线方程的形式输送给下游，其中：<br>$$<br>\begin{equation}<br>y&#x3D;c_0+c_1x+c_2x^2+c_3x^3<br>\end{equation}<br>$$</p><ul><li>$c_0$:表示在纵向距离$x&#x3D;0$处摄像头到车道线的横向距离：</li><li>$atan(c_1)$:表示纵向距离$x&#x3D;0$处摄像头与车道线的航向角$\theta$；</li><li>$2c_2$:表示纵向距离$x&#x3D;0$处车道线的曲率$k_r$;</li><li>$6c_3$:表示纵向距离$x&#x3D;0$处车道线的曲率变化率$\dot{k}_{r}$;</li></ul><p>对上述车道线方程求导，分别计算出在纵向距离$x$处的自车到车道线的横向距离$y$,自车与车道线<br>的航向角$\theta$，车道线的曲率$k$,车道线的曲率变化率$\dot{k}_{r}$，可表示为：</p><p>$$<br>\begin{equation}<br>y_{x}&#x3D;c_{0}+c_{1}x+c_{2}x^2+c_{3}x^3<br>\end{equation}<br>$$</p><p>一阶导如下所示:</p><p>$$<br>\begin{equation}<br>\theta_{x}&#x3D;c_{1}+2c_{2}x+3c_{3}x^{2}</p><p>\end{equation}<br>$$</p><p>二阶导如下所示:</p><p>$$<br>\begin{equation}<br>k_{rx}&#x3D;2c_{2}+6c_{3}x</p><p>\end{equation}<br>$$</p><p>三阶导如下所示:</p><p>$$<br>\begin{equation}<br>\dot{k}<em>{rx}&#x3D;6c</em>{3}<br>\end{equation}<br>$$</p><p>对车道线参数进行卡尔曼滤波首先假定车道线的曲率变化率$\dot{k}<em>{r}$不变，其他三个参数随时间根据<br>$\dot{k}</em>{r}$的变化而变化。在推导过程中，车道线参数受自车运动的影响，需要将自车运动消除:</p><p>$$<br>\begin{equation}<br>d_{x}&#x3D;v_{x}t<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>d_{\theta}&#x3D;w_{r}t<br>\end{equation}<br>$$</p><p>根据曲率和车辆横向偏移的关系以及曲率和横摆角速度的关系可得：</p><p>$$<br>\begin{equation}<br>d_{y}&#x3D;\frac{1}{2}\frac{w_{r}}{v_{x}}d_{x}^{2}<br>\end{equation}<br>$$</p><p>将车道线方程进行泰勒展开，得到车道线参数的增量方程，基于上一时刻的车道线方程可推导出当前时刻的车道线为：</p><p>$$<br>\begin{equation}<br>y(t)&#x3D;y(t-1)+\theta(t-1)d_x+\frac12k_r(t-1)d_x^2+\frac16\dot{k}_r(t-1)d_x^3-dy<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>\theta(t)&#x3D;\theta(t-1)+k_r(t-1)d_x+\frac12\dot{k}_r(t-1)d_x^2-d\theta<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>k_r(t)&#x3D;k_r(t-1)+\dot{k}_r(t-1)d_x<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>\dot{k}_r&#x3D;\dot{k}_r(t-1)<br>\end{equation}<br>$$</p><blockquote><p>这里的$dy$可以理解为测量误差，这个测量误差是由于测量方式或工具的局限性造成的，因此，在卡尔曼滤波中，我们需要对测量误差进行建模，以便在滤波过程中对测量值进行修正。</p></blockquote><p>至此，我们对车道线参数的卡尔曼滤波模型已经建立，接下来，我们需要对卡尔曼滤波的模型进行具体的实现。</p><p>将上式写为状态空间$\widehat{X}<em>t^-&#x3D;A_t\widehat{X}</em>{t-1}+B_tu_t$的表达形式：</p><p>$$<br>\begin{equation}<br>\begin{bmatrix}y(t)\\<br>\theta(t)\k_r(t)\\<br>\dot{k}_r(t)<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>1&amp;d_x&amp;\frac{1}{2}d_x^2&amp;\frac{1}{6}d_x^3\\<br>0&amp;1&amp;d_x&amp;\frac{1}{2}d_x^2\\<br>0&amp;0&amp;1&amp;d_x\\<br>\end{bmatrix}<br>\begin{bmatrix}y(t-1)\\<br>\theta(t-1)\\<br>k_r(t-1)\\<br>\dot{k}_r(t-1)\end{bmatrix}+\begin{bmatrix}-\frac{1}{2}\frac{d_x^2}{v_x}\\<br>-t\\<br>0\\<br>0\end{bmatrix}<br>w_r<br>\end{equation}<br>$$</p><p>则：</p><p>$$<br>\begin{equation}<br>\widehat{X}_t^-&#x3D;\begin{bmatrix}y(t)\\<br>\theta(t)\\<br>k_r(t)\\<br>\dot{k}_r(t)\end{bmatrix}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>A_t&#x3D;\begin{bmatrix}1&amp;d_x&amp;\frac{1}{2}d_x^2&amp;\frac{1}{6}d_x^3\0&amp;1&amp;d_x&amp;\frac{1}{2}d_x^2\0&amp;0&amp;1&amp;d_x\0&amp;0&amp;0&amp;1\end{bmatrix}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>\widehat{X}_{t-1}&#x3D;\begin{bmatrix}y(t-1)\\<br>\theta(t-1)\\<br>k_r(t-1)\\<br>\dot{k}_r(t-1)\end{bmatrix}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>B_t&#x3D;\begin{bmatrix}-\frac{1}{2}\frac{d_x^2}{v_x}\-t\0\\end{bmatrix}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>u_t&#x3D;w_r<br>\end{equation}<br>$$</p><p>由于我们的观测参数与状态变量一致，所以观测向量和状态向量相同，且观测矩阵为单位阵，则观测向量$z_t$可写为：</p><p>$$<br>\begin{equation}<br>z_t&#x3D;\begin{bmatrix}y(t)\\<br>\theta(t)\\<br>k_r(t)\\<br>\dot{k}_r(t)\end{bmatrix}<br>\end{equation}<br>$$</p><p>观测矩阵$H$为：</p><p>$$<br>\begin{equation}<br>H&#x3D;\begin{bmatrix}1&amp;0&amp;0&amp;0\\<br>0&amp;1&amp;0&amp;0\\<br>0&amp;0&amp;1&amp;0\\<br>0&amp;0&amp;0&amp;1\end{bmatrix}<br>\end{equation}<br>$$</p><p>即观测值为$t$时刻车道线方程的各阶导数值。</p><h2 id="超参数设置"><a href="#超参数设置" class="headerlink" title="超参数设置"></a>超参数设置</h2><p>卡尔曼滤波器需要设置一些超参数，这些超参数会影响滤波器的性能。以下是一些常见的超参数：</p><h4 id="状态协方差矩阵-P"><a href="#状态协方差矩阵-P" class="headerlink" title="状态协方差矩阵$P$"></a>状态协方差矩阵$P$</h4><p>状态协方差矩阵$P$为预测值和真实值之间的误差协方差矩阵</p><p>首先看公式:</p><ul><li>状态协方差预测</li></ul><p>$$<br>\begin{equation}<br>P_t^-&#x3D;F_tP_{t-1}F_t^T+Q_t<br>\end{equation}<br>$$</p><ul><li>更新状态协方差</li></ul><p>$$<br>\begin{equation}<br>P_t&#x3D;(I-K_tH)P_t^-<br>\end{equation}<br>$$</p><p>可以看出状态协方差矩阵在预测阶段会给出预测值，在更新阶段会给出优化预测结果，所以该值仅仅需要设置初值即可，不需要每次外部手动更新。根据经验，状态协方差矩阵的初值一般设置较小，原因如下：</p><p>状态协方差的大小影响卡尔曼增益的计算，卡尔曼增益计算公式如下：</p><p>$$<br>\begin{equation}<br>K_t&#x3D;P_t^-H_t^T(H_tP_t^-H_t^T+R_t)^{-1}<br>\end{equation}<br>$$</p><p>由于我们的观测参数与状态变量一致，所以观测向量和状态向量相同，且观测矩阵为单位阵，即:$H&#x3D;I$</p><p>$$<br>\begin{equation}<br>K_t&#x3D;P_t^{-}(P_t^{-}+R_t)^{-1}<br>\end{equation}<br>$$</p><p>由此可以看出，状态协方差越大，卡尔曼增益$K$越大，然后模型对观测值的信任度就越大，可由下式看出：</p><p>$$<br>\begin{equation}<br>\widehat{X}_t&#x3D;\widehat{X}_t^-+K_t(z_t-H\widehat{X}_t^-)<br>\end{equation}<br>$$</p><p>卡尔曼增益$K$越大，更新状态估计值时采纳观测值$z_t$越多，反之，则状态估计值优化结果采纳预测值越多。</p><ul><li><p>我们通常对系统的初始状态并不完全确定，尤其是在系统刚开始运行时。因此，我们倾向于通过选择较小的初始协方差矩阵来表示对初始状态估计的信任较低</p></li><li><p>较小的协方差矩阵意味着滤波器最开始时对状态的变化更加谨慎，不会迅速做出过于激进的调整。随着新的测量数据的不断更新，协方差矩阵会逐步增大，反映出对估计状态的不确定性的增加。</p></li></ul><p>一般将状态协方差矩阵$P$初值设置为：</p><p>$$<br>\begin{equation}<br>P&#x3D;\begin{bmatrix}0.0001&amp;0&amp;0&amp;0\\<br>0&amp;0.0001&amp;0&amp;0\\<br>0&amp;0&amp;0.0001&amp;0\\<br>0&amp;0&amp;0&amp;0.0001\end{bmatrix}<br>\end{equation}<br>$$</p><h4 id="观测噪声协方差矩阵-R"><a href="#观测噪声协方差矩阵-R" class="headerlink" title="观测噪声协方差矩阵$R$"></a>观测噪声协方差矩阵$R$</h4><p>观测噪声协方差矩阵$R$为观测值和真实值之间的误差协方差矩阵</p><p>首先看公式:</p><p>$$<br>\begin{equation}<br>K_t&#x3D;P_t^{-}(P_t^{-}+R_t)^{-1}<br>\end{equation}<br>$$</p><p>可以看出观测噪声协方差矩阵$R$和卡尔曼增益$K$有关，观测噪声协方差矩阵$R$越大，卡尔曼增益$K$越小，模型对观测值的信任度就越小，模型对预测值的信任度就越大。</p><p>在卡尔曼的预测阶段和更新阶段，观测噪声协方差矩阵$R$不会自动更新，所以该值如果设置为固定值那么说明观测数据的噪声稳定不变，如果观测数据抖动较大，比较难以测量，那么观测噪声协方差矩阵$R$往往需要手动更新。</p><h3 id="预测误差协方差矩阵-Q"><a href="#预测误差协方差矩阵-Q" class="headerlink" title="预测误差协方差矩阵$Q$"></a>预测误差协方差矩阵$Q$</h3><p>预测误差协方差矩阵$Q$为预测值和真实值之间的误差协方差矩阵</p><p>首先看公式，状态协方差预测时使用了预测误差协方差矩阵$Q$:</p><p>$$<br>\begin{equation}<br>P_t^-&#x3D;F_tP_{t-1}F_t^T+Q_t<br>\end{equation}<br>$$</p><p>而状态协方差的预测值在更新阶段会用于计算卡尔曼增益$K$，如上所述。那么，预测误差协方差矩阵$Q$越大，状态协方差的预测值$P_t^-$越大，在更新阶段计算的卡尔曼增益$K$越大。</p><p>在卡尔曼的预测阶段和更新阶段，预测误差协方差矩阵$Q$不会自动更新，所以该值如果设置为固定值那么说明模型建模比较好，能够很好的预测状态的变化，如果模型建模不够精准，那么预测误差协方差矩阵$Q$往往需要手动更新。</p><p>预测误差协方差矩阵$Q$直接影响的是状态协方差矩阵$P$，可以看做是预测误差协方差矩阵$Q$是对预测阶段状态协方差矩阵$P$的修正，所以预测误差协方差矩阵$Q$的设置需要根据预测阶段的状态协方差矩阵$P$来设置。</p><blockquote><p><strong>观测噪声协方差矩阵$R$越大，卡尔曼增益$K$越小；预测误差协方差矩阵$Q$越大,卡尔曼增益$K$越大</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 卡尔曼滤波 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卡尔曼滤波 </tag>
            
            <tag> 车道线跟踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车道宽度测量方法</title>
      <link href="/2024/12/18/che-dao-kuan-du-ce-liang-fang-fa/"/>
      <url>/2024/12/18/che-dao-kuan-du-ce-liang-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="点到曲线的距离计算"><a href="#点到曲线的距离计算" class="headerlink" title="点到曲线的距离计算"></a>点到曲线的距离计算</h2><p>车道线的曲线方程一般为三次曲线方程，这里以三次曲线为例，计算点到曲线的距离。</p><p>设三次曲线方程为：</p><p>$$<br>\begin{equation}<br>y &#x3D; a + bx + cx^2 + dx^3<br>\end{equation}<br>$$</p><p>设点坐标为 $(x_0, y_0)$，则点到曲线的距离为：</p><p>$$<br>\begin{equation}<br>d&#x3D;\sqrt{(x-x_0)^2+(y-y_0)^2}<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>d^2&#x3D;(x-x_0)^2+(a+bx+cx^2+dx^3-y_0)^2<br>\end{equation}<br>$$</p><p>$$<br>\begin{equation}<br>{<br>\begin{align*}<br>d^2&#x3D;&amp; x^2+x_0^2-2xx_0 \\<br>&amp;+2abx+2acx^2+2adx^3-2ay_0\\<br>&amp;+2bcx^3+2bdx^4-2by_{0}x\\<br>&amp;+2cdx^5-2cy_0x^2\\<br>&amp;-2dy_0x^3\\<br>&amp;+a^2+b^2x^2+c^2x^4+d^2x^6+y_0^2<br>\end{align*}<br>}<br>\end{equation}<br>$$</p><p>可以看出，这是一个六次方程，求解比较复杂，当时根据经验可以知道车辆前方中心或车轮到车道线的最小值只有一个。因此这里就转换为带约束条件的非线性优化问题，约束条件如下：</p><p>$$<br>\begin{equation}<br>{<br>\begin{cases}<br>x&gt;left_{min}\\<br>x&lt;right_{max}\\<br>y&gt;0\\<br>y&lt;far_{max}<br>\end{cases}<br>}<br>\end{equation}<br>$$<br>上述约束条件可以根据车辆和车道线的实际位置关系进行设定。</p><p>$$<br> x^2+x_0^2-2xx_0+2abx+2acx^2+2adx^3-2ay_0+2bcx^3+2bdx^4-2by_{0}x+2cdx^5-2cy_0x^2-2dy_0x^3+a^2+b^2x^2+c^2x^4+d^2x^6+y_0^2<br> $$</p>]]></content>
      
      
      <categories>
          
          <category> 测距 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 车道宽度 </tag>
            
            <tag> 测距 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车道中心线提取</title>
      <link href="/2024/12/10/che-dao-zhong-xin-xian-ti-qu/"/>
      <url>/2024/12/10/che-dao-zhong-xin-xian-ti-qu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://candyguo.github.io/blog-post-8/">博客：center line extraction</a></p>]]></content>
      
      
      <categories>
          
          <category> 车道线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 车道线 </tag>
            
            <tag> 车道中心线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于车道线的相机外参标定方法</title>
      <link href="/2024/11/25/che-dao-xian-biao-ding-suan-fa/"/>
      <url>/2024/11/25/che-dao-xian-biao-ding-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="旋转矩阵的表示"><a href="#旋转矩阵的表示" class="headerlink" title="旋转矩阵的表示"></a>旋转矩阵的表示</h1><p>如果车体坐标系定义为：x-前，y-左，z-上，则坐标系可如下所示：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A0%87%E5%AE%9A%E7%AE%97%E6%B3%95/xyz.svg"> </p><blockquote><p>定义的原则为前倾后仰为Pitch，左右偏航为Yaw，翻滚为Roll</p></blockquote><p>$$<br>\mathrm{R_x}({roll})&#x3D;\begin{bmatrix}1&amp;0&amp;0 \\ 0&amp;\cos({roll})&amp;-\sin({roll}) \\ 0&amp;\sin({roll})&amp;\cos({roll})\end{bmatrix}<br>$$</p><p>$$<br>\mathrm{R}_y({pitch})&#x3D;\begin{bmatrix}\cos({pitch})&amp;0&amp;\sin({pitch})\\ 0&amp;1&amp;0\\-\sin({pitch})&amp;0&amp;\cos({pitch})\end{bmatrix}<br>$$</p><p>$$<br>\mathrm{R_z}({yaw})&#x3D;\begin{bmatrix}\cos({yaw})&amp;-\sin({yaw})&amp;0\\sin({yaw})&amp;\cos({yaw})&amp;0\\0&amp;0&amp;1\end{bmatrix}<br>$$</p><p>根据旋转的先后顺序不同可以分为如下情况:</p><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><p>$$<br>X_\alpha{\cdot}Z_\beta{\cdot}Y_\gamma&#x3D;\begin{bmatrix}cos\beta{\cdot}cos\gamma&amp;-sin\beta&amp;cos\beta{\cdot}sin\gamma\\sin\alpha{\cdot}sin\gamma+cos\alpha{\cdot}cos\gamma{\cdot}sin\beta&amp;cos\alpha{\cdot}cos\beta&amp;cos\alpha{\cdot}sin\beta{\cdot}sin\gamma-cos\gamma{\cdot}sin\alpha\\cos\gamma{\cdot}sin\alpha{\cdot}sin\beta-cos\alpha{\cdot}sin\gamma&amp;cos\beta{\cdot}sin\alpha&amp;cos\alpha{\cdot}cos\gamma+sin\alpha{\cdot}sin\beta{\cdot}sin\gamma\end{bmatrix}<br>$$</p><p>其中：<br>$$<br>\alpha&#x3D;\arctan\left(\frac{R_{32}}{R_{22}}\right)\\\beta&#x3D;\arcsin(-R_{12})\\\gamma&#x3D;\arctan\left(\frac{R_{13}}{R_{11}}\right)<br>$$</p><h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><p>$$<br>X_{\alpha}Y_{\beta}Z_{\gamma}&#x3D;\begin{bmatrix}cos{\beta}{\cdot}cos{\gamma}&amp;-cos{\beta}{\cdot}sin{\gamma}&amp;sin{\beta}\\cos{\alpha}{\cdot}sin{\gamma}+cos{\gamma}{\cdot}sin{\alpha}{\cdot}sin{\beta}&amp;cos{\alpha}{\cdot}cos{\gamma}-sin{\alpha}{\cdot}sin{\beta}{\cdot}sin{\gamma}&amp;-cos{\beta}{\cdot}sin{\alpha}\\sin{\alpha}{\cdot}sin{\gamma}-cos{\alpha}{\cdot}cos{\gamma}{\cdot}sin{\beta}&amp;cos{\gamma}{\cdot}sin{\alpha}+cos{\alpha}{\cdot}sin{\beta}{\cdot}sin{\gamma}&amp;cos{\alpha}{\cdot}cos{\beta}\end{bmatrix}<br>$$</p><p>其中：<br>$$<br>\begin{aligned}&amp;\alpha&#x3D;\arctan\left(\frac{-R_{23}}{R_{33}}\right)\\&amp;\beta&#x3D;\arcsin(R_{13})\\&amp;\gamma&#x3D;\arctan\biggl(\frac{-R_{12}}{R_{11}}\biggr)\end{aligned}<br>$$</p><h2 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h2><p>$$<br>Y_\alpha{\cdot}X_\beta{\cdot}Z_\gamma&#x3D;\begin{bmatrix}cos\alpha{\cdot}cos\gamma+sin\alpha{\cdot}sin\beta{\cdot}sin\gamma&amp;cos\gamma{\cdot}sin\alpha{\cdot}sin\beta-cos\alpha{\cdot}sin\gamma&amp;cos\beta{\cdot}sin\alpha\\cos\beta{\cdot}sin\gamma&amp;cos\beta{\cdot}cos\gamma&amp;-sin\beta\\cos\alpha{\cdot}sin\beta{\cdot}sin\gamma-cos\gamma{\cdot}sin\alpha&amp;cos\alpha{\cdot}cos\gamma{\cdot}sin\beta+sin\alpha{\cdot}sin\gamma&amp;cos\alpha{\cdot}cos\beta\end{bmatrix}<br>$$</p><p>其中:<br>$$<br>\alpha&#x3D;\arctan\left(\frac{R_{13}}{R_{33}}\right)\\\beta&#x3D;\arcsin(-R_{23})\\\gamma&#x3D;\arctan\left(\frac{R_{21}}{R_{22}}\right)<br>$$</p><h2 id="方式4"><a href="#方式4" class="headerlink" title="方式4"></a>方式4</h2><p>$$<br>\left.Y_\alpha{\cdot}Z_\beta{\cdot}X_\gamma&#x3D;\left[\begin{array}{ccc}cos\alpha{\cdot}cos\beta&amp;sin\alpha{\cdot}sin\gamma-cos\alpha{\cdot}cos\gamma{\cdot}sin\beta&amp;cos\gamma{\cdot}sin\alpha+cos\alpha{\cdot}sin\beta{\cdot}sin\gamma\\sin\beta&amp;cos\beta{\cdot}cos\gamma&amp;-cos\beta{\cdot}sin\gamma\\-cos\beta{\cdot}sin\alpha&amp;cos\alpha{\cdot}sin\gamma+cos\gamma{\cdot}sin\alpha{\cdot}sin\beta&amp;cos\alpha{\cdot}cos\gamma-sin\alpha{\cdot}sin\beta{\cdot}sin\gamma\end{array}\right.\right]<br>$$</p><p>其中：<br>$$<br>\begin{aligned}&amp;\alpha&#x3D;\arctan\left(\frac{-R_{31}}{R_{11}}\right)\\&amp;\beta&#x3D;\arcsin(R_{21})\\&amp;\gamma&#x3D;\arctan\left(\frac{-R_{23}}{R_{22}}\right)\end{aligned}<br>$$</p><h2 id="方式5"><a href="#方式5" class="headerlink" title="方式5"></a>方式5</h2><p>$$<br>Z_{\alpha}Y_{\beta}X_{\gamma}&#x3D;\begin{bmatrix}cos{\alpha}{\cdot}cos{\beta}&amp;cos{\alpha}{\cdot}sin{\beta}{\cdot}sin{\gamma}-cos{\gamma}{\cdot}sin{\alpha}&amp;sin{\alpha}{\cdot}sin{\gamma}+cos{\alpha}{\cdot}cos{\gamma}{\cdot}sin{\beta}\\cos{\beta}{\cdot}sin{\alpha}&amp;cos{\alpha}{\cdot}cos{\gamma}+sin{\alpha}{\cdot}sin{\beta}{\cdot}sin{\gamma}&amp;cos{\gamma}{\cdot}sin{\alpha}{\cdot}sin{\beta}-cos{\alpha}{\cdot}sin{\gamma}\\-sin{\beta}&amp;cos{\beta}{\cdot}sin{\gamma}&amp;cos{\beta}{\cdot}cos{\gamma}\end{bmatrix}<br>$$</p><p>其中：<br>$$<br>\alpha&#x3D;\arctan\left(\frac{R_{21}}{R_{11}}\right)\\\beta&#x3D;\arcsin(-R_{31})\\\gamma&#x3D;\arctan\left(\frac{R_{32}}{R_{33}}\right)<br>$$</p><h2 id="方式6"><a href="#方式6" class="headerlink" title="方式6"></a>方式6</h2><p>$$<br>Z_{\alpha}X_{\beta}Y_{\gamma}&#x3D;\begin{bmatrix}cos{\alpha}{\cdot}cos{\gamma}-sin{\alpha}{\cdot}sin{\beta}{\cdot}sin{\gamma}&amp;-cos{\beta}{\cdot}sin{\alpha}&amp;cos{\alpha}{\cdot}sin{\gamma}+cos{\gamma}{\cdot}sin{\alpha}{\cdot}sin{\beta}\\cos{\gamma}{\cdot}sin{\alpha}+cos{\alpha}{\cdot}sin{\beta}{\cdot}sin{\gamma}&amp;cos{\alpha}{\cdot}cos{\beta}&amp;sin{\alpha}{\cdot}sin{\gamma}-cos{\alpha}{\cdot}cos{\gamma}{\cdot}sin{\beta}\\-cos{\beta}{\cdot}sin{\gamma}&amp;sin{\beta}&amp;cos{\beta}{\cdot}cos{\gamma}\end{bmatrix}<br>$$</p><p>其中：<br>$$<br>\begin{aligned}&amp;\alpha&#x3D;\arctan\left(\frac{-R_{12}}{R_{22}}\right)\\&amp;\beta&#x3D;\arcsin(R_{32})\\&amp;\gamma&#x3D;\arctan\biggl(\frac{-R_{31}}{R_{33}}\biggr)\end{aligned}<br>$$</p><ul><li>旋转角度和旋转轴的关系: $Z-yaw，X-roll，Y-pitch$</li><li>参考网站: <a href="https://en.wikipedia.org/wiki/Euler_angles">Euler angles</a></li><li>也可以仅绕三个轴进行三次旋转得到旋转矩阵，方法如见:<a href="https://en.wikipedia.org/wiki/Euler_angles">Euler angles</a></li></ul><h1 id="基于车道线消失点的相机外参标定方法"><a href="#基于车道线消失点的相机外参标定方法" class="headerlink" title="基于车道线消失点的相机外参标定方法"></a>基于车道线消失点的相机外参标定方法</h1><p>世界坐标系到图像坐标系的转换关系如下：</p><p>$$<br>{Z_c}\begin{bmatrix}u\\v\\1\end{bmatrix}&#x3D;\mathbf{K}\left(\mathbf{R}|\mathbf{t}\right)\begin{bmatrix}X_w\\Y_w\\Z_w\\1\end{bmatrix}<br>$$</p><p>其中，<br>$$<br>K&#x3D;<br>\begin{bmatrix}<br>f_{x} &amp; {0} &amp; c_{x} &amp; {0} \\<br>{0} &amp; f_{y} &amp; c_{y} &amp; {0} \\<br>{0} &amp; {0} &amp; {1} &amp;{0}<br>\end{bmatrix}<br>$$</p><p>$$<br>\lambda\begin{bmatrix}u\\v\\1\end{bmatrix}&#x3D;\mathbf K\left(\mathbf R|\mathbf t\right)\begin{bmatrix}X_w&#x2F;Z_w\\Y_w&#x2F;Z_w\\1\\1&#x2F;Z_w\end{bmatrix}<br>$$</p><p>其中，<br>$$\lambda&#x3D;\frac{Z_c}{Z_w}$$</p><p>车道线的消失点在图像上表现为车道线的交点，而在世界坐标系中表现为位于无穷远处，如果世界坐标系中Z轴为车辆前方，则无穷远处$Z_{W}&#x3D;\infty$,因此：</p><blockquote><p>记住这里的假设为Z轴为车辆前方<br>$$<br>\lambda\begin{bmatrix}<br>u\\<br>v\\<br>1\end{bmatrix}&#x3D;\mathbf{K}(\mathbf{R}|\mathbf{t})\begin{bmatrix}<br>0 \\<br>0 \\<br>1 \\<br>0\end{bmatrix}<br>$$</p></blockquote><p>$$<br>\lambda\begin{bmatrix}u\\v\\1\end{bmatrix}&#x3D;K<br>\begin{bmatrix}<br>R_{11} &amp; R_{12} &amp; R_{13} &amp; t_{x}  \\<br>R_{21} &amp; R_{22} &amp; R_{23} &amp; t_{y}  \\<br>R_{31} &amp; R_{32} &amp; R_{33} &amp; t_{z}  \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}0\\<br>0\\<br>1\\<br>0\end{bmatrix}<br>$$</p><p>$$<br>\lambda\begin{bmatrix}u\\<br>v\\<br>1\end{bmatrix}&#x3D;K<br>r_{3}<br>$$<br>其中，<br>$$<br>r_{3}&#x3D;\begin{bmatrix}R_{13}\\<br>R_{23}\\<br>R_{33}\\<br>0\end{bmatrix}<br>$$</p><p>则：</p><p>$$<br>\lambda\begin{bmatrix}<br>u\\<br>v\\<br>1\end{bmatrix}&#x3D;K<br>\begin{bmatrix}<br>R_{13}\\<br>R_{23}\\<br>R_{33}\\<br>0<br>\end{bmatrix}<br>$$</p><p>$$<br>\lambda\begin{bmatrix}<br>u\\<br>v\\<br>1\end{bmatrix}&#x3D;\begin{bmatrix}<br>f_{x} &amp; {0} &amp; c_{x} &amp; {0} \\<br>{0} &amp; f_{y} &amp; c_{y} &amp; {0} \\<br>{0} &amp; {0} &amp; {1} &amp;{0}<br>\end{bmatrix}<br>\begin{bmatrix}<br>R_{13}\\<br>R_{23}\\<br>R_{33}\\<br>0<br>\end{bmatrix}<br>$$</p><p>$$<br>\lambda\begin{bmatrix}<br>u\\<br>v\\<br>1\end{bmatrix}&#x3D;\begin{bmatrix}<br>f_{x} &amp; {0} &amp; c_{x}  \\<br>{0} &amp; f_{y} &amp; c_{y}  \\<br>{0} &amp; {0} &amp; {1}<br>\end{bmatrix}<br>\begin{bmatrix}<br>R_{13}\\<br>R_{23}\\<br>R_{33}<br>\end{bmatrix}<br>$$</p><p>$$<br>\lambda\begin{bmatrix}<br>u\\<br>v\\<br>1<br>\end{bmatrix}&#x3D;k<br>\begin{bmatrix}<br>R_{13}\\<br>R_{23}\\<br>R_{33}<br>\end{bmatrix}<br>$$</p><p>其中,<br>$$<br>k&#x3D;<br>\begin{bmatrix}<br>f_{x} &amp; {0} &amp; c_{x} \\<br>{0} &amp; f_{y} &amp; c_{y} \\<br>{0} &amp; {0} &amp; {1}<br>\end{bmatrix}<br>$$</p><p>即：<br>$$<br>\lambda k^{-1}\begin{bmatrix}<br>u\\<br>v\\<br>1\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>R_{13}\\<br>R_{23}\\<br>R_{33}<br>\end{bmatrix}<br>$$</p><p>由于旋转矩阵中的每个旋转向量都是单位向量，因此$||r_{3}||&#x3D;1$，将向量单位化后如下所示：</p><p>$$<br>\hat{\mathbf{r_{3}}}&#x3D;<br>\frac{k^{-1}\begin{bmatrix}<br>u\\<br>v\\<br>1\end{bmatrix}}{ \left |\mathbf{k^{-1}\begin{bmatrix}<br>u\\<br>v\\<br>1\end{bmatrix} }\right | }<br>$$</p><p>由于方程的解只和旋转矩阵的第三列有关。而在所有的旋转方式中只有<code>方式2</code>和<code>方式3</code>的旋转角度求解可以仅与旋转矩阵第三列有关，这里以<code>方式3</code>的旋转为例：</p><p>$$<br>R &#x3D;<br>Y_\alpha{\cdot}X_\beta{\cdot}Z_\gamma&#x3D;\begin{bmatrix}cos\alpha{\cdot}cos\gamma+sin\alpha{\cdot}sin\beta{\cdot}sin\gamma&amp;cos\gamma{\cdot}sin\alpha{\cdot}sin\beta-cos\alpha{\cdot}sin\gamma&amp;cos\beta{\cdot}sin\alpha\\<br>cos\beta{\cdot}sin\gamma&amp;cos\beta{\cdot}cos\gamma&amp;-sin\beta\\cos\alpha{\cdot}sin\beta{\cdot}sin\gamma-cos\gamma{\cdot}sin\alpha&amp;cos\alpha{\cdot}cos\gamma{\cdot}sin\beta+sin\alpha{\cdot}sin\gamma&amp;cos\alpha{\cdot}cos\beta\end{bmatrix}<br>$$</p><p>其中:<br>$$<br>\alpha&#x3D;\arctan\left(\frac{R_{13}}{R_{33}}\right)\\<br>\beta&#x3D;\arcsin(-R_{23})\\<br>\gamma&#x3D;\arctan\left(\frac{R_{21}}{R_{22}}\right)<br>$$</p><p>则：<br>$$<br>\alpha&#x3D;Yaw&#x3D;\arctan\left(\frac{(\hat{\mathbf{r_{3}}})<em>{1}}{(\hat{\mathbf{r</em>{3}}})<em>{3}}\right)\\<br>\beta&#x3D;Pitch&#x3D;\arcsin(-(\hat{\mathbf{r</em>{3}}})_{2})<br>$$</p><blockquote><p>由于假设是<code>Z轴向前</code>，因此这里假设<code>Y轴朝下</code>，<code>X轴朝左</code>,绕<code>X轴</code>的旋转为俯仰角<code>Pitch</code>,绕<code>Y</code>轴旋转偏航角<code>Yaw</code>,绕<code>Z</code>轴旋转的为翻滚角<code>Roll</code></p></blockquote><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>可以看出，通过消失点只能得到<code>Yaw</code>和<code>Pitch</code>，无法得到<code>Roll</code>。那么现在来分析一下这个方法计算出来的<code>Yaw</code>和<code>Pitch</code>有什么假设条件：</p><ul><li><p>平行车道线在图像上的交点为消失点，而消失点在世界坐标系中的坐标表现为无穷远点，即$Z_{w}&#x3D;\infty$。因此这里需要车道线为严格平行线，因为只有平行线才能相交于无穷远处。</p></li><li><p>消失点的准确性在实际场景中会依赖于车道线识别的准确率，因此这里假设车道线识别的准确率足够高，即消失点足够准确。车道线的抖动会使得消失点出现小范围的浮动，但这个小范围的浮动必须要保证这些浮动的消失点总是在无穷远的位置，这样不会破坏假设条件。也就是说如果点$(u_1,v_1)$为理想消失点，那么点$(u_1+\triangle u,v_1+\triangle v)$也必须为理想消失点，其中$\triangle u$和$\triangle v$足够小。</p></li><li><p>由于标定过程中国使用了相机的内参$K$，因此，这里$K$的精度必须足够高，否则会导致计算出来的<code>Yaw</code>和<code>Pitch</code>出现误差。</p></li><li><p>由于这里假设了地面是平坦的，因此如果地面不平坦，那么计算出来的<code>Pitch</code>会有误差。</p></li><li><p>由于这里假设了车辆沿着直线行驶，因此如果车辆在转弯，那么计算出来的<code>Yaw</code>会有误差。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 消失点坐标</span>cv<span class="token double-colon punctuation">::</span>Mat vanish_point <span class="token operator">=</span> <span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Mat_</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> vanish_point_x<span class="token punctuation">,</span> vanish_point_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 相机内参矩阵</span>cv<span class="token double-colon punctuation">::</span>Mat intrinsic <span class="token operator">=</span> <span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Mat_</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> focal_length_x_<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> principal_x_<span class="token punctuation">,</span>                                                <span class="token number">0</span><span class="token punctuation">,</span> focal_length_y_<span class="token punctuation">,</span> principal_y_<span class="token punctuation">,</span>                                                <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 内参矩阵的逆矩阵</span>cv<span class="token double-colon punctuation">::</span>Mat intrinsic_inverse<span class="token punctuation">;</span>cv<span class="token double-colon punctuation">::</span><span class="token function">invert</span><span class="token punctuation">(</span>intrinsic<span class="token punctuation">,</span> intrinsic_inverse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第三列</span>cv<span class="token double-colon punctuation">::</span>Mat r3 <span class="token operator">=</span> intrinsic_inverse <span class="token operator">*</span> vanish_point<span class="token punctuation">;</span><span class="token comment">// 归一化</span><span class="token keyword">double</span> L2 <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">norm</span><span class="token punctuation">(</span>r3<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>NORM_L2<span class="token punctuation">)</span><span class="token punctuation">;</span>r3 <span class="token operator">=</span> r3 <span class="token operator">/</span> L2<span class="token punctuation">;</span><span class="token comment">// pitch和yaw</span>pitch_<span class="token operator">=</span> <span class="token function">asin</span><span class="token punctuation">(</span>r3<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> yaw_ <span class="token operator">=</span> <span class="token function">atan2</span><span class="token punctuation">(</span><span class="token operator">-</span>r3<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r3<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><p><a href="https://thomasfermi.github.io/Algorithms-for-Automated-Driving/CameraCalibration/VanishingPointCameraCalibration.html">Github主页：基于消失点的相机外参标定</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Euler_angles">维基百科：旋转矩阵表示方法</a></p></li></ul><h1 id="基于矩形车道线的相机外参标定方法"><a href="#基于矩形车道线的相机外参标定方法" class="headerlink" title="基于矩形车道线的相机外参标定方法"></a>基于矩形车道线的相机外参标定方法</h1><h2 id="方法描述"><a href="#方法描述" class="headerlink" title="方法描述"></a>方法描述</h2><p>如果车辆在车道中间沿着直线行驶，那么车道线在图像上的投影会呈现为一个矩形，如下图所示。因此基于矩形车道线的相机外参标定方法主页这个矩形的属性展开，设置约束，求解出相机的外参。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A0%87%E5%AE%9A%E7%AE%97%E6%B3%95/1.png"></p><p>平行车道线在世界坐标系中的投影为严格矩形，具有如下属性：</p><ul><li>车辆沿直线行驶时满足如下条件：<br>$$<br>X_{wA}&#x3D;X_{wC}\\<br>X_{wB}&#x3D;X_{wD}<br>$$</li></ul><p>$$<br>Z_{wA}&#x3D;Z_{wB}\\<br>Z_{wC}&#x3D;Z_{wD}<br>$$</p><ul><li><p>车道宽度满足如下条件：<br>$$<br>X_{wB}-X_{wA}&#x3D;width<br>$$</p></li><li><p>地面平整时满足如下条件：<br>$$<br>Y_{w}&#x3D;0<br>$$</p></li></ul><h2 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h2><p>相机坐标系到世界坐标系的转换关系如下：<br>$$<br>\begin{bmatrix}<br>X_w\\<br>Y_w\\<br>Z_w\end{bmatrix}&#x3D;\begin{bmatrix}r_{11}&amp;r_{21}&amp;r_{31}<br>\\<br>r_{12}&amp;r_{22}&amp;r_{32}\\r_{13}&amp;r_{23}&amp;r_{33}\end{bmatrix}\begin{bmatrix}X_c\\<br>Y_c\\<br>Z_c\end{bmatrix}+\begin{bmatrix}d\\<br>h\\<br>l\end{bmatrix}<br>$$</p><p>相机坐标系到图像坐标系的转换关系如下：<br>$$<br>Z_c\begin{bmatrix}<br>u<br>\\<br>v\\<br>1\end{bmatrix}&#x3D;\begin{bmatrix}f_x&amp;0&amp;u_0\\<br>0&amp;f_y&amp;v_0\\<br>0&amp;0&amp;1\end{bmatrix}\begin{bmatrix}X_c\\<br>Y_c\\<br>Z_c\end{bmatrix}<br>$$</p><p>其中，$[d,h,l^T]$为相机安装位置在世界坐标系中的坐标，$d$为左右距离，$h$安装高度，$l$为前后距离。</p><p>将$A,B,C,D$四个点的相机坐标带入上述公式可以得到对应的世界坐标，同时构建上述车道线矩形的6个约束条件，得到如下方程组：</p><p>$$<br>\begin{aligned}<br>r_{11}\left(X_{cA}-X_{cC}\right)+r_{21}\left(Y_{cA}-Y_{cC}\right)+r_{31}\left(Z_{cA}-Z_{cC}\right)&#x3D;0\\<br>r_{11}\left(X_{cB}-X_{CD}\right)+r_{21}\left(Y_{cB}-Y_{CD}\right)+r_{31}\left(Z_{cB}-Z_{CD}\right)&#x3D;0\\<br>r_{13}\left(X_{cA}-X_{cB}\right)+r_{23}\left(Y_{cA}-Y_{cB}\right)+r_{33}\left(Z_{cA}-Z_{cB}\right)&#x3D;0\\<br>r_{13}\left(X_{cC}-X_{CD}\right)+r_{23}\left(Y_{cC}-Y_{CD}\right)+r_{33}\left(Z_{cC}-Z_{CD}\right)&#x3D;0\\<br>r_{11}\left(X_{cB}-X_{cA}\right)+r_{21}\left(Y_{cB}-Y_{cA}\right)+r_{31}\left(Z_{cB}-Z_{cA}\right)&#x3D;width\\<br>r_{11}X_{c}+r_{22}Y_{c}+r_{33}Z_{c}+h&#x3D;0<br>\end{aligned}<br>$$</p><p>相机坐标系到图像坐标系的转换关系可知：<br>$$<br>Z_{c}&#x3D;\frac{f_{x}}{u-u_{0}}X_{c}&#x3D;mX_{c}\\<br>Y_{c}&#x3D;\frac{f_{x}}{u-u_{0}}\cdot\frac{v-v_{0}}{f_{y}}X_{c}&#x3D;mnX_{c}<br>$$</p><p>即：</p><p>$$<br>X_c&#x3D;\frac{-h}{r_{12}+r_{22}mn+r_{32}m}<br>$$</p><p>则，六个约束条件可以转化为如下形式：</p><p>$$<br>\begin{aligned}<br>\frac{r_{11}+r_{21}m_{A}n_{A}+r_{31}m_{A}}{r_{12}+r_{22}m_{A}n_{A}+r_{32}m_{A}}&#x3D;\frac{r_{11}+r_{21}m_{C}n_{C}+r_{31}m_{C}}{r_{12}+r_{22}m_{C}n_{C}+r_{32}m_{C}}\\<br>\frac{r_{11}+r_{21}m_{B}n_{B}+r_{31}m_{B}}{r_{12}+r_{22}m_{B}n_{B}+r_{32}m_{B}}&#x3D;\frac{r_{11}+r_{21}m_{D}n_{D}+r_{31}m_{D}}{r_{12}+r_{22}m_{D}n_{D}+r_{32}m_{D}}\\<br>\frac{r_{13}+r_{23}m_{A}n_{A}+r_{33}m_{A}}{r_{12}+r_{22}m_{A}n_{A}+r_{32}m_{A}}&#x3D;\frac{r_{13}+r_{23}m_{B}n_{B}+r_{33}m_{B}}{r_{12}+r_{22}m_{B}n_{B}+r_{32}m_{B}}\\<br>\frac{r_{13}+r_{23}m_{C}n_{C}+r_{33}m_{C}}{r_{12}+r_{22}m_{C}n_{C}+r_{32}m_{C}}&#x3D;\frac{r_{13}+r_{23}m_{D}n_{D}+r_{33}m_{D}}{r_{12}+r_{22}m_{D}n_{D}+r_{32}m_{D}}\\<br>\frac{r_{11}+r_{21}m_{A}n_{A}+r_{31}m_{A}}{r_{12}+r_{22}m_{A}n_{A}+r_{32}m_{A}}-\frac{r_{11}+r_{21}m_{B}n_{B}+r_{31}m_{B}}{r_{12}+r_{22}m_{B}n_{B}+r_{32}m_{B}}&#x3D;\frac{width}{h}<br>\end{aligned}<br>$$</p><p>上述公式中包含了四个未知数:$(\phi),(\theta),(\psi),h$,联立方程可得：</p><p>$$<br>\begin{aligned}<br>\tan(\phi)&#x3D;\frac{m_{C}m_{D}\left(n_{D}-n_{C}\right)\left(m_{A}n_{A}-m_{B}n_{B}\right)-m_{A}m_{B}\left(n_{B}-n_{A}\right)\left(m_{C}n_{C}-m_{D}n_{D}\right)}{\left(m_{B}-m_{A}\right)\left(m_{C}n_{C}-m_{D}n_{D}\right)-\left(m_{D}-m_{C}\right)\left(m_{A}n_{A}-m_{B}n_{B}\right)}\\<br>\tan(\theta)&#x3D;\frac{\left(m_{C}n_{C}-m_{A}n_{A}\right)F_{BD}-\left(m_{D}n_{D}-m_{B}n_{B}\right)F_{AC}}{G_{AC}F_{BD}-G_{BD}F_{AC}}\\<br>\tan(\psi)&#x3D;\frac{\sin(\theta)\sin(\phi)\left(m_{C}-m_{A}\right)-\sin(\theta)\cos(\phi) m_{A}m_{C}\left(n_{A}-n_{C}\right)-\cos(\theta)\left(m_{C}n_{C}-m_{A}n_{A}\right)}{\cos(\phi)\left(m_{C}-m_{A}\right)+\sin(\phi) m_{A}m_{C}\left(n_{A}-n_{C}\right)}\\<br>h&#x3D;width&#x2F;(\frac{r_{11}+r_{21}m_{A}n_{A}+r_{31}m_{A}}{r_{12}+r_{22}m_{A}n_{A}+r_{32}m_{A}}-\frac{r_{11}+r_{21}m_{B}n_{B}+r_{31}m_{B}}{r_{12}+r_{22}m_{B}n_{B}+r_{32}m_{B}})<br>\end{aligned}<br>$$</p><p>其中：</p><p>$$<br>\begin{aligned}<br>{F_{AC}&#x3D;(m_{C}-m_{A})+tan(\phi) m_{A}m_{C}(n_{A}-n_{C})}\\<br>{G_{AC}&#x3D;sin(\phi)(m_{C}-m_{A})+cos(\phi)m_{A}m_{C}(n_{A}-n_{C})}\\<br>{F_{BD}&#x3D;(m_D-m_B)+tan(\phi)m_Bm_D(n_B-n_D)}\\<br>{G_{BD}&#x3D;sin(\phi)(m_{D}-m_{B})+cos(\phi)m_{B}m_{D}(n_{B}-n_{D})}<br>\end{aligned}<br>$$</p><p>三个角度的位置示意图如下：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A0%87%E5%AE%9A%E7%AE%97%E6%B3%95/2.png"></p><p>因此：</p><p>$$<br>\phi&#x3D;pitch\\<br>\theta&#x3D;roll\\<br>\psi&#x3D;yaw<br>$$</p><p>这些角度的标定误差如下：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A0%87%E5%AE%9A%E7%AE%97%E6%B3%95/3.png"></p><h2 id="讨论-1"><a href="#讨论-1" class="headerlink" title="讨论"></a>讨论</h2><p>上述方法中，标定误差主要受到以下因素影响：</p><ul><li>地面平整度：地面平整度越高，标定误差越小。</li><li>车辆沿直线行驶,即：平行车道行驶</li><li>这里并没有要求车辆必须行驶在车道中间，因为并未要求$|X_{wA}|&#x3D;|X_{wB}|$且$<br>|X_{wC}|&#x3D;|X_{wD}|$</li><li>该方法可以求解相机的完整旋转矩阵$R&#x3D;[pitch,yaw,roll]$，且在已知相机安装高度的情况下可以求解相机安装高度$h$</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">M</span><span class="token punctuation">(</span>Point2f Point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> focal_length_x_ <span class="token operator">/</span> <span class="token punctuation">(</span>Point<span class="token punctuation">.</span>x <span class="token operator">-</span> principal_x_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">float</span> <span class="token function">N</span><span class="token punctuation">(</span>Point2f Point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Point<span class="token punctuation">.</span>y <span class="token operator">-</span> principal_y_<span class="token punctuation">)</span> <span class="token operator">/</span> focal_length_y_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">float</span> <span class="token function">MN</span><span class="token punctuation">(</span>Point2f Point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">M</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">N</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 计算yaw,roll和pitch值</span><span class="token keyword">auto</span> tan_yaw <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">MN</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">MN</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">M</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">M</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token function">MN</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">MN</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">M</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">M</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span>                 <span class="token punctuation">(</span><span class="token function">M</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">M</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">N</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">N</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">M</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">M</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">M</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">M</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">N</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">N</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">M</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">M</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> yaw <span class="token operator">=</span> <span class="token function">ArcTanD</span><span class="token punctuation">(</span>tan_yaw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">auto</span> tan_pitch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">SinD</span><span class="token punctuation">(</span>yaw<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">M</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">M</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">N</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">N</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">CosD</span><span class="token punctuation">(</span>yaw<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">MN</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">MN</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">M</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">M</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> pitch <span class="token operator">=</span> <span class="token function">ArcTanD</span><span class="token punctuation">(</span>tan_pitch<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="标定误差补偿"><a href="#标定误差补偿" class="headerlink" title="标定误差补偿"></a>标定误差补偿</h1><ul><li><a href="https://candyguo.github.io/blog-post-15/">Pitch Estimation in autonomous driving</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>可以进一步通过下面的文章进行学习：</p><ul><li><a href="https://hermit.blog.csdn.net/article/details/120900854">逆透视变换(IPM)多种方式及代码总结</a></li><li><a href="https://www.guyuehome.com/detail?id=1825498970869002241">经典文献阅读之–Online Extrinsic Camera Calibration for Temporally Consistent IPM (IPM外参标定) </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 外参标定 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 车道线标定 </tag>
            
            <tag> 外参标定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ultra Fast Deep Lane Detection with Hybrid Anchor Driven Ordinal Classification</title>
      <link href="/2024/09/24/ultra-fast-deep-lane-detection-with-hybrid-anchor-driven-ordinal-classification/"/>
      <url>/2024/09/24/ultra-fast-deep-lane-detection-with-hybrid-anchor-driven-ordinal-classification/</url>
      
        <content type="html"><![CDATA[<p>将车道线检测的过程，视为在全局特征(通过全卷积CNN提取到的特征图)的基础上，基于行方向上的位置选择与分类。每个图像4条车道线，每条车道线固定18个点。</p><p>COde:<a href="https://github.com/cfzd/Ultra-Fast-Lane-Detection-v2">https://github.com/cfzd/Ultra-Fast-Lane-Detection-v2</a></p><div>  <iframe src="/pdfjs/web/viewer.html?file=https://github.com/geiyiren/LDWPaper/blob/main/Ultra%20Fast%20Deep%20Lane%20Detection%20with%20Hybrid%20Anchor%20Driven%20Ordinal%20Classification.pdf" width="100%" height="500px" frameborder="0">  </iframe></div> <h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://mp.weixin.qq.com/s/ylNM8xA2iao2jvB_NaQ6FA">https://mp.weixin.qq.com/s/ylNM8xA2iao2jvB_NaQ6FA</a></li><li><a href="https://mp.weixin.qq.com/s/xFTdsSIMPbyyt6RIyYqb4A">https://mp.weixin.qq.com/s/xFTdsSIMPbyyt6RIyYqb4A</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 车道线检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 车道线检测 </tag>
            
            <tag> Ultra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ultra Fast Structure-aware Deep Lane Detection</title>
      <link href="/2024/09/24/ultra-fast-structure-aware-deep-lane-detection/"/>
      <url>/2024/09/24/ultra-fast-structure-aware-deep-lane-detection/</url>
      
        <content type="html"><![CDATA[<p>将车道线检测的过程，视为在全局特征(通过全卷积CNN提取到的特征图)的基础上，基于行方向上的位置选择与分类。每个图像4条车道线，每条车道线固定18个点。</p><p>COde:<a href="https://github.com/cfzd/Ultra-Fast-Lane-Detection">https://github.com/cfzd/Ultra-Fast-Lane-Detection</a></p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://mp.weixin.qq.com/s/ylNM8xA2iao2jvB_NaQ6FA">https://mp.weixin.qq.com/s/ylNM8xA2iao2jvB_NaQ6FA</a></li><li><a href="https://mp.weixin.qq.com/s/xFTdsSIMPbyyt6RIyYqb4A">https://mp.weixin.qq.com/s/xFTdsSIMPbyyt6RIyYqb4A</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 车道线检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 车道线检测 </tag>
            
            <tag> Ultra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux性能分析</title>
      <link href="/2024/09/14/linux-xing-neng-fen-xi/"/>
      <url>/2024/09/14/linux-xing-neng-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="perf"><a href="#perf" class="headerlink" title="perf"></a>perf</h1><h2 id="生成火焰图进行CPU占用分析"><a href="#生成火焰图进行CPU占用分析" class="headerlink" title="生成火焰图进行CPU占用分析"></a>生成火焰图进行CPU占用分析</h2><ul><li>首先使用 perf record 命令记录进程的 CPU 使用情况</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定线程ID</span>./perf record <span class="token parameter variable">-F</span> <span class="token number">99</span> <span class="token parameter variable">-p</span> 线程ID <span class="token parameter variable">-g</span> - <span class="token function">sleep</span> <span class="token number">60</span><span class="token comment">#指定线程名称</span>./perf record <span class="token parameter variable">-F</span> <span class="token number">99</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">$(</span>pidof 线程名称<span class="token variable">)</span></span> <span class="token parameter variable">-g</span> - <span class="token function">sleep</span> <span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 perf script 工具对 perf.data 进行解析</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> perf script <span class="token parameter variable">-i</span> perf.data <span class="token operator">&amp;></span> perf.unfold<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 Flame Graph 工具将 perf.unfold 中的符号折叠 &#x2F;&#x2F;生成脚本文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./FlameGraph/stackcollapse-perf.pl perf.unfold <span class="token operator">&amp;></span> perf.folded<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 Flame Graph 工具将 perf.folded 生成 svg 火焰图</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> FlameGraph/flamegraph.pl perf.folded <span class="token operator">></span> perf.svg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实时显示CPU占用"><a href="#实时显示CPU占用" class="headerlink" title="实时显示CPU占用"></a>实时显示CPU占用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定进程</span>./perf <span class="token function">top</span> <span class="token parameter variable">-d1</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">$(</span>pidof 线程名称<span class="token variable">)</span></span><span class="token comment"># 指定线程+库</span>./perf <span class="token function">top</span> <span class="token parameter variable">-d1</span> <span class="token parameter variable">--dsos</span> 动态库.so <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">$(</span>pidof 线程名称<span class="token variable">)</span></span><span class="token comment">#指定线程</span>./perf <span class="token function">top</span> <span class="token parameter variable">-d1</span> <span class="token parameter variable">-t</span> 线程ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看程序占用CPU的位置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geiyiren:build$ addr2line <span class="token parameter variable">-e</span> ./install/lib/liblane_detection_adas.so 0x00014c14/home/geiyiren/Code/5_adas/adas_core/src/perception/lanes/lines/detector/perceptron.cpp:114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>0x00014c14为.&#x2F;perf top输出的库的地址</li></ul><h2 id="确保perf分析时可以看到函数名称"><a href="#确保perf分析时可以看到函数名称" class="headerlink" title="确保perf分析时可以看到函数名称"></a>确保perf分析时可以看到函数名称</h2><ul><li><p>内核支持perf功能</p></li><li><p>perf版本和内核版本一致</p></li><li><p>编译后的可执行文件中包含调试信息  </p><p>在CMakeLists.txt中设置编译选项为  <code>set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -g&quot;)</code></p></li><li><p>设置函数的符号的可见性为”default”  </p><p>方法1：在CMakeLists.txt中设置<br><code>add_definitions(&quot; -fvisibility=hidden &quot;)</code></p><p>方法2：在函数声明时，显式指定函数的可见性<br><code>__attribute__((visibility(&quot;default&quot;))) void function();</code></p><blockquote><p>在adas代码中将函数或者类声明为<code>HQ_FLAG_LOCAL</code>时，表示符号不可见；声明为<code>HQ_FLAG_DLL_API</code>时符号可见。</p></blockquote></li></ul><h1 id="top"><a href="#top" class="headerlink" title="top"></a>top</h1><ul><li>top</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">TERM</span></span><span class="token operator">=</span>xterm<span class="token function">top</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">$(</span>pidof 线程名称<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>busybox top<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">busybox <span class="token function">top</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">$(</span>pidof 线程名称<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mpstat <span class="token parameter variable">-P</span> ALL <span class="token number">1</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>mpstat：显示处理器统计信息的命令。</li><li>-P ALL：显示所有处理器的统计信息的选项。</li><li>1：指定更新之间的时间间隔（以秒为单位）。</li><li>10：表示要显示的更新次数。</li></ul><h1 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc-arm-linux-gnueabi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="sysstat使用"><a href="#sysstat使用" class="headerlink" title="sysstat使用"></a>sysstat使用</h1><ul><li><p>下载sysstat源码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/sysstat/sysstat/archive/master.zip<span class="token function">unzip</span> sysstat-master.zip<span class="token builtin class-name">cd</span> sysstat-master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>配置RV1126交叉编译工具链</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>arm-linux-gnueabihf-<span class="token builtin class-name">export</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置编译选项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token assign-left variable">CC</span><span class="token operator">=</span><span class="token variable">$&#123;CROSS_COMPILE&#125;</span>gcc <span class="token parameter variable">--host</span><span class="token operator">=</span>arm-linux-gnueabihf <span class="token parameter variable">--prefix</span><span class="token operator">=</span>工具安装的绝对路径<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装后生成的工具存放在<code>工具安装的绝对路径</code></p></li><li><p>iostat - 提供CPU统计，存储I&#x2F;O统计（磁盘设备，分区及网络文件系统）</p></li><li><p>mpstat - 提供单个或组合CPU相关统计</p></li><li><p>pidstat - 提供Linux进程级别统计：I&#x2F;O、CPU、内存等</p></li><li><p>sar - 收集、报告、保存系统活动信息：CPU、内存、磁盘、中断、网络接口、TTY、内核表等</p></li><li><p>sadc - 系统活动数据收集器，作为sar后端使用</p></li><li><p>sa1 - 收集系统活动日常数据，并二进制格式存储，它作为sadc的工具的前端，可以通过cron来调用</p></li><li><p>sa2 - 生成系统每日活动报告，同样可作为sadc的工具的前端，可以通过cron来调用</p></li><li><p>sadf - 可以以CSV、XML格式等显示sar收集的性能数据，这样非常方便的将系统数据导入到数据库中，或导入到Excel中来生成图表</p></li><li><p>nfsiostat-sysstat: 提供NFS I&#x2F;O统计</p></li><li><p>cifsiostat: 提供CIFS统计</p></li></ul><h2 id="pidstat使用"><a href="#pidstat使用" class="headerlink" title="pidstat使用"></a>pidstat使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Usage: ./pidstat <span class="token punctuation">[</span> options <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>interval<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>count<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> <span class="token operator">&lt;</span>program<span class="token operator">></span> <span class="token operator">&lt;</span>args<span class="token operator">></span> <span class="token punctuation">]</span>Options are:<span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-H</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-h</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-I</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-l</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-R</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-r</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-t</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-U</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token parameter variable">-u</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-V</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-v</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-w</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-C</span> <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-G</span> <span class="token operator">&lt;</span>process_name<span class="token operator">></span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token parameter variable">-p</span> <span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token operator">|</span> SELF <span class="token operator">|</span> ALL <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-T</span> <span class="token punctuation">&#123;</span> TASK <span class="token operator">|</span> CHILD <span class="token operator">|</span> ALL <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token parameter variable">--dec</span><span class="token operator">=</span><span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">--human</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用方法<br> <code>./pidstat -p 4045 -t -u -r 1 10</code></li></ul><blockquote><p>-u统计CPU使用。-r统计内存使用。-t统计线程。-p指定进程id</p></blockquote><h2 id="sar使用"><a href="#sar使用" class="headerlink" title="sar使用"></a>sar使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Usage: ./sar <span class="token punctuation">[</span> options <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>interval<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>count<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token punctuation">]</span>Main options and reports <span class="token punctuation">(</span>report name between square brackets<span class="token punctuation">)</span>:        <span class="token parameter variable">-B</span>      Paging statistics <span class="token punctuation">[</span>A_PAGE<span class="token punctuation">]</span>        <span class="token parameter variable">-b</span>      I/O and transfer rate statistics <span class="token punctuation">[</span>A_IO<span class="token punctuation">]</span>        <span class="token parameter variable">-d</span>      Block devices statistics <span class="token punctuation">[</span>A_DISK<span class="token punctuation">]</span>        <span class="token parameter variable">-F</span> <span class="token punctuation">[</span> MOUNT <span class="token punctuation">]</span>                Filesystems statistics <span class="token punctuation">[</span>A_FS<span class="token punctuation">]</span>        <span class="token parameter variable">-H</span>      Hugepages utilization statistics <span class="token punctuation">[</span>A_HUGE<span class="token punctuation">]</span>        <span class="token parameter variable">-I</span> <span class="token punctuation">[</span> SUM <span class="token operator">|</span> ALL <span class="token punctuation">]</span>                Interrupts statistics <span class="token punctuation">[</span>A_IRQ<span class="token punctuation">]</span>        <span class="token parameter variable">-m</span> <span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>keyword<span class="token operator">></span> <span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token operator">|</span> ALL <span class="token punctuation">&#125;</span>                Power management statistics <span class="token punctuation">[</span>A_PWR_<span class="token punctuation">..</span>.<span class="token punctuation">]</span>                Keywords are:                BAT     Batteries capacity                CPU     CPU instantaneous clock frequency                FAN     Fans speed                FREQ    CPU average clock frequency                IN      Voltage inputs                TEMP    Devices temperature                USB     USB devices plugged into the system        <span class="token parameter variable">-n</span> <span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>keyword<span class="token operator">></span> <span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token operator">|</span> ALL <span class="token punctuation">&#125;</span>                Network statistics <span class="token punctuation">[</span>A_NET_<span class="token punctuation">..</span>.<span class="token punctuation">]</span>                Keywords are:                DEV     Network interfaces                EDEV    Network interfaces <span class="token punctuation">(</span>errors<span class="token punctuation">)</span>                NFS     NFS client                NFSD    NFS server                SOCK    Sockets <span class="token punctuation">(</span>v4<span class="token punctuation">)</span>                IP      IP traffic      <span class="token punctuation">(</span>v4<span class="token punctuation">)</span>                EIP     IP traffic      <span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span>                ICMP    ICMP traffic    <span class="token punctuation">(</span>v4<span class="token punctuation">)</span>                EICMP   ICMP traffic    <span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span>                TCP     TCP traffic     <span class="token punctuation">(</span>v4<span class="token punctuation">)</span>                ETCP    TCP traffic     <span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span>                UDP     UDP traffic     <span class="token punctuation">(</span>v4<span class="token punctuation">)</span>                SOCK6   Sockets <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>                IP6     IP traffic      <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>                EIP6    IP traffic      <span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span>                ICMP6   ICMP traffic    <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>                EICMP6  ICMP traffic    <span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span>                UDP6    UDP traffic     <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>                FC      Fibre channel HBAs                SOFT    Software-based network processing        <span class="token parameter variable">-q</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>keyword<span class="token operator">></span> <span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token operator">|</span> PSI <span class="token operator">|</span> ALL <span class="token punctuation">]</span>                System load and pressure-stall statistics                Keywords are:                LOAD    Queue length and load average statistics <span class="token punctuation">[</span>A_QUEUE<span class="token punctuation">]</span>                CPU     Pressure-stall CPU statistics <span class="token punctuation">[</span>A_PSI_CPU<span class="token punctuation">]</span>                IO      Pressure-stall I/O statistics <span class="token punctuation">[</span>A_PSI_IO<span class="token punctuation">]</span>                MEM     Pressure-stall memory statistics <span class="token punctuation">[</span>A_PSI_MEM<span class="token punctuation">]</span>        <span class="token parameter variable">-r</span> <span class="token punctuation">[</span> ALL <span class="token punctuation">]</span>                Memory utilization statistics <span class="token punctuation">[</span>A_MEMORY<span class="token punctuation">]</span>        <span class="token parameter variable">-S</span>      Swap space utilization statistics <span class="token punctuation">[</span>A_MEMORY<span class="token punctuation">]</span>        <span class="token parameter variable">-u</span> <span class="token punctuation">[</span> ALL <span class="token punctuation">]</span>                CPU utilization statistics <span class="token punctuation">[</span>A_CPU<span class="token punctuation">]</span>        <span class="token parameter variable">-v</span>      Kernel tables statistics <span class="token punctuation">[</span>A_KTABLES<span class="token punctuation">]</span>        <span class="token parameter variable">-W</span>      Swapping statistics <span class="token punctuation">[</span>A_SWAP<span class="token punctuation">]</span>        <span class="token parameter variable">-w</span>      Task creation and system switching statistics <span class="token punctuation">[</span>A_PCSW<span class="token punctuation">]</span>        <span class="token parameter variable">-y</span>      TTY devices statistics <span class="token punctuation">[</span>A_SERIAL<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用方法<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:交叉编译生成的lib/sa的路径./sar <span class="token parameter variable">-u</span> <span class="token number">1</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>上述命令将统计10次CPU占用，每次间隔1s<blockquote><p>sar 依赖<code>sadc</code>,这里需要指定<code>sadc</code>所在目录的路径</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> perf </tag>
            
            <tag> top </tag>
            
            <tag> sysstat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年车道线检测综述</title>
      <link href="/2024/09/14/2022-nian-che-dao-xian-jian-ce-zong-shu/"/>
      <url>/2024/09/14/2022-nian-che-dao-xian-jian-ce-zong-shu/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://blog.csdn.net/u012932320/article/details/125379388?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~baidujs_baidulandingword~Ctr-1-125379388-blog-127323953.235%5Ev43%5Epc_blog_bottom_relevance_base3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~baidujs_baidulandingword~Ctr-1-125379388-blog-127323953.235%5Ev43%5Epc_blog_bottom_relevance_base3&utm_relevant_index=1">2022年车道线检测综述</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 车道线检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 综述 </tag>
            
            <tag> 车道线检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaneNet实现车道线分割与聚类的端到端网络</title>
      <link href="/2024/09/14/lanenet-shi-xian-che-dao-xian-fen-ge-yu-ju-lei-de-duan-dao-duan-wang-luo/"/>
      <url>/2024/09/14/lanenet-shi-xian-che-dao-xian-fen-ge-yu-ju-lei-de-duan-dao-duan-wang-luo/</url>
      
        <content type="html"><![CDATA[<ul><li><p>本文将车道检测问题看作一个实例分割问题（其中每个车道都形成自己的实例）可以进行端到端的训练。</p></li><li><p>装配车道前对分段的车道实例进行参数化，我们应用了一个以图像为条件的学习透视变换（不适用于固定的“鸟瞰”变换），这样，我们确保了一种对道路变化具有鲁棒性的车道匹配。</p></li><li><p>运行速度为50帧&#x2F;秒，可以处理不同数量的车道并应对车道变化。</p></li><li><p>在tuSimple 数据集上取得了不错的效果。</p></li></ul><p>Paper:<a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/LDW/LaneNet_Towards%20End_to_End%20Lane%20Detection%20an%20Instance%20Segmentation%20Approach.pdf">Towards End-to-End Lane Detection an Instance Segmentation Approach</a></p><p>COde:<a href="https://github.com/MaybeShewill-CV/lanenet-lane-detection">https://github.com/MaybeShewill-CV/lanenet-lane-detection</a></p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://www.cnblogs.com/xiangs/p/12707472.html">https://www.cnblogs.com/xiangs/p/12707472.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 车道线检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 车道线检测 </tag>
            
            <tag> LaneNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识蒸馏在车道线分割上的应用</title>
      <link href="/2024/09/14/zhi-shi-zheng-liu-zai-che-dao-xian-fen-ge-shang-de-ying-yong/"/>
      <url>/2024/09/14/zhi-shi-zheng-liu-zai-che-dao-xian-fen-ge-shang-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<ul><li><p>知识蒸馏（Knowledge distillation）：用于把大网络学习到的内容（knowledge）迁移到小网络中。具体有两个目标要学习，一是小网络输出与真值的相似，二是让小网络与大网络的输出相似。</p></li><li><p>注意力蒸馏（Attention distillation）：用于把大网络学习到的注意力特征图（attention map）迁移到小网络中。具体在知识蒸馏基础上，再对网络中间层特征进行迁移，以保证大小网络中间的注意力特征图相似。</p></li><li><p>自注意力蒸馏（Self Attention Distillation）：抛弃大网络，单独在小网络中对不同层学习到的注意力特征图进行迁移学习。</p></li></ul><p>将SAD嵌入到自己的网络中，只需要在训练阶段加入即可，因此不会给inference过程增加多余的参数和计算量，也不会影响模型的性能。</p><p>Paper:<a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/LDW/SAD_%20Learning%20Lightweight%20Lane%20Detection%20CNNs%20by%20Self%20Attention%20Distillation.pdf">Learning Lightweight Lane Detection CNNs by Self Attention Distillation</a></p><p>COde:<a href="https://github.com/cardwing/Codes-for-Lane-Detection">https://github.com/cardwing/Codes-for-Lane-Detection</a></p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://www.cnblogs.com/xiangs/p/12707472.html">https://www.cnblogs.com/xiangs/p/12707472.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 车道线检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 车道线检测 </tag>
            
            <tag> 知识蒸馏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv图像保存与读取时的像素一致性</title>
      <link href="/2024/09/11/opencv-tu-xiang-bao-cun-yu-du-qu-shi-de-xiang-su-yi-zhi-xing/"/>
      <url>/2024/09/11/opencv-tu-xiang-bao-cun-yu-du-qu-shi-de-xiang-su-yi-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="现象说明"><a href="#现象说明" class="headerlink" title="现象说明"></a>现象说明</h1><p>使用opencv创建一张黑图，然后保存，再读取，发现图像像素被修改</p><h1 id="原因一：保存图像时使用了jpg或jpeg格式的图像"><a href="#原因一：保存图像时使用了jpg或jpeg格式的图像" class="headerlink" title="原因一：保存图像时使用了jpg或jpeg格式的图像"></a>原因一：保存图像时使用了<code>jpg</code>或<code>jpeg</code>格式的图像</h1><p><code>jpg</code>或<code>jpeg</code>格式的图像在保存时，会使用有损压缩，导致图像像素被修改</p><h1 id="原因二：保存图像时使用了压缩参数，例如保存png格式的图像，但使用了cv2-IMWRITE-PNG-COMPRESSION参数"><a href="#原因二：保存图像时使用了压缩参数，例如保存png格式的图像，但使用了cv2-IMWRITE-PNG-COMPRESSION参数" class="headerlink" title="原因二：保存图像时使用了压缩参数，例如保存png格式的图像，但使用了cv2.IMWRITE_PNG_COMPRESSION参数"></a>原因二：保存图像时使用了压缩参数，例如保存<code>png</code>格式的图像，但使用了<code>cv2.IMWRITE_PNG_COMPRESSION</code>参数</h1><p><code>png</code>格式的图像在保存时，可以使用有损压缩，但需要使用<code>cv2.IMWRITE_PNG_COMPRESSION</code>参数来指定压缩质量，否则默认使用无损压缩，不会修改图像像素</p><p>支持压缩的格式：PNG、JPEG、WebP、TIFF，且<strong>JPEG格式是有损压缩</strong></p><p>不支持压缩的格式：BMP、PPM&#x2F;PGM&#x2F;PBM</p><h1 id="原因三：保存图像的通道和读取图像的通道不一致"><a href="#原因三：保存图像的通道和读取图像的通道不一致" class="headerlink" title="原因三：保存图像的通道和读取图像的通道不一致"></a>原因三：保存图像的通道和读取图像的通道不一致</h1><p>例如：</p><p>图像创建时使用<code>image = np.zeros((128, 256), dtype=np.uint8)</code></p><p>保存时使用<code>cv2.imwrite(&#39;image.png&#39;, image)</code></p><p>读取时使用<code>image = cv2.imread(&#39;image.png&#39;, cv2.IMREAD_COLOR)</code>或<code>image = cv2.imread(&#39;image.png&#39;)</code></p><p>这样会导致图像的通道不一致，导致图像像素被修改，创建的图像为灰度图像<code>8-bit Gray</code>，读取的图像时如果不指定通道，默认读取为彩色图像<code>8-bit sRGB</code>，导致图像像素被修改</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p>使用无损压缩的格式保存图像，例如<code>png</code>,<code>bmp</code>,<code>tiff</code>格式   </p></li><li><p>创建图像时指定通道，例如<code>image = np.zeros((128, 256), dtype=np.uint8)</code>，读取图像时指定通道，例如<code>image = cv2.imread(&#39;image.png&#39;, cv2.IMREAD_GRAYSCALE)</code></p></li><li><p>将图像数据保存为numpy文件，再读取，例如<code>np.save(&#39;image.npy&#39;, image)</code>，<code>image = np.load(&#39;image.npy&#39;)</code></p></li><li><p>在图像分割任务中，使用二值图是，对图像进行类别处理时如下操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mask <span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'mask.png'</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span><span class="token comment"># mask[mask!=0]=1</span>mask<span class="token punctuation">[</span>mask<span class="token operator">&lt;=</span><span class="token number">250</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>mask<span class="token punctuation">[</span>mask<span class="token operator">></span><span class="token number">250</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>mask[mask!=0]=255</code>后，图像像素被修改的现象为：</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/opencv%E5%9B%BE%E5%83%8F%E4%BF%9D%E5%AD%98%E4%B8%8E%E8%AF%BB%E5%8F%96%E6%97%B6%E7%9A%84%E5%83%8F%E7%B4%A0%E4%B8%80%E8%87%B4%E6%80%A7/0.jpg"><br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/opencv%E5%9B%BE%E5%83%8F%E4%BF%9D%E5%AD%98%E4%B8%8E%E8%AF%BB%E5%8F%96%E6%97%B6%E7%9A%84%E5%83%8F%E7%B4%A0%E4%B8%80%E8%87%B4%E6%80%A7/1.jpg"></p><h1 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> sys<span class="token keyword">import</span> randomimage_formats <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'.jpg'</span><span class="token punctuation">,</span>    <span class="token comment"># JPEG 格式</span>    <span class="token string">'.jpeg'</span><span class="token punctuation">,</span>   <span class="token comment"># JPEG 格式</span>    <span class="token string">'.png'</span><span class="token punctuation">,</span>    <span class="token comment"># PNG 格式</span>    <span class="token string">'.bmp'</span><span class="token punctuation">,</span>    <span class="token comment"># BMP 格式</span>    <span class="token string">'.tiff'</span><span class="token punctuation">,</span>   <span class="token comment"># TIFF 格式</span>    <span class="token string">'.tif'</span><span class="token punctuation">,</span>    <span class="token comment"># TIFF 格式</span><span class="token punctuation">]</span><span class="token comment"># 初始化计数字典</span>format_counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">for</span> fmt <span class="token keyword">in</span> image_formats<span class="token punctuation">&#125;</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建全黑图像</span>        image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        <span class="token comment"># 修改部分像素为255</span>        <span class="token comment"># 圆心坐标</span>        center <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token comment"># 圆的半径</span>        radius <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>        <span class="token comment"># 点的颜色（BGR格式，这里是红色）</span>        color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>  <span class="token comment"># 红色</span>        <span class="token comment"># 点的半径（在图像上绘制的点的半径）</span>        point_radius <span class="token operator">=</span> <span class="token number">2</span>        <span class="token comment"># 生成圆上的点</span>        num_points <span class="token operator">=</span> <span class="token number">360</span>  <span class="token comment"># 可以根据需要调整点的数量</span>        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_points<span class="token punctuation">)</span><span class="token punctuation">:</span>            theta <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> angle <span class="token operator">/</span> num_points            x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>center<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> radius <span class="token operator">*</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span>            y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>center<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> radius <span class="token operator">*</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 边界检查</span>            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> y <span class="token operator">&lt;</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                image<span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>                        num_1 <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>image<span class="token operator">==</span><span class="token number">255</span><span class="token punctuation">)</span>        <span class="token builtin">format</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>image_formats<span class="token punctuation">)</span>                <span class="token comment"># 源文件路径</span>        source_file <span class="token operator">=</span> <span class="token string">'src_image'</span><span class="token operator">+</span><span class="token builtin">format</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>           <span class="token comment"># 保存图像</span>        <span class="token comment"># np.save(source_file, image)</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>source_file<span class="token punctuation">,</span> image<span class="token punctuation">)</span>        <span class="token comment"># 重新加载图像</span>        <span class="token comment"># loaded_image = np.load(source_file)</span>        loaded_image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>source_file<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>loaded_image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        num_2 <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>loaded_image<span class="token operator">==</span><span class="token number">255</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span> loaded_image<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> num_1<span class="token operator">!=</span>num_2<span class="token punctuation">:</span>            <span class="token comment"># 检查扩展名是否在支持的格式中</span>            <span class="token keyword">if</span> <span class="token builtin">format</span> <span class="token keyword">in</span> format_counts<span class="token punctuation">:</span>                format_counts<span class="token punctuation">[</span><span class="token builtin">format</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\033[K"</span><span class="token punctuation">)</span>  <span class="token comment"># 清除当前行的内容</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\033[</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span></span><span class="token string">G"</span></span><span class="token punctuation">)</span>  <span class="token comment"># 将光标移动到行的开始位置</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Step </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token number">1000000</span><span class="token operator">-</span>i<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_1<span class="token operator">-</span>num_2<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span>format_counts<span class="token punctuation">)</span><span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span>format_counts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像缩放插值方法使用说明</title>
      <link href="/2024/08/27/tu-xiang-suo-fang-cha-zhi-fang-fa-shi-yong-shuo-ming/"/>
      <url>/2024/08/27/tu-xiang-suo-fang-cha-zhi-fang-fa-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="方法概览"><a href="#方法概览" class="headerlink" title="方法概览"></a>方法概览</h1><ul><li>图像加载</li></ul><table><thead><tr><th align="center">库</th><th align="center">函数</th><th align="center">默认加载图像格式</th></tr></thead><tbody><tr><td align="center">OpenCV</td><td align="center">imread</td><td align="center"><code>BGR</code></td></tr><tr><td align="center">PIL</td><td align="center">open</td><td align="center">RGB</td></tr><tr><td align="center">torchvision.datasets</td><td align="center">ImageFolder</td><td align="center">RGB</td></tr></tbody></table><blockquote><p>ImageFolder类通过Pillow（PIL）库来加载图像，而Pillow加载图像的默认模式是RGB。因此，使用ImageFolder加载图像时，它们会以RGB格式加载。</p></blockquote><ul><li>尺寸变换</li></ul><table><thead><tr><th align="center">库</th><th align="center">函数</th><th align="center">默认加载图像格式</th></tr></thead><tbody><tr><td align="center">OpenCV</td><td align="center">resize</td><td align="center">双线性插值<code>INTER_LINEAR</code></td></tr><tr><td align="center">PIL</td><td align="center">Resize</td><td align="center">根据输入图像格式确定</td></tr><tr><td align="center">torchvision.transforms</td><td align="center">Resize</td><td align="center">双线性插值<code>InterpolationMode.BILINEAR</code></td></tr></tbody></table><p><strong>注意：opencv 的<code>INTER_NEAREST_EXACT</code>比特精确近邻取样插值方法的结果和PIL的<code>NEAREST</code>最近邻算法的结果是一致的。</strong></p><h1 id="OpenCV图像缩放"><a href="#OpenCV图像缩放" class="headerlink" title="OpenCV图像缩放"></a>OpenCV图像缩放</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>InputArray src<span class="token punctuation">,</span>OutputArray dst<span class="token punctuation">,</span>Size dsize<span class="token punctuation">,</span><span class="token keyword">double</span> fx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">double</span> fy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> interpolation <span class="token operator">=</span> INTER_LINEAR <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>opencv默认的图像缩放插值方法为<strong>双线性插值</strong><code>INTER_LINEAR</code>。</li><li>支持的插值方法如下：</li></ul><table><thead><tr><th align="center">插值方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">INTER_NEAREST</td><td align="center">近邻取样插值</td></tr><tr><td align="center">INTER_LINEAR</td><td align="center">双线性插值</td></tr><tr><td align="center">INTER_CUBIC</td><td align="center">双三次插值</td></tr><tr><td align="center">INTER_AREA</td><td align="center">区域插值。使用像素区域关系的重采样。它可能是一种首选的图像抽取方法，因为它提供了莫尔’免费的结果。但是当缩放图像时，它类似于 INTER _ NEAREST 方法。</td></tr><tr><td align="center">INTER_LANCZOS4</td><td align="center">Lanczos插值。8乘以8的 Lanczos 插值</td></tr><tr><td align="center">INTER_LINEAR_EXACT</td><td align="center">Bit exact bilinear interpolation</td></tr><tr><td align="center">INTER_NEAREST_EXACT</td><td align="center">比特精确近邻取样插值。这将产生与 PIL、 scikit-image 或 Matlab 中最近邻法相同的结果</td></tr><tr><td align="center">WARP_FILL_OUTLIERS</td><td align="center">flag:填充所有目标图像像素。如果其中一些对应于源图像中的异常值，则将其设置为零</td></tr><tr><td align="center">WARP_INVERSE_MAP</td><td align="center">flag, inverse transformation</td></tr></tbody></table><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>InputArray src<span class="token punctuation">,</span>OutputArray dst<span class="token punctuation">,</span>Size dsize<span class="token punctuation">,</span><span class="token keyword">double</span> fx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">double</span> fy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> interpolation <span class="token operator">=</span> INTER_LINEAR <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>src<span class="token punctuation">,</span> dsize<span class="token punctuation">[</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token punctuation">,</span> fx<span class="token punctuation">[</span><span class="token punctuation">,</span> fy<span class="token punctuation">[</span><span class="token punctuation">,</span> interpolation<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>dst<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="torchvision-transforms图像缩放"><a href="#torchvision-transforms图像缩放" class="headerlink" title="torchvision.transforms图像缩放"></a>torchvision.transforms图像缩放</h1><ul><li><p>torchvision.transforms.Resize函数可以实现图像的缩放，<strong>默认插值方法为双线性插值</strong><code>InterpolationMode.BILINEAR</code>。</p></li><li><p>如果输入为张量，则仅支持临近插值<code>InterpolationMode.NEAREST</code>, 双线性插值<code>InterpolationMode.BILINEAR</code> 和双三次插值<code>InterpolationMode.BICUBIC</code></p></li><li><p>也支持PIL库的插值方法,例如： <code>transforms.Resize(args.resolution, interpolation=PIL.Image.BILINEAR)</code></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Resize</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Resize the input image to the given size.    If the image is torch Tensor, it is expected    to have [..., H, W] shape, where ... means an arbitrary number of leading dimensions    Args:        size (sequence or int): Desired output size. If size is a sequence like            (h, w), output size will be matched to this. If size is an int,            smaller edge of the image will be matched to this number.            i.e, if height > width, then image will be rescaled to            (size * height / width, size).            In torchscript mode size as single int is not supported, use a sequence of length 1: ``[size, ]``.        interpolation (InterpolationMode): Desired interpolation enum defined by            :class:`torchvision.transforms.InterpolationMode`. Default is ``InterpolationMode.BILINEAR``.            If input is Tensor, only ``InterpolationMode.NEAREST``, ``InterpolationMode.BILINEAR`` and            ``InterpolationMode.BICUBIC`` are supported.            For backward compatibility integer values (e.g. ``PIL.Image.NEAREST``) are still acceptable.    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="PIL的图像缩放"><a href="#PIL的图像缩放" class="headerlink" title="PIL的图像缩放"></a>PIL的图像缩放</h1><ul><li>默认的插值方法会根据输入图像的不同而有所不同：</li></ul><table><thead><tr><th align="center">输入图像格式</th><th align="center">差值方法</th></tr></thead><tbody><tr><td align="center"><code>1</code></td><td align="center"><code>Resampling.NEAREST</code></td></tr><tr><td align="center"><code>P</code></td><td align="center"><code>Resampling.NEAREST</code></td></tr><tr><td align="center">such as: <code>I;16</code> and so on</td><td align="center"><code>Resampling.NEAREST</code></td></tr><tr><td align="center">Otherwise</td><td align="center"><code>Resampling.BICUBIC</code></td></tr></tbody></table><h2 id="图像格式说明"><a href="#图像格式说明" class="headerlink" title="图像格式说明"></a>图像格式说明</h2><ul><li><code>1</code> 模式</li></ul><p>表示二值图像，即每个像素要么是黑（值为0），要么是白（值为255）。<br>每个像素用1位表示。</p><ul><li><code>P</code> 模式：</li></ul><p>表示调色板图像，使用一个调色板将每个像素映射到实际的颜色。<br>每个像素用8位表示，颜色数据由一个调色板来定义，调色板中最多可以有256种颜色。<br>这两种模式在处理不同类型的图像时各有用途。例如，”1” 模式常用于需要非常简单的黑白图像，而 “P” 模式则适用于图像颜色相对有限的情况下。</p><ul><li><p>the image mode specifies a number of bits, such as “I;16”<br>the default filter is<code>Resampling.NEAREST</code>. </p></li><li><p>Otherwise<br>the default filter is<code>Resampling.BICUBIC</code>.</p></li></ul><p>为<strong>双线性插值</strong><code>Resampling.BICUBIC</code></p><ul><li>其他方法如下：<ul><li>PIL.Image.NEAREST (或 InterpolationMode.NEAREST)：<br>最近邻插值。速度快，但图像质量较低。</li><li>PIL.Image.BILINEAR (或 InterpolationMode.BILINEAR)：<br>双线性插值。效果较好，图像更平滑。</li><li>PIL.Image.BICUBIC (或 InterpolationMode.BICUBIC)：<br>双三次插值。生成的图像质量更好，但计算量较大。</li><li>PIL.Image.LANCZOS (或 InterpolationMode.LANCZOS)：<br>Lanczos插值。适用于高质量的图像处理，计算量大，但生成的图像质量最高。</li><li>PIL.Image.BOX (或 InterpolationMode.BOX)：<br>简单的平均插值，通常用于图像缩小。</li><li>PIL.Image.HAMMING (或 InterpolationMode.HAMMING)：<br>Hamming插值，一种平滑插值方法。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">resize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size<span class="token punctuation">,</span> resample<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> box<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> reducing_gap<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""       Returns a resized copy of this image.       :param size: The requested size in pixels, as a 2-tuple:          (width, height).       :param resample: An optional resampling filter.  This can be          one of :py:data:`Resampling.NEAREST`, :py:data:`Resampling.BOX`,          :py:data:`Resampling.BILINEAR`, :py:data:`Resampling.HAMMING`,          :py:data:`Resampling.BICUBIC` or :py:data:`Resampling.LANCZOS`.          If the image has mode "1" or "P", it is always set to          :py:data:`Resampling.NEAREST`. If the image mode specifies a number          of bits, such as "I;16", then the default filter is          :py:data:`Resampling.NEAREST`. Otherwise, the default filter is          :py:data:`Resampling.BICUBIC`. See: :ref:`concept-filters`.       :param box: An optional 4-tuple of floats providing          the source image region to be scaled.          The values must be within (0, 0, width, height) rectangle.          If omitted or None, the entire source is used.       :param reducing_gap: Apply optimization by resizing the image          in two steps. First, reducing the image by integer times          using :py:meth:`~PIL.Image.Image.reduce`.          Second, resizing using regular resampling. The last step          changes size no less than by ``reducing_gap`` times.          ``reducing_gap`` may be None (no first step is performed)          or should be greater than 1.0. The bigger ``reducing_gap``,          the closer the result to the fair resampling.          The smaller ``reducing_gap``, the faster resizing.          With ``reducing_gap`` greater or equal to 3.0, the result is          indistinguishable from fair resampling in most cases.          The default value is None (no optimization).       :returns: An :py:class:`~PIL.Image.Image` object.       """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment"># 读取图像</span>image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'path_to_image.jpg'</span><span class="token punctuation">)</span>resized_nearest <span class="token operator">=</span> image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>new_size<span class="token punctuation">,</span> Image<span class="token punctuation">.</span>NEAREST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h1><p><strong>当opencv和PIL同时使用双线性插值时得到的图像也存在差异</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npimage_path <span class="token operator">=</span> <span class="token string">'20240826_191429236236952.png'</span>image_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>image_PIL <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>image_PIL <span class="token operator">=</span> image_PIL<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image_size<span class="token punctuation">,</span> Image<span class="token punctuation">.</span>BILINEAR<span class="token punctuation">)</span>image_PIL <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image_PIL<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>image_cv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>image_cv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image_cv<span class="token punctuation">,</span> image_size<span class="token punctuation">,</span> interpolation<span class="token operator">=</span>cv2<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">)</span>image_cv <span class="token operator">=</span>  cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>image_cv<span class="token punctuation">,</span>  cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>image_cv <span class="token operator">=</span> image_cv<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment"># 计算两张图像的差值</span>difference <span class="token operator">=</span> cv2<span class="token punctuation">.</span>absdiff<span class="token punctuation">(</span>image_PIL<span class="token punctuation">,</span> image_cv<span class="token punctuation">)</span><span class="token comment"># 显示差值图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'Difference'</span><span class="token punctuation">,</span> difference<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>difference<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">9</span>. <span class="token number">11</span>.  <span class="token number">9</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">11</span>. <span class="token number">12</span>. <span class="token number">11</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">0</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span>  <span class="token punctuation">..</span>.  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">1</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">0</span>.  <span class="token number">0</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">1</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">11</span>. <span class="token number">13</span>. <span class="token number">11</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">10</span>. <span class="token number">10</span>. <span class="token number">10</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">1</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span>  <span class="token punctuation">..</span>.  <span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">0</span>.  <span class="token number">0</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">2</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">1</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span>. <span class="token number">13</span>. <span class="token number">11</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">12</span>. <span class="token number">11</span>. <span class="token number">12</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">1</span>.  <span class="token number">0</span>.<span class="token punctuation">]</span>  <span class="token punctuation">..</span>.  <span class="token punctuation">[</span> <span class="token number">2</span>.  <span class="token number">1</span>.  <span class="token number">2</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">2</span>.  <span class="token number">2</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">0</span>.  <span class="token number">0</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5</span>.  <span class="token number">6</span>.  <span class="token number">5</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">9</span>.  <span class="token number">9</span>. <span class="token number">12</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">2</span>.  <span class="token number">4</span>.<span class="token punctuation">]</span>  <span class="token punctuation">..</span>.  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">1</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">1</span>.  <span class="token number">2</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">2</span>.  <span class="token number">2</span>.  <span class="token number">2</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2</span>.  <span class="token number">3</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">3</span>.  <span class="token number">3</span>.  <span class="token number">2</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">2</span>.  <span class="token number">2</span>.  <span class="token number">2</span>.<span class="token punctuation">]</span>  <span class="token punctuation">..</span>.  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">1</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">1</span>.  <span class="token number">1</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">1</span>.  <span class="token number">1</span>.  <span class="token number">2</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">0</span>.  <span class="token number">0</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">2</span>.  <span class="token number">0</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">0</span>.  <span class="token number">0</span>.  <span class="token number">0</span>.<span class="token punctuation">]</span>  <span class="token punctuation">..</span>.  <span class="token punctuation">[</span> <span class="token number">3</span>.  <span class="token number">3</span>.  <span class="token number">3</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">3</span>.  <span class="token number">4</span>.  <span class="token number">2</span>.<span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">3</span>.  <span class="token number">4</span>.  <span class="token number">3</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>差值图像如下：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E6%8F%92%E5%80%BC%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/difference_image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像缩放 </tag>
            
            <tag> 插值方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch多卡训练</title>
      <link href="/2024/08/05/pytorch-duo-qia-xun-lian/"/>
      <url>/2024/08/05/pytorch-duo-qia-xun-lian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch多卡训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马氏距离和欧式距离</title>
      <link href="/2024/06/29/ma-shi-ju-chi-he-ou-shi-ju-chi/"/>
      <url>/2024/06/29/ma-shi-ju-chi-he-ou-shi-ju-chi/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>如果按照欧氏距离去理解马氏距离，一定会迷惑一段时间。因为欧氏距离可以计算两个点之间的距离，而马氏距离是计算一个点距离一个聚类的距离。如果想通过马氏距离去计算某两个点之间的距离是行不通的。下面按照一般的套路介绍一下欧氏距离与马氏距离的定义，从定义上可以发现二者之间的差异。</p><h3 id="欧氏距离"><a href="#欧氏距离" class="headerlink" title="欧氏距离"></a>欧氏距离</h3><p>p和q两个点之间的欧氏距离，p和q都由n个维度构成。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%A9%AC%E6%B0%8F%E8%B7%9D%E7%A6%BB%E5%92%8C%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB/20210416161613788.png"><br>对于维度尺度相同的情况，欧氏距离表现良好。如计算平面（二维）或三维空间中点之间的距离。但是对于有其它尺度的维度信息表现就不尽人意。下面两张表分别列举了面积和价格的关系，但是单位不同，这样子欧氏距离计算的表中任意两行之间的距离就差别巨大。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%A9%AC%E6%B0%8F%E8%B7%9D%E7%A6%BB%E5%92%8C%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB/20210416162105950.png"><br>从技术上讲，可以通过归一化或者(x-mean)&#x2F;std来克服这个问题，但是还有另一个主要缺点。也就是说，如果维度（数据集中的列）相关，（实际数据集中通常是这种情况），则点与点中心（分布）之间的欧氏距离所给出的信息很少或具有误导性关于一个点实际距离聚类的距离。下图左图X与Y两个维度（数据集的两列）不相关，欧氏距离可以很好的判别Point1和Point2距离聚类的远近。如右图所示，X与Y相关时欧氏距离就无法很好的表征Point1和Point2谁是异常点（离群点）了。因为，两个点与中心的距离相等（欧氏距离）。但是，即使两点之间的欧氏距离相等，但实际上只有蓝色点更接近该聚类。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%A9%AC%E6%B0%8F%E8%B7%9D%E7%A6%BB%E5%92%8C%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB/2021041616255653.png"></p><p>出现这个问题的原因是因为，欧氏距离仅是两点之间的距离。它不考虑数据集中的其余点如何变化。因此，它不能用来真正判断一个点实际上与点的分布（聚类）的接近程度。马氏距离在很多应用场合可以很好的解决这一问题。</p><h3 id="马氏距离"><a href="#马氏距离" class="headerlink" title="马氏距离"></a>马氏距离</h3><p>马氏距离是一种有效的多元距离计算方法，用于计算点与聚类（分布）之间的距离。其在多维数据集异常检测，高维数据集分类应用中表现出色。马氏距离是由Mahalanobis教授于1936年提出的，此后一直在各种统计应用中使用。<br>马氏距离的定义公式如下（定义如此简单，理解方式需要转变）：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%A9%AC%E6%B0%8F%E8%B7%9D%E7%A6%BB%E5%92%8C%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB/20210416163238303.png"><br>这里就不翻译了，英文更有助于理解，看到这里想必已经理解了马氏距离为什么是点到聚类的距离而不是点到点的距离了。</p><pre class="line-numbers language-none"><code class="language-none">其中,  - D^2        is the square of the Mahalanobis distance.  - x          is the vector of the observation (row in a dataset),  - m          is the vector of mean values of independent variables (mean of each column),  - C^(-1)     is the inverse covariance matrix of independent variables. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，如何理解以上公式呢？</p><p>让我们来看看 ( x − m ) T ∗ C − 1 (x-m)^T*C^{-1} (x−m)T∗C−1，x-m本质上是向量与平均值的距离。然后，将其除以协方差矩阵（或乘以协方差矩阵的逆），这实际上是常规的标准化公式 （ z &#x3D; （ x – m u ） &#x2F; s i g m a ） （z &#x3D;（x – mu）&#x2F; sigma） （z=（x–mu）&#x2F;sigma）。除以协方差的作用是，如果数据集中的变量高度相关，则协方差将很高。除以较大的协方差将有效缩短距离。同样，如果X不相关，则协方差也不高，距离也不会减少太多。</p><h3 id="基于Matlab计算马氏距离"><a href="#基于Matlab计算马氏距离" class="headerlink" title="基于Matlab计算马氏距离"></a>基于Matlab计算马氏距离</h3><p>假设有五个人的<a href="https://jamesmccaffrey.wordpress.com/2017/11/09/example-of-calculating-the-mahalanobis-distance/">数据</a>，每个人的数据为一个向量，包括身高、分数和年龄：</p><pre class="line-numbers language-none"><code class="language-none">X       Y       ZHeight  Score   Age64.0    580.0   29.066.0    570.0   33.068.0    590.0   37.069.0    660.0   46.073.0    600.0   55.0m &#x3D;68.0 600.0   40.0n&#x3D;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平均值m&#x3D; (68.0, 600.0, 40.0)。现在假设另一个人的数据为v &#x3D; (66, 640, 44), 通过马氏距离计算这个人与上面这一组人的马氏距离为5.33，下面基于Matlab 实现马氏距离的计算。<br>方法1：基于mahal函数</p><pre class="line-numbers language-none"><code class="language-none">obs &#x3D; [64.0    580.0   29.0; 66.0    570.0   33.0; 68.0    590.0   37.0; 69.0    660.0   46.0; 73.0    600.0   55.0];per &#x3D; [66, 640, 44];mdi &#x3D; sqrt(mahal(per,obs))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>mahal返回的是马氏距离的平方，需要开根号得到马氏距离。</p><pre class="line-numbers language-none"><code class="language-none">mdi &#x3D;    5.3345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>mahal函数是Matlab自带函数，无需自己定义。从定义可以清楚的看到范围的是距离的平方，X为样本数据，也就是提前已知的一个聚类数据，Y是观测数据，也就是要计算Y中的每一个观测距离样本数据集的距离，如果Y有n个观测（n行数据），将会计算出来n个距离，如果Y只有一个观测将会计算出一个距离。从mahal的实现来看<code>D2(I) = (Y(I,:)-MU) * SIGMA^(-1) * (Y(I,:)-MU)&#39;</code>转置是放在后面的，与马氏距离的定义有所不同。如果是自己实现马氏距离的时候，这一点要注意，否则会一直出错。</p><pre class="line-numbers language-none"><code class="language-none">function d &#x3D; mahal(Y,X);%MAHAL Mahalanobis distance.%   D2 &#x3D; MAHAL(Y,X) returns the Mahalanobis distance (in squared units) of%   each observation (point) in Y from the sample data in X, i.e.,%%      D2(I) &#x3D; (Y(I,:)-MU) * SIGMA^(-1) * (Y(I,:)-MU)&#39;,%%   where MU and SIGMA are the sample mean and covariance of the data in X.%   Rows of Y and X correspond to observations, and columns to variables.  X%   and Y must have the same number of columns, but can have different numbers%   of rows.  X must have more rows than columns.%%   Example:  Generate some highly correlated bivariate data in X.  The%   observations in Y with equal coordinate values are much closer to X as%   defined by Mahalanobis distance, compared to the observations with opposite%   coordinate values, even though they are all approximately equidistant from%   the mean using Euclidean distance.%%      x &#x3D; mvnrnd([0;0], [1 .9;.9 1], 100);%      y &#x3D; [1 1;1 -1;-1 1;-1 -1];%      MahalDist &#x3D; mahal(y,x)%      sqEuclidDist &#x3D; sum((y - repmat(mean(x),4,1)).^2, 2)%      plot(x(:,1),x(:,2),&#39;b.&#39;,y(:,1),y(:,2),&#39;ro&#39;)%%   See also PDIST.%   Copyright 1993-2007 The MathWorks, Inc. [rx,cx] &#x3D; size(X);[ry,cy] &#x3D; size(Y);if cx ~&#x3D; cy   error(message(&#39;stats:mahal:InputSizeMismatch&#39;));endif rx &lt; cx   error(message(&#39;stats:mahal:TooFewRows&#39;));endif any(imag(X(:))) | any(imag(Y(:)))   error(message(&#39;stats:mahal:NoComplex&#39;));endm &#x3D; mean(X,1);M &#x3D; m(ones(ry,1),:);C &#x3D; X - m(ones(rx,1),:);[Q,R] &#x3D; qr(C,0);ri &#x3D; R&#39;\(Y-M)&#39;;d &#x3D; sum(ri.*ri,1)&#39;*(rx-1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2：根据定义实现</p><pre class="line-numbers language-none"><code class="language-none">obs &#x3D; [64.0    580.0   29.0; 66.0    570.0   33.0; 68.0    590.0   37.0; 69.0    660.0   46.0; 73.0    600.0   55.0];per &#x3D; [66, 640, 44];mea &#x3D; mean(obs);icv &#x3D; inv(cov(obs));mdi &#x3D; sqrt(((per - mea)*icv)*(per - mea)&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mdi &#x3D;    5.3345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法3：excel实现</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%A9%AC%E6%B0%8F%E8%B7%9D%E7%A6%BB%E5%92%8C%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB/20210416184829571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dva2Fvd29rYW93b2thbzEyMzQ1,size_16,color_FFFFFF,t_70">  </p><p>对上述计算方法进行分析：</p><ul><li>马氏距离的计算公式为$D^2&#x3D;(x-m)^T\cdot C^{-1}\cdot(x-m)$，其中x为新数据，m为历史数据的均值，c为历史数据的协方差本实例中每一组历史数据包含x,y,z三个<br>，每一个历史距离作为向量处理，则v-m也是一个向量，即：（-2，40，4）.</li><li>对于方差和协方差，方差是一个单变量统计量，用于度量单个数据集的分布程度，即数据点离平均值的偏离程度。协方差是两个变量的联合统计量，用于度量两个变量如何一起变化。</li><li>其中inv-covar为协方差矩阵的逆矩阵</li><li>最终的马氏距离计算公式为：</li></ul><p>$$<br>D^2&#x3D;\begin{bmatrix}-2 \\ 40 \\ 4\end{bmatrix}^T*\begin{bmatrix}11.5 &amp;&amp; 50.0  &amp;&amp; 34.75 \\ 50.0 &amp;&amp; 1250.00 &amp;&amp; 205.00 \\ 34.75 &amp;&amp; 205.00 &amp;&amp; 110.00\end{bmatrix}^{-1}<em>\begin{bmatrix}-2 \\ 40 \\ 4\end{bmatrix}<br> $$<br>$$<br>D^2&#x3D;\begin{bmatrix}-2 \\ 40 \\ 4\end{bmatrix}^T</em>\begin{bmatrix}3.6885 &amp;&amp; 0.0627  &amp;&amp; -1.2821 \\ 0.0627 &amp;&amp; 0.0022 &amp;&amp; -0.0240 \\ -1.2821 &amp;&amp; -0.0240 &amp;&amp; 0.4588\end{bmatrix}*\begin{bmatrix}-2 \\ 40 \\ 4\end{bmatrix}&#x3D;28.4573<br> $$</p><p>最后一步，开平方得到最终的马氏距离为5.33</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>马氏距离不同于欧氏距离，马氏距离是对一组数据的距离，而不是像欧氏距离针对点与点的距离。明白了这一点就会发现很简单了。看资料还是要看英文版的，下面是博客内容出处的连篇文章。</p><p>参考<br><a href="https://www.machinelearningplus.com/statistics/mahalanobis-distance/">https://www.machinelearningplus.com/statistics/mahalanobis-distance/</a><br><a href="https://jamesmccaffrey.wordpress.com/2017/11/09/example-of-calculating-the-mahalanobis-distance/">https://jamesmccaffrey.wordpress.com/2017/11/09/example-of-calculating-the-mahalanobis-distance/</a></p><p>本文转自 <a href="https://blog.csdn.net/wokaowokaowokao12345/article/details/115765116">https://blog.csdn.net/wokaowokaowokao12345/article/details/115765116</a>，如有侵权，请联系删除。</p>]]></content>
      
      
      <categories>
          
          <category> 多目标匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马氏距离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增广路与匈牙利匹配算法</title>
      <link href="/2024/06/19/zeng-guang-lu-yu-xiong-ya-li-pi-pei-suan-fa/"/>
      <url>/2024/06/19/zeng-guang-lu-yu-xiong-ya-li-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>什么是匈牙利算法?</strong></p><p><strong>首先，匈牙利算法是解决匹配问题的。</strong>网上有一篇很火的文章：用男女配对的例子，说明匈牙利算法的核心思想。</p><p>这个例子很通俗易懂，但是没有涉及到数学概念。于是，我基于这个男女配对的例子，详细地介绍那些听上去很难懂的学术定义。</p><p>首先要从一些基本概念开始。</p><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a><strong>二分图</strong></h2><p>【定义】图论中的一种特殊模型。若能将无向图G&#x3D;(V,E)的顶点V划分为两个交集为空的顶点集，并且任意边的两个端点都分属于两个集合，则称图G为一个为二分图。</p><p>【解释】一张图要是二分图，需要满足以下几个要求：</p><p>（1） 无向图。 意思就是没有方向，一旦AB俩人有连线，就说明俩人相互喜欢，配对成功，不存在A单方面喜欢B的情况。</p><p>（2） 交集为空。意思就是男的是一个集合，女的是一个集合。不存在男生集合里混入女生的情况。</p><p>（3） 任意边的两个端点分属于两个集合。意思就是，男的只能和女的配对。任何男的不能和男的配对，任何女的不能和女的配对。</p><p>满足上述条件就是二分图。</p><p>以下情况分别是非二分图和二分图。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A2%9E%E5%B9%BF%E8%B7%AF%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-3b93c7ff96ee68c78d3ce03dbf903598_720w.png"></p><p>图1 二分图和非二分图</p><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a><strong>匹配</strong></h2><p>【定义】在G的一个子图M中，M的边集中的任意两条边都不依附于同一个顶点，则称M是一个匹配。</p><p>【解释】结合情侣配对问题，男生女生之间互生情愫的有很多，甚至有的人对多个人都有意向，因此潜在的情侣组合方式有很多种。所谓的“任意两条边都不依附于同一个顶点”，意思就是只要我们撮合的时候，不要给某个人安排两个对象就行。作为牵线人，我们可以撮合一对，也可以撮合两对，这样每一种撮合方式，都叫一个匹配。撮合成功的这些情侣就是所谓的子图M。</p><h2 id="最大匹配"><a href="#最大匹配" class="headerlink" title="最大匹配"></a><strong>最大匹配</strong></h2><p>按照上面的撮合方式，我们既不能把没有意向的两个人撮合在一起，有的人又对多个人有意向，因此可以花一点心思，尽可能地协调一下大家的意向，做到多撮合成功几对。这样，成功撮合的情侣最多的这种撮合方式，就叫最大匹配。</p><h2 id="最优匹配-x2F-完美匹配"><a href="#最优匹配-x2F-完美匹配" class="headerlink" title="最优匹配&#x2F;完美匹配"></a><strong>最优匹配&#x2F;完美匹配</strong></h2><p>解释：如果非常幸运，在我们的安排下，每个人都找到了自己心仪的对象。这种撮合方式，叫做最优匹配或完美匹配。</p><h2 id="交替路和增广路"><a href="#交替路和增广路" class="headerlink" title="交替路和增广路"></a><strong>交替路和增广路</strong></h2><p>交替路和增广路是用来解决新配对的时候发生冲突的问题。这里要结合具体问题解释才能更清楚。那么我们来结合具体问题，看看这个交替路和增广路有啥用处。</p><p>考虑一个下面这个二分图，怎么找到最大的匹配呢？</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A2%9E%E5%B9%BF%E8%B7%AF%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-f4b5a91413f68f07d24337b71f128371_720w.png"></p><p>图2 待配对的无向图</p><p>一个自然的思路是，一个一个的配对。首先给A配对。一看A和a有意向，那就先把他俩撮合到一起。</p><p>现在效果就变成这样了。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A2%9E%E5%B9%BF%E8%B7%AF%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-179bc2137782f5327ee0307573fcd3de_720w.png"></p><p>图3</p><p>蓝色的是他们本身有意向的情况，就是原始二分图，要记得蓝线连一块并不叫“匹配边”，而是“非匹配边”。红色的是我们给他们配对了，红线才叫“匹配边”。</p><p>好了，A的问题暂时性解决了，轮到B了。结果b也想和a配对。</p><p><strong>这时候，谁才能和a在一起呢？交替路和增广路就是解决这个冲突的。</strong></p><p>这时候，我们要找一条交替路，就是依次经过非匹配边（蓝线）、匹配边（红线）。那么我们从B出发，开始找交替路了。我们找到了</p><p>（非匹配边） (匹配边) (非匹配边)</p><p>B————–a—————-A—————–c</p><p>B和c都是没有被匹配过的点，而它又是这条交替路的起点和终点。这条交替路就是增广路。</p><p>现在我们要做一个取反操作，怎么取呢，就是将上面这条增广路的匹配边变成不匹配边，不匹配边变成匹配边。</p><p>（匹配边） (非匹配边) (匹配边)</p><p>B————–a—————-A—————–c</p><p>还是用红色表示匹配边，蓝色表示非匹配边。画在图上，现在的匹配变成这样。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A2%9E%E5%B9%BF%E8%B7%AF%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-3cbbdc96949166ab5ad58989db01eb35_720w.png"></p><p>图4</p><p>然后，我们发现，刚刚的冲突问题解决了。由B和a在一起，A和c在一块。</p><p>回过头来，再想一下增广路是怎么解决冲突问题的。增广路的核心特点就是“起点终点都是非匹配点”，这样就导致非匹配边比匹配边多了一条。增广路建立连接时，必须建立在两者有意向的基础上。这样我们取反，也就是交换匹配和非匹配边的身份。我们就多得到了一条匹配边。这个取反的过程，就是把原本匹配上的两个人拆散，给第三个人腾位置。就是那篇很火的博客里所说的，核心思想就是“腾位置”。</p><p>最后，我们把上图的配对问题彻底解决完。</p><p>AB的问题都解决了，轮到C了。C要和c配对，又发生冲突了。于是，又要使用增广路来增加一个匹配了。</p><p>（非） （匹） （非） （匹） （非）</p><p>C——–c———–A———-a———-B———b</p><p>取个反得到：</p><p>（匹） （非） （匹） （非） （匹）</p><p>C——–c———–A———-a———-B———b</p><p>画成图长这样</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A2%9E%E5%B9%BF%E8%B7%AF%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-18e0e6ef3c582ac7aed3840bfac6b222_720w.png"></p><p>图5</p><p>现在，ABC的配对都解决了。我们找到了最大匹配。由于A\B\C\a\b\c都找到了自己的心仪对象。因此，这个最大匹配也是完美匹配。</p><p><strong>下面这个链接里的二分图，就没能找到完美匹配。</strong></p><blockquote><p><a href="https://www.cnblogs.com/shenben/p/5573788.html">匈牙利算法（二分图）</a></p></blockquote><h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><p><strong>上述利用增广路找最大匹配的算法，就叫做匈牙利算法。</strong></p><p>总结一下匈牙利算法：</p><p>每个点从另一个集合里挑对象，没冲突的话就先安排上，要是冲突了就用增广路径重新匹配。重复上述思路，直到所有的点都找到对象，或者找不到对象也找不到增广路。</p><h2 id="深度优先和广度优先"><a href="#深度优先和广度优先" class="headerlink" title="深度优先和广度优先"></a>深度优先和广度优先</h2><p>上述是<strong>深度优先匈牙利算法</strong>。就是冲突了立刻用增广路来解决。</p><p>另外一种是<strong>广度优先匈牙利算法</strong>。思路是，冲突了就换一个心仪对象，看另一个心仪对象是不是也配对了，要是都配对了，再用增广路来解决。</p><p>广度优先的流程是这样的：</p><p>（1）<strong>A和a连上。</strong></p><p>（2）B也想连a，但是a被连了，就找下一个心仪对象b。</p><p>（3）b没有被连上，<strong>B和b就连在一起</strong>。</p><p>（4）轮到C的时候，C找心仪对象c。</p><p>（5）c也没被连上，<strong>所以C和c连一起。</strong></p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/208596378">增广路与匈牙利匹配</a></li><li><a href="https://zhuanlan.zhihu.com/p/208596378">增广路与匈牙利匹配</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多目标匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多目标匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多目标匹配之匈牙利匹配算法</title>
      <link href="/2024/06/19/duo-mu-biao-pi-pei-zhi-xiong-ya-li-pi-pei-suan-fa/"/>
      <url>/2024/06/19/duo-mu-biao-pi-pei-zhi-xiong-ya-li-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<ul><li>匈牙利算法可以告诉我们当前帧的某个目标，是否与前一帧的某个目标相同。</li><li>卡尔曼滤波可以基于目标前一时刻的位置，来预测当前时刻的位置，并且可以比传感器（在目标跟踪中即目标检测器，比如Yolo等）更准确的估计目标的位置。</li></ul><h2 id="匈牙利算法（Hungarian-Algorithm）"><a href="#匈牙利算法（Hungarian-Algorithm）" class="headerlink" title="匈牙利算法（Hungarian Algorithm）"></a>匈牙利算法（Hungarian Algorithm）</h2><p>首先，先介绍一下什么是<strong>分配问题（Assignment Problem）：</strong>假设有N个人和N个任务，每个任务可以任意分配给不同的人，已知每个人完成每个任务要花费的代价不尽相同，那么如何分配可以使得总的代价最小。</p><p>举个例子，假设现在有3个任务，要分别分配给3个人，每个人完成各个任务所需<strong>代价矩阵（cost matrix）</strong>如下所示（这个代价可以是金钱、时间等等）：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-62eb27d3b24895b24e7d1d91d8150c2d_720w.bmp"></p><p>怎样才能找到一个最优分配，使得完成所有任务花费的代价最小呢？</p><p>匈牙利算法（又叫<strong>KM</strong>算法）就是用来解决分配问题的一种方法，它基于定理：</p><p><strong>如果代价矩阵的某一行或某一列同时加上或减去某个数，则这个新的代价矩阵的最优分配仍然是原代价矩阵的最优分配。</strong></p><p>算法步骤（假设矩阵为NxN方阵）：</p><ol><li>对于矩阵的每一行，减去其中最小的元素</li><li>对于矩阵的每一列，减去其中最小的元素</li><li>用最少的水平线或垂直线覆盖矩阵中所有的0</li><li>如果线的数量等于N，则找到了最优分配，算法结束，否则进入步骤5</li><li>找到没有被任何线覆盖的最小元素，每个<strong>没被线覆盖的行</strong>减去这个元素，每个<strong>被线覆盖的列</strong>加上这个元素，返回步骤3</li></ol><p>继续拿上面的例子做演示：</p><ul><li>step1 每一行最小的元素分别为15、20、20，减去得到：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-62e6ad301e4beb6df670d5275422e301_720w.bmp"></p><ul><li>step2 每一列最小的元素分别为0、20、5，减去得到：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-cddb2e827f57dc81063e6507a85f2b7f_720w.bmp"></p><ul><li>step3 用最少的水平线或垂直线覆盖所有的0，得到：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-707c32f507abb7e7810f25737b9bc9de_720w.bmp"></p><ul><li><p>step4 线的数量为2，小于3，进入下一步；</p></li><li><p>step5 现在没被覆盖的最小元素是5，没被覆盖的行（第一和第二行）减去5，得到：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-ecb6e70315de1f60b3a077972dc75ee4_720w.bmp"></p><p>被覆盖的列（第一列）加上5，得到：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-e7e5c31a2041bf962358789fa18e51d9_720w.bmp"></p><p>跳转到step3，用最少的水平线或垂直线覆盖所有的0，得到：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-ac667adf429d9affb7ed3c181d054850_720w.bmp"></p><p>step4：线的数量为3，满足条件，算法结束。显然，将任务2分配给第1个人、任务1分配给第2个人、任务3分配给第3个人时，总的代价最小（0+0+0&#x3D;0）：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-14becb95b4cb94fc4f54e0ddfaa6ead0_720w.bmp"></p><p>所以原矩阵的最小总代价为（40+20+25&#x3D;85）：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%A4%9A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D%E4%B9%8B%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-b2417f4590595ff962d03c6e5482d044_720w.bmp"></p><blockquote><p>本文转自 <a href="https://zhuanlan.zhihu.com/p/90835266">https://zhuanlan.zhihu.com/p/90835266</a>，如有侵权，请联系删除。</p></blockquote><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="https://blog.csdn.net/dark_scope/article/details/8880547">趣写算法系列之–匈牙利算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多目标匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多目标匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度优先与匈牙利匹配算法</title>
      <link href="/2024/06/19/shen-du-you-xian-yu-xiong-ya-li-pi-pei-suan-fa/"/>
      <url>/2024/06/19/shen-du-you-xian-yu-xiong-ya-li-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>本文所有内容均以下面这幅二分图为例。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-cc8263d6e0d2ed574635e713cd5174fe_720w.png"></p><h2 id="图的深度遍历"><a href="#图的深度遍历" class="headerlink" title="图的深度遍历"></a>图的深度遍历</h2><p>图的遍历，从某一点出发，访问所有顶点，且每个顶点只被访问一次。当然访问过程中必须要有连线才行。比如从0出发，只能访问4和6，不能访问5。</p><p>比如上面这幅图是一个动物园的地图。那么一个最简单的思路，就是随便选一个顶点，比如从0（出发点就类似于动物园大门）出发。进门后的路线设计有两种方案，一种就是0–4–1–5这样一直闷着头往前走看动物，到头了再回来。另一种方案就是先把0临近的4和6的动物们先看了，再往深处走看离得远的其他动物。</p><p>可以看出第一种路径越走越深入，当出现岔路的时候，优先往更远的地方走，因此被叫做<strong>深度优先遍历（DFS）</strong>。第二种是当出现岔路的时候，先把离得近的都访问了，走法比较发散，被叫做<strong>广度优先遍历（BFS）</strong>。</p><p>本文研究的是<strong>深度优限遍历</strong>。</p><p>深度优先遍历的流程就是，优先往深的地方走，没有路了，退回到最近的节点，往该节点其他岔路走。一种实现方式是递归。递归这个概念一开始比较难理解。我先具体的写一下上面这幅图的深度遍历流程。</p><ol><li>从0出发。即<strong>访问0。</strong></li><li>04有连线。4没被访问过，<strong>访问4。</strong></li><li>40有连线。0被访问过。</li><li>41有连线，1没被访问过，<strong>访问1。</strong></li><li>14有连线，4被访问过。</li><li>15有连线，5没被访问过，<strong>访问5。</strong></li><li>51有连线，1被访问过。</li><li><strong>退回1。</strong>（14、15在步骤5、6处理过了）</li><li><strong>退回4。</strong>（40、41在步骤3、4处理过了）</li><li>42有连线。2没被访问过，<strong>访问2。</strong></li><li>24有连线。4被访问过。</li><li>26有连线。6没被访问过。<strong>访问6。</strong></li><li>60有连线，0被访问过。</li><li>62有连线，2被访问过。</li><li>63有连线，3没被访问过，<strong>访问3。</strong></li><li>36有连线，6被访问过。</li><li><strong>退回6。</strong>（60、62、63均被处理过）</li><li><strong>退回2。</strong>（24、26也均被处理过）</li><li><strong>退回4。</strong>（40、41、42均处理过）</li><li><strong>退回0。</strong>（04、06均处理过）</li><li>遍历结束。</li></ol><p>路径就是这个样子的：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-177eb29eb0f6f633de3157da6284b9f5_720w.png"></p><p>上面这个写的非常详细，接下来再抽象一下。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/v2-9a730dda5a32408043fa0491537ab112_720w.png"></p><p>我们发现了规律，对于每个节点，要做的事情都是有规律的。我们把这个要做的事情，写在一个函数dfs里。函数dfs功能大概就是找自己的邻接点，看看他们是不是访问过，有能访问的就继续让自己的邻接点调用dfs，没有能访问的就返回。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> node <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> node <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> node<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//对于每个节点</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//判断当前顶点cur和顶点i是否是邻接点,并判断顶点i是否已经访问过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">&amp;&amp;</span> visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//该点的访问标志位置1</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归调用，继续往下找路</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token comment">//所有点都访问过或者递归回来了，直接返回。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码参考了网站</p><p><a href="https://link.zhihu.com/?target=https://www.cnblogs.com/wlw-x/p/11509384.html">图论 - 图的深度优先遍历c++实现</a></p><p>递归的缺点也是很明显的。如果图很复杂，就会不断重复调用dfs，导致函数一直返回不了。因为每调用一个方法就会在栈上创建一个栈帧，方法调用结束后就会弹出该栈帧，而栈的大小不是无限的，所以递归调用次数过多的话就会导致栈溢出。</p><p>深度优先遍历可以直接通过栈来实现，具体的可以看下面的链接的动图。</p><p><a href="https://link.zhihu.com/?target=https://developer.51cto.com/art/202004/614590.htm">图文详解两种算法：深度优先遍历（DFS）和广度优先遍历（BFS）</a></p><p><img src="https://s1.51cto.com/oss/202004/16/e1e6a44251b69cd3b930f3071a71ffd8.gif"></p><h2 id="匈牙利算法匹配流程"><a href="#匈牙利算法匹配流程" class="headerlink" title="匈牙利算法匹配流程"></a>匈牙利算法匹配流程</h2><p>看完上面，我们大概对图的深度遍历（DFS）有一个认识了。可以看到深度遍历找到了很多路径，对图上的节点全部搜索了一遍，但是并不期望这些路径有什么特别之处，比如最短路径。深度遍历是很多图算法的基础。</p><p>而深度遍历DFS也是匈牙利算法的基础。</p><ol><li>当前配对目标x0。 x0y0有连线，且y0没有被配对。因此x0和y0配对。</li><li>当前配对目标x1。x1y0有连线，y0已被配对。</li></ol><p>此时，有两种方案：（1）通过增广路解决冲突。得到增广路径x1–y0–x0–y2。（2）选择新的配对对象。x1和y1也有连线，x1和y1配对。</p><p>从图的遍历的角度来看，方案1优先使用增广路，意味着优先遍历下一层的节点，这种方案采用了深度优先的思路。</p><p>而方案2优先遍历同一层的另一节点，是一种广度优先的思路。</p><p>按照深度优先的思路，代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"main.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEBUG_FLAG</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token keyword">int</span>     nx<span class="token punctuation">,</span> ny<span class="token punctuation">;</span><span class="token keyword">int</span>     line<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span>     visited<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span>     cx<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> cy<span class="token punctuation">[</span>MAX_NODE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// with printf, printf some information for understanding this code.</span><span class="token keyword">int</span> <span class="token function">find_path</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> ny<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG_FLAG</span></span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y%d is checked\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"there is a line between x%d and y%d\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y%d is not visited! \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y%d has been visited! \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"there is no line between x%d and y%d\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG_FLAG</span></span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y%d is not matched\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y%d has been matched\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"call find function, find another match for x%d\n"</span><span class="token punctuation">,</span> cy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">find_path</span><span class="token punctuation">(</span>cy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG_FLAG</span></span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x%d and y%d is matched!\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"function find return 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>                cx<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>                cy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG_FLAG</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"function find return 0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">hungarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> matchNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG_FLAG</span></span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"find match for x%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG_FLAG</span></span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x%d is not matched\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>            <span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            matchNum<span class="token operator">+=</span><span class="token function">find_path</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> matchNum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    nx <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    ny <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>cy<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// call hungarian algorithm</span>    <span class="token keyword">int</span> matchNum <span class="token operator">=</span> <span class="token function">hungarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// printf result on screen</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d pairs of matched nodes found!\n"</span><span class="token punctuation">,</span> matchNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"===========Hungarian Algorithm Match Result===============\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x[%d]--->None\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x[%d]--->y[%d]\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> cx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main函数中， 一开始nx是左侧集合的节点个数，ny是右侧节点个数。line[][]是二分图，true表示有连线，false表示没有连线。cx[]储存的是左侧节点配对结果，-1表示还没匹配。 cy[]是右侧节点的配对情况，-1表示没有配对。</p><p>上面的代码里我打印了很多中间信息。调用hungrian函数后，将开始打印信息。这里看一小段。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">find match <span class="token keyword">for</span> x0 <span class="token comment">// 进入hungarian的for循环，依次为左侧节点配对</span>x0 is <span class="token operator">not</span> matched <span class="token comment">// cx\[0\]==-1，表示左侧0节点没配对。</span>y0 is checked <span class="token comment">// 进入find\_path函数, 对右侧节点循环。先检查y0</span>there is a line between x0 <span class="token operator">and</span> y0 <span class="token comment">// x0和y0有连线</span>y0 is <span class="token operator">not</span> visited<span class="token operator">!</span> <span class="token comment">// y0没有被访问过</span>y0 is <span class="token operator">not</span> matched <span class="token comment">// y0没有被匹配</span>x0 <span class="token operator">and</span> y0 is matched<span class="token operator">!</span> <span class="token comment">// y0 和 x0匹配</span>function find <span class="token keyword">return</span> <span class="token number">1</span> <span class="token comment">// 配对成功，返回</span>find match <span class="token keyword">for</span> x1 <span class="token comment">// 回到hungarian函数的for循环，对下一节点配对。</span>x1 is <span class="token operator">not</span> matched <span class="token comment">// x1也没匹配上</span>y0 is checked <span class="token comment">// 进入find\_path函数，从右侧节点中给x1找匹配。</span>there is a line between x1 <span class="token operator">and</span> y0 <span class="token comment">// x1和y0有连线</span>y0 is <span class="token operator">not</span> visited<span class="token operator">!</span> <span class="token comment">// y0没被访问过</span>y0 has been matched <span class="token comment">// y0被匹配了</span>call find function<span class="token punctuation">,</span> find another match <span class="token keyword">for</span> x0 <span class="token comment">// 递归调用，这里参数是cy\[v\]，也就是y0的匹配点，即x0。实际上就是给x0重新找匹配。</span>y0 is checked <span class="token comment">// 第一次递归， 又开始检查y0</span>there is a line between x0 <span class="token operator">and</span> y0 <span class="token comment">// x0y0有连线</span>y0 has been visited<span class="token operator">!</span> <span class="token comment">// y0被访问过了。</span>y1 is checked <span class="token comment">// 检查右侧下一节点y1</span>there is no line between x0 <span class="token operator">and</span> y1 <span class="token comment">// 没有连线</span>y2 is checked <span class="token comment">// 检查右侧下一节点y2</span>there is a line between x0 <span class="token operator">and</span> y2 <span class="token comment">// x0 和 y0有连线</span>y2 is <span class="token operator">not</span> visited<span class="token operator">!</span> <span class="token comment">// y2没被访问</span>y2 is <span class="token operator">not</span> matched <span class="token comment">// y2 没匹配</span>x0 <span class="token operator">and</span> y2 is matched<span class="token operator">!</span> <span class="token comment">// x0找到了新的匹配y2</span>function find <span class="token keyword">return</span> <span class="token number">1</span> <span class="token comment">// 第一次递归返回，继续往下执行find\_path函数</span>x1 <span class="token operator">and</span> y0 is matched<span class="token operator">!</span> <span class="token comment">// x0给x1腾了位置出来，y0现在可以跟x1配对了</span>function find <span class="token keyword">return</span> <span class="token number">1</span> <span class="token comment">// find\_path函数返回</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面就不写了。大概流程可以看出来，就是对于每个节点都基于深度优先遍历找图上的路径。发生冲突了递归调用find_path，传入的参数是冲突节点的匹配对象，看能不能腾个位置，实现了找交错路的目的。</p><p>最终运行结果是</p><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Hungarian Algorithm Match Result&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>x[0]—&gt;y[2]</p><p>x[1]—&gt;y[1]</p><p>x[2]—&gt;y[0]</p><p>x[3]—&gt;None</p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/258046402">深度优先遍历的匈牙利算法代码实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多目标匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多目标匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写卡尔曼滤波</title>
      <link href="/2024/01/15/shou-xie-qia-er-man-lu-bo/"/>
      <url>/2024/01/15/shou-xie-qia-er-man-lu-bo/</url>
      
        <content type="html"><![CDATA[<p>简单来讲，卡尔曼滤波器就是根据上一时刻的状态，预测当前时刻的状态，将预测的状态量与当前时刻的观测量进行加权，加权后的结果才认为是当前实际的状态量，而非仅听信当前的观测量。卡尔曼滤波过程可主要概括为以下三步：<code>初始化</code> &gt;&gt;&gt; <code>预测</code> &gt;&gt;&gt; <code>观测</code> </p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>假设有个小车在道路上向右侧做匀速运动，在左侧安装了一个可以测量小车距离和速度的传感器，传感器每 1 秒测一次小车的位置 $s$ 和速度 $v$，如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%89%8B%E5%86%99%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/%E5%B0%8F%E8%BD%A6%E8%BF%90%E5%8A%A8%E7%8A%B6%E6%80%81%E4%BC%B0%E8%AE%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg"></p><p>用向量 $x_t$ 来表示当前小车的状态，该向量也是<strong>最终的输出结果</strong>，被称作状态向量（state vector）：</p><p>$$x_t&#x3D;\begin{bmatrix}s_t \\ v_t\end{bmatrix}$$</p><p>由于测量误差的存在，传感器无法直接获取小车位置的真值，只能获取在真值附近的一个近似值，可以假设测量值在真值附近服从高斯分布。如下图所示，测量值分布在红色区域内的左侧或右侧，真值则在红色区域的波峰处：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%89%8B%E5%86%99%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/%E5%81%87%E5%AE%9A%E8%A7%82%E6%B5%8B%E5%80%BC%E5%9C%A8%E7%9C%9F%E5%80%BC%E9%99%84%E8%BF%91%E6%9C%8D%E4%BB%8E%E9%AB%98%E6%96%AF%E5%88%86%E5%B8%83.jpg"></p><p>由于是第一次测量，没有小车的历史信息，认为小车在$t&#x3D;1$秒时的状态量$x1$与观测量$z1$相等：</p><p>$$x_1&#x3D;z_1&#x3D;\begin{bmatrix}s_1 \\ v_1\end{bmatrix}$$</p><h1 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h1><p>预测是卡尔曼滤波中很重要的一步，这一步相当于使用历史信息对未来的位置进行推测。根据第 1 秒小车的位置和速度，可以推测第 2 秒时，小车所在的位置应该如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%89%8B%E5%86%99%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/%E9%A2%84%E6%B5%8B%E6%94%BE%E5%A4%A7%E4%BA%86%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7.jpg"></p><p>会发现，图中红色区域的范围变大了，这是因为预测时加入了速度估计的噪声，是一个放大不确定性的过程。根据小车第 1 秒的状态量进行预测，得到预测的第 2 秒的状态量 $x_{pre}$：</p><p>$$x_pre&#x3D;\begin{bmatrix}x_1+v_1 \\ v_1\end{bmatrix}$$</p><p>其中，下脚标$pre$是 prediction 的简称。时间间隔为 1 秒，所以预测位置为<code>距离+速度*1</code>，由于小车做匀速运动，因此速度保持不变。</p><h1 id="观测"><a href="#观测" class="headerlink" title="观测"></a>观测</h1><p>在第 2 秒时，传感器对小车的位置做了一次观测，认为小车在第 2 秒时的观测量为$z_2$：</p><p>$$z_2&#x3D;\begin{bmatrix}s_2 \\ v_2 v\end{bmatrix} $$</p><p>显然，第二次观测的结果也是存在误差的，将预测的小车位置与实际观测到的小车位置放在同一个图上，即可看到：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%89%8B%E5%86%99%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/%E9%A2%84%E6%B5%8B%E5%8F%A0%E5%8A%A0%E8%A7%82%E6%B5%8B.jpg"></p><p>图中红色区域为预测的小车位置，蓝色区域为第 2 秒的观测结果。显然，这两个结果都在真值附近。为得到尽可能接近真值的结果，将这两个区域的结果进行加权，取加权后的值作为第 2 秒的状态量。为了方便理解，可以将第 2 秒的状态量写成：</p><p>$$x_2&#x3D;w_1 * x_{pre}+w_2*z_2 $$</p><p>其中，$w_1$ 为预测结果的权值，$w_2$ 为观测结果的权值。<strong>两个权值的计算是根据预测结果和观测结果的不确定性来的，这个不确定性就是高斯分布中方差的大小，方差越大，波形分布越广，不确定性越高，给的权值越低</strong>。加权后的状态向量的分布可以用下图中绿色区域表示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%89%8B%E5%86%99%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/%E9%A2%84%E6%B5%8B%E5%8F%A0%E5%8A%A0%E8%A7%82%E6%B5%8B%E5%BE%97%E5%88%B0%E6%96%B0%E7%9A%84%E5%90%8E%E9%AA%8C%E9%AB%98%E6%96%AF%E5%88%86%E5%B8%83.jpg"></p><p>可以发现，绿色区域的方差均小于红色区域和蓝色区域，原因是<strong>进行加权运算时，需要将两个高斯分布进行乘法运算，得到的新的高斯分布的方差比两个做乘法的高斯分布都小。两个不那么确定的分布，最终得到了一个相对确定的分布</strong>。</p><p>第 1 秒的初始化以及第 2 秒的预测、观测，实现了卡尔曼滤波的第一个周期。同样地，根据第 2 秒的状态量做第 3 秒的预测，再与第 3 秒的观测量进行加权，就得到了第 3 秒的状态量；再根据第 3 秒的状态量做第 4 秒的预测，再与第 4 秒的观测量进行加权，就得到了第 4 秒的状态量。以此往复，就实现了一个真正意义上的卡尔曼滤波器。卡尔曼滤波器的理论公式如下所示：</p><ul><li>预测</li></ul><p>$$<br>\begin{aligned}<br>x^{\prime}&amp;&#x3D;Fx+u<br>\\<br>P^{\prime}&amp;&#x3D;FPF^T+Q<br>\end{aligned}<br>$$</p><ul><li>测量值更新</li></ul><p>$$<br>\begin{aligned}<br>y&amp;&#x3D;x-Hx^{\prime} \\<br>S&amp;&#x3D;HP^{\prime}H^{T}+R \\<br>K&amp;&#x3D;P^{\prime}H^{T}S^{-1} \\<br>x&amp;&#x3D;x^{\prime}+Ky \\<br>P&amp;&#x3D;(I-KH)P^{\prime} \\<br>\end{aligned}<br>$$</p><p>下面结合上面的公式，用 C++代码实现初始化、预测、观测的过程。由于公式中涉及大量的矩阵转置和求逆运算，使用开源的矩阵运算库——Eigen。</p><h1 id="初始化代码（Initialization）"><a href="#初始化代码（Initialization）" class="headerlink" title="初始化代码（Initialization）"></a>初始化代码（Initialization）</h1><p>初始化阶段，需要将各个变量初始化，对于不同的运动模型，其状态向量不同，对于上文中小车的例子，只需距离 $s$ 和速度 $v$ 就可以表示小车的状态；再比如一个二维空间中的点，需要 $x$ 方向上的距离和速度及 $y$ 方向上的距离和速度才能表示其状态，这样的状态量就有 4 个变量。因此使用 Eigen 库中非定长的数据结构，下图中的<code>VerctorXd</code>表示 X 维的列向量，其中的元素数据类型为<code>double</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">KALMAN_FILTER_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KALMAN_FILTER_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Eigen/Dense"</span></span><span class="token keyword">class</span> <span class="token class-name">KalmanFilter</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">KalmanFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        is_initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">KalmanFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Initialization</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span>VectorXd x_in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        x_ <span class="token operator">=</span> x_in<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> is_initialized<span class="token punctuation">;</span> <span class="token comment">//flag of initialization</span>    Eigen<span class="token double-colon punctuation">::</span>VectorXd x_<span class="token punctuation">;</span>   <span class="token comment">//state vector</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，新建了一个<code>KalmanFilter</code>类，其中定义了一个叫做<code>x_</code>的变量，表示小车的状态向量。</p><h1 id="预测代码（Prediction）"><a href="#预测代码（Prediction）" class="headerlink" title="预测代码（Prediction）"></a>预测代码（Prediction）</h1><p>完成初始化后，开始写 Prediction 部分的代码。首先是公式：<br>$$<br>x^{\prime}&#x3D;Fx+u<br>$$</p><p>这里的$x$为上一时刻状态量，通过左乘一个<strong>状态转移矩阵</strong>(state transistion matrix)$F$，再加上外部影响$u$，得到预测的当前时刻的状态量$x^{\prime}$。以 2 维的匀速运动为例，$x$为：</p><p>$$x&#x3D;\begin{bmatrix}s_x \\ s_y \\ v_x \\ v_y \end{bmatrix} $$</p><p>对于匀速运动模型，经过时间$\Delta t$后的预测状态量为:<br>$$x^{\prime}&#x3D;\begin{bmatrix}s_x +v_x \Delta t \\ s_y +v_y \Delta t\end{bmatrix} $$</p><p>由于假设当前运动为匀速运动，加速度为 0，加速度不会对预测造成影响，即：</p><p>$$<br>u&#x3D;0<br>$$</p><p>公式$x^{\prime}&#x3D;Fx+u$演变为：</p><p>$$<br>x^{\prime}&#x3D;<br>\begin{bmatrix}s_x +v_x \Delta t \\ s_y +v_y \Delta t\end{bmatrix}&#x3D;<br>\begin{bmatrix} 1&amp;0&amp;\Delta t &amp;0 \\ 0&amp;1&amp;0&amp;\Delta t \\ 0&amp;0&amp;1&amp;0 \\ 0&amp;0&amp;0&amp;1 \end{bmatrix}<br>\begin{bmatrix} s_x \\ s_y \\\ v_x \\ v_y \end{bmatrix}+<br>\begin{bmatrix} 0 \\ 0 \\\ 0 \\ 0 \end{bmatrix}<br>$$</p><p>如果换成匀加速运动模型，就可以引入加速度$a_x$和$a_y$,$u$ 变为：</p><p>$$<br>u&#x3D;<br>\begin{bmatrix} \frac{1}{2}a_x \Delta t^2 \\ \frac{1}{2}a_y \Delta t^2 \\ a_x\Delta t \\ a_y\Delta t\end{bmatrix}<br>$$</p><p>由于每次预测时，$\Delta t$ 的大小不固定，因此专门写一个函数<code>SetF()</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">SetF</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span>MatrixXd F_in<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    F_ <span class="token operator">=</span> F_in<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再看预测模块的第二个公式：<br>$$<br>P^{\prime}&#x3D;FPF^{T}+Q<br>$$</p><p>该公式中，$P$ 被称为<strong>状态协方差矩阵</strong>（state covariance matrix），表示系统的不确定程度，$P$ 在卡尔曼滤波器初始化时会很大，随着越来越多的数据注入滤波器中，不确定程度会逐渐减小；$Q$ 是<strong>过程噪声协方差矩阵</strong>（process noise covariance matrix），即无法用 $x^\prime&#x3D;Fx+u$ 表示的噪声，比如车辆运动时突然到了上坡，这个影响是无法用之前的状态转移估计的。以激光雷达为例，激光雷达只能测量点的位置，无法测量点的速度，因此对于激光雷达的协方差矩阵来说，对于位置信息，其测量较准确，不确定度较低；对于速度信息，不确定度较高。因此可以认为此处的 $P$ 为：</p><p>$$<br>P&#x3D;\begin{bmatrix}1&amp;0&amp;0&amp;0\\0&amp;1&amp;0&amp;0\\0&amp;0&amp;100&amp;0\\0&amp;0&amp;0&amp;100\end{bmatrix}<br>$$</p><p>由于 $Q$ 对整个系统存在影响，但又不能确定对系统的影响有多大。工程上，一般将 $Q$ 设置为单位矩阵参与运算，即：</p><p>$$<br>Q&#x3D;\begin{bmatrix}1&amp;0&amp;0&amp;0\\0&amp;1&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\0&amp;0&amp;0&amp;1\end{bmatrix}<br>$$</p><p>根据以上内容和公式：</p><p>$$<br>\begin{aligned}x^{\prime} &amp;&#x3D; Fx+u \\ P^{\prime} &amp;&#x3D; FPF^T+Q\end{aligned}<br>$$</p><p>就可以写出预测模块的代码了：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Prediction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x_ <span class="token operator">=</span> F_ <span class="token operator">*</span> x_<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXd Ft <span class="token operator">=</span> F_<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P_ <span class="token operator">=</span> F_ <span class="token operator">*</span> P_ <span class="token operator">*</span> Ft <span class="token operator">+</span> Q_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="观测代码（Measurement）"><a href="#观测代码（Measurement）" class="headerlink" title="观测代码（Measurement）"></a>观测代码（Measurement）</h1><p>观测模块的第一个公式是：</p><p>$$<br>y&#x3D;z-Hx^{\prime}<br>$$</p><p>这个公式计算的是实际观测量 $z$ 与状态量预测值 $x^\prime$ 之间的差值 $y$。不同传感器的观测量一般不同，比如激光雷达测量的位置信号为 $x$ 方向和 $y$ 方向上的距离，毫米波雷达测量的是位置和角度信息。因此需要将状态量左乘一个矩阵 $H$，才能与观测量进行相应的运算，$H$ 被称为<strong>测量矩阵</strong>（Measurement Matrix）。激光雷达的观测量为：</p><p>$$<br>z&#x3D;\begin{bmatrix}x_m \\ y_m\end{bmatrix}<br>$$</p><p>其中 $x_m$ 和 $y_m$ 分别表示 $x$ 方向和 $y$ 方向上的测量值。由于 $x^\prime$ 是一个 4*1 的列向量，如果要与一个 2*1 的列向量 $z$ 进行减运算，需要左乘一个 2*4 的矩阵：</p><p>$$<br>\begin{bmatrix}\Delta x \\ \Delta y\end{bmatrix}&#x3D;\begin{bmatrix}x_m \\ y_m\end{bmatrix}-\begin{bmatrix}1&amp;0&amp;0&amp;0\\0&amp;1&amp;0&amp;0\end{bmatrix}\begin{bmatrix}s_x+v_x\Delta t \\ s_y+v_y\Delta t \\ v_x \\ v_y\end{bmatrix}<br>$$</p><p>意即，对于激光雷达而言，测量矩阵 $H$ 为：</p><p>$$<br>H&#x3D;\begin{bmatrix}1&amp;0&amp;0&amp;0\\0&amp;1&amp;0&amp;0\end{bmatrix}<br>$$</p><p>求得 $y$ 后，对 $y$ 乘以一个加权量，再加到原来的状态量预测量上去，就可以得到一个既考虑了观测量，又考虑了预测模型位置的状态量了。对于权值 $K$ 的计算，看下面的两个公式：</p><p>$$<br>\begin{aligned}S &amp;&#x3D; HP^{\prime}H^T+R\\K &amp;&#x3D; P^{\prime}H^TS^{-1}\end{aligned}<br>$$</p><p>权值 $K$ 被称为<strong>卡尔曼增益</strong>（Kalman Gain），$R$ 是<strong>测量噪声协方差矩阵</strong>（measurement noise covariance matrix），表示的是测量值与真值之间的差值。一般情况下，传感器厂家会提供该值。$S$ 只是为了简化公式，写的一个临时变量。最后两个公式：</p><p>$$<br>\begin{aligned}x &amp;&#x3D; x^{\prime}+Ky\\P &amp;&#x3D; (I-KH)P^{\prime}\end{aligned}<br>$$</p><p>上述两个公式，实际上完成了卡尔曼滤波器的闭环，第一个公式是完成了当前状态量 $x$ 的更新，不仅考虑了上一时刻状态量的预测量，也考虑了观测量和整个系统的噪声；第二个公式根据卡尔曼增益，更新了系统的不确定度 $P$，用于下一个周期的运算，该公式中的 $I$ 为单位矩阵，维数为状态量的行数。将观测模块的五个公式写成代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">KALMAN_FILTER_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KALMAN_FILTER_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Eigen/Dense"</span></span><span class="token keyword">class</span> <span class="token class-name">KalmanFilter</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">KalmanFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        is_initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">KalmanFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// get state vector</span>    Eigen<span class="token double-colon punctuation">::</span>VectorXd <span class="token function">GetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// get flag of initialization</span>    <span class="token keyword">bool</span> <span class="token function">IsInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> is_initialized<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// initialize kalman filter</span>    <span class="token keyword">void</span> <span class="token function">Initialization</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span>VectorXd x_in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        x_ <span class="token operator">=</span> x_in<span class="token punctuation">;</span>        is_initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">SetF</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span>MatrixXd F_in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        F_ <span class="token operator">=</span> F_in<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">SetP</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span>MatrixXd P_in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        P_ <span class="token operator">=</span> P_in<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">SetQ</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span>MatrixXd Q_in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Q_ <span class="token operator">=</span> Q_in<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">SetH</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span>MatrixXd H_in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        H_ <span class="token operator">=</span> H_in<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">SetR</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span>MatrixXd R_in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        R_ <span class="token operator">=</span> R_in<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// predict state vector and state covariance matrix</span>    <span class="token keyword">void</span> <span class="token function">Prediction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        x_ <span class="token operator">=</span> F_ <span class="token operator">*</span> x_<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>MatrixXd Ft <span class="token operator">=</span> F_<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P_ <span class="token operator">=</span> F_ <span class="token operator">*</span> P_ <span class="token operator">*</span> Ft <span class="token operator">+</span> Q_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// update state vector and state covariance matrix</span>    <span class="token keyword">void</span> <span class="token function">MeasurementUpdate</span><span class="token punctuation">(</span><span class="token keyword">const</span> Eigen<span class="token double-colon punctuation">::</span> VectorXd <span class="token operator">&amp;</span>z<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Eigen<span class="token double-colon punctuation">::</span>VectorXd y <span class="token operator">=</span> z <span class="token operator">-</span> H_ <span class="token operator">*</span> x_<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>MatrixXd S <span class="token operator">=</span> H_ <span class="token operator">*</span> P_ <span class="token operator">*</span> H_<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> R_<span class="token punctuation">;</span>        <span class="token comment">// Kalman Gain</span>        Eigen<span class="token double-colon punctuation">::</span>MatrixXd K <span class="token operator">=</span> P_ <span class="token operator">*</span> H_<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> S<span class="token punctuation">.</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// estimate state vector</span>        x_ <span class="token operator">=</span> x_ <span class="token operator">+</span> K <span class="token operator">*</span> y<span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> x_<span class="token punctuation">.</span>size<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Matrix2Xd I <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">MatrixXd</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// update state covariance matrix</span>        P_ <span class="token operator">=</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> K <span class="token operator">*</span> H_<span class="token punctuation">)</span> <span class="token operator">*</span> P_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> is_initialized<span class="token punctuation">;</span> <span class="token comment">// flag of initialization</span>    Eigen<span class="token double-colon punctuation">::</span>VectorXd x_<span class="token punctuation">;</span>  <span class="token comment">// state vector</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXd F_<span class="token punctuation">;</span>  <span class="token comment">// state transition matrix</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXd P_<span class="token punctuation">;</span>  <span class="token comment">// state covariance matrix</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXd Q_<span class="token punctuation">;</span>  <span class="token comment">// process noise covariance matrix</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXd H_<span class="token punctuation">;</span>  <span class="token comment">// measurement matrix</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXd R_<span class="token punctuation">;</span>  <span class="token comment">// measurement noise covariance matrix</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现<code>MeasurementUpdate()</code>函数的形参为“常引用”类型，这样既兼顾了参数传递效率（因为是引用，所以无需为传入的参数申请物理内存用以保存其值），又保证了数据安全（因为参数被<code>const</code>修饰了）。以激光雷达数据为例，使用以上滤波器，代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"KalmanFilter.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> Sx <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> Sy <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> last_timestamp <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> now_timestamp <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    KalmanFilter kf<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GetLidarData</span><span class="token punctuation">(</span>Sx<span class="token punctuation">,</span> Sy<span class="token punctuation">,</span> now_timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// initialize kalman filter</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>kf<span class="token punctuation">.</span><span class="token function">IsInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            last_timestamp <span class="token operator">=</span> now_timestamp<span class="token punctuation">;</span>            Eigen<span class="token double-colon punctuation">::</span>VectorXd <span class="token function">x_in</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            x_in <span class="token operator">&lt;&lt;</span> Sx<span class="token punctuation">,</span> Sy<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">;</span>            kf<span class="token punctuation">.</span><span class="token function">Initialization</span><span class="token punctuation">(</span>x_in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// set state covariance matrix</span>            Eigen<span class="token double-colon punctuation">::</span>MatrixXd <span class="token function">P_in</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            P_in <span class="token operator">&lt;&lt;</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">;</span>            kf<span class="token punctuation">.</span><span class="token function">SetP</span><span class="token punctuation">(</span>P_in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// set process noise covariance matrix</span>            Eigen<span class="token double-colon punctuation">::</span>MatrixXd <span class="token function">Q_in</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Q_in <span class="token operator">&lt;&lt;</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>            kf<span class="token punctuation">.</span><span class="token function">SetQ</span><span class="token punctuation">(</span>Q_in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// set measurement matrix</span>            Eigen<span class="token double-colon punctuation">::</span>MatrixXd <span class="token function">H_in</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            H_in <span class="token operator">&lt;&lt;</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">;</span>            kf<span class="token punctuation">.</span><span class="token function">SetH</span><span class="token punctuation">(</span>H_in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// set measurement noise covariance matrix</span>            <span class="token comment">// R is provided by sensor supplier, in datasheet</span>            Eigen<span class="token double-colon punctuation">::</span>MatrixXd <span class="token function">R_in</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            R_in <span class="token operator">&lt;&lt;</span> <span class="token number">0.0225</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0225</span><span class="token punctuation">;</span>            kf<span class="token punctuation">.</span><span class="token function">SetR</span><span class="token punctuation">(</span>R_in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// set state transition matrix</span>        <span class="token keyword">double</span> dt <span class="token operator">=</span> now_timestamp <span class="token operator">-</span> last_timestamp<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>MatrixXd <span class="token function">F_in</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        F_in <span class="token operator">&lt;&lt;</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> dt<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> dt<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>        kf<span class="token punctuation">.</span><span class="token function">SetF</span><span class="token punctuation">(</span>F_in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// predict state vector x and state covariance matrix P</span>        kf<span class="token punctuation">.</span><span class="token function">Prediction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// update state vector x and state covariance matrix P</span>        Eigen<span class="token double-colon punctuation">::</span>VectorXd <span class="token function">z</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        z <span class="token operator">&lt;&lt;</span> Sx<span class="token punctuation">,</span> Sy<span class="token punctuation">;</span>        kf<span class="token punctuation">.</span><span class="token function">MeasurementUpdate</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>VectorXd <span class="token function">x_out</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// output result</span>        x_out <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">GetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Kalman filter output Sx is: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">x_out</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                   <span class="token operator">&lt;&lt;</span> <span class="token string">", output Sy is: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">x_out</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>GetLidarData()</code>函数除了获取点的位置信息 $S_x$ 和 $S_y$ 外，还获取了当前时刻的时间戳，用于计算前后两帧的时间差 $\mathrm{d}t$。在经典卡尔曼滤波器基础上，还有扩展卡尔曼滤波器（EKF）和无迹卡尔曼滤波器（UKF），它们与经典卡尔曼滤波器的最大区别是状态转移矩阵 $F$ 和测量矩阵 $H$ 的不同。</p><h1 id="卡尔曼滤波五大公式解释"><a href="#卡尔曼滤波五大公式解释" class="headerlink" title="卡尔曼滤波五大公式解释"></a>卡尔曼滤波五大公式解释</h1><p>$$<br>\begin{align}<br>x_{k}^{-} &amp; &#x3D; :Ax_{k-1}:+:Bu_{k-1}\\<br>P_{k}^{-} &amp; &#x3D; :AP_{k-1}A^T:+:Q\\<br>K_{k} &amp; &#x3D; :\frac{P_{k}^{-}H^{T}}{HP_{k}^{-}H^{T}+R}\\<br>x_{k} &amp; &#x3D; :x_{k}^{-}:+:K_{k}(z_{k}-Hx_{k}^{-}),z_{k}&#x3D;Hx_{k\text{测量}}\\<br>P_{k} &amp; &#x3D; :(I:-:K_{k}H)P_{k}^{-}<br>\end{align}<br>$$</p><p>$$<br>\begin{aligned}&amp;Z_{k-1}:\text{ 有}k-1\text{ 个是相邻的最长后的计,就变点模块产的数分数据交享。}\\<br>u_{k-1}:\text{ 其实数的复票:}\\<br>u_{k-1}:\text{ 求自持续时间};\\<br>A:\text{ 换创场转体时};\\B:\text{ 相关性}:\\<br>B:\text{ 相关性}:\\<br>B_{i-1}:\text{ 条}k\text{ 企业群的本轮位的作计,被是余样像产面测得本的状态变率};\\<br>P_{k-1}:\text{ 常}k&#x3D;1\text{ 过进时的名弦合的分差的样};\\<br>P_{k-1}:\text{ 进高条为2分表组成};\\<br>Q:\text{ 过增高为2分别是曲线}:\\<br>P_{k-1}:\text{ 使得全法的余曲最受加力是最终};\\<br>H:\text{ 次期间样}:\\H:\text{ 使到确本为少是推耗};\\<br>R:\text{ 成期设本为多差模式}:\\<br>R_{k}:\text{ 下不要得最最}:\\<br>B_{k-1}:\text{ 表以全站理的同学故成是要};\\<br>B_{k-1}:\text{ 其中理方向理测变量};\\<br>B_{k-1}:\text{ 其中理方向理制变量};\\<br>B_{k-1}:\text{ 其性是加值的定验论念估计,这条量是得吸产的融合数据变要};\\<br>P_{k-1}:\text{ 条}k\text{ 企业指以结误器是参多差描得;}\end{aligned}<br>$$</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://blog.shipengx.com/archives/d3b96bd5.html">手把手教你写卡尔曼滤波器</a></li></ul><h1 id="实战之ADAS中的目标跟踪"><a href="#实战之ADAS中的目标跟踪" class="headerlink" title="实战之ADAS中的目标跟踪"></a>实战之ADAS中的目标跟踪</h1><ul><li><p><a href="https://blog.csdn.net/zimiao552147572/article/details/105985289">目标估计模型-卡尔曼滤波</a></p></li><li><p><a href="https://blog.csdn.net/qq_41920323/article/details/130253343">目标跟踪之–卡尔曼滤波（C++代码解析）</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 卡尔曼滤波 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卡尔曼滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀博客收藏</title>
      <link href="/2023/12/20/you-xiu-bo-ke-shou-cang/"/>
      <url>/2023/12/20/you-xiu-bo-ke-shou-cang/</url>
      
        <content type="html"><![CDATA[<h1 id="adaning"><a href="#adaning" class="headerlink" title="adaning"></a>adaning</h1><ul><li><a href="https://adaning.github.io/">https://adaning.github.io/</a></li></ul><iframe src="https://adaning.github.io/" width="800" height="500"></iframe><h1 id="senitco"><a href="#senitco" class="headerlink" title="senitco"></a>senitco</h1><ul><li><a href="https://senitco.github.io/">https://senitco.github.io/</a></li></ul><iframe src="https://senitco.github.io/" width="800" height="500"></iframe>]]></content>
      
      
      <categories>
          
          <category> 优秀博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优秀博客收藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法</title>
      <link href="/2023/12/20/shi-da-pai-xu-suan-fa/"/>
      <url>/2023/12/20/shi-da-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="十大排序"><a href="#十大排序" class="headerlink" title="十大排序"></a><a href="#%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F" title="十大排序"></a>十大排序</h2><p>十大排序包括插入排序, 选择排序, 冒泡排序, 归并排序, 希尔排序, 快速排序, 堆排序, 计数排序, 基数排序, 桶排序.</p><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a><a href="#%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86" title="基本知识"></a>基本知识</h2><p>基本概念:</p><ul><li><strong>稳定性</strong>: 在排序前有两个相同的关键字a和b, 若排序后仍能保证a和b的相对顺序不变(排序前a在b前, 则排序后还是a在b前), 则称为排序算法是稳定的, 否则是不稳定的.</li><li><strong>时间复杂度</strong>: 对排序数据的总的操作次数. 反映当n变化时, 操作次数呈现什么规律.</li><li><strong>空间复杂度</strong>: 是指算法在计算机内执行时所需存储空间的度量, 它也是数据规模n的函数.</li></ul><p>常见的算法排序可以分为两大类:</p><ul><li><strong>比较类排序</strong>: 通过比较来决定元素间的相对次序, 由于其时间复杂度不能突破$O(nlogn)$, 因此也称为非线性时间比较类排序.</li><li><strong>非比较类排序</strong>: 不通过比较来决定元素间的相对次序, 它可以突破基于比较排序的<strong>时间下界</strong>, 以线性时间运行, 因此也称为线性时间非比较类排序.</li></ul><p>比较排序最低的时间复杂度一定是$O(n)$, 你不比较怎么排序嘛, 每个元素比较一次, 最低时间复杂度一定是线性级的.</p><p>比较排序可以分为<strong>交换排序</strong>, <strong>插入排序</strong>, <strong>选择排序</strong>, <strong>归并排序</strong>四大类.</p><ul><li>交换排序: 就是根据序列中两个记录键值的比较结果来对换这两个记录在序列中的位置.<ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>插入排序: 将一个记录插入到已经排好序的有序表中, 逐渐扩大有序表的规模至整个表.<ul><li>简单插入排序</li><li>希尔排序</li></ul></li><li>选择排序: 第一次从待排序的数据元素中选出最小(或最大) 的一个元素, 存放在序列的起始位置, 然后再从剩余的未排序元素中寻找到最小(大) 元素, 然后放到已排序的序列的某个位置(取决于结构).<ul><li>简单选择排序</li><li>堆排序</li></ul></li><li>归并排序: 用分治法, 每次将已有序的子序列合并, 最后得到完全有序的序列.</li></ul><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a><a href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F" title="插入排序"></a>插入排序</h2><p>插入排序我们每个人都会, 在打扑克的时候, 顺牌的过程其实就是多次插入排序的过程. 对于未排序的序列, 在已排序的序列中找到这个关键字的相应位置并插入.</p><ol><li>从第一个元素开始, 该元素可以认为已经被排序;</li><li>取出下一个元素, 在已经排序的元素序列中从后向前扫描;</li><li>如果该元素(已排序) 大于新元素, 将该元素移到下一位置;</li><li>重复步骤3, 直到找到已排序的元素小于或者等于新元素的位置;</li><li>将新元素插入到该位置后;</li><li>重复步骤2 ~ 5.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif"></p><p>实现代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 认为0号元素已经有序, 从无序序列挨个选择</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// i-1为有序序列 </span>        <span class="token comment">// 当选中的元素比有序序列中元素小的时候, 有序序列元素依次后移 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">--</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 不要忘记插入选中的元素 </span>        a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><a href="#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" title="选择排序"></a>选择排序</h2><p>选择排序是非常符合人类思维直觉的一种排序方式, 从序列中选出一个最小的或最大的元素, 加入到已经有序的排序的最左端或最右端. 最后使得整个序列都有序.</p><ol><li>初始状态：无序区为R[1..n], 有序区为空;</li><li>第i趟排序(i&#x3D;1,2,3…n-1)开始时, 当前有序区和无序区分别为R[1..i-1]和R(i..n) . 该趟排序从当前无序区中-选出关键字最小的记录 R[k], 将它与无序区的第1个记录R交换, 使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区;</li><li>n-1趟结束, 数组有序化了.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif"></p><p>实现代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token comment">// 遍历每个元素 当然不包括最后一个元素 因为最后选择的一定是最大的 在最右侧</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> i<span class="token punctuation">;</span>         <span class="token comment">// 找到最小元素 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> j<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token comment">// 交换最小的元素和当前选中元素 </span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><a href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是实现起来最最最简单的算法, 三行实现. 它执行的过程就像鱼吐泡泡一样, 一点一点浮上来. 每趟排序都有一个元素停到它的最终位置.</p><ol><li>比较相邻的元素. 如果第一个比第二个大, 就交换它们两个;</li><li>对每一对相邻元素作同样的工作, 从开始第一对到结尾的最后一对, 这样在最后的元素应该会是最大的数;</li><li>针对所有的元素重复以上的步骤, 除了最后一个;</li><li>重复步骤1~3, 直到排序完成.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif"></p><p>实现代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 三行版本 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>temp<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注: 不能放在函数里! 因为放在函数里传参时sizeof(a)会是一个指针的长度</span><span class="token comment">// 除非直接给len数组的长度</span><span class="token comment">// 函数版本</span><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>     <span class="token keyword">int</span> flag<span class="token punctuation">;</span> <span class="token comment">// 标识是否发生过交换 </span>    <span class="token comment">// 每次都有一个元素到最终位置, 只需要循环n-1次 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//  从头开始冒泡 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果没发生交换说明已全部有序 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a><a href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" title="归并排序"></a>归并排序</h2><p>归并排序建立在归并操作上, 是<strong>分治法</strong>的典型应用. 将已有序的子序列合并, 得到完全有序的序列.</p><ol><li>把长度为n的输入序列分成两个长度为n&#x2F;2的子序列;</li><li>对这两个子序列分别采用归并排序;</li><li>将两个排序好的子序列合并成一个最终的排序序列.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif"></p><p>实现代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 归并操作 </span><span class="token comment">// 这里写出mid是因为主函数已经计算过了 </span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> mid <span class="token operator">-</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> n2 <span class="token operator">=</span> high <span class="token operator">-</span> mid<span class="token punctuation">;</span>    <span class="token keyword">int</span> L<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将原序列分装进两个数组 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n2<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>mid<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> low<span class="token punctuation">;</span>     <span class="token comment">// 开始比较归并</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果还有序列没有装完</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 划分操作 把序列按递归划分为多个分组 </span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a><a href="#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" title="希尔排序"></a>希尔排序</h2><p>虽然希尔排序基本上不怎么考虑实现, 但不代表它不重要. 希尔排序是第一个突破$O(n^2)$的算法, 是简单插入排序的改良版. 与插入排序的不同之处在于, 它会优先比较距离较远的元素. 希尔排序又叫<strong>缩小增量排序</strong>. 先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序.</p><ol><li>选择一个增量序列t1, t2, …, tk, 其中ti&gt;tj, tk&#x3D;1;</li><li>按增量序列个数k, 对序列进行k 趟排序;</li><li>每趟排序, 根据对应的增量ti, 将待排序列分割成若干长度为m 的子序列, 分别对各子表进行直接插入排序. 仅增量因子为1 时, 整个序列作为一个表来处理, 表长度即为整个序列的长度.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif"></p><p>实现代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> gap<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> gap<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 每趟排序gap是原来的1/2倍 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>gap<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 按照gap循环子序列 </span>            <span class="token comment">// 直接插入排序 每次都只比较j和j-gap这两个元素 与直插排序一样 </span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j<span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span> j <span class="token operator">>=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j<span class="token operator">-=</span>gap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token comment">// 如果不小于了 在j处将temp元素插入 </span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" title="快速排序"></a>快速排序</h2><p>名气第一名, 所有场景都通用. <strong>快排是必须会写的排序</strong>. 快排是冒泡排序的优化版, 它每次的交换不再像冒泡排序是交换相邻元素, 而是跳跃交换. 通过一趟排序将待排记录分隔成独立的两部分, 其中一部分记录的关键字均比另一部分的关键字小, 则可分别对这两部分记录继续进行排序, 以达到整个序列有序.</p><ol><li>从数列中挑出一个元素, 称为 “基准”(pivot) ;</li><li>重新排序数列, 所有元素比基准值小的摆放在基准前面, 所有元素比基准值大的摆在基准的后面(相同的数可以到任一边) . 在这个分区退出之后, 该基准就处于数列的中间位置. 这个称为分区(partition) 操作;</li><li>递归地(recursive) 把小于基准值元素的子数列和大于基准值元素的子数列排序.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif"></p><p>实现代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quickSortLR</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 无时不刻都要加上i &lt; j的条件</span>        <span class="token comment">// 指针相遇时应该立马停下 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 从右侧找一个比基准小的元素 </span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token comment">// 直接扣到左指针上 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 从左侧找一个比基准大的元素 </span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 扣到右指针上 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 二者相遇时就是最终基准位置</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">quickSortLR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSortLR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码实现是演示的左右交换版本, 实际上还有一种快慢指针的版本.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 快慢指针版本 参考了豆豆的快排实现</span><span class="token comment">// bilibili:BV1Ab411s7To </span><span class="token comment">// 其实就是快慢指针交换比pivot小和比pivot大的过程 </span><span class="token comment">// 假定传进来的都是下标 </span><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 慢指针 并初始化为left左侧 </span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// 快指针 </span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> right<span class="token punctuation">;</span>  <span class="token comment">// 指定最右边的元素为基准 </span>    <span class="token comment">/*         若快指针所指元素比基准元素大        则慢指针什么都不做         若快指针所指向的元素比基准元素小        则让慢指针往前进一位 并交换快慢指针所指元素         因为只有快指针所指元素比基准元素小才让慢指针前进         所以在交换前慢指针指向的元素一定比基准元素大    */</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>left<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>right<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 慢指针i在内的所有左侧元素都比基准元素小</span>    <span class="token comment">// 所以交换i右侧的元素和基准元素的位置 </span>    temp <span class="token operator">=</span> a<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 返回的基准元素就是未交换时的a[pivot], 即基准元素 </span>    <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取基准点 对基准的前后各使用快排 </span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> pivot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a><a href="#%E5%A0%86%E6%8E%92%E5%BA%8F" title="堆排序"></a>堆排序</h2><p>堆排序是利用堆这种数据结构所设计的一种排序算法. 因为堆是一个近似于完全二叉树的结构, 并且满足堆积的性质：即<strong>子结点的键值或索引总是小于(或者大于) 它的父节点</strong>. 在某些特殊的业务场景, 可能需要构建一个堆, 需要进行查找, 这时用堆排序就很合理.</p><ol><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆, 此堆为初始的无序区;</li><li>将堆顶元素R[1]与最后一个元素R[n]交换, 此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;&#x3D;R[n];</li><li>由于交换后新的堆顶R[1]可能违反堆的性质, 因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆, 然后再次将R[1]与无序区最后一个元素交换, 得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn). 不断重复此过程直到有序区的元素个数为n-1, 则整个排序过程完成.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%A0%86%E6%8E%92%E5%BA%8F.gif"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 堆排序 选择排序 和冒泡排序非常像 </span><span class="token comment">// 建堆过程是一个交换的过程  </span><span class="token comment">// 直接采用顺序存储结构存储堆(完全二叉树)</span><span class="token keyword">int</span> heap<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用它来存堆(大根堆)</span><span class="token comment">// 堆调整 low和high选择调整的范围 可以理解为冒泡排序中的一次冒泡 </span><span class="token keyword">void</span> <span class="token function">Sift</span><span class="token punctuation">(</span><span class="token keyword">int</span> heap<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>low<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// heap[j]是i的左孩子 </span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heap<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 如果右孩子更大 把j指向右孩子 </span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 当temp比子孙节点中最大的都小, 交换ij, 并将ij顺着树下移一层        </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">// 当j>high时, 将叶子节点调整为temp </span>    heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 能够看出来整个排序过程和冒泡非常像 只是添加了对堆调整的操作 </span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 调整为大根堆 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// n/2-1是最后一个非叶子节点 对所有非叶子的堆依次进行调整</span>        <span class="token function">Sift</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// 将根节点和最后一个叶子节点进行交换, 删去原来的根节点, 当i=1即只剩一个节点的时候排序完成 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 其实i指代的是当前堆有几个节点 </span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token function">Sift</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每次交换后都进行堆调整 但不要最后一个节点</span>                            <span class="token comment">// 因为最后一个节点在调整\之前符合大根堆的定义 </span>                            <span class="token comment">// 已经被调到了指定的位置 </span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a><a href="#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F" title="计数排序"></a>计数排序</h2><p>计数排序不是基于比较的排序算法, 它的复杂度能到线性级. 效率虽然高, 但使用场景十分受限. 它的原理规定了输入的数据必须是<strong>有确定范围的整数</strong>.</p><ol><li>找出待排序的数组中最大和最小的元素;</li><li>统计数组中每个值为i的元素出现的次数, 存入数组C的第i项;</li><li>对所有的计数累加(从C中的第一个元素开始, 每一项和前一项相加) ;</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项, 每放一个元素就将C(i)减去1.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.gif"></p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a><a href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F" title="基数排序"></a>基数排序</h2><p>“基”这个字, 指的就是十进制的”<strong>个十百千</strong>“. 基数排序先按照个位进行排序, 然后再按照十位进行排序… 先按照低位进行排序, 然后收集到一起, 再按照高位进行排序, 以此类推, 最后就能获得一个有序的序列.</p><ol><li><p>取得数组中的最大数, 并取得位数;</p></li><li><p>arr为原始数组, 从最低位开始取每个位组成radix数组;</p></li><li><p>对radix进行计数排序(利用计数排序适用于小范围数的特点) ;</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif"></p><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a><a href="#%E6%A1%B6%E6%8E%92%E5%BA%8F" title="桶排序"></a>桶排序</h2><p>桶排序跟计数排序一样, 是一种稳定的线性时间排序算法, 这个在机器学习有相似的应用. 按照特征的取值范围对特征进行划分, 然后抽成独热向量. 这里桶排序工作的原理是将数列分到有限数量的桶里, 每个桶再个别排序. 当要被排序的数组内的数值是均匀分配的时候, 桶排序时间复杂度是线性级.</p><ol><li>设置一个定量的数组当作空桶;</li><li>遍历输入数据, 并且把数据一个一个放到对应的桶里去;</li><li>对每个不是空的桶进行排序;</li><li>从不是空的桶里把排好序的数据拼接起来.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%A1%B6%E6%8E%92%E5%BA%8F.gif"></p><h2 id="复杂度对比"><a href="#复杂度对比" class="headerlink" title="复杂度对比"></a><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%AF%B9%E6%AF%94" title="复杂度对比"></a>复杂度对比</h2><table><thead><tr><th><strong>排序算法</strong></th><th><strong>平均时间复杂度</strong></th><th><strong>最好情况</strong></th><th><strong>最坏情况</strong></th><th><strong>空间复杂度</strong></th><th><strong>稳定性</strong></th><th>排序方式</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n^2)$</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td><td>In-place</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>不稳定</td><td>In-place</td></tr><tr><td>插入排序</td><td>$O(n^2)$</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td><td>In-place</td></tr><tr><td>希尔排序</td><td>$O(n\log n)$</td><td>$O(n^{1.3}$)</td><td>$O(n^2)$</td><td>$O(1)$</td><td>不稳定</td><td>In-place</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td>稳定</td><td>Out-place</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(\log n)$</td><td>不稳定</td><td>In-place</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td>不稳定</td><td>In-place</td></tr><tr><td>桶排序</td><td>$O(n + k)$</td><td>$O(n + k)$</td><td>$O(n^2)$</td><td>$O(n + k)$</td><td>稳定</td><td>Out-place</td></tr><tr><td>计数排序</td><td>$O(n + k)$</td><td>$O(n + k)$</td><td>$O(n + k)$</td><td>$O(k)$</td><td>稳定</td><td>Out-place</td></tr><tr><td>基数排序</td><td>$O(n × m)$</td><td>$O(n × m)$</td><td>$O(n × m)$</td><td>$O(n + m)$</td><td>稳定</td><td>Out-place</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 十大排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像特征之LoG算子与DoG算子</title>
      <link href="/2023/12/20/tu-xiang-te-zheng-zhi-log-suan-zi-yu-dog-suan-zi/"/>
      <url>/2023/12/20/tu-xiang-te-zheng-zhi-log-suan-zi-yu-dog-suan-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="图像特征之LoG算子与DoG算子"><a href="#图像特征之LoG算子与DoG算子" class="headerlink" title="图像特征之LoG算子与DoG算子"></a>图像特征之LoG算子与DoG算子</h2><p>  LoG(Laplacian of Gaussian)算子和DoG(Difference of Gaussian)算子是图像处理中实现极值点检测(Blob Detection)的两种方法。通过利用高斯函数卷积操作进行尺度变换，可以在不同的尺度空间检测到关键点(Key Point)或兴趣点(Interest Point)，实现尺度不变性(Scale invariance)的特征点检测。  </p><h1 id="Laplacian-of-Gaussian-LoG"><a href="#Laplacian-of-Gaussian-LoG" class="headerlink" title="Laplacian of Gaussian(LoG)"></a>Laplacian of Gaussian(LoG)</h1><p>  Laplace算子通过对图像求取二阶导数的零交叉点(zero-cross)来进行边缘检测，其计算公式如下：<br>$$\nabla ^2 f(x,y)&#x3D;\dfrac{\partial^2 f}{\partial x^2} + \dfrac{\partial^2 f}{\partial y^2}$$<br>由于微分运算对噪声比较敏感，可以先对图像进行高斯平滑滤波，再使用Laplace算子进行边缘检测，以降低噪声的影响。由此便形成了用于极值点检测的LoG算子。常用的二维高斯函数如下：<br>$$G_\sigma(x,y)&#x3D;\dfrac{1}{\sqrt {2\pi \sigma ^{2}}} exp(-\dfrac{x^2+y^2}{2\sigma ^2})$$<br>原图像与高斯核函数卷积后再做laplace运算<br>$$\Delta [G_\sigma(x,y) \ast f(x,y)]&#x3D;[\Delta G_\sigma(x,y)] \ast f(x,y)$$<br>$$LoG &#x3D; \Delta G_\sigma(x,y)&#x3D;\dfrac{\partial^2 G_\sigma(x,y)}{\partial x^2} + \dfrac{\partial^2 G_\sigma(x,y)}{\partial y^2}&#x3D;\dfrac{x^2+y^2-2\sigma^2}{\sigma^4}e^{-(x^2+y^2)&#x2F;2\sigma^2}$$<br>所以先对高斯核函数求取二阶导数，再与原图像进行卷积操作。由于高斯函数是圆对称的，因此LoG算子可以有效地实现极值点或局部极值区域的检测。</p><h1 id="Difference-of-Gaussian-DoG"><a href="#Difference-of-Gaussian-DoG" class="headerlink" title="Difference of Gaussian(DoG)"></a>Difference of Gaussian(DoG)</h1><p>  DoG算子是高斯函数的差分，具体到图像中，就是将图像在不同参数下的高斯滤波结果相减，得到差分图。DoG算子的表达式如下：<br>$$DoG &#x3D; G_{\sigma_1} - G_{\sigma_2}&#x3D;\dfrac{1}{\sqrt{2\pi}} [\dfrac{1}{\sigma_1} e^{-(x^2+y^2)&#x2F;2\sigma_1^2} - \dfrac{1}{\sigma_2} e^{-(x^2+y^2)&#x2F;2\sigma_2^2}]$$<br>如果将高斯核函数的形式表示为<br>$$G_\sigma(x,y)&#x3D;\dfrac{1}{2\pi \sigma ^{2}} exp(-\dfrac{x^2+y^2}{2\sigma ^2})$$<br>则存在以下等式<br>$$\dfrac{\partial G}{\partial \sigma} &#x3D; \sigma \nabla ^2 G$$<br>$$\dfrac{\partial G}{\partial \sigma} \approx \dfrac{G(x,y,k\sigma)-G(x,y,\sigma)}{k\sigma-\sigma}$$<br>因此有<br>$$G(x,y,k\sigma)-G(x,y,\sigma) \approx (k-1)\sigma^2 \nabla ^2 G$$<br>其中$k-1$是个常数，不影响极值点的检测，LoG算子和DoG算子的函数波形对比如下图所示，由于高斯差分的计算更加简单，因此可用DoG算子近似替代LoG算子</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BLoG%E7%AE%97%E5%AD%90%E4%B8%8EDoG%E7%AE%97%E5%AD%90/5a3741bdd1528.jpg" alt="LoG-DoG.jpg"></p><h1 id="边缘检测-Edge-Detection-和极值点检测-Blob-Detection"><a href="#边缘检测-Edge-Detection-和极值点检测-Blob-Detection" class="headerlink" title="边缘检测(Edge Detection)和极值点检测(Blob Detection)"></a>边缘检测(Edge Detection)和极值点检测(Blob Detection)</h1><p>  LoG算子和DoG算子既可以用于检测图像边缘，也可用于检测局部极值点或极值区域，图像边缘在LoG算子下的响应情况如下图所示，二阶微分算子在边缘处为一过零点，而且过零点两边的最大值(正)和最小值(负)的差值较大。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BLoG%E7%AE%97%E5%AD%90%E4%B8%8EDoG%E7%AE%97%E5%AD%90/5954d7a6ca776.jpg" alt="edge.jpg"></p><p>接下来观察下图，由边缘过渡到极值点，LoG算子的响应变化</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BLoG%E7%AE%97%E5%AD%90%E4%B8%8EDoG%E7%AE%97%E5%AD%90/5954d7a6cb78d.jpg" alt="edge to blob.jpg"></p><p>LoG算子在极值点(Blob)处的响应如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BLoG%E7%AE%97%E5%AD%90%E4%B8%8EDoG%E7%AE%97%E5%AD%90/5954d7a6c963e.jpg" alt="blob.jpg"></p><p>通过定义不同尺寸的高斯核函数，可以实现在不同尺度检测Blob，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BLoG%E7%AE%97%E5%AD%90%E4%B8%8EDoG%E7%AE%97%E5%AD%90/5954d7a6c08d4.jpg" alt="scale blob.jpg"></p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a><a href="#%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B" title="算法流程"></a>算法流程</h3><ul><li>对原图像进行LoG或者DoG卷积操作</li><li>检测卷积后图像中的过零点(边缘)或者极值点(Blob)</li><li>如果是检测边缘，则对过零点进行阈值化(过零点两边的最大值和最小值之间的差值要大于某个阈值)；如果是检测极值点，则极值点的LoG或DoG响应值应该大于某个阈值。</li></ul><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://senitco.github.io/2017/06/20/image-feature-LoG-DoG/">图像特征之LoG算子与DoG算子</a></p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a><a href="#reference" title="reference"></a>reference</h3><ul><li><a href="http://fourier.eng.hmc.edu/e161/lectures/gradient/node8.html">http://fourier.eng.hmc.edu/e161/lectures/gradient/node8.html</a></li><li><a href="http://fourier.eng.hmc.edu/e161/lectures/gradient/node9.html">http://fourier.eng.hmc.edu/e161/lectures/gradient/node9.html</a></li><li><a href="http://blog.csdn.net/songzitea/article/details/12851079">http://blog.csdn.net/songzitea/article/details/12851079</a></li><li><a href="http://blog.csdn.net/kezunhai/article/details/11579785">http://blog.csdn.net/kezunhai/article/details/11579785</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像特征提取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像特征提取 </tag>
            
            <tag> LoG算子 </tag>
            
            <tag> DoG算子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像特征提取之Haar特征</title>
      <link href="/2023/12/20/tu-xiang-te-zheng-ti-qu-zhi-haar-te-zheng/"/>
      <url>/2023/12/20/tu-xiang-te-zheng-ti-qu-zhi-haar-te-zheng/</url>
      
        <content type="html"><![CDATA[<p>  角点检测(Corner Detection)也称为特征点检测，是图像处理和计算机视觉中用来获取图像局部特征点的一类方法，广泛应用于运动检测、图像匹配、视频跟踪、三维建模以及目标识别等领域中。  </p><h1 id="局部特征"><a href="#局部特征" class="headerlink" title="局部特征"></a>局部特征</h1><p>  不同于HOG、LBP、Haar等基于区域(Region)的图像局部特征，Harris是基于角点的特征描述子，属于feature detector，主要用于图像特征点的匹配(match)，在SIFT算法中就有用到此类角点特征；而HOG、LBP、Haar等则是通过提取图像的局部纹理特征(feature extraction)，用于目标的检测和识别等领域。无论是HOG、Haar特征还是Harris角点都属于图像的局部特征，满足局部特征的一些特性。主要有以下几点：</p><ul><li><strong>可重复性(Repeatability)</strong> ：同一个特征可以出现在不同的图像中，这些图像可以在不同的几何或光学环境下成像。也就是说，同一物体在不同的环境下成像(不同时间、不同角度、不同相机等)，能够检测到同样的特征。</li><li><strong>独特性(Saliency)</strong> ：特征在某一特定目标上表现为独特性，能够与场景中其他物体相区分，能够达到后续匹配或识别的目的。</li><li><strong>局部性(Locality)</strong> : 特征能够刻画图像的局部特性，而且对环境影响因子(光照、噪声等)鲁棒。</li><li>**紧致性和有效性(Compactness and efficiency)**；特征能够有效地表达图像信息，而且在实际应用中运算要尽可能地快。</li></ul><p>相比于考虑局部邻域范围的局部特征，全局特征则是从整个图像中抽取特征，较多地运用在图像检索领域，例如图像的颜色直方图。<br>除了以上几点通用的特性外，对于一些图像匹配、检测识别等任务，可能还需进一步考虑图像的局部不变特征。例如 <strong>尺度不变性(Scale invariance)</strong> 和 <strong>旋转不变性(Rotation invariance)</strong> ，当图像中的物体或目标发生旋转或者尺度发生变换，依然可以有效地检测或识别。此外，也会考虑局部特征对光照、阴影的不变性。</p><h1 id="Harris角点检测"><a href="#Harris角点检测" class="headerlink" title="Harris角点检测"></a>Harris角点检测</h1><p>  特征点在图像中一般有具体的坐标，并具有某些数学特征，如局部最大或最小灰度、以及某些梯度特征等。角点可以简单的认为是两条边的交点，比较严格的定义则是在邻域内具有两个主方向的特征点，也就是说在两个方向上灰度变化剧烈。如下图所示，在各个方向上移动小窗口，<strong>如果在所有方向上移动，窗口内灰度都发生变化，则认为是角点；如果任何方向都不变化，则是均匀区域；如果灰度只在一个方向上变化，则可能是图像边缘</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953a445031a0.jpg"></p><p>  对于给定图像$I(x,y)$和固定尺寸的邻域窗口，计算窗口平移前后各个像素差值的平方和，也就是自相关函数<br>$$<br>E(u,v)&#x3D;\Sigma_x \Sigma_y w(x,y) [I(x+u,y+v)-I(x,y)]^2<br>$$<br>其中，窗口加权函数$w(x,y)$可取均值函数或者高斯函数，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953a7fa5a172.jpg"></p><p>根据泰勒展开，可得到窗口平移后图像的一阶近似<br>$$I(x+u,y+v) \approx I(x,y)+I_x(x,y)u+I_y(x,y)v$$<br>因此$E(u, v)$可化为<br>$$E(u,v) \approx \Sigma_{x,y}w(x,y)[I_x(x,y)u+I_y(x,y)v]^2&#x3D;[u,v] M(x,y) \begin{bmatrix} u \\ v \end{bmatrix} $$  </p><p>$$M(x,y)&#x3D;\Sigma_w \begin{bmatrix} I_x^2&amp; I_xI_y \\ I_xI_y &amp; I_y^2\end{bmatrix} &#x3D; \begin{bmatrix} A&amp; C\\ C&amp; B\end{bmatrix}$$  </p><p>$E(u,v)$可表示为一个二次项函数 </p><p>$$E(u,v)&#x3D;Au^2+2Cuv+Bv^2$$  </p><p>其中$A&#x3D;\Sigma_w I_x^2, B &#x3D; \Sigma_w I_y^2, C&#x3D;\Sigma_w I_x I_y$</p><p>二次项函数本质上是一个椭圆函数，椭圆的曲率和尺寸可由$M(x,y)$的特征值$\lambda_1,\lambda_2$决定，椭圆方向由$M(x,y)$的特征向量决定，椭圆方程和其图形分别如下所示：<br>$$\begin{bmatrix}u &amp; v\end{bmatrix} M(x,y) \begin{bmatrix} u\\ v \end{bmatrix} &#x3D; 1$$</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953af7c8c289.png"></p><p>考虑角点的边界和坐标轴对齐的情况，如下图所示，在平移窗口内，只有上侧和左侧边缘，上边缘$I_y$很大而$I_x$很小，左边缘$I_x$很大而$I_y$很小，所以矩阵$M$可化简为<br>$$M&#x3D;\begin{bmatrix} \lambda_1&amp; 0\\ 0&amp; \lambda_2\end{bmatrix}$$</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953b0d8c854c.jpg"></p><p>当角点边界和坐标轴没有对齐时，可对角点进行旋转变换，将其变换到与坐标轴对齐，这种旋转操作可用矩阵的相似对角化来表示，即<br>$$M&#x3D;X\Sigma X^T &#x3D; X \begin{bmatrix} \lambda_1&amp; 0\\ 0&amp; \lambda_2\end{bmatrix} X^T$$<br>$$Mx_i&#x3D;\lambda_i x_i$$</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953b0d8e3d2d.jpg"></p><p>  对于矩阵$M$，可以将其和协方差矩阵类比，协方差表示多维随机变量之间的相关性，协方差矩阵对角线的元素表示的是各个维度的方差，而非对角线上的元素表示的是各个维度之间的相关性，在PCA(主成分分析)中，将协方差矩阵对角化，使不同维度的相关性尽可能的小，并取特征值较大的维度，来达到降维的目的。类似的，可以将矩阵$M$看成是一个二维随机分布的协方差矩阵，通过将其对角化，求取矩阵的两个特征值，并根据这两个特征值来判断角点。</p><p>如下图所示， <strong>可根据矩阵$M$的特征值来判断是否为角点，当两个特征值都较大时为角点(corne)，一个特征值较大而另一个较小时则为图像边缘(edge)，两个特征值都较小时为均匀区域(flat)。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953b3774c2f2.png"></p><p>在判断角点时，无需具体计算矩阵$M$的特征值，而使用下式近似计算角点响应值。<br>$$R &#x3D; detM-\alpha (traceM)^2$$<br>$$detM&#x3D;\lambda_1 \lambda_2&#x3D;AB-C^2$$<br>$$traceM&#x3D;\lambda_1 + \lambda_2 &#x3D; A+B$$<br>式中，$detM$为矩阵$M$的行列式，$traceM$为矩阵$M$的迹，$\alpha$为一常数，通常取值为0.04~0.06。</p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>Harris角点检测的算法步骤归纳如下：</p><ul><li><p>计算图像$I(x,y)$在$X$方向和$Y$方向的梯度  </p><p>$$I_x&#x3D;\dfrac {\partial I} {\partial x}&#x3D;I(x,y)\otimes \begin{bmatrix} -1&amp; 0&amp; 1\end{bmatrix}$$</p><p>$$I_y&#x3D;\dfrac {\partial I} {\partial y}&#x3D;I(x,y)\otimes \begin{bmatrix} -1&amp; 0&amp; 1\end{bmatrix} ^T$$</p></li><li><p>计算图像两个方向梯度的乘积$I_x^2、I_y^2、I_x I_y$</p></li><li><p>使用窗口高斯函数分别对$I_x^2、I_y^2、I_x I_y$进行高斯加权，生成矩阵$M$。</p></li><li><p>计算每个像素的Harris响应值$R$，并设定一阈值$T$，对小于阈值$T$的$R$置零。</p></li><li><p>在一个固定窗口大小的邻域内($5 \times 5$)进行非极大值抑制，局部极大值点即为图像中的角点。</p></li></ul><h1 id="Harris角点性质"><a href="#Harris角点性质" class="headerlink" title="Harris角点性质"></a>Harris角点性质</h1><ul><li>参数$\alpha$对角点检测的影响：增大$\alpha$的值，将减小角点响应值$R$，减少被检测角点的数量；减小$\alpha$的值，将增大角点响应值$R$，增加被检测角点的数量。  </li><li>Harris角点检测对亮度和对比度的变化不敏感。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953bb60bb814.jpg"></p><ul><li>Harris角点检测具有旋转不变性，但不具备尺度不变性。如下图所示，在小尺度下的角点被放大后可能会被认为是图像边缘。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953bb317b0b6.png"></p><p>Harris角点检测的结果示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BHaar%E7%89%B9%E5%BE%81/5953bc1427011.jpg"></p><h1 id="多尺度Harris角点检测"><a href="#多尺度Harris角点检测" class="headerlink" title="多尺度Harris角点检测"></a>多尺度Harris角点检测</h1><p>  Harris角点具有灰度不变性和旋转不变性，但不具备尺度不变性，而尺度不变性对于图像的局部特征来说至关重要。将Harris角点检测算子和高斯尺度空间表示相结合，可有效解决这个问题。与Harris角点检测中的二阶矩表示类似，定义一个尺度自适应的二阶矩<br>$$M&#x3D;\mu (x,y,\sigma_I, \sigma_D)&#x3D;\sigma_D^2g(\sigma_I) \otimes \begin{bmatrix} L_x^2(x,y,\sigma_D)&amp; L_xL_y(x,y,\sigma_D)\\ L_xL_y(x,y,\sigma_D)&amp; L_y^2(x,y,\sigma_D)\end{bmatrix}$$<br>式中，$g(\sigma_I)$表示尺度为$\sigma_I$的高斯卷积核，$L_x(x,y,\sigma_D)$和$L_y(x,y,\sigma_D)$表示对图像使用高斯函数$g(\sigma_D)$进行平滑后取微分的结果。$\sigma_I$通常称为积分尺度，是决定Harris角点当前尺度的变量，$\sigma_D$为微分尺度，是决定角点附近微分值变化的变量，通常$\sigma_I$应大于$\sigma_D$。<br>算法流程：</p><ul><li>确定尺度空间的一组取值$\sigma_I&#x3D;(\sigma_0, \sigma_1, \sigma_2,…, \sigma_n)&#x3D;(\sigma, k\sigma, k^2\sigma,…, k^n\sigma), \sigma_D&#x3D;s\sigma_I$</li><li>对于给定的尺度空间值$\sigma_D$，进行角点响应值的计算和判断，并做非极大值抑制处理</li><li>在位置空间搜索候选角点后，还需在尺度空间上进行搜索，计算候选点的拉普拉斯响应值，并于给定阈值作比较<br>$$F(x,y,\sigma_n)&#x3D;\sigma_n^2|L_{xx}(x,y,\sigma_n)+L_{yy}(x,y,\sigma_n)| \geq threshold$$</li><li>将响应值$F$与邻近的两个尺度空间的拉普拉斯响应值进行比较，使其满足<br>$$F(x,y,\sigma_n) &gt; F(x,y,\sigma_l), l&#x3D;n-1, n+1$$</li></ul><p>这样既可确定在位置空间和尺度空间均满足条件的Harris角点。</p><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://senitco.github.io/2017/06/18/image-feature-harris/">图像特征之Harris角点检测</a></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><a href="http://www.bmva.org/bmvc/1988/avc-88-023.pdf">Paper: A COMBINED CORNER AND EDGE DETECTOR</a></li><li><a href="https://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/mikolajczyk_ijcv2004.pdf">Paper: Scale &amp; Affine Invariant Interest Point Detectors</a></li><li><a href="https://github.com/ronnyyoung/ImageFeatures">Code: Harris Detector</a></li><li><a href="http://www.cnblogs.com/ronny/p/4009425.html">http://www.cnblogs.com/ronny/p/4009425.html</a></li><li><a href="http://www.cnblogs.com/ronny/p/3886013.html">http://www.cnblogs.com/ronny/p/3886013.html</a></li><li><a href="https://xmfbit.github.io/2017/01/25/cs131-finding-features/">https://xmfbit.github.io/2017/01/25/cs131-finding-features/</a></li><li><a href="http://www.voidcn.com/blog/app_12062011/article/p-6071346.html">http://www.voidcn.com/blog/app_12062011&#x2F;article&#x2F;p-6071346.html</a></li><li><a href="http://blog.csdn.net/jwh_bupt/article/details/7628665">http://blog.csdn.net/jwh_bupt&#x2F;article&#x2F;details&#x2F;7628665</a></li><li><a href="http://www.cnblogs.com/ztfei/archive/2012/05/07/2487123.html">http://www.cnblogs.com/ztfei/archive/2012/05/07/2487123.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像特征提取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像特征提取 </tag>
            
            <tag> Haar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串排序算法KMP</title>
      <link href="/2023/12/20/zi-fu-chuan-pai-xu-suan-fa-kmp/"/>
      <url>/2023/12/20/zi-fu-chuan-pai-xu-suan-fa-kmp/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a><a href="#KMP%E7%AE%97%E6%B3%95" title="KMP算法"></a>KMP算法</h2><h2 id="串"><a href="#串" class="headerlink" title="串"></a><a href="#%E4%B8%B2" title="串"></a>串</h2><p>字符串是一种<strong>特殊的线性表</strong>, 其逻辑结构与线性表相同, 只是在数据类型上进行了约束, 要求元素全是字符类型. 串可以顺序存储, 链式存储, 或者堆存储. 堆结合了顺序和链式的优点, 实际在构造串也是采用的堆结构来存储, 能够方便动态扩展.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/%E4%B8%B21.jpg"></p><p>方便理解可以使用顺序存储.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 串的定义</span><span class="token comment">//typedef struct&#123;</span><span class="token comment">//    char str[maxSize+1];</span><span class="token comment">//    int length; </span><span class="token comment">//&#125;Str;</span><span class="token comment">// 或者</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Str<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串以<code>&#39;\0&#39;</code>作为<strong>结束标记</strong>. 串的基本操作有赋值, 取串长, 串比较, 求子串, 串清空, 串连接等. 在实现起来没有多大难度, 就稍微注意一下结束标记的处理即可.</p><h2 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D" title="字符串匹配"></a>字符串匹配</h2><p>对一个串中的某子串定位操作称为串的模式匹配, 而其中与主串进行对比的子串称为模式串. 在字符串中常用到字符串匹配.</p><h3 id="简单模式匹配算法"><a href="#简单模式匹配算法" class="headerlink" title="简单模式匹配算法"></a><a href="#%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95" title="简单模式匹配算法"></a>简单模式匹配算法</h3><p>简单而朴素的匹配算法, 就是将主串与模式串的字符挨个进行比对, 如果相同则逐一比对主串和模式串的下一个元素, 如果不同, 则从主串的下一个元素重复逐个比对的过程. 全部相同则匹配成功, 否则匹配失败.</p><p>代码实现如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 简单模式匹配算法</span><span class="token comment">// 假设字符串储存在1 ~ length上 </span><span class="token keyword">int</span> <span class="token function">index</span><span class="token punctuation">(</span>Str str<span class="token punctuation">,</span> Str substr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">// 其中i和j分别用来表示主串和子串的位置, k用来暂存主串被比对的位置 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> str<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> substr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token operator">++</span>k<span class="token punctuation">;</span> <span class="token comment">// 匹配失败 i从主串下一个位置开始 </span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 到这里有两种可能性 一个是原串被遍历完了 还有就是子串被遍历完了 </span>    <span class="token comment">// 如果是子串遍历完了说明匹配成功 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> substr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> k<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 因为假设字符串从下标1开始, 0是没有字符的</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个简单的算法就是单纯的暴力匹配, 没有任何的预处理, 如果字符串长为n, 模式串长为m, 那么<strong>最坏时间复杂度为O((n-m+1)*m)</strong>. 即每次主串与模式串匹配时总能一直搜索到模式串的最后一个字符, 并最后匹配没有成功.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/%E4%B8%B22.png"></p><h3 id="KMP算法-1"><a href="#KMP算法-1" class="headerlink" title="KMP算法"></a><a href="#KMP%E7%AE%97%E6%B3%95-1" title="KMP算法"></a>KMP算法</h3><p>KMP算法是一种经典的字符串匹配算法, 相较于前面所说的简单字符串匹配算法, 在比较速度上有了相当大的提升.</p><p>来观察一个问题, 在下述串匹配过程中, 当在箭头所指的位置发生了字符不匹配:</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp1.jpg"></p><p>如果是简单字符串匹配算法, 那么很简单, 说明以主串第一个元素<code>A</code> 为起始的字符串无法与模式串相匹配, 将回溯到主串第二个元素<code>B</code> 与模式串第一个元素<code>A</code> 进行比较, 然后继续逐一比较下去…</p><p>继续观察如何才能使得模式串指针直接移动到再次能够与箭头所指的主串字符<code>B</code> 与模式串相比较的位置:</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp2.jpg"></p><p>由于主串第二个字符是<code>B</code>, 模式串第一个字符是<code>A</code>, 发生不匹配, 主串指针下移, 主串的第三四五个字符和模式串的第一二三个字符匹配, 又回到了对模式串某字符主串字符<code>B</code> 的比对.</p><p>除去简单字符串匹配, 有没有更取巧的办法, 利用<strong>模式串自身的特点</strong>, 或者说利用在主串和模式串发生不匹配时已经匹配字符的信息, 来压缩这个比较的过程呢?</p><p>继续逐一完成主串和模式串的比对, 又发现有一处不匹配.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp3.jpg"></p><p>如果是简单字符串匹配又要逐一后移, 直到达到下述状态, 才能再次进行主串中所指的<code>B</code> 和模式串比对.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp4.jpg"></p><p>经过这两个例子, 隐隐约约发现点问题. 总会出现一种状态, <strong>模式串中某个字符与主串字符发生不匹配, 但在这之前的所有字符都已经匹配了</strong>. 如果使用简单字符串匹配, 效率极其低下. 如果模式串的前半部分(从起始处向后取)和后半部分(从不匹配点向前取)有<strong>完全相同的子串</strong>, 那么很明显如果前半部分与主串完全匹配, 那么后半部分也一定与主串完全匹配, 那就不用重复进行比对了!</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp8.jpg"></p><p>为方便比较, 我将两次比对放在一起, 比如:</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp5.jpg"> <img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp2.jpg"></p><p>这里从起始处向后取, 即黄色框内的<code>ABA</code> 和从不匹配点向前取的白色框内的<code>ABA</code> 就是完全相同的子串, 这对子串称为<strong>公共前后缀</strong>. 正是因为这对前后缀完全相同, 所以发生字符不匹配时, 才能直接使得模式串的指针停留在前缀的下一个位置上, 不再重复进行前缀的比对, 这也是简单字符串匹配和KMP算法的最大不同, 即<strong>模式串的比较指针不回溯</strong>.</p><blockquote><p>指针不回溯意味着对大规模的外存中的字符串匹配操作可以分段进行. 先读入内存一部分进行匹配, 完成后再写回外存, 确保在匹配时不需要将之前写回外存的部分再次读入, 减少了IO操作, 从而提高了效率.</p></blockquote><p>在取前后缀时, 可能会有多对, 那应该取哪一对呢? 以上述发生不匹配的图为例, 从左右分别取, 应该可以形成<code>A-A</code>, <code>ABA-ABA</code>, <code>ABABA-ABABA</code> 三对符合要求的公共前后缀. 其中<code>AB-BA</code> 和 <code>ABAB-BABA</code>不是完全相同的子串, 是倒过来的, 不是公共前后缀. 如果要尽可能的减少重复比对次数, 一定是公共前后缀越长越好, 越长说明已经比对过的字符越多. 同时需要注意, <code>ABABA-ABABA</code> 这对是长度完全和子串长度相等, 再次比对时就失去了意义, 虽然是公共前后缀, 但它应该<strong>不能被使用</strong>. <code>ABA-ABA</code> 就是<strong>最长公共前后缀</strong>, 取最长的一对公共前后缀作为指针不回溯的依据.</p><p>记住, 模式串的比较指针直接就指向了前缀的下一个位置. 再看一个例子, 加深理解:</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp6.jpg"> <img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp4.jpg"></p><p>在上述叙述的过程中, 发生主串和模式串的不匹配时, 模式串左侧与主串的对应位置一定是匹配的, 换句话说二者是一样的. 那么研究模式串就和研究主串是等价的了, 因此<strong>与主串无关</strong>, 仅保留模式串, 将指针不回溯的位置记录用数组下来, 当发生不匹配时, 指针就恢复到之前记录的位置即可. 这个数组称为<strong>next数组</strong>.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp7.jpg"></p><p>为方便, 字符串下标从1开始. 对于模式串:</p><table><thead><tr><th>发生不匹配的模式串下标</th><th>最长公共前后缀长度</th><th>主串当前与模式串比对的下标</th><th>最长公共前后缀</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>0(特殊)</td><td>-</td></tr><tr><td>2</td><td>0</td><td>1</td><td>-</td></tr><tr><td>3</td><td>0</td><td>1</td><td>-</td></tr><tr><td>4</td><td>1</td><td>2</td><td><code>A</code></td></tr><tr><td>5</td><td>2</td><td>3</td><td><code>AB</code></td></tr><tr><td>6</td><td>3</td><td>4</td><td><code>ABA</code></td></tr><tr><td>7</td><td>1</td><td>2</td><td><code>A</code></td></tr><tr><td>8</td><td>1</td><td>2</td><td><code>A</code></td></tr><tr><td>9</td><td>2</td><td>3</td><td><code>AB</code></td></tr><tr><td>10</td><td>3</td><td>4</td><td><code>ABA</code></td></tr><tr><td>11</td><td>4</td><td>5</td><td><code>ABAB</code></td></tr><tr><td>12</td><td>5</td><td>6</td><td><code>ABABA</code></td></tr></tbody></table><p>总结上述规律, 除去模式串第一个元素外, 主串当前元素与模式串元素比对的下标是最长前后缀长度+1. 如果下标为1发生不匹配, 主串的下一个元素与模式串下标元素为1开始比较. 最坏时间复杂度是O(n+m).</p><h4 id="简单匹配升级到KMP"><a href="#简单匹配升级到KMP" class="headerlink" title="简单匹配升级到KMP"></a><a href="#%E7%AE%80%E5%8D%95%E5%8C%B9%E9%85%8D%E5%8D%87%E7%BA%A7%E5%88%B0KMP" title="简单匹配升级到KMP"></a>简单匹配升级到KMP</h4><p>先抛开next数组如何构造不谈, 先看看如何写KMP的代码. 如果KMP完成了简单字符串匹配算法的压缩, 那也应该能够由简单算法升级为KMP算法.</p><p>实现KMP代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span>Str str<span class="token punctuation">,</span> Str substr<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 下标从1开始</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> substr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 主串指针下移的情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> str<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 发生不匹配时模式串指针跳到next数组所指向的位置</span>        <span class="token keyword">else</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 遍历完模式串没发现不匹配 说明模式串与主串相匹配</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> substr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> i <span class="token operator">-</span> substr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="求next数组"><a href="#求next数组" class="headerlink" title="求next数组"></a><a href="#%E6%B1%82next%E6%95%B0%E7%BB%84" title="求next数组"></a>求next数组</h4><p>再来看看next数组是如何构建的. 让我们回到之前找最长公共前后缀的过程. 那时曾经说过, 公共前后缀是两段<strong>完全相同的子串</strong>, 那找最长公共前后缀的过程岂不是也是字符串匹配? 我们仍然要延续不重复做事情的思路, 利用已知信息去求next数组.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp9.jpg"></p><p>如果这样去想, 那么图中Pj所对应的next数组的值与Pt必然是有关联的.</p><p>当Pj和Pt的大小未知, 而前面模式串均相同时, 假设在Pj出发生不匹配, 模式串指针会跳转到最长公共前后缀+1处, 即next[j] &#x3D; t. 有了这个初始条件, 可以根据Pj和Pt的大小关系推出next[j+1].</p><p>假设P(j+1)处发生不匹配:</p><ul><li><p>如果Pj &#x3D; Pt, 那么next[j+1] &#x3D; next[j]+1 &#x3D; t+1.</p></li><li><p>如果Pj !&#x3D; Pt, 就得在这两个串(本质是模式串自己) 中找到最长的公共前后缀, 也就<strong>回到了字符串匹配的问题中</strong>. 将P(j-t+1) ~ Pj 视为主串, P1 ~ Pt视为模式串, 继续做字符串匹配. 必须向前反复重定位指针, 找到一个位置使得Pj &#x3D; Pt或满足t &#x3D; 0, 即将t循环赋值为next[t], t &#x3D; 0 时, 令next[j+1] &#x3D; 1.</p><p>注意, 因为第二种情况与字符串匹配完全一致, 所以建立next数组的代码一定与KMP算法<strong>极其相似</strong>:</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 求next数组的方法 substr为模式串 </span><span class="token comment">// j和t与上述图中相同</span><span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span>Str substr<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> substr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// j&lt;= substr.length 会使next数组下标越界 </span>        <span class="token comment">// 模式串自身匹配</span>        <span class="token comment">// t可能被下面的else赋值为0, 在条件并入后会将t置为1</span>        <span class="token comment">// 并且第一次执行, 有next[2] = 1, 满足之前推导的结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> substr<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token operator">++</span>t<span class="token punctuation">;</span>            next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token comment">// next[j] = length+1 length实际上就是没++前的t</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> t <span class="token operator">=</span> next<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 模式串指针重定位到next[t] </span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KMP算法改进"><a href="#KMP算法改进" class="headerlink" title="KMP算法改进"></a><a href="#KMP%E7%AE%97%E6%B3%95%E6%94%B9%E8%BF%9B" title="KMP算法改进"></a>KMP算法改进</h4><p>在求next数组时, 会一直用到向”前反复重定位指针”这个操作, 还可以有优化的余地.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp10.jpg"></p><p>在这个例子中出现了<strong>连续且完全相同的字符</strong>, 在j &#x3D; 5时发生不匹配, next[j] &#x3D; 4, 将j重定位到next[j] 上. j又为4, next[j] 又为3… 反复重定位, 直到j为0, 才发现该位置的主串和模式串完全不匹配, 主串和模式串指针都应该后移一位. 在这个过程, 从1到4位置上的字符串是相等的, 应该直接给next[5] 赋值为0.</p><p>尝试在next数组的基础上, 构建一个重定向数组, 使得其能够根据之前比较的内容跳过多余的比较, 直接将next[j] 赋值为某个已知的next数组值, 这个数组叫<strong>nextval数组</strong>.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp11.jpg"></p><p>在上面的图中, j位置的元素反复与Pd, Pc, Pb, Pa都进行了比较, 但明显前三者都是冗余比较, 不能给解决不匹配问题带来好处. 此处的nextval[j] 应该为a.</p><p>推广到一般情况, 路径上的元素都不是相邻的, 而现在j之前的nextval数组值都是已知的, 如何求j后的元素k的nextval[k] 呢?</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95KMP/kmp12.jpg"></p><p>如果k位置上的元素和j位置上的元素相等, 那么nextval[k] &#x3D; nextval[next[k]], 如果不相等则令nextval[k] &#x3D; next[k].</p><p>归纳为一般步骤:</p><ol><li>j &#x3D; 1时, nextval[j] 赋值为 0, 作为特殊标记</li><li>j &gt; 1时:<ul><li>若Pj !&#x3D; P(next[j]), 则nextval[j] &#x3D; next[j].</li><li>若Pj &#x3D; P(next[j]), 则nextval[j] &#x3D; nextval[next[j]].</li></ul></li></ol><p>求nextval数组的代码可以由求next数组的代码修改而来, 最好对比结合起来看, 实现如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">getNextval</span><span class="token punctuation">(</span>Str substr<span class="token punctuation">,</span> <span class="token keyword">int</span> nextval<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nextval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// j=1时nextval[j] = 0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> substr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> substr<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token operator">++</span>t<span class="token punctuation">;</span>            <span class="token comment">// 求解next数组时, 有next[j] = t; 那么t可以代替next[j] </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>substr<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> substr<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>                nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token comment">// nextval[j] = next[j]</span>            <span class="token keyword">else</span>                nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nextval<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// nextval[j] = nextval[next[j]]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> t <span class="token operator">=</span> nextval<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串排序算法KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像特征之SIFT特征匹配</title>
      <link href="/2023/12/20/tu-xiang-te-zheng-zhi-sift-te-zheng-pi-pei/"/>
      <url>/2023/12/20/tu-xiang-te-zheng-zhi-sift-te-zheng-pi-pei/</url>
      
        <content type="html"><![CDATA[<p>  尺度不变特征变换(Scale-invariant feature transform, SIFT)是计算机视觉中一种检测、描述和匹配图像局部特征点的方法，通过在不同的尺度空间中检测极值点或特征点(Conrner Point, Interest Point)，提取出其位置、尺度和旋转不变量，并生成特征描述子，最后用于图像的特征点匹配。SIFT特征凭借其良好的性能广泛应用于运动跟踪(Motion tracking)、图像拼接(Automatic mosaicing)、3D重建(3D reconstruction)、移动机器人导航(Mobile robot navigation)以及目标识别(Object Recognition)等领域。  </p><h1 id="尺度空间极值检测"><a href="#尺度空间极值检测" class="headerlink" title="尺度空间极值检测"></a>尺度空间极值检测</h1><p>  Harris特征进行角点检测时，不具备尺度不变性。为了能够在不同的尺度检测到尽可能完整的特征点或关键点，需要借助尺度空间理论来描述图像的多尺度特征。相关研究证明高斯卷积核是实现尺度变换的唯一线性核。因此可用图像的高斯金字塔表示尺度空间，而且尺度规范化的LoG算子具有尺度不变性，在具体实现中，可用高斯差分(DoG)算子近似LoG算子，在构建的尺度空间中检测稳定的特征点。</p><h2 id="构建尺度空间"><a href="#构建尺度空间" class="headerlink" title="构建尺度空间"></a>构建尺度空间</h2><p>  尺度空间理论的基本思想是：在图像处理模型中引入一个被视为尺度的参数，通过连续变化尺度参数获取多尺度下的空间表示序列，对这些空间序列提取某些特征描述子，抽象成特征向量，实现图像在不同尺度或不同分辨率的特征提取。尺度空间中各尺度图像的模糊程度逐渐变大，模拟人在由近到远时目标在人眼视网膜上的成像过程。而且尺度空间需满足一定的不变性，包括图像灰度不变性、对比度不变性、平移不变性、尺度不变性以及旋转不变性等。在某些情况下甚至要求尺度空间算子具备仿射不变性。<br>  一幅图像的尺度空间可定义为对原图像进行可变尺度的高斯卷积：<br>$$L(x,y,\sigma)&#x3D;G(x,y,\sigma) \ast I(x,y)$$<br>$$G(x,y,\sigma)&#x3D;\dfrac{1}{2 \pi \sigma^2} e^{-\dfrac{x^2+y^2}{2\sigma^2}}$$<br>式中，$G(x,y,\sigma)$是尺度可变的高斯函数，$(x,y)$是图像的空间坐标，$\sigma$是尺度坐标(尺度变化因子)，$\sigma$大小决定图像的平滑程度，值越大图像模糊得越严重。大尺度对应图像的概貌特征，小尺度对应图像的细节特征。一般根据$3\sigma$原则，高斯核矩阵的大小设为$(6\sigma+1) \times (6\sigma+1)$。<br>  在使用高斯金字塔构建尺度空间时，主要分成两部分，对图像做降采样，以及对图像做不同尺度的高斯模糊。对图像做降采样得到不同尺度的图像，也就是不同的组(Octave)，后面的Octave(高一层的金字塔)为上一个Octave(低一层的金字塔)降采样得到，图像宽高分别为上一个Octave的1&#x2F;2。每组(Octave)又分为若干层(Interval)，通过对图像做不同尺度的高斯模糊得到。为了有效地在尺度空间检测稳定的关键点，提出了高斯差分尺度空间(DoG Scale-Space)，利用不同尺度的高斯差分核与图像卷积生成。<br>$$D(x,y,\sigma)&#x3D;(G(x,y,k\sigma)-G(x,y,\sigma)) \ast I(x,y) &#x3D; L(x,y,k\sigma)-L(x,y,\sigma)$$<br>图像的高斯金字塔和高斯差分金字塔如下图所示，高斯差分图像由高斯金字塔中同一组(Octave)内相邻层(Interval)的图像作差得到。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BSIFT%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/5956098d36da8.jpg"></p><h2 id="尺度空间的参数确定"><a href="#尺度空间的参数确定" class="headerlink" title="尺度空间的参数确定"></a>尺度空间的参数确定</h2><p>  在由图像金字塔表示的尺度空间中，图像的组数(Octave)由原始图像的大小和塔顶图像的大小决定。<br>$$Octave &#x3D; log_2(min(width_0, height_0)) - log_2(min(width, height)) $$<br>式中，$width_0、height_0$分别为原始图像的宽高，$width、height$为塔顶图像的宽高。对于一幅大小为$512 \times 512$的图像，当塔顶图像大小为$4 \times 4$时，图像的组数为$Octave &#x3D; 7$。<br>尺度参数$\sigma$的取值与金字塔的组数和层数相关，设第一组第一层的尺度参数取值为$\sigma(1,1)&#x3D;\sigma_0$，则第$m$组第$n$层的$\sigma$取值为<br>$$\sigma(m,n)&#x3D;\sigma_0 \cdot 2^{m-1} \cdot k^{n-1},  k&#x3D;2^{\dfrac{1}{S}}$$<br>式中，$S$为金字塔中每组的有效层数。为了得到更多的特征点，将图像扩大为原来的两倍，原始图像的尺度参数为$\sigma&#x3D;0.5$，扩大两倍后的尺度为$\sigma&#x3D;1.6$。在检测极值点前对原始图像的高斯平滑会导致图像高频信息的丢失，所以在建立尺度空间前先将图像扩大为原来的两倍，以保留原始图像信息，增加特征点数量。</p><h2 id="DoG算子检测极值点"><a href="#DoG算子检测极值点" class="headerlink" title="DoG算子检测极值点"></a>DoG算子检测极值点</h2><p>  为了寻找DoG尺度空间的极值点，每一个采样点要和其所有邻域像素相比较，如下图所示，中间检测点与其同尺度的$8$个邻域像素点以及上下相邻两层对应的$9 \times 2$个像素点一共$26$个点作比较，以确保在图像空间和尺度空间都能检测到极值点。一个像素点如果在DoG尺度空间本层及上下两层的26邻域中取得最大或最小值时，就可以认为该点是图像在该尺度下的一个特征点。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BSIFT%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/59562da5c15d9.png"></p><p>  在极值比较的过程中，每一组差分图像的首末两层是无法比较的，为了在每组中检测$S$个尺度的极值点，则DoG金字塔每组须有$S+2$层图像，高斯金字塔每组须有$S+3$层图像。另外，在降采样时，高斯金字塔中一组(Octive)的底层图像是由前一组图像的倒数第3张图像(S+1层)隔点采样得到。这样也保证了尺度变化的连续性，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BSIFT%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/59562da5c399e.png"></p><p>假设每组的层数$S&#x3D;3$，则$k&#x3D;2^{1&#x2F;S}&#x3D;s^{1&#x2F;3}$，在高斯金字塔中，第一个Octave中第$S+1$层图像尺度为$k^3\sigma&#x3D;2\sigma$，经降采样后得到第二个Octave的第$1$层图像，尺度仍为$2\sigma$。在DoG尺度空间中，第一组(1st-Octave)图像中间三项的尺度分别为$(k\sigma, k^2\sigma, k^3\sigma)$，下一组中间三项为$(2k\sigma, 2k^2\sigma, 2k^3\sigma)$，其“首项”$2k\sigma&#x3D;2^{4&#x2F;3}\sigma$，与上一组“末项”$k^3\sigma&#x3D;2^{3&#x2F;3}\sigma$尺度变化连续，变化尺度为$k&#x3D;2^{1&#x2F;S}&#x3D;2^{1&#x2F;3}$。</p><h1 id="关键点定位"><a href="#关键点定位" class="headerlink" title="关键点定位"></a>关键点定位</h1><p>  在DoG尺度空间检测到的极值点是离散的，通过拟合三元二次函数可以精确定位关键点的位置和尺度，达到亚像素精度。同时去除低对比度的检测点和不稳定的边缘点，以增强匹配稳定性，提高抗噪声能力。</p><h2 id="关键点精确定位"><a href="#关键点精确定位" class="headerlink" title="关键点精确定位"></a>关键点精确定位</h2><p>  DoG函数$D(X)&#x3D;D(x,y,\sigma)$在尺度空间的的Taylor展开式为<br>$$D(X)&#x3D;D+\dfrac{\partial D^T}{\partial X} X + \dfrac{1}{2} X^T \dfrac{\partial^2 D}{\partial X^2}X$$<br>令$D(X)$导数为0，得到极值点的偏移量<br>$$\hat {X} &#x3D; -(\dfrac{\partial^2 D}{\partial X^2})^{-1} \dfrac{\partial D}{\partial X}$$<br>若$\hat {X}&#x3D;(x,y,\sigma)^T$在任意一个维度大于$0.5$，说明极值点精确位置距离另一个点更近，应该改变当前关键点的位置，定位到新点后执行相同操作，若迭代5次仍不收敛，则认为该检测点不为关键点。精确关键点处函数值为<br>$$D(\hat {X})&#x3D;D+\dfrac{1}{2} \dfrac{\partial D^T}{\partial X} \hat {X}$$<br>$|D(\hat {X})|$过小易受噪声点的干扰而变得不稳定，若其小于某个阈值(例如$0.03$或者$0.04&#x2F;S$)，则将该极值点删除。</p><h2 id="消除边缘效应"><a href="#消除边缘效应" class="headerlink" title="消除边缘效应"></a>消除边缘效应</h2><p>  高斯差分函数DoG有较强的边缘响应，需要剔除不稳定的边缘响应点。边缘点的特征表现在某个方向有较大的主曲率，而在与其垂直方向主曲率较小。主曲率可通过一个$2 \times 2$的$Hessian$矩阵求出。<br>$$H&#x3D;\begin{bmatrix} D_{xx}&amp;&amp; D_{xy} \\ D_{xy} &amp;&amp; D_{yy}\end{bmatrix}$$<br>$D$的主曲率和$H$的特征值成正比，令$\alpha$为较大特征值，$\beta$为较小特征值，且$\alpha &#x2F; \beta &#x3D; r$，则<br>$$Tr(H)&#x3D;D_{xx}+D_{yy}&#x3D;\alpha + \beta,  Det(H)&#x3D;D_{xx}D_{yy}-D_{xy}^2&#x3D;\alpha \beta$$<br>$$\dfrac{Tr(H)^2}{Det(H)}&#x3D;\dfrac{(\alpha + \beta)^2}{\alpha \beta} &#x3D; \dfrac{(r+1)^2}{r}$$<br>$(r+1)^2&#x2F;r$在两个特征值相等时最小，随着$r$的增大而增大，$r$值越大，说明两个特征值的比值越大，正好对应边缘的情况。因此，设定一个阈值$r_t$，若满足<br>$$\dfrac{Tr(H)^2}{Det(H)} &lt; \dfrac{(r_t+1)^2}{r_t}$$<br>则认为该关键点不是边缘，否则予以剔除。</p><h1 id="关键点方向分配"><a href="#关键点方向分配" class="headerlink" title="关键点方向分配"></a>关键点方向分配</h1><p>  为了使特征描述子具有旋转不变性，需要利用关键点邻域像素的梯度方向分布特性为每个关键点指定方向参数。对于在DoG金字塔中检测出的关键点，在其邻近高斯金字塔图像的$3\sigma$邻域窗口内计算其梯度幅值和方向，公式如下：<br>$$m(x,y)&#x3D;\sqrt{[L(x+1,y)-L(x-1,y)]^2 + [L(x,y+1)-L(x,y-1)]^2}$$<br>$$\theta(x,y)&#x3D;tan^{-1}{[L(x,y+1)-L(x,y-1)] &#x2F; [L(x+1,y)-L(x-1,y)]}$$<br>式中，$L$为关键点所在尺度空间的灰度值，$m(x,y)$为梯度幅值，$\theta(x,y)$为梯度方向。对模值$m(x,y)$按$\sigma&#x3D;1.5\sigma_{oct}$、邻域窗口为$3\sigma&#x3D;3 \times 1.5\sigma_{oct}$的高斯分布加权。在完成关键点的梯度计算后，使用直方图统计邻域内像素的梯度和方向，梯度直方图将梯度方向$(0, 360^{\circ })$分为36柱(bins)，如下图所示，直方图的峰值所在的方向代表了该关键点的主方向。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BSIFT%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/59564f338a59c.png"></p><p>梯度方向直方图的峰值代表了该特征点处邻域梯度的主方向，为了增强鲁棒性，保留峰值大于主方向峰值80%的方向作为该关键点的辅方向，因此，在相同位置和尺度，将会有多个关键点被创建但方向不同，可以提高特征点匹配的稳定性。</p><h1 id="关键点特征描述"><a href="#关键点特征描述" class="headerlink" title="关键点特征描述"></a>关键点特征描述</h1><p>  在经过上述流程后，检测到的每个关键点有三个信息：位置、尺度以及方向，接下来要做的就是抽象出一组特征向量描述每个关键点。这个特征描述子不但包括关键点，还包括其邻域像素的贡献，而且需具备较高的独特性和稳定性，以提高特征点匹配的准确率。SIFT特征描述子是关键点邻域梯度经过高斯加权后统计结果的一种表示。通过对关键点周围图像区域分块，计算块内的梯度直方图，得到表示局部特征点信息的特征向量。例如在尺度空间$4 \times 4$的窗口内统计8个方向的梯度直方图，生成一个$4 \times 4 \times 8 &#x3D; 128$维的表示向量。</p><h2 id="确定特征描述子采样区域"><a href="#确定特征描述子采样区域" class="headerlink" title="确定特征描述子采样区域"></a>确定特征描述子采样区域</h2><p>  特征描述子与特征点所在的尺度空间有关，因此对梯度的求取应该在特征点对应的高斯图像上进行。将关键点附近的邻域划分为$d \times d(d&#x3D;4)$个子区域，每个子区域的大小与关键点方向分配时相同，即边长为$3\sigma_{oct}$，考虑到实际计算时需要进行三线性插值，邻域窗口边长设为$3\sigma_{oct}(d+1)$，又考虑到旋转因素(坐标轴旋转至关键点主方向)，最后所需的图像区域半径为<br>$$radius&#x3D;\dfrac{3\sigma_{oct} \times \sqrt{2} \times (d+1)}{2}$$<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BSIFT%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/595656c99be22.jpg"></p><h2 id="旋转坐标轴至关键点主方向"><a href="#旋转坐标轴至关键点主方向" class="headerlink" title="旋转坐标轴至关键点主方向"></a>旋转坐标轴至关键点主方向</h2><p>  将坐标轴旋转至关键点主方向，以确保旋转不变性。旋转后采样点的新坐标为<br>$$\begin{bmatrix} x\prime \\ y\prime \end{bmatrix} &#x3D; \begin{bmatrix} cos\theta &amp;&amp; -sin\theta \\ sin\theta &amp;&amp; cos\theta \end{bmatrix} \begin{bmatrix} x\\ y \end{bmatrix},  x,y \in [-radius, radius]$$</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BSIFT%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/595656c9f07bc.png"></p><h2 id="三线性插值计算权值"><a href="#三线性插值计算权值" class="headerlink" title="三线性插值计算权值"></a>三线性插值计算权值</h2><p>  在图像半径区域内对每个像素点求其梯度幅值和方向，并对每个梯度幅值乘以高斯权重参数<br>$$w&#x3D;m(a+x,b+y) \times e^{-\dfrac{(x’)^2+(y’)^2}{2\sigma_w^2}}$$<br>式中，$x’、y’$分别表示像素点与关键点的行、列距离，$m(x,y)$表示像素梯度幅值，高斯尺度因子为$\sigma_w&#x3D;3\sigma \times 0.5d$。<br>将旋转后的采样点坐标分配到对应的子区域，计算影响子区域的采样点的梯度和方向，分配到8个方向上。旋转后的采样点$(x’,y’)$落在子区域的下标为<br>$$\begin{bmatrix} u\\ v\end{bmatrix} &#x3D; \dfrac{1}{3\sigma_{oct}} \begin{bmatrix} x\prime\\ y\prime\end{bmatrix}  + \dfrac{d}{2},  u,v \in [0,d]$$<br>将采样点在子区域的下标进行三线性插值，根据三维坐标计算与周围子区域的距离，按距离远近计算权重，最终累加在相应子区域的相关方向上的权值为<br>$$weight &#x3D; w \cdot dr^i \cdot (1-dr)^{1-i} \cdot dc^j \cdot (1-dc)^{1-j} \cdot do^k \cdot (1-do)^{1-k}$$<br>式中$i、j、k$取0或者1.</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B9%8BSIFT%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/59565c422740a.jpg"></p><h2 id="向量归一化生成描述子"><a href="#向量归一化生成描述子" class="headerlink" title="向量归一化生成描述子"></a>向量归一化生成描述子</h2><p>  得到128维特征向量后，为了去除光照变化的影响，需要对向量进行归一化处理。非线性光照变化仍可能导致梯度幅值的较大变化，但对梯度方向影响较小。因此对于超过阈值0.2的梯度幅值设为0.2，然后再进行一次归一化。最后将特征向量按照对应高斯金字塔的尺度大小排序。至此，SIFT特征描述子形成。</p><h1 id="SIFT特征匹配"><a href="#SIFT特征匹配" class="headerlink" title="SIFT特征匹配"></a>SIFT特征匹配</h1><p>  对两幅图像中检测到的特征点，可采用特征向量的欧式距离作为特征点相似性的度量，取图像1中某个关键点，并在图像2中找到与其距离最近的两个关键点，若最近距离与次近距离的比值小于某个阈值，则认为距离最近的这一对关键点为匹配点。降低比例阈值，SIFT匹配点数量会减少，但相对而言会更加稳定。阈值ratio的取值范围一般为0.4~0.6。</p><h1 id="SIFT特征的特点"><a href="#SIFT特征的特点" class="headerlink" title="SIFT特征的特点"></a>SIFT特征的特点</h1><p>  SIFT是一种检测、描述、匹配图像局部特征点的算法，通过在尺度空间中检测极值点，提取位置、尺度、旋转不变量，并抽象成特征向量加以描述，最后用于图像特征点的匹配。SIFT特征对灰度、对比度变换、旋转、尺度缩放等保持不变性，对视角变化、仿射变化、噪声也具有一定的鲁棒性。但其实时性不高，对边缘光滑的目标无法准确提取特征点。</p><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://senitco.github.io/2017/06/24/image-feature-sift/">图像特征之SIFT特征匹配</a></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><a href="#reference" title="reference"></a>reference</h1><ul><li><a href="http://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf">Paper: Distinctive Image Features from Scale-Invariant Keypoints</a></li><li><a href="http://cgit.nutn.edu.tw:8080/cgit/PaperDL/iccv99.pdf">Paper: Object Recognition from Local Scale-Invariant Features</a></li><li><a href="https://people.cs.umass.edu/~elm/Teaching/ppt/SIFT.pdf">PPT: Object Recognition from Local Scale-Invariant Features (SIFT)</a></li><li><a href="https://github.com/robwhess/opensift">Code: RobHess OpenSIFT</a></li><li><a href="http://blog.csdn.net/abcjennifer/article/details/7639681">http://blog.csdn.net/abcjennifer/article/details/7639681</a></li><li><a href="http://blog.csdn.net/zddblog/article/details/7521424">http://blog.csdn.net/zddblog/article/details/7521424</a></li><li><a href="http://www.sun11.me/blog/2016/sift-implementation-in-matlab/">http://www.sun11.me/blog/2016/sift-implementation-in-matlab/</a></li><li><a href="http://masikkk.com/article/RobHess-SIFT-Source-Code-Analysis-Overview/">http://masikkk.com/article/RobHess-SIFT-Source-Code-Analysis-Overview/</a></li><li><a href="http://masikkk.com/article/RANSAC-SIFT-Image-Match/">http://masikkk.com/article/RANSAC-SIFT-Image-Match/</a></li><li><a href="http://www.cnblogs.com/letben/p/5510976.html">http://www.cnblogs.com/letben/p/5510976.html</a></li><li><a href="http://blog.csdn.net/fzthao/article/details/62424271">http://blog.csdn.net/fzthao/article/details/62424271</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像特征提取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像特征提取 </tag>
            
            <tag> Haar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像特征提取之LBP特征</title>
      <link href="/2023/12/18/tu-xiang-te-zheng-ti-qu-zhi-lbp-te-zheng/"/>
      <url>/2023/12/18/tu-xiang-te-zheng-ti-qu-zhi-lbp-te-zheng/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>  局部二值模式(Local Binary Patter, LBP)是一种用来描述图像局部纹理特征的算子，<strong>LBP特征具有灰度不变性和旋转不变性等显著优点，它将图像中的各个像素与其邻域像素值进行比较，将结果保存为二进制数，并将得到的二进制比特串作为中心像素的编码值，也就是LBP特征值</strong>。LBP提供了一种衡量像素间邻域关系的特征模式，因此可以有效地提取图像的局部特征，而且由于其计算简单，可用于基于纹理分类的实时应用场景，例如目标检测、人脸识别等。  </p><h1 id="原始LBP特征"><a href="#原始LBP特征" class="headerlink" title="原始LBP特征"></a>原始LBP特征</h1><p>  原始的LBP算子定义于图像中$3 \times 3$的邻域窗口，取窗口内中心像素的灰度值作为阈值，将8邻域像素的灰度值与其进行比较，若邻域像素值大于中心像素值，则比较结果取值为1，否则为0。这样邻域内的8个像素点经过比较后可得到8位二进制数，将其按顺序依次排列即可得到中心像素的LBP值。LBP特征值反映了中心像素和其邻域的纹理信息。LBP的取值一共有$2^8 &#x3D; 256$种，和一幅普通的灰度图像类似，因此可将LBP特征以灰度图的形式表达出来。由于LBP特征考虑的是纹理信息，而不包含颜色信息，因此彩色图需转换为灰度图。原始LBP特征的提取过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BLBP%E7%89%B9%E5%BE%81/593e3dae121e4.jpg"></p><p>公式定义如下：<br>$$LBP(x_c,y_c)&#x3D;\Sigma_{p&#x3D;0}^{P-1} 2^p s(i_p-i_c)$$<br>其中$(x_c,y_c)$代表邻域窗口内的中心像素，其像素值为$i_c$，$i_p$为邻域内其他像素值$s(x)$是符号函数。<br>原始LBP特征的实现代码(OpenCV)如下:  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_tp</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">getOriginLBPFeature</span><span class="token punctuation">(</span>InputArray _src<span class="token punctuation">,</span>OutputArray _dst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> _src<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _dst<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat dst <span class="token operator">=</span> _dst<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dst<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _tp center <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> lbpCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j  <span class="token punctuation">)</span> <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i  <span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j  <span class="token punctuation">)</span> <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i  <span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>            dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> lbpCode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="圆形LBP特征-Circular-LBP-or-Extended-LBP"><a href="#圆形LBP特征-Circular-LBP-or-Extended-LBP" class="headerlink" title="圆形LBP特征(Circular LBP or Extended LBP)"></a>圆形LBP特征(Circular LBP or Extended LBP)</h1><p>  原始LBP特征考虑的是固定半径范围内的邻域像素，不能满足不同尺寸和频率纹理的需求，当图像的尺寸发生变化时，LBP特征将不能正确编码局部邻域的纹理信息。为了适应不同尺寸的纹理特征，Ojala等人对LBP算子<br>进行了改进，将$3 \times 3$邻域窗口扩展到任意邻域，并用圆形邻域代替了正方形邻域，改进后的LBP算子允许在半径为R的邻域内有任意多个像素点，从而得到在半径为R的区域内含有P个采样点的LBP算子。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BLBP%E7%89%B9%E5%BE%81/593e49563d486.png"></p><p>采样点的坐标可通过以下公式计算：<br>$$x_p&#x3D;x_c+R \cdot cos(2\pi p &#x2F; P)$$<br>$$y_p&#x3D;y_c+R \cdot sin(2\pi p &#x2F; P)$$<br>其中$(x_c,y_c)$为中心像素点，$(x_p,y_p),p \in P$为邻域内某个采样点，通过上次可以计算任意个采样点的坐标，但是得到的坐标值未必为整数，因此可通过双线性插值的方法来得到该采样点的像素值：<br>$$<br>f(x, y) &#x3D;<br>\begin{bmatrix}<br>1-x &amp;&amp; x<br>\end{bmatrix}<br>\begin{bmatrix}<br>f(0,0) &amp;&amp; f(0,1) \\<br>f(1,0) &amp;&amp; f(1,1)<br>\end{bmatrix}<br>\begin{bmatrix}<br>1-y \\<br>y<br>\end{bmatrix}<br>$$</p><p>圆形LBP特征的实现代码如下：  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//圆形LBP特征计算，这种方法适于理解，但在效率上存在问题，声明时默认neighbors=8</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_tp</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">getCircularLBPFeature</span><span class="token punctuation">(</span>InputArray _src<span class="token punctuation">,</span>OutputArray _dst<span class="token punctuation">,</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span><span class="token keyword">int</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> _src<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//LBP特征图像的行数和列数的计算要准确</span>    _dst<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span>CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat dst <span class="token operator">=</span> _dst<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dst<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//循环处理每个像素</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>radius<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span>radius<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>radius<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span>radius<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//获得中心像素点的灰度值</span>            _tp center <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> lbpCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>neighbors<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//根据公式计算第k个采样点的坐标，这个地方可以优化，不必每次都进行计算radius*cos，radius*sin</span>                <span class="token keyword">float</span> x <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>radius <span class="token operator">*</span> \                    <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> CV_PI <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> y <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>radius <span class="token operator">*</span> \                    <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> CV_PI <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//根据取整结果进行双线性插值，得到第k个采样点的灰度值</span>                <span class="token comment">//1.分别对x，y进行上下取整</span>                <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> y1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> y2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//2.计算四个点(x1,y1),(x1,y2),(x2,y1),(x2,y2)的权重</span>                <span class="token comment">//下面的权重计算方式有个问题，如果四个点都相等，则权重全为0，计算出来的插值为0</span>                <span class="token comment">//float w1 = (x2-x)*(y2-y); //(x1,y1)</span>                <span class="token comment">//float w2 = (x2-x)*(y-y1); //(x1,y2)</span>                <span class="token comment">//float w3 = (x-x1)*(y2-y); //(x2,y1)</span>                <span class="token comment">//float w4 = (x-x1)*(y-y1); //(x2,y2)</span>                <span class="token comment">//将坐标映射到0-1之间</span>                <span class="token keyword">float</span> tx <span class="token operator">=</span> x <span class="token operator">-</span> x1<span class="token punctuation">;</span>                <span class="token keyword">float</span> ty <span class="token operator">=</span> y <span class="token operator">-</span> y1<span class="token punctuation">;</span>                <span class="token comment">//根据0-1之间的x，y的权重计算公式计算权重</span>                <span class="token keyword">float</span> w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> w2 <span class="token operator">=</span>    tx  <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span>    ty<span class="token punctuation">;</span>                <span class="token keyword">float</span> w4 <span class="token operator">=</span>    tx  <span class="token operator">*</span>    ty<span class="token punctuation">;</span>                <span class="token comment">//3.根据双线性插值公式计算第k个采样点的灰度值</span>                <span class="token keyword">float</span> neighbor <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span> <span class="token operator">*</span> w1 <span class="token operator">+</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y2<span class="token punctuation">)</span> <span class="token operator">*</span>w2 \                    <span class="token operator">+</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">)</span> <span class="token operator">*</span> w3 <span class="token operator">+</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span> <span class="token operator">*</span>w4<span class="token punctuation">;</span>                <span class="token comment">//通过比较获得LBP值，并按顺序排列起来</span>                lbpCode <span class="token operator">|=</span> <span class="token punctuation">(</span>neighbor<span class="token operator">></span>center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span>radius<span class="token punctuation">,</span>j<span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> lbpCode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>圆形LBP特征的效率优化版本：  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//圆形LBP特征计算，效率优化版本，声明时默认neighbors=8</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_tp</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">getCircularLBPFeatureOptimization</span><span class="token punctuation">(</span>InputArray _src<span class="token punctuation">,</span>OutputArray _dst<span class="token punctuation">,</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span><span class="token keyword">int</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> _src<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//LBP特征图像的行数和列数的计算要准确</span>    _dst<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span>CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat dst <span class="token operator">=</span> _dst<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dst<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>neighbors<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//计算采样点对于中心点坐标的偏移量rx，ry</span>        <span class="token keyword">float</span> rx <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> CV_PI <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> ry <span class="token operator">=</span> <span class="token operator">-</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> CV_PI <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//为双线性插值做准备</span>        <span class="token comment">//对采样点偏移量分别进行上下取整</span>        <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将坐标偏移量映射到0-1之间</span>        <span class="token keyword">float</span> tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        <span class="token keyword">float</span> ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span>        <span class="token comment">//根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        <span class="token keyword">float</span> w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> w2 <span class="token operator">=</span>    tx  <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span>    ty<span class="token punctuation">;</span>        <span class="token keyword">float</span> w4 <span class="token operator">=</span>    tx  <span class="token operator">*</span>    ty<span class="token punctuation">;</span>        <span class="token comment">//循环处理每个像素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>radius<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span>radius<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>radius<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span>radius<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//获得中心像素点的灰度值</span>                _tp center <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//根据双线性插值公式计算第k个采样点的灰度值</span>                <span class="token keyword">float</span> neighbor <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x1<span class="token punctuation">,</span>j<span class="token operator">+</span>y1<span class="token punctuation">)</span> <span class="token operator">*</span> w1 <span class="token operator">+</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x1<span class="token punctuation">,</span>j<span class="token operator">+</span>y2<span class="token punctuation">)</span> <span class="token operator">*</span>w2 \                    <span class="token operator">+</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x2<span class="token punctuation">,</span>j<span class="token operator">+</span>y1<span class="token punctuation">)</span> <span class="token operator">*</span> w3 <span class="token operator">+</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x2<span class="token punctuation">,</span>j<span class="token operator">+</span>y2<span class="token punctuation">)</span> <span class="token operator">*</span>w4<span class="token punctuation">;</span>                <span class="token comment">//LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span>radius<span class="token punctuation">,</span>j<span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>neighbor<span class="token operator">></span>center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="旋转不变LBP特征-Rotation-Invariant-LBP"><a href="#旋转不变LBP特征-Rotation-Invariant-LBP" class="headerlink" title="旋转不变LBP特征(Rotation Invariant LBP)"></a>旋转不变LBP特征(Rotation Invariant LBP)</h1><p>  无论是原始LBP算子还是圆形LBP算子，都只是灰度不变的，而不是旋转不变的，旋转图像会得到不同的LBP特征值。相关研究人员又提出了一种具有旋转不变性的LBP算子，即不断旋转圆形邻域的采样点，或者以不同的邻域像素作为起始点，顺时针遍历所有采样点，得到一系列编码值(P个)，取其中最小的作为该邻域中心像素的LBP值。旋转不变LBP算子的示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BLBP%E7%89%B9%E5%BE%81/593f6abf457df.jpg"></p><p>旋转不变LBP特征的实现代码如下：  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//旋转不变圆形LBP特征计算，声明时默认neighbors=8</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_tp</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">getRotationInvariantLBPFeature</span><span class="token punctuation">(</span>InputArray _src<span class="token punctuation">,</span>OutputArray _dst<span class="token punctuation">,</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span><span class="token keyword">int</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> _src<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//LBP特征图像的行数和列数的计算要准确</span>    _dst<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span>CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat dst <span class="token operator">=</span> _dst<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dst<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>neighbors<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//计算采样点对于中心点坐标的偏移量rx，ry</span>        <span class="token keyword">float</span> rx <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> CV_PI <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> ry <span class="token operator">=</span> <span class="token operator">-</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> CV_PI <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//为双线性插值做准备</span>        <span class="token comment">//对采样点偏移量分别进行上下取整</span>        <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将坐标偏移量映射到0-1之间</span>        <span class="token keyword">float</span> tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        <span class="token keyword">float</span> ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span>        <span class="token comment">//根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        <span class="token keyword">float</span> w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> w2 <span class="token operator">=</span>    tx  <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span>    ty<span class="token punctuation">;</span>        <span class="token keyword">float</span> w4 <span class="token operator">=</span>    tx  <span class="token operator">*</span>    ty<span class="token punctuation">;</span>        <span class="token comment">//循环处理每个像素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>radius<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span>radius<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>radius<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span>radius<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//获得中心像素点的灰度值</span>                _tp center <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//根据双线性插值公式计算第k个采样点的灰度值</span>                <span class="token keyword">float</span> neighbor <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x1<span class="token punctuation">,</span>j<span class="token operator">+</span>y1<span class="token punctuation">)</span> <span class="token operator">*</span> w1 <span class="token operator">+</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x1<span class="token punctuation">,</span>j<span class="token operator">+</span>y2<span class="token punctuation">)</span> <span class="token operator">*</span>w2 \                    <span class="token operator">+</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x2<span class="token punctuation">,</span>j<span class="token operator">+</span>y1<span class="token punctuation">)</span> <span class="token operator">*</span> w3 <span class="token operator">+</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x2<span class="token punctuation">,</span>j<span class="token operator">+</span>y2<span class="token punctuation">)</span> <span class="token operator">*</span>w4<span class="token punctuation">;</span>                <span class="token comment">//LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span>radius<span class="token punctuation">,</span>j<span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>neighbor<span class="token operator">></span>center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//进行旋转不变处理</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dst<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>dst<span class="token punctuation">.</span>cols<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> currentValue <span class="token operator">=</span> dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> minValue <span class="token operator">=</span> currentValue<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>neighbors<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//循环左移</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>currentValue<span class="token operator">>></span><span class="token punctuation">(</span>neighbors<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>currentValue<span class="token operator">&lt;&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> minValue<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    minValue <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> minValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="LBP等价模式-Uniform-LBP"><a href="#LBP等价模式-Uniform-LBP" class="headerlink" title="LBP等价模式(Uniform LBP)"></a>LBP等价模式(Uniform LBP)</h1><p>  对于一个半径为R的圆形区域，包含有P个邻域采样点，则LBP算子可能产生$2^P$种模式。随着邻域内采样点数的增加，LBP值的取值数量呈指数级增长。例如$5 \times 5$邻域内20个采样点，则对应有$2^{20}$中模式，过多的二进制模式不利于纹理信息的提取、分类、识别。例如，将LBP特征用于纹理分类或人脸识别时，一般采用LBP特征的统计直方图来表达图像的信息，而较多的模式种类将使得数据量过大，且直方图过于稀疏。因此，需要对原始的LBP特征进行降维，使得数据量减少的情况下能最好地表达图像的信息。<br>  为了解决二进制模式过多的问题，提高统计性，Ojala提出了一种“等价模式”(Uniform Pattern)来对LBP特征的模式种类进行降维。Ojala认为，在实际图像中，绝大数LBP模式最多只包含两次从0到1或者从1到0的跳变，“等价模式”定义为：当某个LBP所对应的循环二进制数从0到1或者从1到0最多有两次跳变时，该LBP所对应的二进制就是一个等价模式类。如00000000(0次跳变)，11000011(2次跳变)都是等价模式类。除等价模式类以外的模式都归为另一类，称为混合模式类，例如10010111(共4次跳变)。通过改进，二进制模式的种类大大减少，由原来的$2^P$中降为$P(P-1)+2+1$种，其中$P(P-1)$为2次跳变的模式数，2为0次跳变(全”0”或全”1”)的模式数，1为混合模式的数量，由于是循环二进制数，因此’0’、’1’跳变次数不可能为奇数次。对于$3 \times 3$邻域内8个采样点来说，二进制模式由原始的256种变为59种。这使得特征向量的维数大大减少，并且可以减少高频噪声带来的影响。实验表明，一般情况下，等价模式的数目占全部模式的90%以上，可以有效对数据进行降维。下图为58种等价模式类：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BLBP%E7%89%B9%E5%BE%81/593f48869b16f.png"></p><p>在具体实现中，等价模式类按值递增从1开始编码，混合模式类编码为0，因此得到的LBP特征图整体偏暗。LBP等价模式的实现代码如下：  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//等价模式LBP特征计算</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_tp</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">getUniformPatternLBPFeature</span><span class="token punctuation">(</span>InputArray _src<span class="token punctuation">,</span>OutputArray _dst<span class="token punctuation">,</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span><span class="token keyword">int</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> _src<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//LBP特征图像的行数和列数的计算要准确</span>    _dst<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span>CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat dst <span class="token operator">=</span> _dst<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dst<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//LBP特征值对应图像灰度编码表，直接默认采样点为8位</span>    uchar temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    uchar table<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getHopTimes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//是否进行UniformPattern编码的标志</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//计算LBP特征图</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>neighbors<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>neighbors<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//计算采样点对于中心点坐标的偏移量rx，ry</span>        <span class="token keyword">float</span> rx <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> CV_PI <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> ry <span class="token operator">=</span> <span class="token operator">-</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> CV_PI <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//为双线性插值做准备</span>        <span class="token comment">//对采样点偏移量分别进行上下取整</span>        <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将坐标偏移量映射到0-1之间</span>        <span class="token keyword">float</span> tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        <span class="token keyword">float</span> ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span>        <span class="token comment">//根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        <span class="token keyword">float</span> w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> w2 <span class="token operator">=</span>    tx  <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span>    ty<span class="token punctuation">;</span>        <span class="token keyword">float</span> w4 <span class="token operator">=</span>    tx  <span class="token operator">*</span>    ty<span class="token punctuation">;</span>        <span class="token comment">//循环处理每个像素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>radius<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span>radius<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>radius<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span>radius<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//获得中心像素点的灰度值</span>                _tp center <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//根据双线性插值公式计算第k个采样点的灰度值</span>                <span class="token keyword">float</span> neighbor <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x1<span class="token punctuation">,</span>j<span class="token operator">+</span>y1<span class="token punctuation">)</span> <span class="token operator">*</span> w1 <span class="token operator">+</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x1<span class="token punctuation">,</span>j<span class="token operator">+</span>y2<span class="token punctuation">)</span> <span class="token operator">*</span>w2 \                    <span class="token operator">+</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x2<span class="token punctuation">,</span>j<span class="token operator">+</span>y1<span class="token punctuation">)</span> <span class="token operator">*</span> w3 <span class="token operator">+</span>src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>_tp<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>x2<span class="token punctuation">,</span>j<span class="token operator">+</span>y2<span class="token punctuation">)</span> <span class="token operator">*</span>w4<span class="token punctuation">;</span>                <span class="token comment">//LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span>radius<span class="token punctuation">,</span>j<span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>neighbor<span class="token operator">></span>center<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//进行LBP特征的UniformPattern编码</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span>radius<span class="token punctuation">,</span>j<span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> table<span class="token punctuation">[</span>dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span>radius<span class="token punctuation">,</span>j<span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//计算跳变次数</span><span class="token keyword">int</span> <span class="token function">getHopTimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">></span> binaryCode <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>binaryCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> binaryCode<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，旋转不变的Uniform LBP算子的等价模式类的数目为P+1个，对于8个采样点，基于等价模式的旋转不变LBP模式只有9个输出，该模式对于上图的Uniform LBP，每一行都是旋转不变的，对应同一个编码值。</p><h1 id="多尺度LBP-Multiscale-Block-LBP"><a href="#多尺度LBP-Multiscale-Block-LBP" class="headerlink" title="多尺度LBP(Multiscale Block LBP)"></a>多尺度LBP(Multiscale Block LBP)</h1><p>  基本LBP算子获取的是单个像素和其邻域像素间的纹理信息，属于微观特征。中科院的研究人员针对此提出了一种多尺度的LBP算子，将图像分为一个个块(block)，再将每个块分为一个个的小连通区域(cell)，类似于HOG特征，cell内的灰度平均值或者和值作为当前cell的灰度阈值，与邻域cell进行比较得到LBP值，生成的特征即为MB-LBP，block大小为$3 \times 3$，cell大小为1，就是原始的LBP特征。下图所示block为$9 \times 9$，cell为$3 \times 3$。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E4%B9%8BLBP%E7%89%B9%E5%BE%81/593f4e9ec38c4.jpg" title="MB-LBP特征"></p><p>MB-LBP特征的实现代码如下：  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//MB-LBP特征的计算</span><span class="token keyword">void</span> <span class="token function">getMultiScaleBlockLBPFeature</span><span class="token punctuation">(</span>InputArray _src<span class="token punctuation">,</span>OutputArray _dst<span class="token punctuation">,</span><span class="token keyword">int</span> scale<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> _src<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat dst <span class="token operator">=</span> _dst<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定义并计算积分图像</span>    <span class="token keyword">int</span> cellSize <span class="token operator">=</span> scale <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> cellSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    Mat <span class="token function">cellImage</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>offset<span class="token punctuation">,</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>offset<span class="token punctuation">,</span>CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>offset<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>rows<span class="token operator">-</span>offset<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>offset<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>src<span class="token punctuation">.</span>cols<span class="token operator">-</span>offset<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token operator">-</span>offset<span class="token punctuation">;</span>m<span class="token operator">&lt;</span>offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token operator">-</span>offset<span class="token punctuation">;</span>n<span class="token operator">&lt;</span>offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    temp <span class="token operator">+=</span> src<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">+</span>n<span class="token punctuation">,</span>j<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">/=</span> <span class="token punctuation">(</span>cellSize<span class="token operator">*</span>cellSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            cellImage<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token operator">-</span>cellSize<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>j<span class="token operator">-</span>cellSize<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uchar</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token generic-function"><span class="token function">getOriginLBPFeature</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>cellImage<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多尺度模式下同样用到了降维，论文中是直接采样统计的方法对不同尺度的LBP算子的模式进行统计，选取占比例较高的模式，而不是利用跳变规则。具体来说，就是将得到的MB-LBP特征计算统计直方图，通过对bin中的数值进行排序以及权衡，将排序在前N(63)位的特征值看作是等价模式类，其余的为混合模式类，总共为N+1类，论文中称之为(SEMB-LBP, Statistically Effective MB-LBP)。<br>SEMB-LBP的实现代码如下：  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//求SEMB-LBP</span><span class="token keyword">void</span> <span class="token function">SEMB_LBPFeature</span><span class="token punctuation">(</span>InputArray _src<span class="token punctuation">,</span>OutputArray _dst<span class="token punctuation">,</span><span class="token keyword">int</span> scale<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Mat dst<span class="token operator">=</span>_dst<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat MB_LBPImage<span class="token punctuation">;</span>    <span class="token function">getMultiScaleBlockLBPFeature</span><span class="token punctuation">(</span>_src<span class="token punctuation">,</span>MB_LBPImage<span class="token punctuation">,</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//imshow("dst",dst);</span>    Mat histMat<span class="token punctuation">;</span>    <span class="token keyword">int</span> histSize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> range<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> ranges <span class="token operator">=</span> <span class="token punctuation">&#123;</span>range<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//计算LBP特征值0-255的直方图</span>    <span class="token function">calcHist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MB_LBPImage<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>histMat<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>histSize<span class="token punctuation">,</span><span class="token operator">&amp;</span>ranges<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    histMat<span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span> <span class="token function">histVector</span><span class="token punctuation">(</span>histMat<span class="token punctuation">.</span>rows<span class="token operator">*</span>histMat<span class="token punctuation">.</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    uchar table<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>histMat<span class="token punctuation">.</span><span class="token function">isContinuous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//histVector = (int *)(histMat.data);</span>        <span class="token comment">//将直方图histMat变为vector向量histVector</span>        histVector<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span>histMat<span class="token punctuation">.</span>datastart<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span>histMat<span class="token punctuation">.</span>dataend<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span> <span class="token function">histVectorCopy</span><span class="token punctuation">(</span>histVector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对histVector进行排序，即对LBP特征值的数量进行排序，降序排列</span>        <span class="token function">sort</span><span class="token punctuation">(</span>histVector<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>histVector<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">63</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>histVectorCopy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>histVectorCopy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>histVector<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token comment">//得到类似于Uniform的编码表</span>                    table<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    dst <span class="token operator">=</span> MB_LBPImage<span class="token punctuation">;</span>    <span class="token comment">//根据编码表得到SEMB-LBP</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dst<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>dst<span class="token punctuation">.</span>cols<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> table<span class="token punctuation">[</span>dst<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>uchar<span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="图像的LBP特征向量-Local-Binary-Patterns-Histograms"><a href="#图像的LBP特征向量-Local-Binary-Patterns-Histograms" class="headerlink" title="图像的LBP特征向量(Local Binary Patterns Histograms)"></a>图像的LBP特征向量(Local Binary Patterns Histograms)</h1><p>  对图像中的每个像素求取LBP特征值可得到图像的LBP特征图谱，但一般不直接将LBP图谱作为特征向量用于分类识别，而是类似于HOG特征，采用LBP特征的统计直方图作为特征向量。将LBP特征图谱划分为若干个子连通区域，并提取每个局部块的直方图，然后将这些直方图一次连接在一起形成LBP特征的统计直方图(LBPH)，即可用于分类识别的LBP特征向量。<br>LBP特征向量的具体计算过程如下：</p><ul><li>按照上述算法计算图像的LBP特征图谱</li><li>将LBP特征图谱分块，例如分成$8 \times 8 &#x3D; 64$个区域</li><li>计算每个子区域中LBP特征值的统计直方图，并进行归一化，直方图大小为$1 \times numPatterns$</li><li>将所有区域的统计直方图按空间顺序依次连接，得到整幅图像的LBP特征向量，大小为$1 \times (numPatterns \times 64)$</li><li>从足够数量的样本中提取LBP特征，并利用机器学习的方法进行训练得到模型，用于分类和识别等领域。</li></ul><p>  对于LBP特征向量的维度，邻域采样点为8个，如果是原始的LBP特征，其模式数量为256，特征维数为$64 \times 256 &#x3D; 16384$；如果是Uniform LBP特征，其模式数量为59，特征维数为$64 \times 59 &#x3D; 3776$，使用等价模式特征，可以有效进行数据降维，而对模型性能却无较大影响。<br>LBP特征向量的实现代码如下：  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//计算LBP特征图像的直方图LBPH</span>Mat <span class="token function">getLBPH</span><span class="token punctuation">(</span>InputArray _src<span class="token punctuation">,</span><span class="token keyword">int</span> numPatterns<span class="token punctuation">,</span><span class="token keyword">int</span> grid_x<span class="token punctuation">,</span><span class="token keyword">int</span> grid_y<span class="token punctuation">,</span><span class="token keyword">bool</span> normed<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> _src<span class="token punctuation">.</span><span class="token function">getMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> src<span class="token punctuation">.</span>cols <span class="token operator">/</span> grid_x<span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> src<span class="token punctuation">.</span>rows <span class="token operator">/</span> grid_y<span class="token punctuation">;</span>    <span class="token comment">//定义LBPH的行和列，grid_x*grid_y表示将图像分割成这么些块，numPatterns表示LBP值的模式种类</span>    Mat result <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>grid_x <span class="token operator">*</span> grid_y<span class="token punctuation">,</span>numPatterns<span class="token punctuation">,</span>CV_32FC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> resultRowIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//对图像进行分割，分割成grid_x*grid_y块，grid_x，grid_y默认为8</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>grid_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>grid_y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//图像分块</span>            Mat src_cell <span class="token operator">=</span> <span class="token function">Mat</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token function">Range</span><span class="token punctuation">(</span>i<span class="token operator">*</span>height<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Range</span><span class="token punctuation">(</span>j<span class="token operator">*</span>width<span class="token punctuation">,</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//计算直方图</span>            Mat hist_cell <span class="token operator">=</span> <span class="token function">getLocalRegionLBPH</span><span class="token punctuation">(</span>src_cell<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>numPattern<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将直方图放到result中</span>            Mat rowResult <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>resultRowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            hist_cell<span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertTo</span><span class="token punctuation">(</span>rowResult<span class="token punctuation">,</span>CV_32FC1<span class="token punctuation">)</span><span class="token punctuation">;</span>            resultRowIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//计算一个LBP特征图像块的直方图</span>Mat <span class="token function">getLocalRegionLBPH</span><span class="token punctuation">(</span><span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> src<span class="token punctuation">,</span><span class="token keyword">int</span> minValue<span class="token punctuation">,</span><span class="token keyword">int</span> maxValue<span class="token punctuation">,</span><span class="token keyword">bool</span> normed<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//定义存储直方图的矩阵</span>    Mat result<span class="token punctuation">;</span>    <span class="token comment">//计算得到直方图bin的数目，直方图数组的大小</span>    <span class="token keyword">int</span> histSize <span class="token operator">=</span> maxValue <span class="token operator">-</span> minValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//定义直方图每一维的bin的变化范围</span>    <span class="token keyword">float</span> range<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>minValue<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//定义直方图所有bin的变化范围</span>    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> ranges <span class="token operator">=</span> <span class="token punctuation">&#123;</span> range <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//计算直方图，src是要计算直方图的图像，1是要计算直方图的图像数目，0是计算直方图所用的图像的通道序号，从0索引</span>    <span class="token comment">//Mat()是要用的掩模，result为输出的直方图，1为输出的直方图的维度，histSize直方图在每一维的变化范围</span>    <span class="token comment">//ranges，所有直方图的变化范围（起点和终点）</span>    <span class="token function">calcHist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>src<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>result<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>histSize<span class="token punctuation">,</span><span class="token operator">&amp;</span>ranges<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//归一化</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>normed<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        result <span class="token operator">/=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>src<span class="token punctuation">.</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//结果表示成只有1行的矩阵</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  除了以上几种比较经典的LBP特征外，还有诸多变种，如TLBP(中心像素与周围所有像素比较，而不是根据采样点的数目)，DLBP(编码4邻域的灰度变化，每个方向上用两个比特编码)，MLBP(将中心像素值替换为采样点像素的平均值)，VLBP，RGB-LBP等。</p><h1 id="LBP特征的应用"><a href="#LBP特征的应用" class="headerlink" title="LBP特征的应用"></a>LBP特征的应用</h1><h2 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h2><p>  人脸检测中比较典型的模型是Haar特征 + AdaBoost分类器，目前OpenCV也支持LBP + AdaBoost和HOG + AdaBoost的方法进行目标检测，而且LBP特征的训练速度较快，适用于实时检测场景。</p><h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><p>  人脸识别中LBP特征向量主要是用于直方图的比较，通过距离度量的方式(例如方差)找到训练数据中与输入图像距离最小的特征向量，将其对应的类别作为识别结果输出。</p><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://senitco.github.io/2017/06/12/image-feature-lbp/">图像特征提取之LBP特征</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://pdfs.semanticscholar.org/8e01/f162182365c7a275fb6b7ecaafe7b9719673.pdf">Paper: Gray Scale and Rotation Invariant Texture Classification with Local Binary Patterns</a></li><li><a href="https://pdfs.semanticscholar.org/33fa/d977a6b317cfd6ecd43d978687e0df8a7338.pdf">Paper: Multiresolution Gray Scale and Rotation Invariant Texture Classification with Local Binary Patterns</a></li><li><a href="http://www.ee.oulu.fi/mvg/files/pdf/pdf_494.pdf">Paper: Face Recognition with Local Binary Patterns</a></li><li><a href="http://www.cbsr.ia.ac.cn/users/lzhang/papers/ICB07/ICB07_Liao.pdf">Paper: Learning Multi-scale Block Local Binary Patterns for Face Recognition</a></li><li><a href="http://www.voidcn.com/blog/quincuntial/article/p-4988349.html">http://www.voidcn.com/blog/quincuntial/article/p-4988349.html</a></li><li><a href="http://blog.csdn.net/zouxy09/article/details/7929531">http://blog.csdn.net/zouxy09/article/details/7929531</a></li><li><a href="http://blog.jasonding.top/2014/11/04/Machine%20Learning/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E3%80%91LBP%E7%BA%B9%E7%90%86%E7%89%B9%E5%BE%81/">http://blog.jasonding.top/2014/11/04/Machine%20Learning/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E3%80%91LBP%E7%BA%B9%E7%90%86%E7%89%B9%E5%BE%81/</a></li><li><a href="http://blog.csdn.net/liulina603/article/details/8291105">http://blog.csdn.net/liulina603/article/details/8291105</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像特征提取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像特征提取 </tag>
            
            <tag> LBP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像特征提取之HOG特征</title>
      <link href="/2023/12/18/tu-xiang-te-zheng-ti-qu-zhi-hog-te-zheng/"/>
      <url>/2023/12/18/tu-xiang-te-zheng-ti-qu-zhi-hog-te-zheng/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>  方向梯度直方图(Histogram of Oriented Gradient, HOG)特征是一种在计算机视觉和图像处理中用来进行物体检测的特征描述子。<strong>它通过计算和统计图像局部区域的梯度方向直方图来构成特征</strong>。Hog特征结合SVM分类器已经被广泛应用于图像识别中，尤其在行人检测中获得了极大的成功。  </p><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>  HOG特征的核心思想是在一幅图像中，局部目标的表象和形状(appearance and shape)能够被梯度和边缘的方向密度（梯度的统计信息，而梯度主要存在于边缘地方）很好地描述。通过将整幅图像分为多个小的连通区域(cells)，并计算每个cell的梯度或边缘方向直方图，这些直方图的组合可用于构成特征描述子，为了提高准确率，可以将局部直方图在图像更大范围内(称为block)进行对比度归一化(constrast-normalized)。所采用的方法是：先计算各直方图在对应的block中的密度，然后根据这个密度对block中的所有cell做归一化(normalize)。归一化操作对光照变化和阴影具有更好的鲁棒性。</p><h1 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h1><ul><li>HOG特征是在图像的局部操作，对图像几何和光学的变化有较好的稳健性，这两种变化只会出现在更大的空域上。</li><li>在粗粒度的空域抽样、细粒度的方向抽样，以及较强的局部光学归一化条件下，只要行人大体保持直立的姿势，可以容许行人有一些细微的肢体动作，而不影响检测效果。</li></ul><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="图像预处理"><a href="#图像预处理" class="headerlink" title="图像预处理"></a>图像预处理</h2><ul><li>灰度化：HOG提取的是纹理特征，颜色信息不起作用，所以将彩色图转化为灰度图。</li><li>Gamma校正(归一化)：对图像进行Gamma校正，完成对整个图像的标准化(归一化)，可以调节图像的对比度，降低局部光照不均匀或者阴影的影响，同时也可以在一定程度上降低噪声的干扰，提高特征描述器对光照等干扰因素的鲁棒性。校正公式如下：<br>$$<br>I(x, y) &#x3D; I(x, y)^{gamma}, gamma &#x3D; \dfrac{1}{2}<br>$$</li></ul><h2 id="计算图像梯度"><a href="#计算图像梯度" class="headerlink" title="计算图像梯度"></a>计算图像梯度</h2><p>  分别求取图像水平方向和垂直方向的梯度，然后计算每个像素点的梯度幅值和方向，微分求图像梯度不仅可以捕获图像边缘和纹理信息，而且可以弱化光照不均匀的影响。<br>$$G_x(x,y) &#x3D; I(x+1,y) - I(x-1,y)$$<br>$$G_y(x,y) &#x3D; I(x,y+1) - I(x,y-1)$$<br>$$ \nabla G(x,y) &#x3D; \sqrt{G_x(x,y)^2+G_y(x,y)^2}$$<br>$$ \theta(x,y) &#x3D; arctan(G_y(x,y) &#x2F; G_x(x,y))$$<br>一般采用梯度算子对图像进行卷积运算求取图像梯度，例如用 $[-1,0,1]$ 梯度算子对图像进行卷积操作得到水平方向的梯度分量，用$[-1,0,1]^T$梯度算子进行卷积操作得到竖直方向的梯度分量，然后求取图像的梯度幅值和方向。</p><h2 id="在cell中计算梯度方向直方图-Orientation-binning"><a href="#在cell中计算梯度方向直方图-Orientation-binning" class="headerlink" title="在cell中计算梯度方向直方图(Orientation binning)"></a>在cell中计算梯度方向直方图(Orientation binning)</h2><p>  将图像划分为若干个连通区域(cell)，例如每个cell为$8 \times 8$个像素，相邻cell之间不重叠，将所有梯度方向划分为9个方向块(bin)，然后在每个cell内统计梯度方向直方图。在计算梯度方向时，可把方向的角度范围定位$(0, 180^{\circ})$或者$(0, 360^{\circ})$。最后每个cell都对应一个9维的特征向量。此外，还可以考虑梯度幅值作为bin的统计权重。<br>  在行人检测中，通过给局部图像区域进行编码，可以保持对目标对象的姿势和外观的弱敏感性，更好地捕获图像的轮廓和纹理信息。</p><h2 id="在block中归一化梯度方向直方图-Block-Normalization"><a href="#在block中归一化梯度方向直方图-Block-Normalization" class="headerlink" title="在block中归一化梯度方向直方图(Block Normalization)"></a>在block中归一化梯度方向直方图(Block Normalization)</h2><p>  将多个cell组合成更大连通块(block)，将block内所有cell的特征向量串联起来便得到该block的HOG特征描述子，不同block之间可能相互重叠，可以有效地利用局部邻域信息。类比在卷积神经网络(CNN)中，掩码(Kernel)和步长(stride)的选择。在更大范围内(block)统计梯度直方图，并做归一化处理，能够更好地适应光照和对比度的变化。常用的归一化方法有以下几种：</p><ul><li>L2-norm<br>$$v &#x3D; \dfrac{v}{\sqrt{|v|_{2}^{2} + \varepsilon^2}}$$</li><li>L1-norm<br>$$v &#x3D; \dfrac{v}{|v|_{1} + \varepsilon}$$</li><li>L1-sqrt<br>$$v &#x3D; \sqrt{\dfrac{v}{|v|_{1} + \varepsilon}}$$<br>还有一种L2-Hys，即先做一次L2-norm,然后把大于特定值(0.2)的分量幅值为设置为0.2再做一次L2-norm，一般在检测中采用L2-norm效果更好。在一个block中，如果cell的数量为$2\times 2$，那block的特征数为$2\times 2 \times 9 &#x3D; 36$维特征。</li></ul><h2 id="统计整幅图像-检测窗口-的HOG特征"><a href="#统计整幅图像-检测窗口-的HOG特征" class="headerlink" title="统计整幅图像(检测窗口)的HOG特征"></a>统计整幅图像(检测窗口)的HOG特征</h2><p>  在实际应用中，通常是选取固定大小的滑动窗口来提取HOG特征，对于一个$64\times 128$的图像窗口(window)，每$8\times 8$个像素组成一个cell，每$2\times 2$个cell组成一个block，一共有$(8-1)\times (16-1) &#x3D; 105$个block，因此该图像的窗口特征维数为$105\times 36 &#x3D; 3780$。当然也可以将整幅图像作为一个窗口来提取HOG特征。</p><h2 id="HOG特征-SVM分类器进行行人检测"><a href="#HOG特征-SVM分类器进行行人检测" class="headerlink" title="HOG特征 + SVM分类器进行行人检测"></a>HOG特征 + SVM分类器进行行人检测</h2><p>  训练过程中正样本为图片中包含有目标区域(行人)的boundingbox，尺寸统一为检测窗口的大小即$64\times 128$，负样本不需要统一尺寸，只需比检测窗口大，且图片中不包含检测目标，可任意截取图片中$64\times 128$大小的区域提取HOG特征作为负样本的特征向量，并与正样本图片中boundingbox区域提取出的HOG特征向量一起训练，得到SVM的分类模型。<br>  检测过程中采用滑动窗口法，检测窗口尺寸固定不变，对待检测图片进行尺度缩放，在每一层的图像上，用固定大小的滑动窗口提取HOG特征，并根据训练好的分类模型判断检测窗口是否为目标(行人)。因此HOG + SVM进行行人检测的过程实际上就是对图像的检测窗口提取HOG特征进行分类判决的过程。</p><h1 id="原始网页"><a href="#原始网页" class="headerlink" title="原始网页"></a>原始网页</h1><p><a href="https://senitco.github.io/2017/06/10/image-feature-hog/">图像特征提取之HOG特征</a></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://lear.inrialpes.fr/people/triggs/pubs/Dalal-cvpr05.pdf">paper: Histograms of Oriented Gradients for Human Detection</a></li><li><a href="https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients">wikipedia: Histogram of oriented gradients</a></li><li><a href="http://blog.csdn.net/zouxy09/article/details/7929348">http://blog.csdn.net/zouxy09/article/details/7929348</a></li><li><a href="http://blog.csdn.net/hujingshuang/article/details/47337707">http://blog.csdn.net/hujingshuang/article/details/47337707</a></li><li><a href="http://www.cnblogs.com/tornadomeet/archive/2012/08/15/2640754.html">http://www.cnblogs.com/tornadomeet/archive/2012/08/15/2640754.html</a></li><li><a href="http://shuokay.com/2016/07/18/hog/">http://shuokay.com/2016/07/18/hog/</a></li><li><a href="http://www.jianshu.com/p/6f69c751e9e7">http://www.jianshu.com/p/6f69c751e9e7</a></li><li><a href="http://blog.sina.com.cn/s/blog_60e6e3d50101bkpn.html">http://blog.sina.com.cn/s/blog_60e6e3d50101bkpn.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像特征提取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像特征提取 </tag>
            
            <tag> HOG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相机内外参与俯视图转换</title>
      <link href="/2023/12/10/xiang-ji-nei-wai-can-yu-fu-shi-tu-zhuan-huan/"/>
      <url>/2023/12/10/xiang-ji-nei-wai-can-yu-fu-shi-tu-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="世界坐标系-X-w-Y-w-Z-w-到图像坐标系-u-v-的变换关系"><a href="#世界坐标系-X-w-Y-w-Z-w-到图像坐标系-u-v-的变换关系" class="headerlink" title="世界坐标系$(X_w,Y_w,Z_w)$到图像坐标系$(u,v)$的变换关系"></a>世界坐标系$(X_w,Y_w,Z_w)$到图像坐标系$(u,v)$的变换关系</h1><p>相机外参中的旋转和平移的方向为相机坐标系中各个轴的方向，而不是世界坐标系各个轴的方向，以相机先绕相机的$x$轴旋转$pitch$弧度，然后再绕相机的$y$轴旋转$yaw$弧度，最后绕相机的$z$轴旋转$roll$弧度得到新的相机位置为例，每次旋转时的旋转矩阵的计算如下所示：<br>$$<br>R_x&#x3D;<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 \\<br>0 &amp; \cos(pitch) &amp; -\sin(pitch) \\<br>0 &amp; \sin(pitch) &amp; \cos(pitch)<br>\end{bmatrix}<br>$$</p><p>$$<br>R_{y}&#x3D;<br>\begin{bmatrix}<br>\cos(yaw) &amp; 0 &amp; \sin(yaw) \\<br>0 &amp; 1 &amp; 0 \\<br>-\sin(yaw) &amp; 0 &amp; \cos(yaw)<br>\end{bmatrix}<br>$$</p><p>$$<br>R_{z}&#x3D;<br>\begin{bmatrix}<br>\cos(roll) &amp; -\sin(roll) &amp; 0 \\<br>\sin(roll) &amp; \cos(roll) &amp; 0 \\<br>0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$<br>即，综合旋转矩阵为:<br>$$<br>R&#x3D;{R_z}{R_y}{R_x}&#x3D;<br>\begin{bmatrix}<br>c_{roll} c_{yaw} &amp; c_{roll} s_{yaw} s_{pitch}-s_{roll} c_{pitch} &amp; c_{roll} s_{yaw} c_{pitch}+s_{roll} s_{pitch} \\<br>s_{roll} c_{yaw} &amp; s_{roll} s_{yaw} s_{pitch}+c_{roll} c_{pitch} &amp; s_{roll} s_{yaw} c_{pitch}-c_{roll} s_{pitch} \\<br>-s_{yaw} &amp; c_{yaw} s_{pitch} &amp; c_{yaw} c_{pitch}<br>\end{bmatrix}<br>$$</p><p>其中, $c_{yaw}&#x3D;\cos(yaw)$, $s_{yaw}&#x3D;\sin(yaw)$, $c_{pitch}&#x3D;\cos(pitch)$, $s_{pitch}&#x3D;\sin(pitch)$, $c_{roll}&#x3D;\cos(roll)$, $s_{roll}&#x3D;\sin(roll)$。</p><p>相机的平移矩阵如下所示:<br>$$<br>t&#x3D;<br>\begin{bmatrix}<br>t_{x} \\<br>t_{y} \\<br>t_{z}<br>\end{bmatrix}<br>$$<br>其中，$t_{x}$, $t_{y}$, $t_{z}$分表表示沿着相机坐标系的坐标轴的平移方向，而不是世界坐标系坐标轴的方向。<br>$$<br>Z_{c}<br>\begin{bmatrix}<br>u \\<br>v \\<br>1<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>f_{x} &amp; {0} &amp; c_{x} &amp; {0} \\<br>{0} &amp; f_{y} &amp; c_{y} &amp; {0} \\<br>{0} &amp; {0} &amp; {1} &amp;{0}<br>\end{bmatrix}<br>\begin{bmatrix}<br>R &amp; t \\<br>0 &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>{X_{w}} \\<br>{Y_{w}} \\<br>{Z_{w}} \\<br>1<br>\end{bmatrix}<br>$$<br>其中$Z_{c}$可以使用相机外参$(R,t)$和世界坐标系中的点$(X_w,Y_w,Z_w)$求得:<br>$$<br>\begin{bmatrix}<br>X_{c} \\<br>Y_{c} \\<br>Z_{c} \\<br>1<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>R &amp; t \\<br>0 &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>X_{w} \\<br>Y_{w} \\<br>Z_{w} \\<br>1<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>R_{11} &amp; R_{12} &amp; R_{13} &amp; t_{x}  \\<br>R_{21} &amp; R_{22} &amp; R_{23} &amp; t_{y}  \\<br>R_{31} &amp; R_{32} &amp; R_{33} &amp; t_{z}  \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>X_{w} \\<br>Y_{w} \\<br>Z_{w} \\<br>1<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>R_{11}X_{w}+R_{12}Y_{w}+R_{13}Z_{w}+t_{1} \\<br>R_{21}X_{w}+R_{22}Y_{w}+R_{23}Z_{w}+t_{2} \\<br>R_{31}X_{w}+R_{32}Y_{w}+R_{33}Z_{w}+t_{3} \\<br>1<br>\end{bmatrix}<br>$$<br>即，$Z_{c}&#x3D;R_{31}X_{w}+R_{32}Y_{w}+R_{33}Z_{w}+t_{3}$，这样便可以得到世界坐标系中的点到图像坐标系的变换。</p><h1 id="映射关系构建"><a href="#映射关系构建" class="headerlink" title="映射关系构建"></a>映射关系构建</h1><p>图像中的每个点 $(u,v)$ 在世界坐标系下的坐标为 $(X_w,Y_w,Z_w)$ ，假设图像中的每个点都为地面的点，那么 $Z_w&#x3D;0$，这样我们便可以将图像坐标系中的点转换到世界坐标系中，但是我们需要设置合理的世界坐标的映射范围。在俯视图转换时，俯视图中的点和世界坐标系地面上的点 $(X_w,Y_w,0)$ 的横纵坐标具有一定的关系，即：等比缩放关系。因此，假设我们生成发俯视图的大小为(600,800),而世界坐标系下我们需要映射的范围为(6000,8000)，则我们需要设置缩放系数为10即可。映射关系构建代码示例如下：</p><h2 id="输入参数定义"><a href="#输入参数定义" class="headerlink" title="输入参数定义"></a>输入参数定义</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cv<span class="token double-colon punctuation">::</span>Mat cam_R_ <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Scalar</span><span class="token double-colon punctuation">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 旋转向量</span>cv<span class="token double-colon punctuation">::</span>Mat cam_T_ <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Scalar</span><span class="token double-colon punctuation">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 平移向量</span>cv<span class="token double-colon punctuation">::</span>Mat cam_K <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Scalar</span><span class="token double-colon punctuation">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 内参矩阵</span>cv<span class="token double-colon punctuation">::</span>Mat cam_D <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Scalar</span><span class="token double-colon punctuation">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 畸变系数</span>cv<span class="token double-colon punctuation">::</span>Size map_size <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 环视图像尺寸    </span><span class="token keyword">float</span> scale_size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                                          <span class="token comment">// 环视缩放尺寸</span>cv<span class="token double-colon punctuation">::</span>Mat2f bird_map <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Mat2f</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>map_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="映射函数生成"><a href="#映射函数生成" class="headerlink" title="映射函数生成"></a>映射函数生成</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">GetBirdViewMap</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat <span class="token operator">&amp;</span>cam_K<span class="token punctuation">,</span> <span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat <span class="token operator">&amp;</span>cam_D<span class="token punctuation">,</span>                    <span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat <span class="token operator">&amp;</span>cam_R<span class="token punctuation">,</span> <span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat <span class="token operator">&amp;</span>cam_T<span class="token punctuation">,</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span> scale_size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> map_width<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> map_height<span class="token punctuation">,</span>                    cv<span class="token double-colon punctuation">::</span>Mat2f <span class="token operator">&amp;</span>map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 定义世界坐标系中的点</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXf <span class="token function">P_w</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> map_width <span class="token operator">*</span> map_height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> map_width<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> map_height<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            P_w<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>map_width <span class="token operator">*</span> y <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> map_width <span class="token operator">/</span> <span class="token number">2.0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> scale_size<span class="token punctuation">,</span>                <span class="token operator">-</span><span class="token punctuation">(</span>y <span class="token operator">-</span> map_height <span class="token operator">/</span> <span class="token number">2.0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> scale_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义外参矩阵RT</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXf <span class="token function">RT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat R_mat<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">Rodrigues</span><span class="token punctuation">(</span>cam_R<span class="token punctuation">,</span> R_mat<span class="token punctuation">)</span><span class="token punctuation">;</span>    RT <span class="token operator">&lt;&lt;</span> R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_T<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_T<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_T<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 定义内参矩阵</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXf <span class="token function">K</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    K <span class="token operator">&lt;&lt;</span> cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>        cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>        cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_K<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 计算相机坐标系中的点P_c</span>    Eigen<span class="token double-colon punctuation">::</span>MatrixXf <span class="token function">P_c</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> map_width <span class="token operator">*</span> map_height<span class="token punctuation">)</span><span class="token punctuation">;</span>    P_c <span class="token operator">=</span> RT <span class="token operator">*</span> P_w<span class="token punctuation">;</span>    P_c <span class="token operator">=</span> P_c<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rowwise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> P_c<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 归一化</span>    <span class="token comment">// 构建map矩阵</span>    Eigen<span class="token double-colon punctuation">::</span>VectorXf x_vector <span class="token operator">=</span> P_c<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>VectorXf y_vector <span class="token operator">=</span> P_c<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat x_mat <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span>map_height<span class="token punctuation">,</span> map_width<span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat y_mat <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span>map_height<span class="token punctuation">,</span> map_width<span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>x_mat<span class="token punctuation">.</span>data<span class="token punctuation">,</span> x_vector<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x_mat<span class="token punctuation">.</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> x_mat<span class="token punctuation">.</span><span class="token function">elemSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>y_mat<span class="token punctuation">.</span>data<span class="token punctuation">,</span> y_vector<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_mat<span class="token punctuation">.</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> y_mat<span class="token punctuation">.</span><span class="token function">elemSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">merge</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">></span><span class="token punctuation">&#123;</span>x_mat<span class="token punctuation">,</span> y_mat<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 cv::fisheye::distortPoints 函数进行畸变</span>    cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">distortPoints</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> map<span class="token punctuation">,</span> cam_K<span class="token punctuation">,</span> cam_D<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图像映射"><a href="#图像映射" class="headerlink" title="图像映射"></a>图像映射</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 使用 remap 进行图像重映射</span>cv<span class="token double-colon punctuation">::</span><span class="token function">remap</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> bird_view<span class="token punctuation">,</span> bird_map<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>INTER_LINEAR<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>BORDER_CONSTANT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="cv-fisheye-distortPoints函数使用方法"><a href="#cv-fisheye-distortPoints函数使用方法" class="headerlink" title="cv::fisheye::distortPoints函数使用方法"></a><code>cv::fisheye::distortPoints</code>函数使用方法</h2><ul><li>函数定义<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">distortPoints</span><span class="token punctuation">(</span>InputArray undistorted<span class="token punctuation">,</span>OutputArray distorted<span class="token punctuation">,</span>InputArray K<span class="token punctuation">,</span>InputArray D<span class="token punctuation">,</span><span class="token keyword">double</span> alpha <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>参数解释</li></ul><p><code>undistorted</code> :去畸变点，该函数假设相机的内参为单位矩阵，这意味着如果你要畸变图像中的点，你需要将他们乘以内参K的逆矩阵 $K^{-1}$ ,这样的点其实就是在相机坐标下归一化坐标的横纵坐标值。</p><p><code>distorted</code> ： 畸变点</p><p><code>K</code> ：相机内参矩阵</p><p><code>D</code> ： 相机畸变系数</p><p><code>alpha</code> ： 拉伸参数，控制畸变后的点坐标是否加上额外的尺度因子。默认为 0.0。</p><blockquote><p>参考网站：<a href="https://docs.opencv.org/4.x/db/d58/group__calib3d__fisheye.html#ga75d8877a98e38d0b29b6892c5f8d7765">cv::fisheye::distortPoints</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 俯视图转换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坐标系变换 </tag>
            
            <tag> 俯视图转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb命令使用指南</title>
      <link href="/2023/11/25/adb-ming-ling-shi-yong-zhi-nan/"/>
      <url>/2023/11/25/adb-ming-ling-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://github.com/mzlogin/awesome-adb">ADB 用法集合</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> adb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令快速教程</title>
      <link href="/2023/11/25/linux-ming-ling-kuai-su-jiao-cheng/"/>
      <url>/2023/11/25/linux-ming-ling-kuai-su-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://linuxtools-rst.readthedocs.io/zh-cn/latest/">Linux工具快速教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程范例</title>
      <link href="/2023/11/25/shell-bian-cheng-fan-li/"/>
      <url>/2023/11/25/shell-bian-cheng-fan-li/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://tinylab-1.gitbook.io/shellbook/">Shell编程范例</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim从入门到精通</title>
      <link href="/2023/11/25/vim-cong-ru-men-dao-jing-tong/"/>
      <url>/2023/11/25/vim-cong-ru-men-dao-jing-tong/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://gitlab.com/wsdjeg/vim-galore-zh_cn">Vim从入门到精通</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回调函数与bind方法</title>
      <link href="/2023/11/25/hui-diao-han-shu-yu-bind-fang-fa/"/>
      <url>/2023/11/25/hui-diao-han-shu-yu-bind-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。   </p><h2 id="回调函数机制：-定义一个函数（普通函数即可）；-将此函数的地址注册给调用者；-特定的事件或条件发生时，调用者使用函数指针调用回调函数。"><a href="#回调函数机制：-定义一个函数（普通函数即可）；-将此函数的地址注册给调用者；-特定的事件或条件发生时，调用者使用函数指针调用回调函数。" class="headerlink" title="回调函数机制： - 定义一个函数（普通函数即可）； - 将此函数的地址注册给调用者； - 特定的事件或条件发生时，调用者使用函数指针调用回调函数。 "></a>回调函数机制： <br>- 定义一个函数（普通函数即可）； <br>- 将此函数的地址注册给调用者； <br>- 特定的事件或条件发生时，调用者使用函数指针调用回调函数。 </h2><p>注：为什么要特定事件或条件发生？不应该随时都可以调用回调函数吗？ <br>以下是回调函数的两种使用方式（简单理解）：   </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span>callback p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，可以看到，我们定义了一个<code>callbak</code>的函数指针，参数为两个int，返回值为int，通过调用函数地址来进行简单的相加运算。   </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>callBack<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span>size_t size<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>p_out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">callFunc</span><span class="token punctuation">(</span>callBack <span class="token operator">*</span>consume_bytes<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p_out<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"callFunc\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">consume_bytes</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>p_out<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传入值可以随便填</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">callBackFunc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p_out<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"callBackFunc\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>p_out<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>p_out<span class="token punctuation">,</span><span class="token string">"encoderCallback:this is string."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> p_out<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">callFunc</span><span class="token punctuation">(</span>callBackFunc<span class="token punctuation">,</span>p_out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>p_out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以把回调函数和调用函数封装承类再调用。</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>在理解“回调函数”之前，首先讨论下函数指针的概念</p><p><strong>概念</strong>：指针是一个变量，是用来指向内存地址的。一个程序运行时，所有和运行相关的物件都是需要加载到内存中，这就决定了程序运行时的任何物件都可以用指针来指向它。函数是存放在内存代码区域内的，它们同样有地址，因此同样可以用指针来存取函数，把这种指向函数入口地址的指针称为函数指针。</p><p>先来看一个Hello World程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，采用函数调用的形式来实现：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">char</span>\<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用函数指针的方式来实现：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//声明一个函数指针(fp)          </span>    fp<span class="token operator">=</span>Invoke<span class="token punctuation">;</span>              <span class="token comment">//将Invoke函数的入口地址赋值给fp  </span>    <span class="token function">fp</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//函数指针fp实现函数调用  </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上知道：函数指针函数的声明之间唯一区别就是，用指针名<code>*fp</code>代替了函数名<code>Invoke</code>，这样这声明了一个函数指针，然后进行赋值<code>fp=Invoke</code>就可以进行函数指针的调用了。声明函数指针时，只要函数返回值类型、参数个数、参数类型等保持一致，就可以声明一个函数指针了。注意，函数指针必须用括号括起来 <code>void (*fp)(char* s)</code>。</p><p>实际中，为了方便，通常用宏定义的方式来声明函数指针，实现程序如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span>\<span class="token operator">*</span>FP<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span>\<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">char</span>\<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span>\<span class="token operator">*</span> argv\<span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      FP fp<span class="token punctuation">;</span>      <span class="token comment">//通常是用宏FP来声明一个函数指针fp  </span>    fp<span class="token operator">=</span>Invoke<span class="token punctuation">;</span>      <span class="token function">fp</span><span class="token punctuation">(</span><span class="token string">"Hello World!\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">char</span>\<span class="token operator">*</span> s<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h2><p>下面用程序对函数指针数组来个大致了解：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span>  </span>using namespace std<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>FP<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>f1<span class="token punctuation">,</span>f2<span class="token punctuation">,</span>f3<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//定义了指针数组，这里a是一个普通指针  </span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"Hello World!n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//编译错误，指针数组不能用下标的方式来调用函数  </span>      FP f<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>f1<span class="token punctuation">,</span>f2<span class="token punctuation">,</span>f3<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">//定义一个函数指针的数组，这里的f是一个函数指针  </span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"Hello World!n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正确，函数指针的数组进行下标操作可以进行函数的间接调用  </span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回调函数-1"><a href="#回调函数-1" class="headerlink" title="回调函数"></a>回调函数</h2><p><strong>概念</strong>：回调函数，顾名思义，就是使用者自己定义一个函数，使用者自己实现这个函数的程序内容，然后把这个函数作为参数传入别人（或系统）的函数中，由别人（或系统）的函数在运行时来调用的函数。函数是你实现的，但由别人（或系统）的函数在运行时通过参数传递的方式调用，这就是所谓的回调函数。简单来说，就是由别人的函数运行期间来回调你实现的函数。</p><p>标准Hello World程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span>\<span class="token operator">*</span> argv\<span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将它修改成函数回调样式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//定义回调函数  </span><span class="token keyword">void</span> <span class="token function">PrintfText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//定义实现回调函数的"调用函数"  </span><span class="token keyword">void</span> <span class="token function">CallPrintfText</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callfuct<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">callfuct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//在main函数中实现函数回调  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">CallPrintfText</span><span class="token punctuation">(</span>PrintfText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 修改成带参的回调样式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//定义带参回调函数  </span><span class="token keyword">void</span> <span class="token function">PrintfText</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//定义实现带参回调函数的"调用函数"  </span><span class="token keyword">void</span> <span class="token function">CallPrintfText</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callfuct<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">callfuct</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//在main函数中实现带参的函数回调  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">CallPrintfText</span><span class="token punctuation">(</span>PrintfText<span class="token punctuation">,</span><span class="token string">"Hello World!n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回调函数的几种实现方式"><a href="#回调函数的几种实现方式" class="headerlink" title="回调函数的几种实现方式"></a>回调函数的几种实现方式</h2><h3 id="普通函数作为回调函数"><a href="#普通函数作为回调函数" class="headerlink" title="普通函数作为回调函数"></a>普通函数作为回调函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">void</span> <span class="token function">programA_FunA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA_FunA1 and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">programA_FunA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA_FunA2 and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">programB_FunB1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am programB_FunB1 and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">programA_FunA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">programB_FunB1</span><span class="token punctuation">(</span>programA_FunA2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：  </p><pre class="line-numbers language-none"><code class="language-none">I&#39;am ProgramA FunAl and be called..I&#39;am programB FunBl and be called..I&#39;am ProgramA FunA2 and be called..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="类的静态函数作为回调函数"><a href="#类的静态函数作为回调函数" class="headerlink" title="类的静态函数作为回调函数"></a>类的静态函数作为回调函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">ProgramA</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">void</span> <span class="token function">FunA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA.FunA1() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FunA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA.FunA2() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ProgramB</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">void</span> <span class="token function">FunB1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramB.FunB1() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ProgramA PA<span class="token punctuation">;</span>  PA<span class="token punctuation">.</span><span class="token function">FunA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ProgramB PB<span class="token punctuation">;</span>  PB<span class="token punctuation">.</span><span class="token function">FunB1</span><span class="token punctuation">(</span>ProgramA<span class="token double-colon punctuation">::</span>FunA2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果  </p><pre class="line-numbers language-none"><code class="language-none">I&#39;am ProgramA.FunAl()and be called.I&#39;am ProgramB.FunBl()and be called.I&#39;am ProgramA.FunA2()and be called.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出，以上两种方式没有什么本质的区别。<br>但这种实现有一个很明显的缺点：static 函数不能访问非static 成员变量或函数，会严重限制回调函数可以实现的功能。</p><h3 id="类的非静态函数作为回调函数"><a href="#类的非静态函数作为回调函数" class="headerlink" title="类的非静态函数作为回调函数"></a>类的非静态函数作为回调函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">ProgramA</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">void</span> <span class="token function">FunA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA.FunA1() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">FunA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA.FunA2() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ProgramB</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">void</span> <span class="token function">FunB1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>ProgramA<span class="token double-colon punctuation">::</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramB.FunB1() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>ProgramA <span class="token operator">*</span><span class="token punctuation">)</span>context<span class="token operator">-></span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ProgramA PA<span class="token punctuation">;</span>  PA<span class="token punctuation">.</span><span class="token function">FunA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ProgramB PB<span class="token punctuation">;</span>  PB<span class="token punctuation">.</span><span class="token function">FunB1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ProgramA<span class="token double-colon punctuation">::</span>FunA2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PA<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此处都要加&amp;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果  </p><pre class="line-numbers language-none"><code class="language-none">I&#39;am ProgramA.FunAl()and be called.I&#39;am ProgramB.FunBl()and be called.I&#39;am ProgramA.FunA2()and be called.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方法可以得到预期的结果，看似完美，但是也存在明显不足。<br>比如在programB中FunB1还使用 programA的类型，也就我预先还要知道回调函数所属的类定义，当programB想独立封装时就不好用了。<br>​</p><p>这里还有一种方法可以避免这样的问题，可以把非static的回调函数 包装为另一个static函数，这种方式也是一种应用比较广的方法。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">ProgramA</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">void</span> <span class="token function">FunA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA.FunA1() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">FunA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA.FunA2() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FunA2Wrapper</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramA.FunA2Wrapper() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>ProgramA <span class="token operator">*</span><span class="token punctuation">)</span>context<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">FunA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此处调用的FunA2()是context的函数, 不是this->FunA2()</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ProgramB</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">void</span> <span class="token function">FunB1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>ProgramA<span class="token double-colon punctuation">::</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramB.FunB1() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>ProgramA <span class="token operator">*</span><span class="token punctuation">)</span>context<span class="token operator">-></span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">FunB2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'am ProgramB.FunB2() and be called..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ProgramA PA<span class="token punctuation">;</span>  PA<span class="token punctuation">.</span><span class="token function">FunA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ProgramB PB<span class="token punctuation">;</span>  PB<span class="token punctuation">.</span><span class="token function">FunB1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ProgramA<span class="token double-colon punctuation">::</span>FunA2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PA<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此处都要加&amp;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  PB<span class="token punctuation">.</span><span class="token function">FunB2</span><span class="token punctuation">(</span>ProgramA<span class="token double-colon punctuation">::</span>FunA2Wrapper<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：  </p><pre class="line-numbers language-none"><code class="language-none">I&#39;am ProgramA.FunA1()and be called..I&#39;am ProgramB.FunB1()and be called..I&#39;am ProgramA.FunA2()and be called..I&#39;am ProgramB.FunB2()and be called..I&#39;am ProgramA.FunA2Wrapper()and be called..I&#39;am ProgramA.FunA2()and be called..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法相对于上一种，ProgramB中没有ProgramA的任何信息了，是一种更独立的实现方式。<br>FunB2()通过调用FunA2Wrapper()，实现间接的对FunA2()的调用。FunA2()可以访问和调用对类内的任何函数和变量。多了一个wrapper函数，也多了一些灵活性。<br>​</p><p>上面借助wrapper函数实现回调，虽然很灵活，但是还是不够优秀，比如：<br>1）多了一个不是太有实际用处的wrapper函数。<br>2）wrapper中还要对传入的指针进行强制转换。<br>3）FunB2调用时，不但要指定wrapper函数的地址，还要传入PA的地址。<br>​</p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://blog.csdn.net/ss49344/article/details/123089497">https://blog.csdn.net/ss49344/article/details/123089497</a></li><li><a href="https://blog.csdn.net/zhoupian/article/details/119495949">https://blog.csdn.net/zhoupian/article/details/119495949</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 函数回调 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数回调 </tag>
            
            <tag> std::bind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构常用算法会</title>
      <link href="/2023/11/25/shu-ju-jie-gou-he-suan-fa-bi-zhi-bi-hui-de-50-ge-dai-ma-shi-xian/"/>
      <url>/2023/11/25/shu-ju-jie-gou-he-suan-fa-bi-zhi-bi-hui-de-50-ge-dai-ma-shi-xian/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://github.com/wangzheng0822/algo">数据结构和算法必知必会的50个代码实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图说设计模式</title>
      <link href="/2023/11/25/tu-shuo-she-ji-mo-shi/"/>
      <url>/2023/11/25/tu-shuo-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<ul><li>点击下列链接直接访问<br><a href="https://design-patterns.readthedocs.io/zh-cn/latest/index.html">图说设计模式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用图像坐标系变换</title>
      <link href="/2023/11/22/chang-yong-tu-xiang-zuo-biao-xi-bian-huan/"/>
      <url>/2023/11/22/chang-yong-tu-xiang-zuo-biao-xi-bian-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="相机坐标系-X-c-Y-c-Z-c-到图像坐标系-u-v-的变换关系"><a href="#相机坐标系-X-c-Y-c-Z-c-到图像坐标系-u-v-的变换关系" class="headerlink" title="相机坐标系$(X_c,Y_c,Z_c)$到图像坐标系$(u,v)$的变换关系"></a>相机坐标系$(X_c,Y_c,Z_c)$到图像坐标系$(u,v)$的变换关系</h1><p>$$<br>{Z_{c}}\begin{bmatrix}<br>u \\<br>v \\<br>1<br>\end{bmatrix} &#x3D; \begin{bmatrix}<br>f_x &amp; 0 &amp; c_x &amp; 0 \\<br>0 &amp; f_y &amp; c_y &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{bmatrix} \cdot \begin{bmatrix}<br>X_c \\<br>Y_c \\<br>Z_c \\<br>1<br>\end{bmatrix} &#x3D; \begin{bmatrix}<br>f_x X_c+c_x Z_c \\<br>f_y Y_c+c_y Z_c \\<br>Z_c<br>\end{bmatrix}<br>$$</p><p>其中，$\left[ \begin{smallmatrix} f_x &amp; 0 &amp; c_x &amp; 0 \\ 0 &amp; f_y &amp; c_y &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; 0  \end{smallmatrix} \right]$ 为相机的内参矩阵，进一步化简得: </p><p>$$<br>\begin{bmatrix}<br>u \\<br>v \\<br>1<br>\end{bmatrix}<br>&#x3D;\begin{bmatrix}<br>f_x &amp; 0 &amp; c_x &amp; 0 \\<br>0 &amp; f_y &amp; c_y &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{bmatrix}<br>\cdot \begin{bmatrix}<br>X_c \\<br>Y_c \\<br>Z_c \\<br>1<br>\end{bmatrix}<br>&#x3D; \begin{bmatrix}<br>f_x X_c &#x2F; Z_c+c_x \\<br>f_y Y_c &#x2F; Z_c+c_y \\<br>1<br>\end{bmatrix}<br>$$</p><p>相机坐标系$(X_c,Y_c,Z_c)$到图像坐标系$(u,v)$的变换关系如下所示: </p><p>$$<br>\begin{cases}<br>    u &#x3D; \frac{f_x X_c}{Z_c} + c_x \\<br>    v &#x3D; \frac{f_y Y_c}{Z_c} + c_y<br>\end{cases}<br>$$</p><h1 id="世界坐标系-X-w-Y-w-Z-w-到图像坐标系-u-v-的变换关系"><a href="#世界坐标系-X-w-Y-w-Z-w-到图像坐标系-u-v-的变换关系" class="headerlink" title="世界坐标系$(X_w,Y_w,Z_w)$到图像坐标系$(u,v)$的变换关系"></a>世界坐标系$(X_w,Y_w,Z_w)$到图像坐标系$(u,v)$的变换关系</h1><p>相机外参中的旋转和平移的方向为相机坐标系中各个轴的方向，而不是世界坐标系各个轴的方向，以相机先绕相机的$x$轴旋转$pitch$弧度，然后再绕相机的$y$轴旋转$yaw$弧度，最后绕相机的$z$轴旋转$roll$弧度得到新的相机位置为例，每次旋转时的旋转矩阵的计算如下所示：<br>$$<br>R_x&#x3D;<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 \\<br>0 &amp; \cos(pitch) &amp; -\sin(pitch) \\<br>0 &amp; \sin(pitch) &amp; \cos(pitch)<br>\end{bmatrix}<br>$$</p><p>$$<br>R_{y}&#x3D;<br>\begin{bmatrix}<br>\cos(yaw) &amp; 0 &amp; \sin(yaw) \\<br>0 &amp; 1 &amp; 0 \\<br>-\sin(yaw) &amp; 0 &amp; \cos(yaw)<br>\end{bmatrix}<br>$$</p><p>$$<br>R_{z}&#x3D;<br>\begin{bmatrix}<br>\cos(roll) &amp; -\sin(roll) &amp; 0 \\<br>\sin(roll) &amp; \cos(roll) &amp; 0 \\<br>0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$<br>即，综合旋转矩阵为:<br>$$<br>R&#x3D;{R_z}{R_y}{R_x}&#x3D;<br>\begin{bmatrix}<br>c_{roll} c_{yaw} &amp; c_{roll} s_{yaw} s_{pitch}-s_{roll} c_{pitch} &amp; c_{roll} s_{yaw} c_{pitch}+s_{roll} s_{pitch} \\<br>s_{roll} c_{yaw} &amp; s_{roll} s_{yaw} s_{pitch}+c_{roll} c_{pitch} &amp; s_{roll} s_{yaw} c_{pitch}-c_{roll} s_{pitch} \\<br>-s_{yaw} &amp; c_{yaw} s_{pitch} &amp; c_{yaw} c_{pitch}<br>\end{bmatrix}<br>$$</p><p>其中, $c_{yaw}&#x3D;\cos(yaw)$, $s_{yaw}&#x3D;\sin(yaw)$, $c_{pitch}&#x3D;\cos(pitch)$, $s_{pitch}&#x3D;\sin(pitch)$, $c_{roll}&#x3D;\cos(roll)$, $s_{roll}&#x3D;\sin(roll)$。</p><p>相机的平移矩阵如下所示:<br>$$<br>t&#x3D;<br>\begin{bmatrix}<br>t_{x} \\<br>t_{y} \\<br>t_{z}<br>\end{bmatrix}<br>$$<br>其中，$t_{x}$, $t_{y}$, $t_{z}$分表表示沿着相机坐标系的坐标轴的平移方向，而不是世界坐标系坐标轴的方向。<br>$$<br>Z_{c}<br>\begin{bmatrix}<br>u \\<br>v \\<br>1<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>f_{x} &amp; {0} &amp; c_{x} &amp; {0} \\<br>{0} &amp; f_{y} &amp; c_{y} &amp; {0} \\<br>{0} &amp; {0} &amp; {1} &amp;{0}<br>\end{bmatrix}<br>\begin{bmatrix}<br>R &amp; t \\<br>0 &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>{X_{w}} \\<br>{Y_{w}} \\<br>{Z_{w}} \\<br>1<br>\end{bmatrix}<br>$$<br>其中$Z_{c}$可以使用相机外参$(R,t)$和世界坐标系中的点$(X_w,Y_w,Z_w)$求得:<br>$$<br>\begin{bmatrix}<br>X_{c} \\<br>Y_{c} \\<br>Z_{c} \\<br>1<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>R &amp; t \\<br>0 &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>X_{w} \\<br>Y_{w} \\<br>Z_{w} \\<br>1<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>R_{11} &amp; R_{12} &amp; R_{13} &amp; t_{x}  \\<br>R_{21} &amp; R_{22} &amp; R_{23} &amp; t_{y}  \\<br>R_{31} &amp; R_{32} &amp; R_{33} &amp; t_{z}  \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>X_{w} \\<br>Y_{w} \\<br>Z_{w} \\<br>1<br>\end{bmatrix}&#x3D;<br>\begin{bmatrix}<br>R_{11}X_{w}+R_{12}Y_{w}+R_{13}Z_{w}+t_{x} \\<br>R_{21}X_{w}+R_{22}Y_{w}+R_{23}Z_{w}+t_{y} \\<br>R_{31}X_{w}+R_{32}Y_{w}+R_{33}Z_{w}+t_{z} \\<br>1<br>\end{bmatrix}<br>$$<br>即，$Z_{c}&#x3D;R_{31}X_{w}+R_{32}Y_{w}+R_{33}Z_{w}+t_{3}$，这样便可以得到世界坐标系中的点到图像坐标系的变换。</p>]]></content>
      
      
      <categories>
          
          <category> 坐标系变换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坐标系变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车载相机与地面的在线标定</title>
      <link href="/2023/11/16/che-zai-xiang-ji-yu-di-mian-de-zai-xian-biao-ding/"/>
      <url>/2023/11/16/che-zai-xiang-ji-yu-di-mian-de-zai-xian-biao-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>相机与地面的在线标定是一般指实时生成相机与道路平面之间的非刚体变换，现有的解决方案常常利用静态标定，在面对轮胎气压变化、车辆载重体积变化和道路表面多样性等环境变化时存在问题。其他在线解决方案利用道路元素或图像中重叠视图之间的光度一致性，这需要在道路上连续检测特定目标或借助多个摄像头来进行标定。</p><p>这里提出一种在线的单目相机与地面标定解决方案，不需要在行驶过程中使用任何特定目标。通过轮速里程计进行粗到精的地面特征提取，并通过基于滑动窗口的因子图优化来估计相机与地面的标定参数。考虑到驾驶过程中相机与地面之间的非刚性变换，同时提供了衡量标定性能的指标和停止标准，用以发布满意的标定结果。使用真实的数据进行的广泛实验表明该算法有效，并且优于现有的技术。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>现代车辆配备了各种摄像头，以获取与周围环境相关的丰富语义信息，并将特征统一在共享的鸟瞰图中，以支持可解释的运动规划任务。相机与地面的标定在确定相机坐标和地面坐标之间的特征位置的几何变换方面起着关键作用。它有助于消除相机的透视畸变，提供鸟瞰图表示空间，并且便于估算安装在车辆上的相机与地面上位置之间的距离，这在先进驾驶辅助系统（ADAS）和自动驾驶系统中被广泛应用。</p><p>在过去的几十年中，已经提出了许多相机与地面的标定方法。这些方法通常可以分为两类，其一是静态标定，其二是行驶过程中的在线标定。第一类方法通常使用诸如棋盘格或手动标注的地面物体等各种模式，事先计算相机与地面之间的变换关系。然而，由于车辆在道路上行驶时，由于轮胎气压变化、车辆载荷变化、道路表面多样性和部件振动，此类变换是非刚性的。相机与地面的标定应在行驶过程中进行多次，以调整几何投影的变化。例如，由周围视图鱼眼相机捕获的图像在下图a中，静态标定在下图b中会导致BEV图像不准确。在线标定可以减小变换误差，确保适当地处理投影变化，并生成下图c中对齐良好的BEV图像。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/1.png"></p><p>上图在给定的环视图鱼眼相机图像a中，静态标定包含了大量的相机到地面估计误差，导致BEV图像不匹配b，但是本文的方法在c中生成了一个对齐良好的BEV图像。第二类现有方法应用在线标定，这需要从道路上提取出特定的几何形状，例如单目相机的消失点和周围视图相机提取的车道标线，或者多个相机之间重叠区域的光度一致性，以辅助标定调整。然而，在各种行驶环境中很难保持这些要求。在这种情况下，需要在使用单个摄像头连续图像的情况下进行相机与地面的标定，而不依赖于任何特定的标定目标。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>本文采用了一种从粗到精的方法，在车辆行驶在道路上时，通过因子图优化获取地面特征并优化相机到地面的标定参数，而无需使用任何特定的标定目标。利用图像中水平线分离地面和非地面区域，通过轮式测程法预测地面特征的位置，并使用基于几何的方法验证地面特征。对三角测量的地面特征进行平面拟合，以获取地面的法向量和相机到地面的高度，并通过因子图优化进一步改进这些参数，以确定相机到地面的变换关系。考虑到在驾驶过程中相机到地面的非刚性变换，还提出了度量标定性能的指标和停止准则，以确保标定质量。</p><p>下图展示了系统框图，主要包含以下模块。首先利用运动学自车模型恢复图像关键帧之间的相对运动，以便进行相机姿态估计和地面点三角测量。其次从关键帧中提取粗糙的地面特征，通过车辆运动进行特征预测，并进一步进行优化地面特征验证过程。然后进行地面平面拟合，获取地面法向量和相机到地面的高度。然后通过因子图优化来细化相机姿态和相机到地面的变换参数，并提出了一个停止标定准则，确定何时发布相机到地面的标定结果。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/2.png"></p><h2 id="通过轮速里程计测量的相机运动"><a href="#通过轮速里程计测量的相机运动" class="headerlink" title="通过轮速里程计测量的相机运动"></a>通过轮速里程计测量的相机运动</h2><p>利用CAN总线系统提供的连续车轮里程读数估计车辆随时间的姿态变化，并确定相机关键帧之间的相对运动，以恢复单目相机系统的尺度因子。</p><h2 id="连续关键帧的地面提取"><a href="#连续关键帧的地面提取" class="headerlink" title="连续关键帧的地面提取"></a>连续关键帧的地面提取</h2><p>地面特征（即车辆所行驶的道路表面上的特征）在相机与地面标定中起着重要作用。在城市&#x2F;郊区环境中，大多数地面特征位于具有相似纹理的混凝土或沥青道路表面上，这些特征很难提取和匹配。这里提出了一种新颖的粗到细的地面特征提取架构，用于稳健的相机与地面标定。</p><p>首先，引入地平线提取方法，通过车辆运动预测地面特征的位置，以便进行特征匹配。然后，利用几何方法来验证地面特征，并进行地面平面拟合，以获得地面法线向量和相机中心到地面的高度。在进行标定时，选择以稳定速度行驶时的关键帧，这样可以在不同的图像帧之间获得较小的相机姿态变化，有利于标定过程的稳定性，关键帧是指在时间序列中选择的一帧图像，通常表示为时间间隔的起点。从选择的关键帧开始，通过KLT稀疏光流算法提取图像中的角点特征，并进行跟踪。然后通过水平线分割图像，可以筛选位于水平线以下的特征点来选择地面特征，并利用车辆的运动信息进一步预测地面特征在下一个关键帧中的位置，这样可以有效地提取和跟踪地面特征，为后续的相机到地面标定和场景理解提供重要的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/3.png"></p><p>上图通过车辆运动进行特征预测，这里，Ok是关键帧Ik的相机中心。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/4.png"></p><p>上图为粗糙的地面特征提取，对于每个特征，通过车辆运动预测其在下一个关键帧中的位置a。因此，与没有任何预测的KLT跟踪器中的特征相比，在b中有更多的、质量更高的匹配特征对。进一步在d中从b中均匀采样&#x2F;选择特征以进行计算优化。这里，红色线段的端点表示关键帧Ik和Ik+1之间的匹配特征，绿色线是地平线。</p><h2 id="跨关键帧地面优化"><a href="#跨关键帧地面优化" class="headerlink" title="跨关键帧地面优化"></a>跨关键帧地面优化</h2><p>采用基于滑动窗口的因子图优化方法来优化相机姿态、地面法向量和相机中心到地面的高度。通过使用单应性变换矩阵，可以将当前关键帧的特征点投影到上一关键帧的图像中。然后通过最小化重投影误差来优化相机姿态和地面参数，以确保在上一关键帧中的特征点与当前关键帧中的投影点之间的一致性。</p><p>具体来说，首先计算从当前关键帧到上一关键帧的相机姿态变换。然后，根据相机姿态变换将当前关键帧的特征点投影到上一关键帧的图像平面上。接下来计算投影点与上一关键帧中的特征点之间的重投影误差，并将其作为优化问题的目标函数。通过最小化这个目标函数，可以同时调整相机姿态、地面法向量和相机中心到地面的高度，从而得到更准确的地面参数。通过这种跨关键帧的地面优化方法，可以更好地优化相机姿态和地面参数，提高相机到地面的标定精度，并为后续的路径规划和场景感知任务提供更准确的地面信息。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>在各种驾驶场景下使用乘用车实现了本文的算法并进行了大量实验，车辆安装了由四个向下朝向的鱼眼摄像机组成的全景摄像系统（参见下图a中的示例），这些摄像机与车轮编码器数据同步。摄像机的帧率为33Hz，图像分辨率调整为812×540。本文收集了来自不同区域的长序列连续数据，以分析本文算法的效率和鲁棒性（参见表I）。这些数据涵盖了从平坦的铺装地面（FPG）到城市、郊区和农村等不同天气、光照和驾驶条件下的公共道路，FPG数据来自极其平坦的沥青路面，用于验证本文动态标定的基准性能。表I的最后一列表示车辆行驶而不是停车的时间百分比。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/5.png"></p><p>上图显示本文的方法在具有挑战性的驾驶场景中表现良好，图中的标签与表格I从上到下对应。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/6.png"></p><p>将本文的方法与现有的最先进方法进行比较，从而定性地检验性能，包括Liu等人[23]、OECS[24]和ROECS[25]在本文的数据集上的性能。首先比较了在FPG数据上的标定性能，并在表II中总结了结果。与对手一样，本文的方法在车辆行驶在FPG上时能够生成连续稳定的相机到地面的标定。因此显示了与地面真实（GT）标定的欧拉角差的平均值，并评估绝对变化量δr、δp和δy。这里，δr、δp和δy分别表示滚转角、俯仰角和偏航角的变化量。表II中的δh列是相机中心到地面的高度位移。在表II中，即使在图像上没有可辨别纹理的混凝土路面上，本文的在线方法也取得了更好的性能。例如，本文的方法在俯仰角、偏航角和高度估计方面分别获得了显著的绝对增益，分别为44.4%、50.0%和71.2%。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/7.png"></p><p>为了展示本文提出的方法的优越性，在下图中呈现了误差直方图，获得了不同区间的误差差异，作为相对于最先进工作的性能提升的总和。本文的方法在不同水平下具有相对较小的特征转移误差f，并且误差保持在0.83像素以内，这在不同数据序列中保持一致。本文的方法在郊区数据上获得了最低的性能增益44.2%，在城市数据上获得了最高的性能增益67.6%。在从城市到农村地区的公共道路驾驶数据中，与最先进方法相比，本文的方法在误差p方面表现更好。误差p在0.75像素以内变化，并且90.9%的误差在0.67像素以内。在考虑平坦道路条件的情况下，性能提高了12.7%，在郊区数据中获得了最高得分，而在FPG数据中获得了最低得分，为1.59%。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/8.png"></p><p>上图为表I中数据序列的性能直方图。水平轴的值对应于误差，垂直轴是概率密度。</p><p>下图展示了在车辆以高速直行时不同方法生成的鸟瞰图像的视觉结果。本文的方法不依赖于不同摄像头之间的重叠区域或特定物体，获得了较小的特征残差误差，并生成了更好对齐的鸟瞰图像，原因如下：</p><p>（1）直行车道标线与车辆行驶方向平行；</p><p>（2）摄像头之间的车道标线互相重叠；</p><p>（3）道路上的混凝土裂缝在相邻摄像头鸟瞰图像的重叠区域上连接在一起。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E4%B8%8E%E5%9C%B0%E9%9D%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A/9.png"></p><p>上图为在行驶过程中城市I数据的示例结果。上图展示了a本文的结果，bROECS[25]，cOECS[24]和（d）Liu等人的结果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文提出了一种在线相机到地面无目标标定方法，用于在行驶过程中生成相机坐标与地面坐标之间的非刚体变换。采用了一种新颖的粗到精的架构来选择地面特征，并通过基于几何的方法进行验证。对三角化的地面特征进行平面拟合，以获得地面法向量和相机到地面的高度，然后通过滑动窗口的因子图优化对其进行优化。通过旋转平均确定相机到地面的变换，并提供停止标准来广播满足标定结果的情况。使用从不同天气和驾驶条件下收集的真实数据对本文的算法进行了广泛测试，结果显示本文的方法是有效的，并且优于最先进的技术。在未来将减少因子图优化的运行时间复杂度，并进行可观测性分析，以识别帮助丢弃不需要用于标定计算的姿态和地面特征的退化场景。</p><h1 id="文章链接"><a href="#文章链接" class="headerlink" title="文章链接"></a>文章链接</h1><p><a href="https://arxiv.org/pdf/2303.17137.pdf">参考文章</a></p><p><a href="https://mp.weixin.qq.com/s/nSMl6mf-cyc54tL-yLdJcw">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 相机标定 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
            <tag> 360环视 </tag>
            
            <tag> 在线标定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单应性矩阵应用之鸟瞰图生成</title>
      <link href="/2023/11/02/dan-ying-xing-ju-zhen-ying-yong-zhi-niao-kan-tu-sheng-cheng/"/>
      <url>/2023/11/02/dan-ying-xing-ju-zhen-ying-yong-zhi-niao-kan-tu-sheng-cheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 鸟瞰图 </tag>
            
            <tag> 单应性矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础学习g2o</title>
      <link href="/2023/10/17/ling-ji-chu-xue-xi-g2o/"/>
      <url>/2023/10/17/ling-ji-chu-xue-xi-g2o/</url>
      
        <content type="html"><![CDATA[<h1 id="正篇"><a href="#正篇" class="headerlink" title="正篇"></a>正篇</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>g2o（General Graphic Optimization）是一个基于图优化的库，将非线性优化与图论结合起来的理论，我们可以<strong>利用g2o求解任何可以表示为图优化的最小二乘问题</strong>。图优化就是把优化问题表现成图的方式。图由顶点和边组成，其中<em>顶点表示优化变量</em>，<em>边表示误差项</em>，对任意一个非线性最小二乘问题，我们都可以构建与之对应的图。</p><p>g2o的核里带有各种各样的求解器，而它的顶点、边的类型则多种多样。通过自定义顶点和边，事实上，只要一个优化问题能够表达成图，那么就可以用g2o去求解它。常见的，比如bundle adjustment，ICP，数据拟合，都可以用g2o来做。</p><p>从代码层面来说，g2o是一个c++编写的项目，用cmake构建。它的github地址在：<a href="https://github.com/RainerKuemmerle/g2o">https://github.com/RainerKuemmerle/g2o</a> </p><p>g2o的源代码文件夹的内容：</p><ul><li><code>apps</code>　　　　 一些应用程序。好用的g2o_viewer就在这里。其他还有一些不常用的命令行工具等。</li><li><code>core</code>　　　　 核心组件，很重要！基本的顶点、边、图结构的定义，算法的定义，求解器接口的定义在这里。</li><li><code>examples</code>　  一些例程，可以参照着这里的东西来写。不过注释不太多。</li><li><code>solvers</code>　　  求解器的实现。主要来自choldmod, csparse。在使用g2o时要先选择其中一种。</li><li><code>stuff</code>　　　  对用户来讲可有可无的一些工具函数。</li><li><code>types</code>　　　  各种顶点和边，很重要！我们用户在构建图优化问题时，先要想好自己的顶点和边是否已经提供了定义。如果没有，要自己实现。如果有，就用g2o提供的即可。</li></ul><p>就经验而言，<code>solvers</code>给人的感觉是大同小异(不同的求解器可能有针对性的求解场景，但是对于一般的优化问题，一般都适用)，而 <code>types</code> 的选取(关键就是顶点和边的定义)，则是 g2o 用户主要关心的内容。然后 <code>core</code> 下面的内容，我们要争取弄的比较熟悉，才能确保使用中出现错误可以正确地应对。</p><p>g2o的结构图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/g2o%E6%A1%86%E6%9E%B6%E5%9B%BE.png"></p><p>先看上半部分。<code>SparseOptimizer</code>(稀疏优化器) 是我们最终要维护的东东。它是一个OptimizableGraph(优化图)，从而也是一个HyperGraph(超图)。一个 <code>SparseOptimizer</code> 含有很多个顶点 （都继承自 <code>Base Vertex</code>）和很多个边（继承自 <code>BaseUnaryEdge</code>(一元边), <code>BaseBinaryEdge</code>(二元边)或<code>BaseMultiEdge</code>(多元边)）。这些 <code>Base Vertex</code> 和 <code>Base Edge</code>都是抽象的基类，而实际用的顶点和边，都是它们的派生类。我们用 <code>SparseOptimizer.addVertex</code> 和 <code>SparseOptimizer.addEdge</code> 向一个图中添加顶点和边，最后调用 <code>SparseOptimizer.optimize</code> 完成优化。</p><p>在优化之前，需要指定我们用的求解器和迭代算法。从图中下半部分可以看到，一个 <code>SparseOptimizer</code> 拥有一个 <code>Optimization Algorithm</code>继承自<code>Gauss-Newton</code>, <code>Levernberg-Marquardt</code>, <code>Powell&#39;s dogleg</code> 三者之一（我们常用的是GN或LM）。同时，这个 <code>Optimization Algorithm</code> 拥有一个<code>Solver</code>它含有两个部分。一个是 <code>SparseBlockMatrix</code> ，用于计算稀疏的雅可比矩阵和海塞矩阵； 一个是 <code>linearsolver</code> ，用于计算迭代过程中最关键的一步：</p><p>$$H\Delta x&#x3D;-b$$</p><p>这就需要一个线性方程的求解器。而这个求解器，可以从 PCG, CSparse, Choldmod 三者选一。</p><p><strong>综上所述，在g2o中选择优化方法一共需要三个步骤：</strong></p><ul><li>选择一个线性方程求解器，从 PCG, CSparse, Choldmod中选，实际则来自 g2o&#x2F;solvers 文件夹中定义的东东。</li><li>选择一个 BlockSolver 。</li><li>选择一个迭代策略，从GN, LM, Doglog中选。</li></ul><h1 id="扫盲篇"><a href="#扫盲篇" class="headerlink" title="扫盲篇"></a>扫盲篇</h1><h2 id="最小二乘"><a href="#最小二乘" class="headerlink" title="最小二乘"></a>最小二乘</h2><blockquote><p>参考网站：<a href="https://blog.csdn.net/qq_41598072/article/details/83984299">https://blog.csdn.net/qq_41598072/article/details/83984299</a><br>大家可以随意搜索一下，相关的文章很多。长篇大论的不少，刚入门的朋友一看到那些公式可能就看不下去了。比如下面的解释：</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi1jMjdkNWI0NzcwNjM5NDZiNmFiZmQxNWI1YTYzNTExNV9oZC5qcGc?x-oss-process=image/format,png"></p><p>毫无疑问，这样的解释是专业的，严谨的。事实上，这是深度学习圣经里的解释。我并没有诋毁大师的意思，只是觉得用一个具体的例子来说明，可能会让读者更加容易理解：</p><p>小明是跑运输的，跑1公里需要6块，跑2公里需要5块（那段时间刚好油价跌了），跑3公里需要7块，跑4公里需要10块，请问跑5公里需要多少块？</p><p>如果我们有初中数学基础，应该会自然而然地想到用线性方程组来做，对吧。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi1kMGRkYzFiM2EzNGRiOTE5Yzk0OGViOTAyZWQwMzEyOF9oZC5qcGc?x-oss-process=image/format,png"></p><p>这里假定x是公里数，y是运输成本（β1和β2是要求的系数）。我们把上面的一组数据代入得到这么几个方程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi0zMWQ5OWY5YmIxZjViMDE0MDcyMTBhYTRiYmIzM2IwY19oZC5qcGc?x-oss-process=image/format,png"></p><p>如果存在这样的β1和β2，让所有的数据$（x，y）&#x3D;（1,6），（2,5），（3,7），（4，10）$ 都能满足的话，那么解答就很简单了，β1+5β2就是5公里的成本，对吧。</p><p>但遗憾的是，这样的β1和β2是不存在的，上面的方程组很容易，你可以把前面两个解出来得到一组β1和β2，后面两个也解出来同样得到一组β1和β2。这两组β1和β2是不一样的。</p><p>形象地说，就是你找不到一条直线，穿过所有的点，因为他们不在一条直线上。如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi04NWRlYTEzMTU4OTgyMzgxZDViMjcxMmM2YmY3MjI2MV9oZC5qcGc?x-oss-process=image/format,png"></p><p>可是现实生活中，我们就希望能找到一条直线，虽然不能满足所有条件，但能<strong>近似</strong>地表示这个趋势，或者说，能近似地知道5公里的运输成本，这也是有意义的。</p><p>现实生活当中，有很多这样的例子，想起以前在某公司上班的时候，CEO说我们研发部做事有个问题：一个研发任务，要求三个月做完，因为周期太短，完成不了，就干脆不做，这显然是不对的，要尽全力，哪怕三个月完成了80%，或者最终4个月完成，总比不作为的好。</p><p>其实最小二乘法也是这样，要尽全力让这条直线最接近这些点，那么问题来了，怎么才叫做最接近呢？直觉告诉我们，这条直线在所有数据点中间穿过，让这些点到这条直线的误差之和越小越好。这里我们用方差来算更客观。也就是说，把每个点到直线的误差平方加起来：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi05MzljOTExODY2N2VlMzgxNzI1NTQ3ZmE2MDUwNDFkY19oZC5qcGc?x-oss-process=image/format,png"></p><p>（如果上面的四个方程都能满足，那么S的值显然为0，这是最完美的，但如果做不到完美，我们就让这个S越小越好）</p><p>接下来的问题就是，如何让这个S变得最小。这里有一个概念，就是求偏导数。这里我想提一下，在培训的过程中，我发现机器学习的数学基础课程当中，微积分是大家印象最深刻的，而且也最容易理解：比如导数就是求变化率，而偏导数则是当变量超过一个的时候，对其中一个变量求变化率。如果这个概念也忘了，可以参考我在深度学习回答里那个王小二卖猪的例子。这里就不细讲了：</p><p>要让S取得最小值（或最大值，但显然这个函数没有最大值，自己琢磨一下），那么S对于β1和β2分别求偏导结果为0，用一个直观的图来表示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi05NjgwODUzMTY5YmNhMGRjY2M2OTY3OGM4MzM4NzQ2MV9oZC5qcGc?x-oss-process=image/format,png"></p><p>我们看到这条曲线，前半部分是呈下降的趋势，也就是变化率（导数）为负的，后半部分呈上升的趋势，也就是变化率（导数）为正，那么分界点的导数为0，也就是取得最小值的地方。这是一个变量的情况，对于多个变量的情况，要让S取得最小值，那最好是对β1和β2分别求导（对β1求导的时候，把β2当常量所以叫求偏导），值为0：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi05ZDlmZDA4MGM1YmZiOTAxMTc0NjM5YTVmMjM3Y2M2OV9oZC5qcGc?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi00ZTQ1OWRkNDQ1N2Q5ZDM1YTk3ZDU1NWUyMGJiYmU3OF9oZC5qcGc?x-oss-process=image/format,png"></p><p>看到这个我们就熟悉了，两个变量，刚好有两个方程式，初中学过，那么很容易得出：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi1mMDMwYTk0Y2M4YjcwYjgzYjk4MDUxMDg0MTkyMTM5ZF9oZC5qcGc?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS84MC92Mi0xYmM3ZTQ5OTYyY2EyMTI1NGI3YWU5N2M3OTNlNWYwY19oZC5qcGc?x-oss-process=image/format,png"></p><p>其实也就意味着</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWM0LnpoaW1nLmNvbS84MC92Mi00ZTJhNzVmMWJkMmM0NzZmOTFlNmYzMDMwMzFiNzcyYl9oZC5qcGc?x-oss-process=image/format,png"></p><p>这个函数也就是我们要的直线，这条直线虽然不能把那些点串起来，但它能最大程度上接近这些点。也就是说5公里的时候，成本为3.5+1.4x5&#x3D;10.5块，虽然不完美，但是很接近实际情况。</p><h2 id="BA优化"><a href="#BA优化" class="headerlink" title="BA优化"></a>BA优化</h2><blockquote><p>参考网站: <a href="https://optsolution.github.io/archives/58892.html">https://optsolution.github.io/archives/58892.html</a></p></blockquote><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Bundle Adjustment中文译为<strong>光束法平差</strong>，大概大家看到更多的翻译可能为束调整、捆集调整或者捆绑调整等等.所谓bundle，来源于bundle of light，其本意就是指的光束，这些光束指的是三维空间中的点投影到像平面上的光束，而重投影误差正是利用这些光束来构建的，因此称为光束法强调光束也正是描述其优化模型是如何建立的。</p><p>剩下的就是平差，那什么是平差呢？由于测量仪器的精度不完善和人为因素及外界条件的影响，测量误差总是不可避免的。为了提高成果的质量，处理好这些测量中存在的误差问题，观测值的个数往往要多于确定未知量所必须观测的个数，也就是要进行<em>多余观测</em>。有了多余观测，势必在观测结果之间产生矛盾，测量平差的目的就在于消除这些矛盾而求得观测量的最可靠结果并评定测量成果的精度。测量平差采用的原理就是“最小二乘法”。平差也就正好表述了为什么需要BA以及BA这个优化过程到底是怎么进行的。<strong>BA的本质是一个优化模型，其目的是最小化重投影误差</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/BA1.jpg"></p><p>这些五颜六色的线就是我们讲的光束啦！那现在就该说下什么叫重投影误差了，重投影也就是指的第二次投影，那到底是怎么投影的呢？我们来整理一下吧。</p><ul><li>第一次投影指的就是相机在拍照的时候三维空间点投影到图像上</li><li>第二次投影指的是利用几何信息构建三角形来确定三维空间点的位置，利用相机矩阵将得到的三维点的坐标投影到图像上，进行第二次投影，也就是重投影.重投影使用的三维点的位置是根据三角化得到的。<blockquote><p>第二次投影利用到了三角化的原理，那么什么是三角化呢？参加后文三角化介绍。</p></blockquote></li></ul><p>现在我们知道什么是重投影了，那重投影误差到底是什么样的误差呢？这个误差是指的真实三维空间点在图像平面上的投影（也就是图像上的像素点）和重投影（其实是用我们的计算值得到的虚拟的像素点）的差值，因为种种原因计算得到的值和实际情况不会完全相符，也就是这个差值不可能恰好为0，此时也就需要将这些差值的和最小化获取最优的相机参数及三维空间点的坐标。</p><p>BA是一个图优化模型，那首先肯定要构造一个图模型了（没学过图论也没事，后面还是会回到一般的优化模型）。既然是图模型那自然就有节点和边了，这个图模型的节点由相机$P_i$和三维空间点$X_j$构成，如果点$X_j$投影到相机$P_i$的图像上则将这两个节点连接起来。还是来张图吧。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/BA2.png"></p><p>这样就一目了然了。那么我们现在就可以通过这个图来构造优化模型了。</p><p>令点$X_j$在相机$P_i$拍摄到的图像归一化坐标系上的坐标为$k(u_{i j}^{T},1)^{T}&#x3D;K_{i}^{-1}x_{i j}$，其重投影后的图像归一化坐标系下坐标为$k^{\prime}(v_{i j}^{T},1)^{T}&#x3D;K_{i}^{-1}P_{i}X_{j}$，其中$K_{i}^{-1}$是为了在计算时能不受相机内参影响,$k$和$k^{\prime}$是将齐次坐标转换为非齐次坐标的常数项，可以得到该重投影误差为:<br>$$e_{i j}&#x3D;u_{i j}-v_{i j}$$<br>BA是要将所有重投影误差的和最小化，那么这里自然就要开始求和了。<br>$$\operatorname*{min}<em>{R</em>{i},t_{i},X_{j}}\sum_{i,j}\sigma_{i j}||u_{i j}-v_{i j}||<em>{2}$$<br>其中当点$X_j$在相机$P_i$中有投影时$\sigma</em>{i j}&#x3D;1$，否则为$\sigma_{i j}&#x3D;0$。到此我们就得到了BA优化模型的数学形式了。</p><p>既然是优化模型，那自然就应该用各种优化算法来进行计算了。常用的方法有最速下降法，牛顿方法，高斯牛顿方法，LM方法。具体细节<a href="https://optsolution.github.io/archives/58892.html">点我查看</a></p><blockquote><p>具体细节预览<a href="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/BA%E7%AE%80%E8%BF%B0.png">点我查看</a></p></blockquote><h2 id="三角化"><a href="#三角化" class="headerlink" title="三角化"></a>三角化</h2><p>在单目SLAM中，仅通过单张图像无法获得像素的深度信息，我们需要通过三角测量(Triangulation)(或三角化)的方法来估计地图点的深度。即通过某个特征点P在不同帧图像中像素点的位置，来计算出该特征点在三维空间中的坐标，也即获得特征点P的深度信息。特征点在某个相机中被观测到，根据相机位姿和观测向量可以得到3D空间中的一条从相机中心出发的观测“射线”，多个相机位姿观测会产生多条观测射线，理想情况下这些观测射线相交于空间中一点，求所有观测射线的交点就是特征点在3D空间的位置，这就是三角化最朴素的思想。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/%E4%B8%89%E8%A7%92%E5%8C%96.png"></p><p>以两视图的三角化为例，考虑$I_1$,$I_2$两帧图像，$R,t$是第二帧相对于第一帧的旋转矩阵和平移向量（对应的变换矩阵是$T_{12}$）。在$I_1$中有特征点$p_1$，对应于$I_2$中的匹配点$p_2$。根据相机的内参数矩阵$K$，我们便可以获得$p_1$在帧归一化图像平面中的点$x_1&#x3D;K^{-1}p_{1}$；$p_2$在$I_2$帧归一化平面中的点$x_2&#x3D;K^{-1}p_2$。</p><p>根据对极约束，他们满足如下的关系：<br>$$s_{1}x_{1}&#x3D;s_{2}Rx_{2}+t$$</p><p>先对公式左右两端左乘反对称矩阵$x^{\wedge}$，得到：</p><p>$$s_{1}x_{1}^{\wedge}x_{1}&#x3D;0&#x3D;s_{2}x_{1}^{\wedge}R x_{2}+x_{1}^{\wedge}t$$</p><p>根据上述公式的右端，可以计算出$s_2$，进而计算出$s_1$，我们便可得到路标点$P$在这两帧中的深度。然而，在实际的位姿估计中，我们估计的值往往存在误差，上述公式不严格为0。这时候我们可以计算最小二乘解。</p><blockquote><p>多视图三角化<a href="https://gutsgwh1997.github.io/2020/03/31/%E5%A4%9A%E8%A7%86%E5%9B%BE%E4%B8%89%E8%A7%92%E5%8C%96/">点我查看</a><br>具体细节预览<a href="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/%E5%A4%9A%E8%A7%86%E5%9B%BE%E4%B8%89%E8%A7%92%E5%8C%96.png">点我查看</a></p></blockquote><h2 id="对极约束"><a href="#对极约束" class="headerlink" title="对极约束"></a>对极约束</h2><p>对极几何（Epipolar geometry）又叫对极约束，是根据图像二维平面信息来估计单目相机帧间运动或双目相机相对位姿关系的一种算法。直观来讲，当相机在两个不同视角对同一物体进行拍摄时，物体在两幅图像中的成像肯定会有不同，那么，根据这两幅不同的图像，我们如何判断出相机的位姿发生了怎样的变化，这正是对极几何要解决的问题。直观来说就是利用$n$对匹配点对的图像坐标求解相机位姿变换关系。</p><p>需要明确的是，在对极几何中，我们的已知条件仅仅是每幅图像中特征点的像素坐标，当然，计算对极约束的前提是我们必须知道两幅图像中特征点之间准确的匹配关系。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/%E5%AF%B9%E6%9E%81%E5%87%A0%E4%BD%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png"><br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0g2o/%E5%AF%B9%E6%9E%81%E5%87%A0%E4%BD%95%E6%8E%A8%E5%AF%BC.png"></p>]]></content>
      
      
      <categories>
          
          <category> g2o </category>
          
      </categories>
      
      
        <tags>
            
            <tag> g2o </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>360环视相关论文与专利</title>
      <link href="/2023/10/09/360-huan-shi-xiang-guan-lun-wen-yu-zhuan-li/"/>
      <url>/2023/10/09/360-huan-shi-xiang-guan-lun-wen-yu-zhuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="环视相机标定"><a href="#环视相机标定" class="headerlink" title="环视相机标定"></a>环视相机标定</h1><h2 id="基于车道线的环视相机标定"><a href="#基于车道线的环视相机标定" class="headerlink" title="基于车道线的环视相机标定"></a>基于车道线的环视相机标定</h2><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/2009_A_novel_approach_for_the_online_initial_calibration_of_extrinsic_parameters_for_a_car-mounted_camera.pdf">2009_A_novel_approach_for_the_online_initial_calibration_of_extrinsic_parameters_for_a_car-mounted_camera.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/2012_Automatic_camera_calibration_for_driver_assistance_systems.pdf">2012_Automatic_camera_calibration_for_driver_assistance_systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/2014_A_novel_method_for_camera_external_parameters_online_calibration_using_dotted_road_line.pdf">2014_A_novel_method_for_camera_external_parameters_online_calibration_using_dotted_road_line.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/2014_Automatic_on-the-fly_extrinsic_camera_calibration_of_onboard_vehicular_cameras.pdf">2014_Automatic_on-the-fly_extrinsic_camera_calibration_of_onboard_vehicular_cameras.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/2018_Automatic_Calibration_of_an_Around_View_Monitor_System_Exploiting_Lane_Markings.pdf">2018_Automatic_Calibration_of_an_Around_View_Monitor_System_Exploiting_Lane_Markings.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/2020_Carcorder_Camera_Calibration_method_of_external_parameters_based_on_lane_line.pdf">2020_Carcorder_Camera_Calibration_method_of_external_parameters_based_on_lane_line.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/2020_Online_Extrinsic_Camera_Calibration_for_Temporally_Consistent_IPM_Using_Lane_Boundary_Observations_with_a_Lane_Width_Prior.pdf">2020_Online_Extrinsic_Camera_Calibration_for_Temporally_Consistent_IPM_Using_Lane_Boundary_Observations_with_a_Lane_Width_Prior.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/AUTO-CALIBRATION_AROUND-VIEW_MONITORING_SYSTEM.pdf">AUTO-CALIBRATION_AROUND-VIEW_MONITORING_SYSTEM.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/Automatic_on-the-fly_extrinsic_camera_calibration_of_onboard_vehicular_cameras.pdf">Automatic_on-the-fly_extrinsic_camera_calibration_of_onboard_vehicular_cameras.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/Estimating_Camera_Pose_from_H-Pattern_of_Parking_Lot.pdf">Estimating_Camera_Pose_from_H-Pattern_of_Parking_Lot.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E4%B8%93%E5%88%A9_%E4%B8%80%E7%A7%8D%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A%E6%96%B9%E6%B3%95%E5%92%8C%E8%BD%A6%E8%BD%BD%E4%BF%A1%E6%81%AF%E5%A8%B1%E4%B9%90%E7%B3%BB%E7%BB%9F.pdf">专利_一种车载相机的在线标定方法和车载信息娱乐系统.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E4%BA%A4%E9%80%9A%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9B%B8%E6%9C%BA%E8%87%AA%E6%A0%87%E5%AE%9A%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6%E5%8F%8A%E5%BA%94%E7%94%A8_%E8%B5%B5%E6%80%9D%E9%9B%A8.caj">交通场景中相机自标定优化方法研究及应用_赵思雨.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E5%85%AC%E8%B7%AF%E5%8F%8C%E5%B9%B3%E8%A1%8C%E7%BA%BF%E7%BB%84%E7%9A%84%E7%9B%B8%E6%9C%BA%E5%A4%96%E5%8F%82%E6%95%B0%E5%9C%A8%E7%BA%BF%E6%A0%87%E5%AE%9A_%E5%AD%99%E8%8B%B1%E6%85%A7.pdf">基于公路双平行线组的相机外参数在线标定_孙英慧.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%B6%88%E5%A4%B1%E7%82%B9%E5%8F%8A%E6%A8%A1%E5%9E%8B%E5%8C%B9%E9%85%8D%E7%9A%84%E7%9B%B8%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%A0%87%E5%AE%9A%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6_%E6%9D%8E%E5%A9%B5.caj">基于消失点及模型匹配的相机自动标定算法研究_李婵.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E9%81%93%E8%B7%AF%E7%89%B9%E5%BE%81%E7%9A%84%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%8A%A8%E6%80%81%E8%A1%A5%E5%81%BF%E7%AE%97%E6%B3%95_%E9%99%88%E5%86%9B.pdf">基于道路特征的车载相机标定动态补偿算法_陈军.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E8%BD%A6%E8%BD%BD%E7%9B%B8%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%A0%87%E5%AE%9A%E5%92%8C%E5%BF%AB%E9%80%9F%E6%A0%87%E5%AE%9A%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E7%A5%81%E6%B7%BC.pdf">车载相机自动标定和快速标定技术研究_祁淼.pdf</a></p></li></ul><p>-<a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E8%BD%A6%E9%81%93%E7%BA%BF%E5%92%8C%E6%96%91%E9%A9%AC%E7%BA%BF%E7%9A%84%E9%81%93%E8%B7%AF%E7%8E%AF%E8%A7%86%E6%A0%87%E5%AE%9A.pdf">基于车道线和斑马线的道路环视标定.pdf</a></p><p>-<a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E8%BD%A6%E9%81%93%E7%BA%BF%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E8%BD%A6%E9%81%93%E7%BA%BF%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A.pdf">基于车道线的环视相机标定.pdf</a></p><h2 id="基于标志物的环视相机标定"><a href="#基于标志物的环视相机标定" class="headerlink" title="基于标志物的环视相机标定"></a>基于标志物的环视相机标定</h2><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/A_flexible_vehicle_surround_view_camera_system_by_central-around_coordinate_mapping_model.pdf">A_flexible_vehicle_surround_view_camera_system_by_central-around_coordinate_mapping_model.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/An_automatic_online_camera_calibration_system_for_vehicular_applications.pdf">An_automatic_online_camera_calibration_system_for_vehicular_applications.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Automatic_extrinsic_calibration_methods_for_surround_view_systems.pdf">Automatic_extrinsic_calibration_methods_for_surround_view_systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/CamOdoCal_Automatic_Intrinsic_and_Extrinsic_Calibration_of_a_Rig_with_Multiple_Generic_Cameras_and_Odometry.pdf">Automatic_surround_camera_calibration_method_in_road_scene_for_selfdriving_car.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Extrinsic_self_calibration_of_the_surround_view_system_a_weakly_supervised_approach.pdf">CamOdoCal_Automatic_Intrinsic_and_Extrinsic_Calibration_of_a_Rig_with_Multiple_Generic_Cameras_and_Odometry.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Method_for_the_automatic_measurement_of_camera_calibration_quality_in_a_surround_view_system.pdf">Extrinsic_self_calibration_of_the_surround_view_system_a_weakly_supervised_approach.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Oecs_towards_online_extrinsics_correction_for_the_surround-view_system.pdf">Method_for_the_automatic_measurement_of_camera_calibration_quality_in_a_surround_view_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Online_Camera-to-ground_Calibration_for_Autonomous_Driving.pdf">Oecs_towards_online_extrinsics_correction_for_the_surround-view_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Online_Extrinsic_Multi-Camera_Calibration_Using_Ground_Plane_Induced_Homographies.pdf">Online_Camera-to-ground_Calibration_for_Autonomous_Driving.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Online_calibration_of_exterior_orientations_of_a_vehicle_mounted_surround_view_camera_system.pdf">Online_Extrinsic_Multi-Camera_Calibration_Using_Ground_Plane_Induced_Homographies.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Online_camera_pose_optimization_for_the_surround_view_system.pdf">Online_calibration_of_exterior_orientations_of_a_vehicle_mounted_surround_view_camera_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Online_correction_of_camera_poses_for_the_surround_viewsystem_a_sparse_direct_approach.pdf">Online_camera_pose_optimization_for_the_surround_view_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Pedestrian-Aware_Panoramic_Video_Stitching_Based_on_a_Structured_Camera_Array.pdf">Online_correction_of_camera_poses_for_the_surround_viewsystem_a_sparse_direct_approach.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Pedestrian_aware_panoramic_video_stitching_based_on_a_structured_camera_array.pdf">Pedestrian-Aware_Panoramic_Video_Stitching_Based_on_a_Structured_Camera_Array.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Revisit_surround_view_camera_system_calibration.pdf">Revisit_surround_view_camera_system_calibration.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Rochade_robust_checkerboard_advanced_detection_for_camera_calibration(libcbdetect).pdf">Rochade_robust_checkerboard_advanced_detection_for_camera_calibration(libcbdetect).pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Self-calibration_of_an_On-Board_Stereo-vision_System_for_Driver_Assistance_Systems.pdf">https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/Self-calibration_of_an_On-Board_Stereo-vision_System_for_Driver_Assistance_Systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%90%89%E5%88%A9%E7%8E%AF%E8%A7%86%E6%A3%8B%E7%9B%98%E6%A0%BC%E8%BF%AD%E4%BB%A3%E6%A0%87%E5%AE%9A%E6%96%B9%E6%A1%88.pdf">吉利环视棋盘格迭代标定方案.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9B%9E%E5%AD%90%E5%BD%A2%E9%9A%8F%E6%9C%BA%E6%A0%87%E5%AE%9A.pdf">回子形随机标定.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8Ehairs%E8%A7%92%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E7%9A%84%E6%A3%8B%E7%9B%98%E6%A0%BC%E8%AF%86%E5%88%AB%E4%B8%8E%E7%8E%AF%E8%A7%86%E6%A0%87%E5%AE%9A.PDF">基于hairs角点检测与聚类算法的棋盘格识别与环视标定.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E5%85%AD%E5%9D%97%E5%9B%9E%E5%AD%90%E5%BD%A2%E6%A0%87%E5%AE%9A%E5%B8%83%E7%9A%84%E7%8E%AF%E8%A7%86%E9%9A%8F%E6%9C%BA%E6%A0%87%E5%AE%9A.PDF">基于六块回子形标定布的环视随机标定.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E5%9C%86%E5%BD%A2%E6%A0%87%E5%AE%9A%E5%B8%83%E7%9A%84%E7%8E%AF%E8%A7%86%E6%A0%87%E5%AE%9A%E6%96%B9%E6%B3%95.PDF">基于圆形标定布的环视标定方法.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E5%AE%9D%E9%A9%AC%E6%A0%87%E8%AF%86%E4%B8%8E%E7%9F%A9%E5%BD%A2%E6%A1%86%E7%9A%84%E7%8E%AF%E8%A7%86%E6%A0%87%E5%AE%9A.pdf">基于宝马标识与矩形框的环视标定.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E5%B8%B8%E8%A7%84%E9%93%BA%E5%B8%83%E6%A0%87%E5%AE%9A%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A.PDF">基于常规铺布标定的环视相机内参标定.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%8F%8F%E8%BF%B0%E5%9B%A0%E5%AD%90%E7%9A%84%20%E6%A3%8B%E7%9B%98%E6%A0%BC%E8%A7%92%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E7%8E%AF%E8%A7%86%E6%A0%87%E5%AE%9A.PDF">基于描述因子的 棋盘格角点检测与环视标定.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%97%8B%E8%BD%AC%E6%A3%8B%E7%9B%98%E6%A0%BC%E5%8C%B9%E9%85%8D%E7%9A%84%E7%8E%AF%E8%A7%86%E6%A0%87%E5%AE%9A.PDF">基于旋转棋盘格匹配的环视标定.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A3%8B%E7%9B%98%E6%A0%BC%E7%9A%84%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A%E8%AF%84%E4%BC%B0.pdf">基于棋盘格的内参标定评估.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A3%8B%E7%9B%98%E6%A0%BC%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%A0%87%E5%AE%9A.PDF">基于棋盘格的随机标定.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E8%A7%92%E7%82%B9%E6%A3%80%E6%B5%8B%E5%92%8C%E5%85%89%E6%B5%81%E6%B3%95%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%A0%87%E5%AE%9A.PDF">基于角点检测和光流法的移动标定.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E7%8E%AF%E8%A7%86%E6%A3%8B%E7%9B%98%E6%A0%BC%E7%BC%96%E7%A0%81%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D.pdf">环视棋盘格编码检测与匹配.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%A0%87%E5%AE%9A/%E5%9F%BA%E4%BA%8E%E6%A0%87%E5%BF%97%E7%89%A9%E7%9A%84%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%A0%87%E5%AE%9A.pdf">环视相机的移动标定.pdf</a></p></li></ul><h1 id="环视车道线检测"><a href="#环视车道线检测" class="headerlink" title="环视车道线检测"></a>环视车道线检测</h1><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8E%E7%8E%AF%E8%A7%86%E5%9B%BE%E5%83%8F%E7%9A%84%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95.pdf">一种基于环视图像的车道线检测方法.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E4%B8%80%E7%A7%8D%E7%8E%AF%E8%A7%86%E5%A4%8D%E7%94%A8%E7%9A%84%E8%BD%A6%E9%81%93%E7%BA%BF%E8%AF%86%E5%88%AB%E6%96%B9%E6%B3%95.pdf">一种环视复用的车道线识别方法.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E5%85%A8%E6%99%AF%E8%BD%A6%E8%BE%86%E9%A9%BE%E9%A9%B6%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BD%A6%E9%81%93%E7%BA%BF%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6.caj">全景车辆驾驶辅助系统的车道线识别技术研究.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E5%9F%BA%E4%BA%8E%E5%85%A8%E6%99%AF%E8%A7%86%E8%A7%89%E7%9A%84%E6%B1%BD%E8%BD%A6%E9%A9%BE%E9%A9%B6%E8%BE%85%E5%8A%A9%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E5%B0%B9%E9%9B%AA%E9%BE%99.caj">基于全景视觉的汽车驾驶辅助技术研究_尹雪龙.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E5%9F%BA%E4%BA%8E%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BD%A6%E9%81%93%E5%81%8F%E7%A6%BB%E9%A2%84%E8%AD%A6%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6_%E5%86%B7%E5%9D%A4.caj">基于环视系统的车道偏离预警系统研究_冷坤.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E5%9F%BA%E4%BA%8E%E9%B1%BC%E7%9C%BC%E7%8E%AF%E8%A7%86%E7%9A%84%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6.caj">基于环视系统的车道偏离预警系统研究_冷坤.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E5%9F%BA%E4%BA%8E%E9%B1%BC%E7%9C%BC%E7%8E%AF%E8%A7%86%E7%9A%84%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E5%AD%99%E5%AE%9B%E8%B7%AF.caj">基于鱼眼环视的车道线检测技术研究_孙宛路.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E8%AF%86%E5%88%AB%E6%96%B9%E6%B3%95%E3%80%81%E8%A3%85%E7%BD%AE%E5%8F%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8F%AF%E8%AF%BB%E5%AD%98%E5%82%A8%E4%BB%8B%E8%B4%A8.pdf">环视车道线识别方法、装置及计算机可读存储介质.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E7%8E%AF%E8%A7%86%E9%B1%BC%E7%9C%BC%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95_%E5%8C%85%E4%BF%8A.caj">环视鱼眼图像处理深度学习研究进展_包俊.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/A_lane_detection_method_based_on_a_ridge_detector_and_regional_G-RANSAC.pdf">A_lane_detection_method_based_on_a_ridge_detector_and_regional_G-RANSAC.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E7%8E%AF%E8%A7%86%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/%E8%BD%A6%E9%81%93%E5%81%8F%E7%A6%BB%E9%A2%84%E8%AD%A6%E8%A7%86%E8%A7%89%E7%B3%BB%E7%BB%9F%E7%AE%97%E6%B3%95%E6%94%B9%E8%BF%9B%E7%A0%94%E7%A9%B6_%E8%91%9B%E5%B9%B3%E6%B7%91.caj">车道偏离预警视觉系统算法改进研究_葛平淑.caj</a></p></li></ul><h1 id="拼接优化"><a href="#拼接优化" class="headerlink" title="拼接优化"></a>拼接优化</h1><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/A_memory-efficient_architecture_of_full_HD_around_view_monitor_systems.pdf">A_memory-efficient_architecture_of_full_HD_around_view_monitor_systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Auto-calibration_around-view_monitoring_system.pdf">Auto-calibration_around-view_monitoring_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Effective_photometric_alignment_for_surround_view_monitoring_system.pdf">Effective_photometric_alignment_for_surround_view_monitoring_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Embedded_system_implementation_for_vehicle_around_view_monitoring.pdf">Embedded_system_implementation_for_vehicle_around_view_monitoring.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Image_stitching_method_for_surround_view_image_without_seamline.pdf">Image_stitching_method_for_surround_view_image_without_seamline.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Matlab%E6%A0%87%E5%AE%9A__%E6%98%A0%E5%B0%84%E8%A1%A8__A_Calibration_Method_for_the_Surround-View_Parking_Assistant_System_2020.pdf">Matlab标定__映射表__A_Calibration_Method_for_the_Surround-View_Parking_Assistant_System_2020.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Photometric_alignment_for_surround_view_camera_system.pdf">Photometric_alignment_for_surround_view_camera_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/ROECS_A_Robust_Semi-direct_Pipeline_Towards_Online_Extrinsics_Correction_of_the_Surround-view_System.pdf">ROECS_A_Robust_Semi-direct_Pipeline_Towards_Online_Extrinsics_Correction_of_the_Surround-view_System.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Ring_fusion_of_fisheye_images_based_on_corner_detection_algorithm_for_around_view.pdf">Ring_fusion_of_fisheye_images_based_on_corner_detection_algorithm_for_around_view.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Robust_Accurate_Extrinsic_Calibration_of_Static_Non-overlapping_Cameras.pdf">Robust_Accurate_Extrinsic_Calibration_of_Static_Non-overlapping_Cameras.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/SEAMLESS_3D_SURROUND_VIEW_WITH_A_NOVEL_BURGER_MODEL.pdf">SEAMLESS_3D_SURROUND_VIEW_WITH_A_NOVEL_BURGER_MODEL.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/Wide-scoped_Surrounding_Top-view_Monitor_for_Advanced_Driver_Assistance_Systems.pdf">Wide-scoped_Surrounding_Top-view_Monitor_for_Advanced_Driver_Assistance_Systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%85%A8%E6%99%AF%E8%A7%86%E5%9B%BE%E6%B3%8A%E8%BD%A6%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%A4%9A%E8%A7%86%E7%82%B9%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5_2016_%E9%99%88%E6%B5%A9.caj">全景视图泊车辅助系统中的多视点视频拼接_2016_陈浩.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%87%A0%E4%BD%95%E5%AF%B9%E9%BD%90_%E5%85%89%E5%BA%A6%E5%AF%B9%E9%BD%90%E4%BC%98%E5%8C%96_A_surround_view_camera_solution_for_embedded_systems__2014.pdf">几何对齐_光度对齐优化_A_surround_view_camera_solution_for_embedded_systems__2014.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%8A%A0%E6%9D%83%E6%8B%BC%E6%8E%A5_%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B_A_flexible_vehicle_surround_view_camera_system_by_central-around_coordinate_mapping_model_2018.pdf">加权拼接_完整过程_A_flexible_vehicle_surround_view_camera_system_by_central-around_coordinate_mapping_model_2018.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%8A%A0%E6%9D%83%E8%9E%8D%E5%90%88__%E8%88%B9%E8%88%B6%E6%A8%A1%E5%9E%8B__3D_Surround_View_for_Advanced_Driver_Assistance_Systems__2017.pdf">加权融合__船舶模型__3D_Surround_View_for_Advanced_Driver_Assistance_Systems__2017.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92_Bird%E2%80%99s-Eye_View_Vision_System_for_Vehicle_Surrounding_Monitoring.pdf">动态规划_Bird’s-Eye_View_Vision_System_for_Vehicle_Surrounding_Monitoring.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%9C%86%E5%BD%A2%E6%A3%80%E6%B5%8B__Automatic_circle_pattern_extraction_and_camera_calibration_using_fast_adaptive_binarization_and_plane_homography.pdf">圆形检测__Automatic_circle_pattern_extraction_and_camera_calibration_using_fast_adaptive_binarization_and_plane_homography.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%9F%BA%E4%BA%8E%E5%B8%A7%E5%BA%8F%E5%88%97%E7%9A%84%E7%A8%80%E7%96%8F%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_Online_continuous_stereo_extrinsic_parameter_estimation.pdf">基于帧序列的稀疏特征匹配_Online_continuous_stereo_extrinsic_parameter_estimation.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%9F%BA%E4%BA%8E%E5%B9%B3%E8%A1%8C%E8%BD%A6%E9%81%93%E7%BA%BF_2007_Online_extrinsic_parameters_calibration_for_stereovision_systems_used_in_far-range_detection_vehicle_applications.pdf">基于平行车道线_2007_Online_extrinsic_parameters_calibration_for_stereovision_systems_used_in_far-range_detection_vehicle_applications.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%9F%BA%E4%BA%8E%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_Photometric_and_geometric_rectification_for_stereoscopic_images.pdf">基于特征匹配_Photometric_and_geometric_rectification_for_stereoscopic_images.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%9F%BA%E4%BA%8E%E7%9B%B8%E9%82%BB%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_2019_High-Precision_Online_Markerless_Stereo_Extrinsic_Calibration.pdf">基于相邻摄像头的特征匹配_2019_High-Precision_Online_Markerless_Stereo_Extrinsic_Calibration.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%9F%BA%E4%BA%8E%E7%9B%B8%E9%82%BB%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_2019_High-Precision_Online_Markerless_Stereo_Extrinsic_Calibration.pdf">存疑__圆形标定板自动标注__An_Automatic_Calibration_Method_for_AVM_Cameras_2020.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%AD%98%E7%96%91__%E5%9C%86%E5%BD%A2%E6%A0%87%E5%AE%9A%E6%9D%BF%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8__An_Automatic_Calibration_Method_for_AVM_Cameras_2020.pdf">存疑__圆形标定板自动标注__An_Automatic_Calibration_Method_for_AVM_Cameras_2020.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%BC%80%E6%BA%90__Matlab%E5%B7%A5%E5%85%B7%E7%AE%B1%E8%BF%9B%E8%A1%8C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A__A_toolbox_for_easily_calibrating_omnidirectional_cameras.pdf">开源__Matlab工具箱进行相机标定__A_toolbox_for_easily_calibrating_omnidirectional_cameras.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%BC%80%E6%BA%90_matlab_%E9%B1%BC%E7%9C%BC%E5%9B%BE%E5%83%8F%E7%9F%AB%E6%AD%A3%E5%92%8C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A_Minimal_Solvers_for_Single-View_Lens-Distorted_Camera_Auto-Calibration.pdf">开源_matlab_鱼眼图像矫正和相机标定_Minimal_Solvers_for_Single-View_Lens-Distorted_Camera_Auto-Calibration.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E6%8B%BC%E6%8E%A5%E7%BC%9D%E4%BC%98%E5%8C%96_Online_calibration_of_exterior_orientations_of_a_vehicle-mounted_surround-view_camera_system.pdf">拼接缝优化_Online_calibration_of_exterior_orientations_of_a_vehicle-mounted_surround-view_camera_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E6%8B%BC%E7%BC%9D%E4%BA%AE%E5%BA%A6%E5%B7%AE%E5%BC%82%E4%BC%98%E5%8C%96__2014_Photometric_alignment_for_surround_view_camera_system.pdf">拼缝亮度差异优化__2014_Photometric_alignment_for_surround_view_camera_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E6%A0%87%E5%AE%9A%E6%9D%BF_2017_%E4%BC%B0%E8%AE%A1%E5%B9%B6%E4%BC%98%E5%8C%96_Automatic_Extrinsic_Calibration_Methods_for_Surround_View_Systems.pdf">标定板_2017_估计并优化_Automatic_Extrinsic_Calibration_Methods_for_Surround_View_Systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_Camodocal_Automatic_intrinsic_and_extrinsic_calibration_of_a_rig.pdf">特征匹配_Camodocal_Automatic_intrinsic_and_extrinsic_calibration_of_a_rig.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E8%87%AA%E9%80%82%E5%BA%94%E6%8B%BC%E6%8E%A5%E7%9F%AB%E6%AD%A3_2006_Digital_photograph_stitching_with_optimized_matching_of_gradient_and_curvature.pdf">自适应拼接矫正_2006_Digital_photograph_stitching_with_optimized_matching_of_gradient_and_curvature.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E8%87%AA%E9%80%82%E5%BA%94%E6%B5%8B%E5%85%89%E7%9F%AB%E6%AD%A3_Eliminating_ghosting_and_exposure_artifacts_in_image_mosaics.pdf">自适应测光矫正_Eliminating_ghosting_and_exposure_artifacts_in_image_mosaics.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%B8%80%E7%A7%8D%E6%8B%BC%E6%8E%A5%E5%8C%BA%E5%9F%9F%E8%9E%8D%E5%90%88%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.pdf">一种拼接区域融合权重计算方法.pdf</a></p></li></ul><h2 id="多波段拼缝优化"><a href="#多波段拼缝优化" class="headerlink" title="多波段拼缝优化"></a>多波段拼缝优化</h2><ul><li><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%A4%9A%E6%B3%A2%E6%AE%B5%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/SEAMLESS%203D%20SURROUND%20VIEW%20WITH%20A%20NOVEL%20BURGER%20MODEL/SEAMLESS_3D_SURROUND_VIEW_WITH_A_NOVEL_BURGER_MODEL.pdf">SEAMLESS 3D SURROUND VIEW WITH A NOVEL BURGER MODEL&#x2F;SEAMLESS_3D_SURROUND_VIEW_WITH_A_NOVEL_BURGER_MODEL.pdf</a></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%A4%9A%E6%B3%A2%E6%AE%B5%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/SEAMLESS%203D%20SURROUND%20VIEW%20WITH%20A%20NOVEL%20BURGER%20MODEL/%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0_Fast_Approximate_Energy_Minimization_via_Graph_Cuts.pdf">SEAMLESS 3D SURROUND VIEW WITH A NOVEL BURGER MODEL&#x2F;参考文章_Fast_Approximate_Energy_Minimization_via_Graph_Cuts.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%A4%9A%E6%B3%A2%E6%AE%B5%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/SEAMLESS%203D%20SURROUND%20VIEW%20WITH%20A%20NOVEL%20BURGER%20MODEL/%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0_Graphcut_textures_mage_and_video_synthesis_using.pdf">SEAMLESS 3D SURROUND VIEW WITH A NOVEL BURGER MODEL&#x2F;参考文章_Graphcut_textures_mage_and_video_synthesis_using.pdf</a></p></li></ul><h2 id="常见拼缝优化"><a href="#常见拼缝优化" class="headerlink" title="常见拼缝优化"></a>常见拼缝优化</h2><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%B8%B8%E8%A7%81%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/BurtAdelson_spline83.pdf">BurtAdelson_spline83.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%B8%B8%E8%A7%81%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/Pedestrian-Aware_Panoramic_Video_Stitching_Based_on_a_Structured_Camera_Array.pdf">Pedestrian-Aware_Panoramic_Video_Stitching_Based_on_a_Structured_Camera_Array.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%B8%B8%E8%A7%81%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/Sequential_image_stitching_for_mobile_panoramas.pdf">Sequential_image_stitching_for_mobile_panoramas.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%B8%B8%E8%A7%81%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/%E4%B8%80%E7%A7%8D%E6%B6%88%E9%99%A4%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5%E7%BC%9D%E5%92%8C%E9%AC%BC%E5%BD%B1%E7%9A%84%E5%BF%AB%E9%80%9F%E6%8B%BC%E6%8E%A5%E7%AE%97%E6%B3%95_%E7%9E%BF%E4%B8%AD.pdf">一种消除图像拼接缝和鬼影的快速拼接算法_瞿中.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%B8%B8%E8%A7%81%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5%E7%9A%84%E6%94%B9%E8%BF%9B%E7%AE%97%E6%B3%95_%E6%96%B9%E8%B4%A4%E5%8B%87.pdf">图像拼接的改进算法_方贤勇.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%B8%B8%E8%A7%81%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E7%9A%84%E5%85%A8%E6%99%AF%E5%90%88%E6%88%90%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6.caj">基于多相机标定的全景合成方法研究.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E5%B8%B8%E8%A7%81%E6%8B%BC%E7%BC%9D%E4%BC%98%E5%8C%96/%E5%A4%9A%E7%BC%96%E7%BB%84%E5%8F%98%E8%A7%92%E5%BA%A6%E8%BD%A6%E8%BE%86%E5%85%A8%E6%99%AF%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A0%94%E7%A9%B6_%E6%B1%9F%E5%BF%97%E5%9B%BD.caj">多编组变角度车辆全景环视系统的研究_江志国.caj</a></p></li></ul><h2 id="亮度均衡"><a href="#亮度均衡" class="headerlink" title="亮度均衡"></a>亮度均衡</h2><h3 id="专利"><a href="#专利" class="headerlink" title="专利"></a>专利</h3><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E4%B8%80%E7%A7%8D%E5%85%A8%E6%99%AF%E5%9B%BE%E6%8B%BC%E6%8E%A5%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1%E6%96%B9%E6%B3%95%E5%8F%8A%E7%B3%BB%E7%BB%9F---%E5%9B%9B%E8%B7%AF%E5%8E%9F%E5%9B%BE%E9%87%8D%E5%8F%A0%E5%8C%BA%E5%9F%9F%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1.pdf">一种全景图拼接亮度均衡方法及系统—四路原图重叠区域亮度均衡.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E4%B8%80%E7%A7%8D%E5%85%A8%E6%99%AF%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1%E6%96%B9%E6%B3%95---%E5%9B%9B%E8%B7%AF%E4%BF%AF%E8%A7%86%E5%9B%BE%E5%A4%84%E7%90%86.pdf">一种全景环视系统的亮度均衡方法—四路俯视图处理.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8E%E9%87%8D%E5%8F%A0%E5%8C%BA%E5%9F%9F%E7%89%B9%E5%BE%81%E7%82%B9%E5%AF%B9%E7%9A%84%E5%9B%BE%E5%83%8F%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1%E6%96%B9%E6%B3%95---%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D%E9%80%89%E6%8B%A9%E9%87%8D%E5%8F%A0%E5%8C%BA%E5%9F%9F%E5%90%8E%E8%BF%9B%E8%A1%8C%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1.pdf">一种基于重叠区域特征点对的图像亮度均衡方法—特征匹配选择重叠区域后进行亮度均衡.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E4%B8%80%E7%A7%8D%E6%B1%BD%E8%BD%A6360%E5%85%A8%E6%99%AF%E6%98%BE%E7%A4%BA%E7%9A%84%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1%E6%96%B9%E6%B3%95---%E5%9B%9B%E8%B7%AFYUV%E5%8A%A0%E6%9D%83%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1.pdf">一种汽车360全景显示的亮度均衡方法—四路YUV加权亮度均衡.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E4%B8%80%E7%A7%8D%E8%BD%A6%E8%BD%BD%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1%E6%96%B9%E6%B3%95%E5%8F%8A%E7%B3%BB%E7%BB%9F---%E5%9B%9B%E8%B7%AF%E4%BF%AF%E8%A7%86%E5%9B%BE%E9%87%8D%E5%8F%A0%E5%8C%BA%E5%9F%9F%E9%87%8D%E5%8F%A0%E5%8C%BA%E5%9F%9F%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1.pdf">一种车载环视系统中的亮度均衡方法及系统—四路俯视图重叠区域重叠区域亮度均衡.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E8%BD%A6%E8%BD%BD360%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E5%9B%9B%E8%B7%AF%E6%99%BA%E8%83%BD%E6%9B%9D%E5%85%89%E7%AD%96%E7%95%A5---%E5%9B%9B%E8%B7%AF%E5%8E%9F%E5%9B%BE%E5%A4%84%E7%90%86.pdf">车载360环视系统四路智能曝光策略—四路原图处理.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E8%BD%A6%E8%BD%BD%E7%8E%AF%E8%A7%86%E7%9B%B8%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%8E%AF%E8%A7%86%E5%9B%BE%E4%BA%AE%E5%BA%A6%E4%B8%8E%E9%A2%9C%E8%89%B2%E4%B8%80%E8%87%B4%E6%80%A7%E8%B0%83%E6%95%B4%E6%96%B9%E6%B3%95.pdf">车载环视相机系统中环视图亮度与颜色一致性调整方法.pdf</a></p></li></ul><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E6%96%87%E7%AB%A0/A_surround_view_camera_solution_for_embedded_systems.pdf">A_surround_view_camera_solution_for_embedded_systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E6%96%87%E7%AB%A0/Adjustable_image_registration_and_brightness_for_surrounding_top-view_monitoring_system.pdf">Adjustable_image_registration_and_brightness_for_surrounding_top-view_monitoring_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E6%96%87%E7%AB%A0/Effective_Photometric_Alignment_for_Surround_View_Monitoring_System.pdf">Effective_Photometric_Alignment_for_Surround_View_Monitoring_System.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E6%96%87%E7%AB%A0/Informational_birds_eye_view_system_for_parking_assistance.pdf">Informational_birds_eye_view_system_for_parking_assistance.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E6%96%87%E7%AB%A0/Method_and_apparatus_for_a_surround_view_camera_system_photometric_alignment.pdf">Method_and_apparatus_for_a_surround_view_camera_system_photometric_alignment.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E6%96%87%E7%AB%A0/PHOTOMETRIC_ALIGNMENT_FOR_SURROUND_VIEW_CAMERA_SYSTEM.pdf">PHOTOMETRIC_ALIGNMENT_FOR_SURROUND_VIEW_CAMERA_SYSTEM.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E6%96%87%E7%AB%A0/%E7%94%A8%E4%BA%8E%E8%BD%A6%E8%BD%BD%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1%E6%96%B9%E6%B3%95%E5%92%8C%E8%A3%85%E7%BD%AE_%E8%83%A1%E6%8C%AF%E7%A8%8B.caj">用于车载环视系统的亮度均衡方法和装置_胡振程.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E5%9F%BA%E4%BA%8E%E4%BA%AE%E5%BA%A6%E8%A1%A5%E5%81%BF%E7%9A%84%E7%8E%AF%E8%A7%86%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95.PDF">基于亮度补偿的环视亮度均衡计算方法.PDF</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E6%8B%BC%E6%8E%A5%E4%BC%98%E5%8C%96/%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1/%E4%B8%93%E5%88%A9/%E5%9F%BA%E4%BA%8E%E8%9E%8D%E5%90%88%E5%8C%BA%E5%9F%9F%E7%9A%84%E7%8E%AF%E8%A7%86%E4%BA%AE%E5%BA%A6%E5%9D%87%E8%A1%A1.PDF">基于融合区域的环视亮度均衡.PDF</a></p></li></ul><h1 id="铰接工程车辆360环视"><a href="#铰接工程车辆360环视" class="headerlink" title="铰接工程车辆360环视"></a>铰接工程车辆360环视</h1><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E9%93%B0%E6%8E%A5%E5%B7%A5%E7%A8%8B%E8%BD%A6%E8%BE%86360%E7%8E%AF%E8%A7%86/Research_on_semi_trailer_panoramic_surround_view_system_based_on_feature_point_matching.pdf">AVM&#x2F;铰接工程车辆360环视&#x2F;Research_on_semi_trailer_panoramic_surround_view_system_based_on_feature_point_matching.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E9%93%B0%E6%8E%A5%E5%B7%A5%E7%A8%8B%E8%BD%A6%E8%BE%86360%E7%8E%AF%E8%A7%86/VAVM_A_Flexible_Technique_for_Variable-angle_Around_View_Monitor_System_towards_Articulated_Engineering_Vehicle.pdf">AVM&#x2F;铰接工程车辆360环视&#x2F;VAVM_A_Flexible_Technique_for_Variable-angle_Around_View_Monitor_System_towards_Articulated_Engineering_Vehicle.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E9%93%B0%E6%8E%A5%E5%B7%A5%E7%A8%8B%E8%BD%A6%E8%BE%86360%E7%8E%AF%E8%A7%86/video2_compress.mp4">AVM&#x2F;铰接工程车辆360环视&#x2F;video2_compress.mp4</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E9%93%B0%E6%8E%A5%E5%B7%A5%E7%A8%8B%E8%BD%A6%E8%BE%86360%E7%8E%AF%E8%A7%86/%E9%92%88%E5%AF%B9%E9%93%B0%E6%8E%A5%E5%B7%A5%E7%A8%8B%E8%BD%A6%E8%BE%86%E7%9A%84%E5%8F%98%E8%A7%92%E5%BA%A6%E5%85%A8%E6%99%AF%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6.pdf">AVM&#x2F;铰接工程车辆360环视&#x2F;针对铰接工程车辆的变角度全景环视系统研究.pdf</a></p></li></ul><h1 id="基础论文"><a href="#基础论文" class="headerlink" title="基础论文"></a>基础论文</h1><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/360_%E6%B3%8A%E8%BD%A6%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%99%AF%E6%88%90%E5%83%8F%E7%9A%84%E7%A0%94%E7%A9%B6_%E6%B1%9F%E9%BE%99.caj">360_泊车辅助系统全景成像的研究_江龙.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/360_%E8%BD%A6%E8%BD%BD%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E5%86%AF%E8%81%AA.caj">360_车载环视系统图像拼接技术研究_冯聪.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/3D_Surround_View_for_Advanced_Driver_Assistance_Systems.pdf">3D_Surround_View_for_Advanced_Driver_Assistance_Systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/AVSP%E6%8B%BC%E6%8E%A5_FAQ.pdf">AVSP拼接_FAQ.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/AVSP%E6%8B%BC%E6%8E%A5%E8%B0%83%E8%AF%95%E6%8C%87%E5%8D%97.pdf">AVSP拼接调试指南.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/A_Novel_AVM_Calibration_Method_Using_Unaligned_SquareCalibration_Boards.pdf">A_Novel_AVM_Calibration_Method_Using_Unaligned_SquareCalibration_Boards.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/CompComm.2017.8322916.pdf">CompComm.2017.8322916.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/Effective_Photometric_Alignment_for_Surround_View_Monitoring_System.pdf">Effective_Photometric_Alignment_for_Surround_View_Monitoring_System.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/PHOTOMETRIC_ALIGNMENT_FOR_SURROUND_VIEW_CAMERA_SYSTEM.pdf">PHOTOMETRIC_ALIGNMENT_FOR_SURROUND_VIEW_CAMERA_SYSTEM.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/Surround_view_fisheye_camera_perception_for_automated_driving_overview_survey_challenges.pdf">Surround_view_fisheye_camera_perception_for_automated_driving_overview_survey_challenges.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/s11042-018-6744-4.pdf">s11042-018-6744-4.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E4%B8%89%E7%BB%B4%E5%8F%AF%E5%8F%98%E8%A7%86%E8%A7%92%E5%91%A8%E7%95%8C%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6%E5%92%8C%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E7%8E%B0_%E9%9F%A6%E6%B7%BB%E5%85%83.caj">三维可变视角周界环视系统算法研究和嵌入式实现_韦添元.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E7%9A%84%E5%85%A8%E6%99%AF%E5%90%88%E6%88%90%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6.caj">基于多相机标定的全景合成方法研究.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E5%9F%BA%E4%BA%8E%E8%BD%A6%E8%BD%BD%E7%9A%84%E5%A4%9A%E7%9B%B8%E6%9C%BA%E8%81%94%E5%90%88%E6%A0%87%E5%AE%9A_%E7%8E%8B%E7%91%9E.caj">基于车载的多相机联合标定_王瑞.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E5%9F%BA%E4%BA%8E%E9%B1%BC%E7%9C%BC%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E6%B1%BD%E8%BD%A6%E7%8E%AF%E8%A7%86%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E6%A0%BE%E5%A9%A7.caj">基于鱼眼摄像头的汽车环视技术研究_栾婧.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E5%A4%9A%E7%BC%96%E7%BB%84%E5%8F%98%E8%A7%92%E5%BA%A6%E8%BD%A6%E8%BE%86%E5%85%A8%E6%99%AF%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A0%94%E7%A9%B6_%E6%B1%9F%E5%BF%97%E5%9B%BD.caj">多编组变角度车辆全景环视系统的研究_江志国.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%BD%A6%E8%BD%BD%E5%85%A8%E6%99%AF%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E4%BD%95%E6%83%A0%E6%B4%8B.caj">车载全景环视系统中的图像拼接技术研究_何惠洋.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%BD%A6%E8%BD%BD%E5%85%A8%E6%99%AF%E8%A7%86%E8%A7%89%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E6%96%B9%E6%B3%95%E7%9A%84%E7%A0%94%E7%A9%B6_%E8%83%A1%E8%AF%97%E5%8D%89.caj">车载全景视觉系统中相机标定方法的研究_胡诗卉.caj</a></p></li></ul><h2 id="调研分析"><a href="#调研分析" class="headerlink" title="调研分析"></a>调研分析</h2><h3 id="调研文章"><a href="#调研文章" class="headerlink" title="调研文章"></a>调研文章</h3><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/2009_A_novel_approach_for_the_online_initial_calibration_of_extrinsic_parameters_for_a_car-mounted_camera.pdf">2009_A_novel_approach_for_the_online_initial_calibration_of_extrinsic_parameters_for_a_car-mounted_camera.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/2012_Automatic_camera_calibration_for_driver_assistance_systems.pdf">2012_Automatic_camera_calibration_for_driver_assistance_systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/2014_Automatic_on-the-fly_extrinsic_camera_calibration_of_onboard_vehicular_cameras.pdf">2014_Automatic_on-the-fly_extrinsic_camera_calibration_of_onboard_vehicular_cameras.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/2020_Carcorder_Camera_Calibration_method_of_external_parameters_based_on_lane_line.pdf">2020_Carcorder_Camera_Calibration_method_of_external_parameters_based_on_lane_line.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/2020_Online_Extrinsic_Camera_Calibration_for_Temporally_Consistent_IPM_Using_Lane_Boundary_Observations_with_a_Lane_Width_Prior.pdf">2020_Online_Extrinsic_Camera_Calibration_for_Temporally_Consistent_IPM_Using_Lane_Boundary_Observations_with_a_Lane_Width_Prior.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/3D_Surround_View_for_Advanced_Driver_Assistance_Systems.pdf">3D_Surround_View_for_Advanced_Driver_Assistance_Systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/A_Calibration_Method_for_the_Surround-View_Parking_Assistant_System_2020.pdf">A_Calibration_Method_for_the_Surround-View_Parking_Assistant_System_2020.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/A_Novel_AVM_Calibration_Method_Using_Unaligned_SquareCalibration_Boards.pdf">A_Novel_AVM_Calibration_Method_Using_Unaligned_SquareCalibration_Boards.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/A_flexible_vehicle_surround_view_camera_system_by_central-around_coordinate_mapping_model.pdf">A_flexible_vehicle_surround_view_camera_system_by_central-around_coordinate_mapping_model.pdf</a></p></li><li><p><a href="A_memory-efficient_architecture_of_full_HD_around_view_monitor_systems.pdf">A_memory-efficient_architecture_of_full_HD_around_view_monitor_systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/A_novel_approach_for_the_online_initial_calibration_of_extrinsic_parameters_for_a_carcarmounted.pdf">A_novel_approach_for_the_online_initial_calibration_of_extrinsic_parameters_for_a_carcarmounted.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/A_novel_method_for_camera_external_parameters_online_calibration_using_dotted_road_line.pdf">A_novel_method_for_camera_external_parameters_online_calibration_using_dotted_road_line.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/A_surround_view_camera_solution_for_embedded_systems__2014.pdf">A_surround_view_camera_solution_for_embedded_systems__2014.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/An_Automatic_Calibration_Method_for_AVM_Cameras_2020.pdf">An_Automatic_Calibration_Method_for_AVM_Cameras_2020.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Auto-calibration_around-view_monitoring_system.pdf">Auto-calibration_around-view_monitoring_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Automatic_Calibration_of_an_Around_View_Monitor_System_Exploiting_Lane_Markings.pdf">Automatic_Calibration_of_an_Around_View_Monitor_System_Exploiting_Lane_Markings.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Automatic_Extrinsic_Calibration_Methods_for_Surround_View_Systems.pdf">Automatic_Extrinsic_Calibration_Methods_for_Surround_View_Systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Bird%E2%80%99s-Eye_View_Vision_System_for_Vehicle_Surrounding_Monitoring.pdf">Bird’s-Eye_View_Vision_System_for_Vehicle_Surrounding_Monitoring.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Effective_Photometric_Alignment_for_Surround_View_Monitoring_System.pdf">Effective_Photometric_Alignment_for_Surround_View_Monitoring_System.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Embedded_system_implementation_for_vehicle_around_view_monitoring.pdf">Embedded_system_implementation_for_vehicle_around_view_monitoring.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Fast_Approximate_Energy_Minimization_via_Graph_Cuts.pdf">Fast_Approximate_Energy_Minimization_via_Graph_Cuts.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Graphcut_textures_mage_and_video_synthesis_using.pdf">Graphcut_textures_mage_and_video_synthesis_using.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Minimal_Solvers_for_Single-View_Lens-Distorted_Camera_Auto-Calibration.pdf">Minimal_Solvers_for_Single-View_Lens-Distorted_Camera_Auto-Calibration.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Oecs_towards_online_extrinsics_correction_for_the_surround-view_system.pdf">Oecs_towards_online_extrinsics_correction_for_the_surround-view_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Online_calibration_of_exterior_orientations_of_a_vehicle-mounted_surround-view_camera_system.pdf">Online_calibration_of_exterior_orientations_of_a_vehicle-mounted_surround-view_camera_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Online_extrinsic_parameters_calibration_for_stereovision_systems_used_in_far-range_detection_vehicle_applications.pdf">Online_extrinsic_parameters_calibration_for_stereovision_systems_used_in_far-range_detection_vehicle_applications.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/PHOTOMETRIC_ALIGNMENT_FOR_SURROUND_VIEW_CAMERA_SYSTEM.pdf">PHOTOMETRIC_ALIGNMENT_FOR_SURROUND_VIEW_CAMERA_SYSTEM.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Panoramic_video_stitching_of_dual_cameras_based_on_spatio-temporal_seam_optimization.pdf">Panoramic_video_stitching_of_dual_cameras_based_on_spatio-temporal_seam_optimization.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Pedestrian-Aware_Panoramic_Video_Stitching_Based_on_a_Structured_Camera_Array.pdf">Pedestrian-Aware_Panoramic_Video_Stitching_Based_on_a_Structured_Camera_Array.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/REVISIT_SURROUND-VIEW_CAMERA_SYSTEM_CALIBRATION.pdf">REVISIT_SURROUND-VIEW_CAMERA_SYSTEM_CALIBRATION.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/ROECS_A_Robust_Semi-direct_Pipeline_Towards_Online_Extrinsics_Correction_of_the_Surround-view_System.pdf">ROECS_A_Robust_Semi-direct_Pipeline_Towards_Online_Extrinsics_Correction_of_the_Surround-view_System.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Ring_fusion_of_fisheye_images_based_on_corner_detection_algorithm_for_around_view.pdf">Ring_fusion_of_fisheye_images_based_on_corner_detection_algorithm_for_around_view.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/Robust_Accurate_Extrinsic_Calibration_of_Static_Non-overlapping_Cameras.pdf">Robust_Accurate_Extrinsic_Calibration_of_Static_Non-overlapping_Cameras.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/SEAMLESS_3D_SURROUND_VIEW_WITH_A_NOVEL_BURGER_MODEL.pdf">SEAMLESS_3D_SURROUND_VIEW_WITH_A_NOVEL_BURGER_MODEL.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/online_camera_pose_optimization_for_the_surround-view_system.pdf">online_camera_pose_optimization_for_the_surround-view_system.pdf</a></p></li></ul><h3 id="其它文章"><a href="#其它文章" class="headerlink" title="其它文章"></a>其它文章</h3><ul><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/360_%E6%B3%8A%E8%BD%A6%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%99%AF%E6%88%90%E5%83%8F%E7%9A%84%E7%A0%94%E7%A9%B6_%E6%B1%9F%E9%BE%99.caj">360_泊车辅助系统全景成像的研究_江龙.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/360_%E8%BD%A6%E8%BD%BD%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E5%86%AF%E8%81%AA.caj">360_车载环视系统图像拼接技术研究_冯聪.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/Vision-based_Parking-slot_Detection_A_DCNN-based_Approach_and_A_Large-scale_Benchmark_Dataset.pdf">Vision-based_Parking-slot_Detection_A_DCNN-based_Approach_and_A_Large-scale_Benchmark_Dataset.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/Wide-scoped_Surrounding_Top-view_Monitor_for_Advanced_Driver_Assistance_Systems.pdf">Wide-scoped_Surrounding_Top-view_Monitor_for_Advanced_Driver_Assistance_Systems.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E4%B8%89%E7%BB%B4%E5%8F%AF%E5%8F%98%E8%A7%86%E8%A7%92%E5%91%A8%E7%95%8C%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6%E5%92%8C%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E7%8E%B0_%E9%9F%A6%E6%B7%BB%E5%85%83.caj">三维可变视角周界环视系统算法研究和嵌入式实现_韦添元.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%85%A8%E6%99%AF%E8%A7%86%E5%9B%BE%E6%B3%8A%E8%BD%A6%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%A4%9A%E8%A7%86%E7%82%B9%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5_2016_%E9%99%88%E6%B5%A9.caj">全景视图泊车辅助系统中的多视点视频拼接_2016_陈浩.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%8A%A0%E6%9D%83%E8%9E%8D%E5%90%88__%E8%88%B9%E8%88%B6%E6%A8%A1%E5%9E%8B__3D_Surround_View_for_Advanced_Driver_Assistance_Systems__2017.pdf">加权融合__船舶模型__3D_Surround_View_for_Advanced_Driver_Assistance_Systems__2017.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%9C%86%E5%BD%A2%E6%A3%80%E6%B5%8B__Automatic_circle_pattern_extraction_and_camera_calibration_using_fast_adaptive_binarization_and_plane_homography.pdf">圆形检测__Automatic_circle_pattern_extraction_and_camera_calibration_using_fast_adaptive_binarization_and_plane_homography.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E7%9A%84%E5%85%A8%E6%99%AF%E5%90%88%E6%88%90%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6.caj">基于多相机标定的全景合成方法研究.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%9F%BA%E4%BA%8E%E5%B8%A7%E5%BA%8F%E5%88%97%E7%9A%84%E7%A8%80%E7%96%8F%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_Online_continuous_stereo_extrinsic_parameter_estimation.pdf">基于帧序列的稀疏特征匹配_Online_continuous_stereo_extrinsic_parameter_estimation.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%9F%BA%E4%BA%8E%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_Photometric_and_geometric_rectification_for_stereoscopic_images.pdf">基于特征匹配_Photometric_and_geometric_rectification_for_stereoscopic_images.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%9F%BA%E4%BA%8E%E7%9B%B8%E9%82%BB%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_2019_High-Precision_Online_Markerless_Stereo_Extrinsic_Calibration.pdf">基于相邻摄像头的特征匹配_2019_High-Precision_Online_Markerless_Stereo_Extrinsic_Calibration.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%9F%BA%E4%BA%8E%E8%BD%A6%E8%BD%BD%E7%9A%84%E5%A4%9A%E7%9B%B8%E6%9C%BA%E8%81%94%E5%90%88%E6%A0%87%E5%AE%9A_%E7%8E%8B%E7%91%9E.caj">基于车载的多相机联合标定_王瑞.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%9F%BA%E4%BA%8E%E9%B1%BC%E7%9C%BC%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E6%B1%BD%E8%BD%A6%E7%8E%AF%E8%A7%86%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E6%A0%BE%E5%A9%A7.caj">基于鱼眼摄像头的汽车环视技术研究_栾婧.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%A4%9A%E7%BC%96%E7%BB%84%E5%8F%98%E8%A7%92%E5%BA%A6%E8%BD%A6%E8%BE%86%E5%85%A8%E6%99%AF%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A0%94%E7%A9%B6_%E6%B1%9F%E5%BF%97%E5%9B%BD.caj">多编组变角度车辆全景环视系统的研究_江志国.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E5%BC%80%E6%BA%90__Matlab%E5%B7%A5%E5%85%B7%E7%AE%B1%E8%BF%9B%E8%A1%8C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A__A_toolbox_for_easily_calibrating_omnidirectional_cameras.pdf">开源__Matlab工具箱进行相机标定__A_toolbox_for_easily_calibrating_omnidirectional_cameras.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E6%8B%BC%E7%BC%9D%E4%BA%AE%E5%BA%A6%E5%B7%AE%E5%BC%82%E4%BC%98%E5%8C%96__2014_Photometric_alignment_for_surround_view_camera_system.pdf">拼缝亮度差异优化__2014_Photometric_alignment_for_surround_view_camera_system.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D_Camodocal_Automatic_intrinsic_and_extrinsic_calibration_of_a_rig.pdf">特征匹配_Camodocal_Automatic_intrinsic_and_extrinsic_calibration_of_a_rig.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E8%87%AA%E9%80%82%E5%BA%94%E6%8B%BC%E6%8E%A5%E7%9F%AB%E6%AD%A3_2006_Digital_photograph_stitching_with_optimized_matching_of_gradient_and_curvature.pdf">自适应拼接矫正_2006_Digital_photograph_stitching_with_optimized_matching_of_gradient_and_curvature.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E8%87%AA%E9%80%82%E5%BA%94%E6%B5%8B%E5%85%89%E7%9F%AB%E6%AD%A3_Eliminating_ghosting_and_exposure_artifacts_in_image_mosaics.pdf">自适应测光矫正_Eliminating_ghosting_and_exposure_artifacts_in_image_mosaics.pdf</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E8%BD%A6%E8%BD%BD%E5%85%A8%E6%99%AF%E7%8E%AF%E8%A7%86%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6_%E4%BD%95%E6%83%A0%E6%B4%8B.caj">车载全景环视系统中的图像拼接技术研究_何惠洋.caj</a></p></li><li><p><a href="https://github.com/geiyiren/MyBlogPaper1/blob/main/AVM/%E5%9F%BA%E7%A1%80%E8%AE%BA%E6%96%87/%E8%B0%83%E7%A0%94%E5%88%86%E6%9E%90/%E8%B0%83%E7%A0%94%E6%96%87%E7%AB%A0/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/%E8%BD%A6%E8%BD%BD%E5%85%A8%E6%99%AF%E8%A7%86%E8%A7%89%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E6%96%B9%E6%B3%95%E7%9A%84%E7%A0%94%E7%A9%B6_%E8%83%A1%E8%AF%97%E5%8D%89.caj">车载全景视觉系统中相机标定方法的研究_胡诗卉.caj</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文与专利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文与专利 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用规范</title>
      <link href="/2023/10/08/markdown-shi-yong-gui-fan/"/>
      <url>/2023/10/08/markdown-shi-yong-gui-fan/</url>
      
        <content type="html"><![CDATA[<p><a href="http://masikkk.com/article/MathJax/">mathjax使用方法</a></p><h2 id="Markdown公式整理"><a href="#Markdown公式整理" class="headerlink" title="Markdown公式整理"></a><a href="#Markdown%E5%85%AC%E5%BC%8F%E6%95%B4%E7%90%86" title="Markdown公式整理"></a>Markdown公式整理</h2><p>Markdown支持Latex的数学公式简直是太棒了. 但是目前的<code>Mathtype3</code>仍然没有迁移所有的Latex指令过来, 只是支持其中的一部分, 大多数不支持的指令其实都是比较冷门的, 作用不是很大. 感谢<a href="https://www.zybuluo.com/codeep/note/163962">Cmd Markdown 公式指导手册</a>和<a href="https://www.cnblogs.com/1024th/p/11623258.html">LaTeX公式手册</a>, 整理时参考了它们. 如果你不想手敲公式, 想直接进行用图片进行识别, 可以上<a href="https://www.latexlive.com/">妈咪叔的网站</a>或者使用<code>Mathpix</code>直接对公式进行识别, 它甚至能够识别中文, 在写论文和报告时如果有公式依据, 妈咪叔的网站会非常好用.</p><h2 id="公式使用基础"><a href="#公式使用基础" class="headerlink" title="公式使用基础"></a><a href="#%E5%85%AC%E5%BC%8F%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80" title="公式使用基础"></a>公式使用基础</h2><h3 id="插入公式"><a href="#插入公式" class="headerlink" title="插入公式"></a><a href="#%E6%8F%92%E5%85%A5%E5%85%AC%E5%BC%8F" title="插入公式"></a>插入公式</h3><p>$\LaTeX$ 的数学公式分为两种, 分别是行内公式和独立公式.</p><p>行内公式可以这样使用:</p><p><code>$ 公式内容 $</code></p><p>行内公式是嵌入在一行文字中的公式, 例如:</p><p><code>$ J_\alpha(x) = \sum_&#123;m=0&#125;^\infty \frac&#123;(-1)^m&#125;&#123;m! \Gamma (m + \alpha + 1)&#125; &#123;\left(&#123; \frac&#123;x&#125;&#123;2&#125; &#125;\right)&#125;^&#123;2m + \alpha&#125; \text &#123;，行内公式示例&#125; $</code></p><p>$ J_\alpha(x) &#x3D; \sum_{m&#x3D;0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $</p><p>独立公式可以这样使用:</p><p><code>$$ 公式内容 $$</code></p><p>独立公式可以写多行连续的内容, 适合写一段公式. 例如:</p><p><code>$$ J_\alpha(x) = \sum_&#123;m=0&#125;^\infty \frac&#123;(-1)^m&#125;&#123;m! \Gamma (m + \alpha + 1)&#125; &#123;\left(&#123; \frac&#123;x&#125;&#123;2&#125; &#125;\right)&#125;^&#123;2m + \alpha&#125; \text &#123;，独立公式示例&#125; $$</code><br>$$<br>J_\alpha(x) &#x3D; \sum_{m&#x3D;0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，独立公式示例}<br>$$</p><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a><a href="#%E4%B8%8A%E4%B8%8B%E6%A0%87" title="上下标"></a>上下标</h3><p><code>^</code> 表示上标, <code>_</code> 表示下标. 如果上下标的内容多于一个字符, 需要用 <code>&#123;&#125;</code> 将这些内容括成一个整体. 上下标可以嵌套, 也可以同时使用.</p><p>例如:</p><p><code>$$ x^&#123;y^z&#125;=(1+&#123;\rm e&#125;^x)^&#123;-2xy^w&#125; $$</code></p><p>显示:<br>$$<br>x^{y^z}&#x3D;(1+{\rm e}^x)^{-2xy^w}<br>$$<br>如果想在左右两边都加上上下标, 可以使用<code>\sideset</code>命令:</p><p><code>$$ \sideset&#123;^1_2&#125;&#123;^3_4&#125;\bigotimes $$</code></p><p>显示:<br>$$<br>\sideset{^1_2}{^3_4}\bigotimes<br>$$</p><p>或者:</p><p><code>$$&#123;&#125;_1^2\!X_3^4$$</code><br>$$<br>{}_1^2X_3^4<br>$$</p><h3 id="括号和分隔符"><a href="#括号和分隔符" class="headerlink" title="括号和分隔符"></a><a href="#%E6%8B%AC%E5%8F%B7%E5%92%8C%E5%88%86%E9%9A%94%E7%AC%A6" title="括号和分隔符"></a>括号和分隔符</h3><p><code>()</code>, <code>[]</code> 和 <code>|</code> 表示符号本身, 使用 <code>\&#123;\&#125;</code> 来表示 <code>&#123;&#125;</code> . 当要显示大号的括号或分隔符时,要用 <code>\left</code> 和 <code>\right</code> .</p><p>例如:</p><p><code>$$ f(x,y,z) = 3y^2z \left( 3+\frac&#123;7x+5&#125;&#123;1+y^2&#125; \right) $$</code><br>$$<br>f(x,y,z) &#x3D; 3y^2z \left( 3+\frac{7x+5}{1+y^2} \right)<br>$$<br><code>\left.</code> 或 <code>\right.</code> 能够进行匹配而不显示本身, 例如:</p><p><code>$$ \left. \frac&#123; &#123;\rm d&#125;u&#125;&#123; &#123;\rm d&#125;x&#125; \right| _&#123;x=0&#125; $$</code><br>$$<br>\left. \frac{ {\rm d}u}{ {\rm d}x} \right| _{x&#x3D;0}<br>$$<br><code>$$\left. \frac&#123;a&#125;&#123;b&#125; \right \&#125;$$</code><br>$$<br>\left. \frac{a}{b} \right \}<br>$$<br>下面有些特殊的括号:</p><table><thead><tr><th>显示</th><th>输入</th><th>显示</th><th>输入</th></tr></thead><tbody><tr><td>$\langle$</td><td><code>\langle</code></td><td>$\rangle$</td><td><code>\rangle</code></td></tr><tr><td>$\lceil$</td><td><code>\lceil</code></td><td>$\rceil$</td><td><code>\rceil</code></td></tr><tr><td>$\lfloor$</td><td><code>\lfloor</code></td><td>$\rfloor$</td><td><code>\rfloor</code></td></tr><tr><td>$\lbrace$</td><td><code>\lbrace</code></td><td>$\rbrace$</td><td><code>\rbrace</code></td></tr><tr><td>$\lVert$</td><td><code>\lVert</code></td><td>$\rVert$</td><td><code>\rVert</code></td></tr></tbody></table><p>可以使用 <code>\big, \Big, \bigg, \Bigg</code> 控制括号的大小, 例如:</p><p><code>$$\Bigg ( \bigg [ \Big \&#123; \big \langle \left | \| \frac&#123;a&#125;&#123;b&#125; \| \right | \big \rangle \Big \&#125; \bigg ] \Bigg )$$</code></p><p>显示:<br>$$<br>\Bigg ( \bigg [ \Big \{ \big \langle \left | | \frac{a}{b} | \right | \big \rangle \Big \} \bigg ] \Bigg )<br>$$</p><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a><a href="#%E5%88%86%E6%95%B0" title="分数"></a>分数</h3><p>通常使用 <code>\frac &#123;分子&#125; &#123;分母&#125;</code> 命令产生一个分数，分数可嵌套。<br>便捷情况可直接输入 <code>\frac ab</code> 来快速生成一个 。<br>如果分式很复杂，亦可使用 <code>分子 \over 分母</code> 命令，此时分数仅有一层。</p><p>例如:</p><p><code>$$\frac&#123;a-1&#125;&#123;b-1&#125; \quad and \quad &#123;a+1\over b+1&#125;$$</code></p><p>显示:<br>$$<br>\frac{a-1}{b-1} \quad and \quad {a+1\over b+1}<br>$$</p><p>也可以控制分数的大小, 如<code>$$\tfrac&#123;2&#125;&#123;4&#125; = 0.5$$</code>是小型分数:<br>$$<br>\tfrac{2}{4} &#x3D; 0.5<br>$$<br>同理, <code>\cfrac</code>(连分数使用)和<code>\dfrac</code>都表示大型分数.</p><h3 id="开根号"><a href="#开根号" class="headerlink" title="开根号"></a><a href="#%E5%BC%80%E6%A0%B9%E5%8F%B7" title="开根号"></a>开根号</h3><p>使用 <code>\sqrt [根指数，省略时为2] &#123;被开方数&#125;</code> 命令输入开根号. 例如:</p><p><code>$$\surd, \sqrt&#123;2&#125;, \sqrt[n]&#123;&#125;, \sqrt[3]&#123;\frac&#123;x^3+y^3&#125;&#123;2&#125;&#125;$$</code>  </p><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a><a href="#%E5%90%91%E9%87%8F" title="向量"></a>向量</h3><p>使用 <code>\vec&#123;向量&#125;</code> 来自动产生一个向量. 也可以使用 <code>\overrightarrow</code> 等命令自定义字母上方的符号. 例如:</p><p><code>$$\vec&#123;a&#125; \cdot \vec&#123;b&#125;=0$$</code><br>$$<br>\vec{a} \cdot \vec{b}&#x3D;0<br>$$<br><code>$$\overleftarrow&#123;xy&#125; \quad and \quad \overleftrightarrow&#123;xy&#125; \quad and \quad \overrightarrow&#123;xy&#125;$$</code><br>$$<br>\overleftarrow{xy} \quad and \quad \overleftrightarrow{xy} \quad and \quad \overrightarrow{xy}<br>$$</p><h3 id="导数和微分"><a href="#导数和微分" class="headerlink" title="导数和微分"></a><a href="#%E5%AF%BC%E6%95%B0%E5%92%8C%E5%BE%AE%E5%88%86" title="导数和微分"></a>导数和微分</h3><p>常见的微分符号通过<code>\mathrm&#123;d&#125;&#123;符号&#125;</code>来输入一个常见的微分. 其中的<code>\mathrm</code>是为了美观才加上的, 也可以直接输入<code>d符号</code>. 使用<code>\partial&#123;符号&#125;</code>来获得一个偏导符号, <code>\nabla</code>生成一个梯度符号.</p><p><code>$$dt, \mathrm&#123;d&#125;t, \partial t, \nabla\psi$$</code><br>$$<br>dt, \mathrm{d}t, \partial t, \nabla\psi<br>$$<br><code>$$dy/dx, \mathrm&#123;d&#125;y/\mathrm&#123;d&#125;x, \frac&#123;dy&#125;&#123;dx&#125;, \frac&#123;\mathrm&#123;d&#125;y&#125;&#123;\mathrm&#123;d&#125;x&#125;, \frac&#123;\partial^2&#125;&#123;\partial x_1\partial x_2&#125;y$$</code><br>$$<br>dy&#x2F;dx, \mathrm{d}y&#x2F;\mathrm{d}x, \frac{dy}{dx}, \frac{\mathrm{d}y}{\mathrm{d}x}, \frac{\partial^2}{\partial x_1\partial x_2}y<br>$$<br><code>$$\prime, \backprime, f^\prime, f&#39;, f&#39;&#39;, f^&#123;(3)&#125;, \dot y, \ddot y$$</code><br>$$<br>\prime, \backprime, f^\prime, f’, f’’, f^{(3)}, \dot y, \ddot y<br>$$</p><h3 id="积分"><a href="#积分" class="headerlink" title="积分"></a><a href="#%E7%A7%AF%E5%88%86" title="积分"></a>积分</h3><p>使用 <code>\int_积分下限^积分上限 &#123;被积表达式&#125;</code> 来输入一个积分. 例如:</p><p><code>$$\int_0^1 &#123;x^2&#125; \,&#123;\rm d&#125;x$$</code></p><p>显示:<br>$$<br>\int_0^1 {x^2} \,{\rm d}x<br>$$<br><code>\,</code> 和 <code>&#123;\rm d&#125;</code> 部分可省略, 加入能使式子更美观. <code>&#123;\rm d&#125;</code>可以用<code>\mathrm&#123;d&#125;</code>等价替换.</p><p><code>$$\iint_&#123;D&#125;^&#123;W&#125; \, \mathrm&#123;d&#125;x\,\mathrm&#123;d&#125;y$$</code><br>$$<br>\iint_{D}^{W} \, \mathrm{d}x\,\mathrm{d}y<br>$$<br><code>$$\iiint_&#123;E&#125;^&#123;V&#125; \, \mathrm&#123;d&#125;x\,\mathrm&#123;d&#125;y\,\mathrm&#123;d&#125;z$$</code><br>$$<br>\iiint_{E}^{V} \, \mathrm{d}x\,\mathrm{d}y\,\mathrm{d}z<br>$$<br><code>$$\oint_&#123;C&#125; x^3\, \mathrm&#123;d&#125;x + 4y^2\, \mathrm&#123;d&#125;y$$</code><br>$$<br>\oint_{C} x^3\, \mathrm{d}x + 4y^2\, \mathrm{d}y<br>$$</p><h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a><a href="#%E6%9E%81%E9%99%90" title="极限"></a>极限</h3><p>使用 <code>\lim_&#123;变量 \to 表达式&#125; 表达式</code> 来输入一个极限. 如有其他需求, 可以更改 <code>\to</code> 符号至任意符号. 例如:</p><p><code>$$ \lim_&#123;n \to +\infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125; \quad and \quad \lim_&#123;x\leftarrow&#123;示例&#125;&#125; \frac&#123;1&#125;&#123;n(n+1)&#125; $$</code></p><p>显示:<br>$$<br>\lim_{n \to +\infty} \frac{1}{n(n+1)} \quad and \quad \lim_{x\leftarrow{示例}} \frac{1}{n(n+1)}<br>$$<br>如果在行内的话, 显示会将极限放到下标的位置:</p><p>行内公式示例:</p><p><code>$\lim_&#123;x \to \infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125;$</code></p><p>$\lim_{x \to \infty} \frac{1}{n(n+1)}$</p><p>可以通过<code>\limits</code>强制加到下方或上方.</p><p><code>$\lim\limits_&#123;x \to \infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125;$</code></p><p>$\lim\limits_{x \to \infty} \frac{1}{n(n+1)}$</p><p>或者通过<code>\displaystyle</code>强制转为独立公式模式:</p><p><code>$\displaystyle \lim_&#123;x \to \infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125;$</code></p><p>$\displaystyle \lim_{x \to \infty} \frac{1}{n(n+1)}$</p><h3 id="累加和累乘"><a href="#累加和累乘" class="headerlink" title="累加和累乘"></a><a href="#%E7%B4%AF%E5%8A%A0%E5%92%8C%E7%B4%AF%E4%B9%98" title="累加和累乘"></a>累加和累乘</h3><p>使用 <code>\sum_&#123;下标表达式&#125;^&#123;上标表达式&#125; &#123;累加表达式&#125;</code> 来输入一个累加. 与之类似, 使用 <code>\prod</code> <code>\bigcup</code> <code>\bigcap</code> 来分别输入累乘、并集和交集. 此类符号在行内显示时上下标表达式将会移至右上角和右下角.</p><p>独立公式示例:</p><p><code>$$\sum_&#123;i=1&#125;^n \frac&#123;1&#125;&#123;i^2&#125; \quad and \quad \prod_&#123;i=1&#125;^n \frac&#123;1&#125;&#123;i^2&#125; \quad and \quad \bigcup_&#123;i=1&#125;^&#123;2&#125; R$$</code></p><p>显示:<br>$$<br>\sum_{i&#x3D;1}^n \frac{1}{i^2} \quad and \quad \prod_{i&#x3D;1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i&#x3D;1}^{2} R<br>$$</p><blockquote><p>和极限一样, 行内可以通过<code>\limts</code>将内容强制加到上方或下方.</p></blockquote><h3 id="二项式"><a href="#二项式" class="headerlink" title="二项式"></a><a href="#%E4%BA%8C%E9%A1%B9%E5%BC%8F" title="二项式"></a>二项式</h3><p>看例子即可.</p><p>二项式系数:</p><p><code>$$\dbinom&#123;n&#125;&#123;r&#125;=\binom&#123;n&#125;&#123;n-r&#125;=\mathrm&#123;C&#125;_n^r=\mathrm&#123;C&#125;_n^&#123;n-r&#125;$$</code><br>$$<br>\dbinom{n}{r}&#x3D;\binom{n}{n-r}&#x3D;\mathrm{C}_n^r&#x3D;\mathrm{C}_n^{n-r}<br>$$<br>小二项式系数:</p><p><code>$$\tbinom&#123;n&#125;&#123;r&#125;=\tbinom&#123;n&#125;&#123;n-r&#125;=\mathrm&#123;C&#125;_n^r=\mathrm&#123;C&#125;_n^&#123;n-r&#125;$$</code><br>$$<br>\tbinom{n}{r}&#x3D;\tbinom{n}{n-r}&#x3D;\mathrm{C}_n^r&#x3D;\mathrm{C}_n^{n-r}<br>$$<br>大型二项式系数:</p><p><code>$$\binom&#123;n&#125;&#123;r&#125;=\dbinom&#123;n&#125;&#123;n-r&#125;=\mathrm&#123;C&#125;_n^r=\mathrm&#123;C&#125;_n^&#123;n-r&#125;$$</code><br>$$<br>\binom{n}{r}&#x3D;\dbinom{n}{n-r}&#x3D;\mathrm{C}_n^r&#x3D;\mathrm{C}_n^{n-r}<br>$$</p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0" title="自定义函数"></a>自定义函数</h3><p>使用<code>\operatorname&#123;函数名&#125;</code>就能将其作为自定义的函数进行使用, 例如:</p><p><code>$$\operatorname&#123;sh&#125;k, \operatorname&#123;ch&#125;l, \operatorname&#123;th&#125;m, \operatorname&#123;coth&#125;n$$</code></p><p>显示:<br>$$<br>\operatorname{sh}k, \operatorname{ch}l, \operatorname{th}m, \operatorname{coth}n<br>$$</p><h3 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a><a href="#%E6%A8%A1%E8%BF%90%E7%AE%97" title="模运算"></a>模运算</h3><p>直接看例子即可.</p><p><code>$$s_k \equiv 0 \pmod&#123;m&#125;$$</code><br>$$<br>s_k \equiv 0 \pmod{m}<br>$$<br><code>$$a \bmod b$$</code><br>$$<br>a \bmod b<br>$$</p><h3 id="绝对值和范数"><a href="#绝对值和范数" class="headerlink" title="绝对值和范数"></a><a href="#%E7%BB%9D%E5%AF%B9%E5%80%BC%E5%92%8C%E8%8C%83%E6%95%B0" title="绝对值和范数"></a>绝对值和范数</h3><p>用<code>\left\vert s \right\vert</code>即可给Z两侧加上绝对值.</p><p>$$<br>\left\vert Z \right\vert<br>$$<br>用<code>\lVert s \rVert</code>即可给Z两侧加上范数.<br>$$<br>\lVert Z \rVert<br>$$<br>符号函数<code>\sgn</code>在当前版本中暂不支持.</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a><a href="#%E8%BF%9E%E6%8E%A5" title="连接"></a>连接</h3><table><thead><tr><th>显示</th><th>输入</th></tr></thead><tbody><tr><td>$\fbox{a+b+c+d}$</td><td><code>\fbox&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\overleftarrow{a+b+c+d}$</td><td><code>\overleftarrow&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\overrightarrow{a+b+c+d}$</td><td><code>\overrightarrow&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\overleftrightarrow{a+b+c+d}$</td><td><code>\overleftrightarrow&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\underleftarrow{a+b+c+d}$</td><td><code>\underleftarrow&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\underrightarrow{a+b+c+d}$</td><td><code>\underrightarrow&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\underleftrightarrow{a+b+c+d}$</td><td><code>\underleftrightarrow&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\overline{a+b+c+d}$</td><td><code>\overline&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\underline{a+b+c+d}$</td><td><code>\underline&#123;a+b+c+d&#125;</code></td></tr><tr><td>$\overbrace{a+b+c+d}^{Sample}$</td><td><code>\overbrace&#123;a+b+c+d&#125;^&#123;Sample&#125;</code></td></tr><tr><td>$\underbrace{a+b+c+d}_{Sample}$</td><td><code>\underbrace&#123;a+b+c+d&#125;_&#123;Sample&#125;</code></td></tr><tr><td>$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$</td><td><code>\overbrace&#123;a+\underbrace&#123;b+c&#125;_&#123;1.0&#125;+d&#125;^&#123;2.0&#125;</code></td></tr><tr><td>$\underbrace{a\cdot a\cdots a}_{b\text{ times}}$</td><td><code>\underbrace&#123;a\cdot a\cdots a&#125;_&#123;b\text&#123; times&#125;&#125;</code></td></tr><tr><td>$\underrightarrow{1℃&#x2F;min}$</td><td><code>\underrightarrow&#123;1℃/min&#125;</code></td></tr></tbody></table><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a><a href="#%E6%B3%A8%E9%87%8A" title="注释"></a>注释</h3><p>用<code>\text &#123;文字&#125;</code>来添加方程中的注释文本, 在注释中仍然可以使用<code>$ 公式 $</code>将内容公式化.</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">f(n)&#x3D; \begin&#123;cases&#125;n&#x2F;2, &amp; \text &#123;if $n$ is even&#125; \\3n+1, &amp;\text&#123;if $n$ is odd&#125;\end&#123;cases&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>f(n)&#x3D; \begin{cases}<br>n&#x2F;2, &amp; \text {if $n$ is even} \\<br>3n+1, &amp;\text{if $n$ is odd}<br>\end{cases}<br>$$</p><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a><a href="#%E7%A9%BA%E6%A0%BC" title="空格"></a>空格</h3><table><thead><tr><th>效果</th><th>写法</th><th>间距</th><th>名称</th></tr></thead><tbody><tr><td>$\alpha\qquad\beta$</td><td><code>\alpha\qquad\beta</code></td><td>${\displaystyle mm}$</td><td>2 个 quad 空格</td></tr><tr><td>$\alpha \quad \beta$</td><td><code>\alpha\quad\beta</code></td><td>${\displaystyle m}$</td><td>quad 空格</td></tr><tr><td>$\alpha\ \beta$</td><td><code>\alpha\ \beta</code></td><td>${\displaystyle {\frac{m}{3}}}$</td><td>大空格</td></tr><tr><td>$\alpha\;\beta$</td><td><code>\alpha\;\beta</code></td><td>${\displaystyle {\frac {2m}{7}}}$</td><td>中等空格</td></tr><tr><td>$\alpha\,\beta$</td><td><code>\alpha\,\beta</code></td><td>${\displaystyle {\frac {m}{6}}}$</td><td>小空格</td></tr><tr><td>$\alpha\beta$</td><td><code>\alpha\beta</code></td><td>${\displaystyle 0}$</td><td>没有空格</td></tr><tr><td>$\alpha!\beta$</td><td><code>\alpha\!\beta</code></td><td>${\displaystyle {-\frac {m}{6}}}$</td><td>紧贴</td></tr></tbody></table><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a><a href="#%E5%88%A0%E9%99%A4%E7%BA%BF" title="删除线"></a>删除线</h3><p>使用删除线功能必须声明 <code>$$</code> 符号.</p><p>在公式内使用 <code>\require&#123;cancel&#125;</code> 来允许 <strong>片段删除线</strong> 的显示.<br>声明片段删除线后, 使用 <code>\cancel&#123;字符&#125;</code>、<code>\bcancel&#123;字符&#125;</code>、<code>\xcancel&#123;字符&#125;</code> 和 <code>\cancelto&#123;字符&#125;</code> 来实现各种片段删除线效果.</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$\require&#123;cancel&#125;\begin&#123;array&#125;&#123;rl&#125;\verb|y+\cancel&#123;x&#125;| &amp; y+\cancel&#123;x&#125;\\\verb|\cancel&#123;y+x&#125;| &amp; \cancel&#123;y+x&#125;\\\verb|y+\bcancel&#123;x&#125;| &amp; y+\bcancel&#123;x&#125;\\\verb|y+\xcancel&#123;x&#125;| &amp; y+\xcancel&#123;x&#125;\\\verb|y+\cancelto&#123;0&#125;&#123;x&#125;| &amp; y+\cancelto&#123;0&#125;&#123;x&#125;\\\verb+\frac&#123;1\cancel9&#125;&#123;\cancel95&#125; &#x3D; \frac15+&amp; \frac&#123;1\cancel9&#125;&#123;\cancel95&#125; &#x3D; \frac15 \\\end&#123;array&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可得:<br>$$<br>\require{cancel}<br>\begin{array}{rl}<br>\verb|y+\cancel{x}| &amp; y+\cancel{x}\\<br>\verb|\cancel{y+x}| &amp; \cancel{y+x}\\<br>\verb|y+\bcancel{x}| &amp; y+\bcancel{x}\\<br>\verb|y+\xcancel{x}| &amp; y+\xcancel{x}\\<br>\verb|y+\cancelto{0}{x}| &amp; y+\cancelto{0}{x}\\<br>\verb+\frac{1\cancel9}{\cancel95} &#x3D; \frac15+&amp; \frac{1\cancel9}{\cancel95} &#x3D; \frac15 \\<br>\end{array}<br>$$<br>使用 <code>\require&#123;enclose&#125;</code> 来允许 <strong>整段删除线</strong> 的显示.<br>声明整段删除线后, 使用 <code>\enclose&#123;删除线效果&#125;&#123;字符&#125;</code> 来实现各种整段删除线效果.<br>其中, 删除线效果有 <code>horizontalstrike</code>、<code>verticalstrike</code>、<code>updiagonalstrike</code> 和 <code>downdiagonalstrike</code>, 可叠加使用.</p><h2 id="使用参考"><a href="#使用参考" class="headerlink" title="使用参考"></a><a href="#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83" title="使用参考"></a>使用参考</h2><h3 id="大括号和行标"><a href="#大括号和行标" class="headerlink" title="大括号和行标"></a><a href="#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E5%92%8C%E8%A1%8C%E6%A0%87" title="大括号和行标"></a>大括号和行标</h3><p>使用 <code>\left</code> 和 <code>\right</code> 来创建自动匹配高度的 (圆括号), [方括号] 和 {花括号} . 在每个公式末尾前使用 <code>\tag&#123;行标&#125;</code> 来实现行标. 例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$f\left(   \left[      \frac&#123;       1+\left\&#123;x,y\right\&#125;     &#125;&#123;       \left(          \frac&#123;x&#125;&#123;y&#125;+\frac&#123;y&#125;&#123;x&#125;       \right)       \left(u+1\right)     &#125;+a   \right]^&#123;3&#x2F;2&#125;\right)\tag&#123;行标&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>f\left(<br>\left[<br>\frac{<br>1+\left\{x,y\right\}<br>}{<br>\left(<br>\frac{x}{y}+\frac{y}{x}<br>\right)<br>\left(u+1\right)<br>}+a<br>\right]^{3&#x2F;2}<br>\right)<br>\tag{行标}<br>$$<br>如果你需要在不同的行显示对应括号, 可以在每一行对应处使用 <code>\left.</code> 或 <code>\right.</code> 来放一个”影子”括号:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">\begin&#123;aligned&#125;a&#x3D;&amp;\left(1+2+3+  \cdots \right. \\&amp; \cdots+ \left. \infty-2+\infty-1+\infty\right)\end&#123;aligned&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>\begin{aligned}<br>a&#x3D;&amp;\left(1+2+3+ \cdots \right. \\<br>&amp; \cdots+ \left. \infty-2+\infty-1+\infty\right)<br>\end{aligned}<br>$$<br>如果你需要将行内显示的分隔符也变大, 可以使用 <code>\middle</code> :</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">\left\langle    q\middle\|  \frac&#123;\frac&#123;x&#125;&#123;y&#125;&#125;&#123;\frac&#123;u&#125;&#123;v&#125;&#125;\middle|    p \right\rangle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>\left\langle<br>q<br>\middle|<br>\frac{\frac{x}{y}}{\frac{u}{v}}<br>\middle|<br>p<br>\right\rangle<br>$$</p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a><a href="#%E7%9F%A9%E9%98%B5" title="矩阵"></a>矩阵</h3><h4 id="无框矩阵"><a href="#无框矩阵" class="headerlink" title="无框矩阵"></a><a href="#%E6%97%A0%E6%A1%86%E7%9F%A9%E9%98%B5" title="无框矩阵"></a>无框矩阵</h4><p>在开头使用 <code>begin&#123;matrix&#125;</code>, 在结尾使用 <code>end&#123;matrix&#125;</code>, 在中间插入矩阵元素, 每个元素之间插入 <code>&amp;</code> , 并在每行结尾处使用 <code>\\</code> .<br>使用矩阵时必须声明 <code>$</code> 或 <code>$$</code> 符号.</p><p>例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$        \begin&#123;matrix&#125;        1 &amp; x &amp; x^2 \\        1 &amp; y &amp; y^2 \\        1 &amp; z &amp; z^2 \\        \end&#123;matrix&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>\begin{matrix}<br>1 &amp; x &amp; x^2 \\<br>1 &amp; y &amp; y^2 \\<br>1 &amp; z &amp; z^2 \\<br>\end{matrix}<br>$$</p><h4 id="边框矩阵"><a href="#边框矩阵" class="headerlink" title="边框矩阵"></a><a href="#%E8%BE%B9%E6%A1%86%E7%9F%A9%E9%98%B5" title="边框矩阵"></a>边框矩阵</h4><p>在开头将 <code>matrix</code> 替换为 <code>pmatrix</code> <code>bmatrix</code> <code>Bmatrix</code> <code>vmatrix</code> <code>Vmatrix</code>, 就能获得不同样式的带框矩阵.</p><p>例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$ \begin&#123;matrix&#125; 1 &amp; 2 \\ 3 &amp; 4 \\ \end&#123;matrix&#125; $$ \begin&#123;pmatrix&#125; 1 &amp; 2 \\ 3 &amp; 4 \\ \end&#123;pmatrix&#125; $$ \begin&#123;bmatrix&#125; 1 &amp; 2 \\ 3 &amp; 4 \\ \end&#123;bmatrix&#125; $$ \begin&#123;Bmatrix&#125; 1 &amp; 2 \\ 3 &amp; 4 \\ \end&#123;Bmatrix&#125; $$ \begin&#123;vmatrix&#125; 1 &amp; 2 \\ 3 &amp; 4 \\ \end&#123;vmatrix&#125; $$ \begin&#123;Vmatrix&#125; 1 &amp; 2 \\ 3 &amp; 4 \\ \end&#123;Vmatrix&#125; $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:</p><table><thead><tr><th>matrix</th><th>pmatrix</th><th>bmatrix</th><th>Bmatrix</th><th>vmatrix</th><th>Vmatrix</th></tr></thead><tbody><tr><td>$ \begin{matrix} 1 &amp; 2 \\\ 3 &amp; 4 \end{matrix} $</td><td>$ \begin{pmatrix} 1 &amp; 2 \\\ 3 &amp; 4 \end{pmatrix} $</td><td>$ \begin{bmatrix} 1 &amp; 2 \\\ 3 &amp; 4 \end{bmatrix} $</td><td>$ \begin{Bmatrix} 1 &amp; 2 \\\ 3 &amp; 4 \end{Bmatrix} $</td><td>$ \begin{vmatrix} 1 &amp; 2 \\\ 3 &amp; 4 \end{vmatrix} $</td><td>$ \begin{Vmatrix} 1 &amp; 2 \\\ 3 &amp; 4 \end{Vmatrix} $</td></tr></tbody></table><h4 id="带省略号的矩阵"><a href="#带省略号的矩阵" class="headerlink" title="带省略号的矩阵"></a><a href="#%E5%B8%A6%E7%9C%81%E7%95%A5%E5%8F%B7%E7%9A%84%E7%9F%A9%E9%98%B5" title="带省略号的矩阵"></a>带省略号的矩阵</h4><p>使用 <code>\cdots</code> $\cdots$ , <code>\ddots</code> $\ddots$ , <code>\vdots</code> $\vdots$ 来输入省略符号.</p><p>例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$        \begin&#123;pmatrix&#125;        1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \\        1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \\        \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\        1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \\        \end&#123;pmatrix&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到:<br>$$<br>\begin{pmatrix}<br>1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \\<br>1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n<br>\end{pmatrix}<br>$$</p><h4 id="带分割符号的矩阵"><a href="#带分割符号的矩阵" class="headerlink" title="带分割符号的矩阵"></a><a href="#%E5%B8%A6%E5%88%86%E5%89%B2%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%9F%A9%E9%98%B5" title="带分割符号的矩阵"></a>带分割符号的矩阵</h4><p>利用数组或表格的排版进行分割.</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$\left[    \begin&#123;array&#125;&#123;cc|c&#125;      1&amp;2&amp;3\\      4&amp;5&amp;6    \end&#123;array&#125;\right]$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>cc|c</code> 代表在一个三列矩阵中的第二和第三列之间插入分割线.</p><p>显示:<br>$$<br>\left[<br>\begin{array}{cc|c}<br>1&amp;2&amp;3\\<br>4&amp;5&amp;6<br>\end{array}<br>\right]<br>$$</p><h4 id="行中矩阵"><a href="#行中矩阵" class="headerlink" title="行中矩阵"></a><a href="#%E8%A1%8C%E4%B8%AD%E7%9F%A9%E9%98%B5" title="行中矩阵"></a>行中矩阵</h4><p>例如:</p><p><code>$\bigl( \begin&#123;smallmatrix&#125; a &amp; b \\ c &amp; d \end&#123;smallmatrix&#125; \bigr)$</code></p><p>显示$\bigl( \begin{smallmatrix} a &amp; b \\\ c &amp; d \end{smallmatrix} \bigr)$.</p><h3 id="方程组"><a href="#方程组" class="headerlink" title="方程组"></a><a href="#%E6%96%B9%E7%A8%8B%E7%BB%84" title="方程组"></a>方程组</h3><h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a><a href="#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F" title="条件表达式"></a>条件表达式</h4><p>使用 <code>begin&#123;cases&#125;</code> 来创造一组条件表达式, 在每一行条件中插入 <code>&amp;</code> 来指定需要对齐的内容, 并在每一行结尾处使用 <code>\\</code>, 以 <code>end&#123;cases&#125;</code> 结束.</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$        f(n) &#x3D;        \begin&#123;cases&#125;        n&#x2F;2,  &amp; \text&#123;if $n$ is even&#125; \\        3n+1, &amp; \text&#123;if $n$ is odd&#125;        \end&#123;cases&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>f(n) &#x3D;<br>\begin{cases}<br>n&#x2F;2, &amp; \text{if $n$ is even} \\<br>3n+1, &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$<br>如果想要让条件表达式变为左对齐显示, 可以使用如下方式:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$        \left.        \begin&#123;array&#125;&#123;l&#125;        \text&#123;if $n$ is even:&#125;&amp;n&#x2F;2\\        \text&#123;if $n$ is odd:&#125;&amp;3n+1        \end&#123;array&#125;        \right\&#125;        &#x3D;f(n)$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>\left.<br>\begin{array}{l}<br>\text{if $n$ is even:}&amp;n&#x2F;2\\<br>\text{if $n$ is odd:}&amp;3n+1<br>\end{array}<br>\right\}<br>=f(n)<br>$$<br>在换行时可以用<code>\\[?ex]</code>使得其适配行高<code>?</code>. <strong>一个 <code>[ex]</code> 指一个 “X-Height”, 即x字母高度. 可以根据情况指定多个 <code>[ex]</code>, 如 <code>[3ex]</code>、<code>[4ex]</code> 等.</strong> 其实可以在任何地方使用 <code>\\[2ex]</code> 语句, 只要你觉得合适.</p><h4 id="输入方程组"><a href="#输入方程组" class="headerlink" title="输入方程组"></a><a href="#%E8%BE%93%E5%85%A5%E6%96%B9%E7%A8%8B%E7%BB%84" title="输入方程组"></a>输入方程组</h4><p>方程组不光可以通过条件表达式的<code>\begin&#123;cases&#125;…\end&#123;cases&#125;</code>实现, 还可以使用 <code>\begin&#123;array&#125;…\end&#123;array&#125;</code> 和 <code>\left\&#123;…\right.</code> 来创建一个方程组. 例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">\left\&#123; \begin&#123;array&#125;&#123;c&#125;a_1x+b_1y+c_1z&#x3D;d_1 \\ a_2x+b_2y+c_2z&#x3D;d_2 \\ a_3x+b_3y+c_3z&#x3D;d_3\end&#123;array&#125;\right. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\left\{<br>\begin{array}{c}<br>a_1x+b_1y+c_1z&#x3D;d_1 \\<br>a_2x+b_2y+c_2z&#x3D;d_2 \\<br>a_3x+b_3y+c_3z&#x3D;d_3<br>\end{array}<br>\right.<br>$$</p><h4 id="对齐方程组"><a href="#对齐方程组" class="headerlink" title="对齐方程组"></a><a href="#%E5%AF%B9%E9%BD%90%E6%96%B9%E7%A8%8B%E7%BB%84" title="对齐方程组"></a>对齐方程组</h4><p>使用 <code>\begin&#123;aligned&#125;…\end&#123;aligned&#125;</code>获得一列整齐且居中的方程式序列. 通过<code>&amp;</code>来控制方程对齐的位置.</p><p>例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">\begin&#123;aligned&#125;f(x) &amp; &#x3D; (m+n)^2 \\     &amp; &#x3D; m^2+2mn+n^2 \\\end&#123;aligned&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>\begin{aligned}<br>f(x) &amp; &#x3D; (m+n)^2 \\<br>&amp; &#x3D; m^2+2mn+n^2 \\<br>\end{aligned}<br>$$</p><h3 id="数组和表格"><a href="#数组和表格" class="headerlink" title="数组和表格"></a><a href="#%E6%95%B0%E7%BB%84%E5%92%8C%E8%A1%A8%E6%A0%BC" title="数组和表格"></a>数组和表格</h3><p>通常, 一个格式化后的表格比单纯的文字或排版后的文字更具有可读性. 数组和表格均以 <code>begin&#123;array&#125;</code> 开头, 并在其后定义列数及每一列的文本对齐属性, <code>c</code> <code>l</code> <code>r</code> 分别代表居中、左对齐及右对齐. 若需要插入垂直分割线, 在定义式中插入 <code>|</code> , 若要插入水平分割线, 在下一行输入前插入 <code>\hline</code> . 与矩阵相似, 每行元素间均须要插入 <code>&amp;</code> , 每行元素以 <code>\\</code> 结尾, 最后以 <code>end&#123;array&#125;</code> 结束数组.</p><p>例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$\begin&#123;array&#125;&#123;c|lcr&#125;n &amp; \text&#123;左对齐&#125; &amp; \text&#123;居中对齐&#125; &amp; \text&#123;右对齐&#125; \\\hline1 &amp; 0.24 &amp; 1 &amp; 125 \\2 &amp; -1 &amp; 189 &amp; -8 \\3 &amp; -20 &amp; 2000 &amp; 1+10i\end&#123;array&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>\begin{array}{c|lcr}<br>n &amp; \text{左对齐} &amp; \text{居中对齐} &amp; \text{右对齐} \\<br>\hline<br>1 &amp; 0.24 &amp; 1 &amp; 125 \\<br>2 &amp; -1 &amp; 189 &amp; -8 \\<br>3 &amp; -20 &amp; 2000 &amp; 1+10i<br>\end{array}<br>$$</p><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a><a href="#%E5%B5%8C%E5%A5%97" title="嵌套"></a>嵌套</h4><p>多个数组&#x2F;表格可 <strong>互相嵌套</strong> 并组成一组数组&#x2F;一组表格. 使用嵌套前必须声明 <code>$$</code> 符号. 例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$% outer vertical array of arrays 外层垂直表格\begin&#123;array&#125;&#123;c&#125;    % inner horizontal array of arrays 内层水平表格    \begin&#123;array&#125;&#123;cc&#125;        % inner array of minimum values 内层&quot;最小值&quot;数组        \begin&#123;array&#125;&#123;c|cccc&#125;        \text&#123;min&#125; &amp; 0 &amp; 1 &amp; 2 &amp; 3\\        \hline        0 &amp; 0 &amp; 0 &amp; 0 &amp; 0\\        1 &amp; 0 &amp; 1 &amp; 1 &amp; 1\\        2 &amp; 0 &amp; 1 &amp; 2 &amp; 2\\        3 &amp; 0 &amp; 1 &amp; 2 &amp; 3        \end&#123;array&#125;    &amp;        % inner array of maximum values 内层&quot;最大值&quot;数组        \begin&#123;array&#125;&#123;c|cccc&#125;        \text&#123;max&#125;&amp;0&amp;1&amp;2&amp;3\\        \hline        0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\        1 &amp; 1 &amp; 1 &amp; 2 &amp; 3\\        2 &amp; 2 &amp; 2 &amp; 2 &amp; 3\\        3 &amp; 3 &amp; 3 &amp; 3 &amp; 3        \end&#123;array&#125;    \end&#123;array&#125;    % 内层第一行表格组结束    \\    % inner array of delta values 内层第二行Delta值数组        \begin&#123;array&#125;&#123;c|cccc&#125;        \Delta&amp;0&amp;1&amp;2&amp;3\\        \hline        0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\        1 &amp; 1 &amp; 0 &amp; 1 &amp; 2\\        2 &amp; 2 &amp; 1 &amp; 0 &amp; 1\\        3 &amp; 3 &amp; 2 &amp; 1 &amp; 0        \end&#123;array&#125;        % 内层第二行表格组结束\end&#123;array&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>\begin{array}{c}<br>\begin{array}{cc}<br>\begin{array}{c|cccc}<br>\text{min} &amp; 0 &amp; 1 &amp; 2 &amp; 3\\<br>\hline<br>0 &amp; 0 &amp; 0 &amp; 0 &amp; 0\\<br>1 &amp; 0 &amp; 1 &amp; 1 &amp; 1\\<br>2 &amp; 0 &amp; 1 &amp; 2 &amp; 2\\<br>3 &amp; 0 &amp; 1 &amp; 2 &amp; 3<br>\end{array}<br>&amp;<br>\begin{array}{c|cccc}<br>\text{max}&amp;0&amp;1&amp;2&amp;3\\<br>\hline<br>0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\<br>1 &amp; 1 &amp; 1 &amp; 2 &amp; 3\\<br>2 &amp; 2 &amp; 2 &amp; 2 &amp; 3\\<br>3 &amp; 3 &amp; 3 &amp; 3 &amp; 3<br>\end{array}<br>\end{array}<br>\\<br>\begin{array}{c|cccc}<br>\Delta&amp;0&amp;1&amp;2&amp;3\\<br>\hline<br>0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\<br>1 &amp; 1 &amp; 0 &amp; 1 &amp; 2\\<br>2 &amp; 2 &amp; 1 &amp; 0 &amp; 1\\<br>3 &amp; 3 &amp; 2 &amp; 1 &amp; 0<br>\end{array}<br>% 内层第二行表格组结束<br>\end{array}<br>$$</p><h3 id="连分数"><a href="#连分数" class="headerlink" title="连分数"></a><a href="#%E8%BF%9E%E5%88%86%E6%95%B0" title="连分数"></a>连分数</h3><p>就像输入分式时使用 <code>\frac</code> 一样, 使用 <code>\cfrac</code> 来创建一个连分数. 不要使用普通的 <code>\frac</code> 或 <code>\over</code> 来创建, 否则会看起来很丑. 例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$x &#x3D; a_0 + \cfrac&#123;1^2&#125;&#123;a_1          + \cfrac&#123;2^2&#125;&#123;a_2          + \cfrac&#123;3^2&#125;&#123;a_3 + \cfrac&#123;4^4&#125;&#123;a_4 + \cdots&#125;&#125;&#125;&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>x &#x3D; a_0 + \cfrac{1^2}{a_1<br>+ \cfrac{2^2}{a_2<br>+ \cfrac{3^2}{a_3 + \cfrac{4^4}{a_4 + \cdots}}}}<br>$$<br>反例, 使用<code>\frac</code>和<code>\over</code>:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">$$x &#x3D; a_0 + \frac&#123;1^2&#125;&#123;a_1          + \frac&#123;2^2&#125;&#123;a_2          + \frac&#123;3^2&#125;&#123;a_3 + \frac&#123;4^4&#125;&#123;a_4 + \cdots&#125;&#125;&#125;&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>x &#x3D; a_0 + \frac{1^2}{a_1<br>+ \frac{2^2}{a_2<br>+ \frac{3^2}{a_3 + \frac{4^4}{a_4 + \cdots}}}}<br>$$<br>当然, 可以使用 <code>\frac</code> 来表达连分数的 <strong>紧缩记法</strong> . 例如:</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">x &#x3D; a_0 + \frac&#123;1^2&#125;&#123;a_1+&#125;          \frac&#123;2^2&#125;&#123;a_2+&#125;          \frac&#123;3^2&#125;&#123;a_3 +&#125; \frac&#123;4^4&#125;&#123;a_4 +&#125; \cdots<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示:<br>$$<br>x &#x3D; a_0 + \frac{1^2}{a_1+}<br>\frac{2^2}{a_2+}<br>\frac{3^2}{a_3 +} \frac{4^4}{a_4 +} \cdots<br>$$<br>连分数通常都太大以至于不易排版, 建议使用 <code>[a0;a1,a2,a3,…]</code> 一样的紧缩记法.</p><h2 id="符号汇总"><a href="#符号汇总" class="headerlink" title="符号汇总"></a><a href="#%E7%AC%A6%E5%8F%B7%E6%B1%87%E6%80%BB" title="符号汇总"></a>符号汇总</h2><p>这里的符号正常使用绝对够了, 如果还有更奇葩的符号需要使用可以参考之前我引用的文章. 因为同一个符号可能有不同的使用领域, 所以不同的表可能有重叠的地方.</p><p><code>|</code> 符号在被当作分隔符时会产生错误的间隔, 因此在需要分隔时最好使用 <code>\mid</code> 来代替它.</p><h3 id="三角"><a href="#三角" class="headerlink" title="三角"></a><a href="#%E4%B8%89%E8%A7%92" title="三角"></a>三角</h3><table><thead><tr><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th></tr></thead><tbody><tr><td>$30^\circ$</td><td><code>30^\circ</code></td><td>$\bot$</td><td><code>\bot</code></td><td>$\angle A$</td><td><code>\angle A</code></td></tr><tr><td>$\sin$</td><td><code>\sin</code></td><td>$\cos$</td><td><code>\cos</code></td><td>$\tan$</td><td><code>\tan</code></td></tr><tr><td>$\csc$</td><td><code>\csc</code></td><td>$\sec$</td><td><code>\sec</code></td><td>$\cot$</td><td><code>\cot</code></td></tr><tr><td>$\sinh$</td><td><code>\sinh</code></td><td>$\cosh$</td><td><code>\cosh</code></td><td>$\tanh$</td><td><code>\tanh</code></td></tr><tr><td>$\arcsin$</td><td><code>\arcsin</code></td><td>$\arccos$</td><td><code>\arccos</code></td><td>$\arctan$</td><td><code>\arctan</code></td></tr><tr><td>$\textrm{arccsc}$</td><td><code>\textrm&#123;arccsc&#125;</code></td><td>$\textrm{arcsec}$</td><td><code>\textrm&#123;arcsec&#125;</code></td><td>$\textrm{arccot}$</td><td><code>\textrm&#123;arccot&#125;</code></td></tr><tr><td>$\sin^{-1}$</td><td><code>\sin^&#123;-1&#125;</code></td><td>$\cos^{-1}$</td><td><code>\cos^&#123;-1&#125;</code></td><td>$\tan^{-1}$</td><td><code>\tan^&#123;-1&#125;</code></td></tr><tr><td>$\sinh^{-1}$</td><td><code>\sinh^&#123;-1&#125;</code></td><td>$\cosh^{-1}$</td><td><code>\cosh^&#123;-1&#125;</code></td><td>$\tanh^{-1}$</td><td><code>\tanh^&#123;-1&#125;</code></td></tr><tr><td>$\sphericalangle$</td><td><code>sphericalangle</code></td><td>$\measuredangle$</td><td><code>\measuredangle</code></td><td></td><td></td></tr></tbody></table><h3 id="对数"><a href="#对数" class="headerlink" title="对数"></a><a href="#%E5%AF%B9%E6%95%B0" title="对数"></a>对数</h3><table><thead><tr><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th></tr></thead><tbody><tr><td>$\log$</td><td><code>\log​</code></td><td>$\lg$</td><td><code>\lg​</code></td><td>$\ln$</td><td><code>\ln</code></td></tr><tr><td>$\exp$</td><td><code>\exp​</code></td><td>$\log_{e}$</td><td><code>\log_&#123;e&#125;​</code></td><td>$\log_{10}$</td><td><code>\log_&#123;10&#125;</code></td></tr></tbody></table><h3 id="微积分和导数"><a href="#微积分和导数" class="headerlink" title="微积分和导数"></a><a href="#%E5%BE%AE%E7%A7%AF%E5%88%86%E5%92%8C%E5%AF%BC%E6%95%B0" title="微积分和导数"></a>微积分和导数</h3><table><thead><tr><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th></tr></thead><tbody><tr><td>$\int$</td><td><code>\int</code></td><td>$\iint$</td><td><code>\iint</code></td><td>$\iiint$</td><td><code>\iiint</code></td></tr><tr><td>$\iiiint$</td><td><code>\iiiint</code></td><td>$\oint$</td><td><code>\oint</code></td><td>$\prime$</td><td><code>\prime</code></td></tr><tr><td>$\lim$</td><td><code>\lim</code></td><td>$\infty$</td><td><code>\infty</code></td><td>$\nabla$</td><td><code>\nabla</code></td></tr></tbody></table><h3 id="其他公式"><a href="#其他公式" class="headerlink" title="其他公式"></a><a href="#%E5%85%B6%E4%BB%96%E5%85%AC%E5%BC%8F" title="其他公式"></a>其他公式</h3><table><thead><tr><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th></tr></thead><tbody><tr><td>$\inf$</td><td><code>\inf</code></td><td>$\arg$</td><td><code>\arg</code></td><td>$\det$</td><td><code>\det</code></td></tr><tr><td>$\dim$</td><td><code>\dim</code></td><td>$\gcd$</td><td><code>\gcd</code></td><td>$\ker$</td><td><code>\ker</code></td></tr><tr><td>$\Pr$</td><td><code>\Pr</code></td><td>$\deg$</td><td><code>\deg</code></td><td>$\sup$</td><td><code>\sup</code></td></tr><tr><td>$\hom$</td><td><code>\hom</code></td><td>$\max$</td><td><code>\max</code></td><td>$\min$</td><td><code>\min</code></td></tr></tbody></table><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6" title="运算符"></a>运算符</h3><table><thead><tr><th>符号</th><th>公式</th><th>符号</th><th>公式</th><th>符号</th><th>公式</th></tr></thead><tbody><tr><td>$+$</td><td><code>+</code></td><td>$-$</td><td><code>-</code></td><td>$\pm$</td><td><code>\pm</code></td></tr><tr><td>$\mp$</td><td><code>\mp</code></td><td>$\dotplus$</td><td><code>\dotplus</code></td><td>$\times$</td><td><code>\times</code></td></tr><tr><td>$\div$</td><td><code>\div</code></td><td>$\divideontimes$</td><td><code>\divideontimes</code></td><td>$&#x2F;$</td><td><code>/</code></td></tr><tr><td>$\backslash$</td><td><code>\backslash</code></td><td>$\cdot$</td><td><code>\cdot</code></td><td>$*$</td><td><code>*</code>或<code>\ast</code></td></tr><tr><td>$\star$</td><td><code>\star</code></td><td>$\circ$</td><td><code>\circ</code></td><td>$\bullet$</td><td><code>\bullet</code></td></tr><tr><td>$\boxplus$</td><td><code>\boxplus</code></td><td>$\boxminus$</td><td><code>\boxminus</code></td><td>$\boxtimes$</td><td><code>\boxtimes</code></td></tr><tr><td>$\boxdot$</td><td><code>\boxdot</code></td><td>$\oplus$</td><td><code>\oplus</code></td><td>$\ominus$</td><td><code>\ominus</code></td></tr><tr><td>$\otimes$</td><td><code>\otimes</code></td><td>$\oslash$</td><td><code>\oslash</code></td><td>$\odot$</td><td><code>\odot</code></td></tr><tr><td>$\circleddash$</td><td><code>\circleddash</code></td><td>$\circledcirc$</td><td><code>\circledcirc</code></td><td>$\circledast$</td><td><code>\circledast</code></td></tr><tr><td>$\bigoplus$</td><td><code>\bigoplus</code></td><td>$\bigotimes$</td><td><code>\bigotimes</code></td><td>$\bigodot$</td><td><code>\bigodot</code></td></tr></tbody></table><h3 id="集合相关"><a href="#集合相关" class="headerlink" title="集合相关"></a><a href="#%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3" title="集合相关"></a>集合相关</h3><table><thead><tr><th>符号</th><th>公式</th><th>符号</th><th>公式</th><th>符号</th><th>公式</th></tr></thead><tbody><tr><td>$\{ \}$</td><td><code>\&#123; \&#125;</code></td><td>$\O$</td><td><code>\O</code>, <code>\empty</code>, <code>emptyset</code></td><td>$\varnothing$</td><td><code>\varnothing</code></td></tr><tr><td>$\in$</td><td><code>\in</code></td><td>$\notin$</td><td><code>\notin</code>或<code>\not\in</code></td><td>$\ni$</td><td><code>\ni</code></td></tr><tr><td>$\not\ni$</td><td><code>\not\ni</code></td><td>$\cap$</td><td><code>\cap</code></td><td>$\Cap$</td><td><code>\Cap</code></td></tr><tr><td>$\sqcap$</td><td><code>\sqcap</code></td><td>$\bigcap$</td><td><code>\bigcap</code></td><td>$\cup$</td><td><code>\cup</code></td></tr><tr><td>$\Cup$</td><td><code>\Cup</code></td><td>$\sqcup$</td><td><code>\sqcup</code></td><td>$\bigcup$</td><td><code>\bigcup</code></td></tr><tr><td>$\bigsqcup$</td><td><code>\bigsqcup</code></td><td>$\uplus$</td><td><code>\uplus</code></td><td>$\biguplus$</td><td><code>\biguplus</code></td></tr><tr><td>$\bigvee$</td><td><code>\bigvee</code></td><td>$\bigwedge$</td><td><code>\bigwedge</code></td><td></td><td></td></tr><tr><td>$\setminus$</td><td><code>\setminus</code></td><td>$\smallsetminus$</td><td><code>\smallsetminus</code></td><td>$\times$</td><td><code>\times</code></td></tr><tr><td>$\supset$</td><td><code>\subset</code></td><td>$\Subset$</td><td><code>\Subset</code></td><td>$\sqsubset$</td><td><code>\sqsubset</code></td></tr><tr><td>$\circleddash$</td><td><code>\supset</code></td><td>$\Supset$</td><td><code>\Supset</code></td><td>$\sqsupset$</td><td><code>\sqsupset</code></td></tr><tr><td>$\subseteq$</td><td><code>\subseteq</code></td><td>$\nsubseteq$</td><td><code>\nsubseteq</code></td><td>$\subsetneq$</td><td><code>\subsetneq</code></td></tr><tr><td>$\varsubsetneq$</td><td><code>\varsubsetneq</code></td><td>$\sqsubseteq$</td><td><code>\sqsubseteq</code></td><td></td><td></td></tr><tr><td>$\supseteq$</td><td><code>\supseteq</code></td><td>$\nsupseteq$</td><td><code>\nsupseteq</code></td><td>$\supsetneq$</td><td><code>\supsetneq</code></td></tr><tr><td>$\varsupsetneq$</td><td><code>\varsupsetneq</code></td><td>$\sqsupseteq$</td><td><code>\sqsupseteq</code></td><td></td><td></td></tr><tr><td>$\subseteqq$</td><td><code>\subseteqq</code></td><td>$\nsubseteqq$</td><td><code>\nsubseteqq</code></td><td>$\subsetneqq$</td><td><code>\subsetneqq</code></td></tr><tr><td>$\varsubsetneqq$</td><td><code>\varsubsetneqq</code></td><td></td><td></td><td></td><td></td></tr><tr><td>$\supseteqq$</td><td><code>\supseteqq</code></td><td>$\nsupseteqq$</td><td><code>\nsupseteqq</code></td><td>$\supsetneqq$</td><td><code>\supsetneqq</code></td></tr><tr><td>$\varsupsetneqq$</td><td><code>\varsupsetneqq</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a><a href="#%E5%85%B3%E7%B3%BB%E7%AC%A6%E5%8F%B7" title="关系符号"></a>关系符号</h3><table><thead><tr><th>符号</th><th>公式</th><th>符号</th><th>公式</th><th>符号</th><th>公式</th></tr></thead><tbody><tr><td>$&#x3D;$</td><td><code>=</code></td><td>$\ne$</td><td><code>\ne</code>或<code>\neq</code></td><td>$\equiv$</td><td><code>\equiv</code></td></tr><tr><td>$\not\equiv$</td><td><code>\not\equiv</code></td><td>$\doteq$</td><td><code>\doteq</code></td><td>$\doteqdot$</td><td><code>\doteqdot</code></td></tr><tr><td>$\sim$</td><td><code>\sim</code></td><td>$\nsim$</td><td><code>\nsim</code></td><td>$\backsim$</td><td><code>\backsim</code></td></tr><tr><td>$\thicksim$</td><td><code>\thicksim</code></td><td>$\simeq$</td><td><code>\simeq</code></td><td>$\backsimeq$</td><td><code>\backsimeq</code></td></tr><tr><td>$\eqsim$</td><td><code>\eqsim</code></td><td>$\cong$</td><td><code>\cong</code></td><td>$\ncong$</td><td><code>\ncong</code></td></tr><tr><td>$\approx$</td><td><code>\approx</code></td><td>$\thickapprox$</td><td><code>\thickapprox</code></td><td>$\approxeq$</td><td><code>\approxeq</code></td></tr><tr><td>$\asymp$</td><td><code>\asymp</code></td><td>$\propto$</td><td><code>\propto</code></td><td>$\varpropto$</td><td><code>\varpropto</code></td></tr><tr><td>$&lt;$</td><td><code>&lt;</code></td><td>$\nless$</td><td><code>\nless</code></td><td>$\ll$</td><td><code>\ll</code></td></tr><tr><td>$\not\ll$</td><td><code>\not\ll</code></td><td>$\lll$</td><td><code>\lll</code></td><td>$\not\lll$</td><td><code>\not\lll</code></td></tr><tr><td>$\lessdot$</td><td><code>\lessdot</code></td><td>$\le$</td><td><code>\le</code>或<code>\leq</code></td><td>$\lneq$</td><td><code>\lneq</code></td></tr><tr><td>$\leqq$</td><td><code>\leqq</code></td><td>$\nleq$</td><td><code>\nleq</code></td><td>$\nleqq$</td><td><code>\nleqq</code></td></tr><tr><td>$\lneqq$</td><td><code>\lneqq</code></td><td>$\lvertneqq$</td><td><code>\lvertneqq</code></td><td>$\leqslant$</td><td><code>\leqslant</code></td></tr><tr><td>$\nleqslant$</td><td><code>\nleqslant</code></td><td>$\eqslantless$</td><td><code>\eqslantless</code></td><td>$\lesssim$</td><td><code>\lesssim</code></td></tr><tr><td>$\lnsim$</td><td><code>\lnsim</code></td><td>$\lessapprox$</td><td><code>\lessapprox</code></td><td>$\lnapprox$</td><td><code>\lnapprox</code></td></tr><tr><td>$&gt;$</td><td><code>&gt;</code></td><td>$\ngtr$</td><td><code>\ngtr</code></td><td>$\gg$</td><td><code>\gg</code></td></tr><tr><td>$\not\gg$</td><td><code>\not\gg</code></td><td>$\ggg$</td><td><code>\ggg</code></td><td>$\not\ggg$</td><td><code>\not\ggg</code></td></tr><tr><td>$\gtrdot$</td><td><code>\gtrdot</code></td><td>$\ge$</td><td><code>\ge</code>或<code>\geq</code></td><td>$\gneq$</td><td><code>\gneq</code></td></tr><tr><td>$\geqq$</td><td><code>\geqq</code></td><td>$\ngeq$</td><td><code>\ngeq</code></td><td>$\ngeqq$</td><td><code>\ngeqq</code></td></tr><tr><td>$\gneqq$</td><td><code>\gneqq</code></td><td>$\gvertneqq$</td><td><code>\gvertneqq</code></td><td>$\geqslant$</td><td><code>\geqslant</code></td></tr><tr><td>$\ngeqslant$</td><td><code>\ngeqslant</code></td><td>$\eqslantgtr$</td><td><code>\eqslantgtr</code></td><td>$\gtrsim$</td><td><code>\gtrsim</code></td></tr><tr><td>$\gnsim$</td><td><code>\gnsim</code></td><td>$\gtrapprox$</td><td><code>\gtrapprox</code></td><td>$\gnapprox$</td><td><code>\gnapprox</code></td></tr><tr><td>$\lessgtr$</td><td><code>\lessgtr</code></td><td>$\lesseqgtr$</td><td><code>\lesseqgtr</code></td><td>$\lesseqqgtr$</td><td><code>\lesseqqgtr</code></td></tr><tr><td>$\gtrless$</td><td><code>\gtrless</code></td><td>$\gtreqless$</td><td><code>\gtreqless</code></td><td>$\gtreqqless$</td><td><code>\gtreqqless</code></td></tr></tbody></table><h3 id="逻辑符号"><a href="#逻辑符号" class="headerlink" title="逻辑符号"></a><a href="#%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7" title="逻辑符号"></a>逻辑符号</h3><table><thead><tr><th>符号</th><th>公式</th><th>符号</th><th>公式</th><th>符号</th><th>公式</th></tr></thead><tbody><tr><td>$\forall$</td><td><code>\forall</code></td><td>$\exists$</td><td><code>\exists</code></td><td>$\nexists$</td><td><code>\nexists</code></td></tr><tr><td>$\therefore$</td><td><code>\therefore</code></td><td>$\because$</td><td><code>\because</code></td><td>$\And$</td><td><code>\And</code></td></tr><tr><td>$\or$</td><td><code>\or</code>, <code>\lor</code>, <code>\vee</code></td><td>$\and$</td><td><code>\and</code>, <code>\land</code>, <code>\wedge</code></td><td>$\overline{abc}$</td><td><code>\overline&#123;abc&#125;</code></td></tr><tr><td>$\neg$</td><td><code>\lnot</code>, <code>\neg</code></td><td>$\not\operatorname{R}$</td><td><code>\not\operatorname&#123;R&#125;</code></td><td>$\bar{abc}$</td><td><code>\bar&#123;abc&#125;</code></td></tr></tbody></table><h3 id="各种箭头"><a href="#各种箭头" class="headerlink" title="各种箭头"></a><a href="#%E5%90%84%E7%A7%8D%E7%AE%AD%E5%A4%B4" title="各种箭头"></a>各种箭头</h3><table><thead><tr><th>箭头</th><th>公式</th><th>箭头</th><th>公式</th><th>箭头</th><th>公式</th></tr></thead><tbody><tr><td>$\Rrightarrow$</td><td><code>\Rrightarrow</code></td><td>$\Lleftarrow$</td><td><code>\Lleftarrow</code></td><td>$\Rightarrow$</td><td><code>\Rightarrow</code></td></tr><tr><td>$\nRightarrow$</td><td><code>\nRightarrow</code></td><td>$\Longrightarrow$</td><td><code>\Longrightarrow</code></td><td>$\implies$</td><td><code>\implies</code></td></tr><tr><td>$\Leftarrow$</td><td><code>\Leftarrow</code></td><td>$\nLeftarrow$</td><td><code>\nLeftarrow</code></td><td>$\Longleftarrow$</td><td><code>\Longleftarrow</code></td></tr><tr><td>$\Leftrightarrow$</td><td><code>\Leftrightarrow</code></td><td>$\nLeftrightarrow$</td><td><code>\nLeftrightarrow</code></td><td>$\Longleftrightarrow$</td><td><code>\Longleftrightarrow</code></td></tr><tr><td>$\iff$</td><td><code>\iff</code></td><td>$\Uparrow$</td><td><code>\Uparrow</code></td><td>$\Downarrow$</td><td><code>\Downarrow</code></td></tr><tr><td>$\Updownarrow$</td><td><code>\Updownarrow</code></td><td>$\rightarrow$</td><td><code>\rightarrow</code>, <code>\to</code></td><td>$\nrightarrow$</td><td><code>\nrightarrow</code></td></tr><tr><td>$\longrightarrow$</td><td><code>\longrightarrow</code></td><td>$\leftarrow$</td><td><code>\leftarrow</code>,<code>\gets</code></td><td>$\nleftarrow$</td><td><code>\nleftarrow</code></td></tr><tr><td>$\longleftarrow$</td><td><code>\longleftarrow</code></td><td>$\leftrightarrow$</td><td><code>\leftrightarrow</code></td><td>$\nleftrightarrow$</td><td><code>\nleftrightarrow</code></td></tr><tr><td>$\longleftrightarrow$</td><td><code>\longleftrightarrow</code></td><td>$\uparrow$</td><td><code>\uparrow</code></td><td>$\downarrow$</td><td><code>\downarrow</code></td></tr><tr><td>$\updownarrow$</td><td><code>\updownarrow</code></td><td>$\nearrow$</td><td><code>\nearrow</code></td><td>$\swarrow$</td><td><code>\swarrow</code></td></tr><tr><td>$\nwarrow$</td><td><code>\nwarrow</code></td><td>$\searrow$</td><td><code>\searrow</code></td><td>$\mapsto$</td><td><code>\mapsto</code></td></tr><tr><td>$\longmapsto$</td><td><code>\longmapsto</code></td><td>$\rightharpoonup$</td><td><code>\rightharpoonup</code></td><td>$\rightharpoondown$</td><td><code>\rightharpoondown</code></td></tr><tr><td>$\leftharpoonup$</td><td><code>\leftharpoonup</code></td><td>$\leftharpoondown$</td><td><code>\leftharpoondown</code></td><td>$\upharpoonleft$</td><td><code>\upharpoonleft</code></td></tr><tr><td>$\upharpoonright$</td><td><code>\upharpoonright</code></td><td>$\downharpoonleft$</td><td><code>\downharpoonleft</code></td><td>$\downharpoonright$</td><td><code>\downharpoonright</code></td></tr><tr><td>$\rightleftharpoons$</td><td><code>\rightleftharpoons</code></td><td>$\leftrightharpoons$</td><td><code>\leftrightharpoons</code></td><td>$\curvearrowleft$</td><td><code>\curvearrowleft</code></td></tr><tr><td>$\circlearrowleft$</td><td><code>\circlearrowleft</code></td><td>$\Lsh$</td><td><code>\Lsh</code></td><td>$\upuparrows$</td><td><code>\upuparrows</code></td></tr><tr><td>$\rightrightarrows$</td><td><code>\rightrightarrows</code></td><td>$\rightleftarrows$</td><td><code>\rightleftarrows</code></td><td>$\rightarrowtail$</td><td><code>\rightarrowtail</code></td></tr><tr><td>$\looparrowright$</td><td><code>\looparrowright</code></td><td>$\curvearrowright$</td><td><code>\curvearrowright</code></td><td>$\circlearrowright$</td><td><code>\circlearrowright</code></td></tr><tr><td>$\Rsh$</td><td><code>\Rsh</code></td><td>$\downdownarrows$</td><td><code>\downdownarrows</code></td><td>$\leftleftarrows$</td><td><code>\leftleftarrows</code></td></tr><tr><td>$\leftrightarrows$</td><td><code>\leftrightarrows</code></td><td>$\leftarrowtail$</td><td><code>\leftarrowtail</code></td><td>$\looparrowleft$</td><td><code>\looparrowleft</code></td></tr><tr><td>$\hookrightarrow$</td><td><code>\hookrightarrow</code></td><td>$\hookleftarrow$</td><td><code>\hookleftarrow</code></td><td>$\multimap$</td><td><code>\multimap</code></td></tr><tr><td>$\leftrightsquigarrow$</td><td><code>\leftrightsquigarrow</code></td><td>$\rightsquigarrow$</td><td><code>\rightsquigarrow</code></td><td>$\twoheadrightarrow$</td><td><code>\twoheadrightarrow</code></td></tr><tr><td>$\twoheadleftarrow$</td><td><code>\twoheadleftarrow</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="带帽符号"><a href="#带帽符号" class="headerlink" title="带帽符号"></a><a href="#%E5%B8%A6%E5%B8%BD%E7%AC%A6%E5%8F%B7" title="带帽符号"></a>带帽符号</h3><table><thead><tr><th>效果</th><th>公式</th><th>效果</th><th>公式</th><th>效果</th><th>公式</th></tr></thead><tbody><tr><td>$\dot{a}$</td><td><code>\dot&#123;a&#125;</code></td><td>$\ddot{a}$</td><td><code>\ddot&#123;a&#125;</code></td><td>$\acute{a}$</td><td><code>\acute&#123;a&#125;</code></td></tr><tr><td>$\grave{a}$</td><td><code>\grave&#123;a&#125;</code></td><td>$\check{a}$</td><td><code>\check&#123;a&#125;</code></td><td>$\tilde{a}$</td><td><code>\tilde&#123;a&#125;</code></td></tr><tr><td>$\bar{a}$</td><td><code>\bar&#123;a&#125;</code></td><td>$\hat{a}$</td><td><code>\hat&#123;a&#125;</code></td><td>$\widehat{abc}$</td><td><code>\widehat&#123;abc&#125;</code></td></tr><tr><td>$\vec{a}$</td><td><code>\vec&#123;a&#125;</code></td><td>$\breve{a}$</td><td><code>\breve&#123;a&#125;</code></td><td>$\widetilde{abc}$</td><td><code>\widetilde&#123;abc&#125;</code></td></tr></tbody></table><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a><a href="#%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D" title="希腊字母"></a>希腊字母</h3><h4 id="大写希腊字母"><a href="#大写希腊字母" class="headerlink" title="大写希腊字母"></a><a href="#%E5%A4%A7%E5%86%99%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D" title="大写希腊字母"></a>大写希腊字母</h4><table><thead><tr><th>字母</th><th>公式</th><th>字母</th><th>公式</th><th>字母</th><th>公式</th></tr></thead><tbody><tr><td>$\Alpha$</td><td><code>\Alpha</code></td><td>$\Beta$</td><td><code>\Beta</code></td><td>$\Gamma$</td><td><code>\Gamma</code></td></tr><tr><td>$\Delta$</td><td><code>\Delta</code></td><td>$\Epsilon$</td><td><code>\Epsilon</code></td><td>$\Zeta$</td><td><code>\Zeta</code></td></tr><tr><td>$\Eta$</td><td><code>\Eta</code></td><td>$\Theta$</td><td><code>\Theta</code></td><td>$\Iota$</td><td><code>\Iota</code></td></tr><tr><td>$\Kappa$</td><td><code>\Kappa</code></td><td>$\Lambda$</td><td><code>\Lambda</code></td><td>$\Mu$</td><td><code>\Mu</code></td></tr><tr><td>$\Nu$</td><td><code>\Nu</code></td><td>$\Xi$</td><td><code>\Xi</code></td><td>$\Omicron$</td><td><code>\Omicron</code></td></tr><tr><td>$\Pi$</td><td><code>\Pi</code></td><td>$\Rho$</td><td><code>\Rho</code></td><td>$\Sigma$</td><td><code>\Sigma</code></td></tr><tr><td>$\Tau$</td><td><code>\Tau</code></td><td>$\Upsilon$</td><td><code>\Upsilon</code></td><td>$\Phi$</td><td><code>\Phi</code></td></tr><tr><td>$\Chi$</td><td><code>\Chi​</code></td><td>$\Psi$</td><td><code>\Psi</code></td><td>$\Omega$</td><td><code>\Omega</code></td></tr></tbody></table><p>PS: 如果公式出现标红, 只是因为新版本的MathType不支持在当前页面的显示.</p><h4 id="小写希腊字母"><a href="#小写希腊字母" class="headerlink" title="小写希腊字母"></a><a href="#%E5%B0%8F%E5%86%99%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D" title="小写希腊字母"></a>小写希腊字母</h4><table><thead><tr><th>字母</th><th>公式</th><th>字母</th><th>公式</th><th>字母</th><th>公式</th></tr></thead><tbody><tr><td>$\alpha$</td><td><code>\alpha</code></td><td>$\beta$</td><td><code>\beta</code></td><td>$\gamma$</td><td><code>\gamma</code></td></tr><tr><td>$\delta$</td><td><code>\delta</code></td><td>$\epsilon$</td><td><code>\epsilon</code></td><td>$\zeta$</td><td><code>\zeta</code></td></tr><tr><td>$\eta$</td><td><code>\eta</code></td><td>$\theta$</td><td><code>\theta</code></td><td>$\iota$</td><td><code>\iota</code></td></tr><tr><td>$\kappa$</td><td><code>\kappa</code></td><td>$\lambda$</td><td><code>\lambda</code></td><td>$\mu$</td><td><code>\mu</code></td></tr><tr><td>$\nu$</td><td><code>\nu</code></td><td>$\omicron$</td><td><code>\omicron</code></td><td>$\xi$</td><td><code>\xi</code></td></tr><tr><td>$\pi$</td><td><code>\pi</code></td><td>$\rho$</td><td><code>\rho</code></td><td>$\sigma$</td><td><code>\sigma</code></td></tr><tr><td>$\tau$</td><td><code>\tau</code></td><td>$\upsilon$</td><td><code>\upsilon</code></td><td>$\phi$</td><td><code>\phi</code></td></tr><tr><td>$\chi$</td><td><code>\chi</code></td><td>$\psi$</td><td><code>psi</code></td><td>$\omega$</td><td><code>\omega</code></td></tr></tbody></table><h4 id="部分字母变量专用形式"><a href="#部分字母变量专用形式" class="headerlink" title="部分字母变量专用形式"></a><a href="#%E9%83%A8%E5%88%86%E5%AD%97%E6%AF%8D%E5%8F%98%E9%87%8F%E4%B8%93%E7%94%A8%E5%BD%A2%E5%BC%8F" title="部分字母变量专用形式"></a>部分字母变量专用形式</h4><p>以<code>\var-</code>开头.</p><table><thead><tr><th>字母</th><th>公式</th><th>字母</th><th>公式</th></tr></thead><tbody><tr><td>$\varepsilon$</td><td><code>\varepsilon</code></td><td>$\varrho$</td><td><code>\varrho</code></td></tr><tr><td>$\varphi$</td><td><code>\varphi</code></td><td>$\varsigma$</td><td><code>\varsigma</code></td></tr><tr><td>$\varkappa$</td><td><code>\varkappa</code></td><td>$\vartheta$</td><td><code>\vartheta</code></td></tr><tr><td>$\varpi$</td><td><code>\varpi</code></td><td>$\digamma$</td><td><code>\digamm</code></td></tr></tbody></table><h4 id="类字母和常数"><a href="#类字母和常数" class="headerlink" title="类字母和常数"></a><a href="#%E7%B1%BB%E5%AD%97%E6%AF%8D%E5%92%8C%E5%B8%B8%E6%95%B0" title="类字母和常数"></a>类字母和常数</h4><table><thead><tr><th>字母</th><th>公式</th><th>字母</th><th>公式</th><th>字母</th><th>公式</th></tr></thead><tbody><tr><td>$\infty$</td><td><code>\infty</code></td><td>$\aleph$</td><td><code>\aleph</code></td><td>$\complement$</td><td><code>\complement</code></td></tr><tr><td>$\backepsilon$</td><td><code>\backepsilon</code></td><td>$\eth$</td><td><code>\eth</code></td><td>$\Finv$</td><td><code>\Finv</code></td></tr><tr><td>$\hbar$</td><td><code>\hbar</code></td><td>$\theta$</td><td><code>\Im</code></td><td>$\imath$</td><td><code>\imath</code></td></tr><tr><td>$\jmath$</td><td><code>\jmath</code></td><td>$\Bbbk$</td><td><code>\Bbbk</code></td><td>$\ell$</td><td><code>\ell</code></td></tr><tr><td>$\mho$</td><td><code>\mho</code></td><td>$\wp$</td><td><code>\wp</code></td><td>$\Re$</td><td><code>\Re</code></td></tr><tr><td>$\circledS$</td><td><code>\circledS</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="字体转换"><a href="#字体转换" class="headerlink" title="字体转换"></a><a href="#%E5%AD%97%E4%BD%93%E8%BD%AC%E6%8D%A2" title="字体转换"></a>字体转换</h2><p>用<code>&#123;\字体 &#123;需转换的部分字符&#125;&#125;</code>来变更字体, 公式默认为意大利体.</p><table><thead><tr><th>输入</th><th>说明</th><th>显示</th><th>输入</th><th>说明</th><th>显示</th></tr></thead><tbody><tr><td><code>\rm</code></td><td>罗马体</td><td>${\rm Sample}$</td><td><code>\cal</code></td><td>花体</td><td>${\cal Sample}$</td></tr><tr><td><code>\it</code></td><td>意大利体</td><td>${\it Sample}$</td><td><code>\Bbb</code></td><td>黑板粗体</td><td>${\Bbb Sample}$</td></tr><tr><td><code>\bf</code></td><td>粗体</td><td>${\bf Sample}$</td><td><code>\mit</code></td><td>数学斜体</td><td>${\mit Sample}$</td></tr><tr><td><code>\sf</code></td><td>等线体</td><td>${\sf Sample}$</td><td><code>\scr</code></td><td>手写体</td><td>${\scr Sample}$</td></tr><tr><td><code>\tt</code></td><td>打字机体</td><td>${\tt Sample}$</td><td><code>\frak</code></td><td>旧德式字体</td><td>${\frak Sample}$</td></tr></tbody></table><p>如果想直接从斜体变为非斜体, 可以使用<code>\text&#123;内容&#125;</code>.<br>$$<br>\begin{array}{cc}<br>\mathrm{Bad} &amp; \mathrm{Better} \\<br>\hline \\<br>\int_0^1 x^2 dx &amp; \int_0^1 x^2 \,{\rm d}x<br>\end{array}<br>$$</p><h2 id="更改字体颜色"><a href="#更改字体颜色" class="headerlink" title="更改字体颜色"></a><a href="#%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2" title="更改字体颜色"></a>更改字体颜色</h2><p><code>MathJax3</code>还不支持渲染字体的颜色, 大多数情况下这个颜色也是一个鸡肋功能. 如果想知道如何添加可以看文章最开头说的两篇博客, 里面有写到更改颜色的详细方法.</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://masikkk.com/article/MathJax/">MathJax数学公式</a></li><li><a href="https://adaning.github.io/posts/54490.html">Markdown公式整理l</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown使用规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云里雾里卡尔曼滤波</title>
      <link href="/2023/10/08/yun-li-wu-li-qia-er-man-lu-bo/"/>
      <url>/2023/10/08/yun-li-wu-li-qia-er-man-lu-bo/</url>
      
        <content type="html"><![CDATA[<h1 id="卡尔曼滤波简介"><a href="#卡尔曼滤波简介" class="headerlink" title="卡尔曼滤波简介"></a>卡尔曼滤波简介</h1><ul><li><strong>目的</strong> ：对线性系统状态的估计</li></ul><p>卡尔曼滤波（Kalman filtering）一种利用线性系统状态方程，通过系统输入输出观测数据，对系统状态进行最优估计的算法。由于观测数据中包括系统中的噪声和干扰的影响，所以最优估计也可看作是滤波过程。 斯坦利·施密特(Stanley Schmidt)首次实现了卡尔曼滤波器。卡尔曼在NASA埃姆斯研究中心访问时，发现他的方法对于解决阿波罗计划的轨道预测很有用，后来阿波罗飞船的导航电脑使用了这种滤波器。  </p><h1 id="卡尔曼滤波原理"><a href="#卡尔曼滤波原理" class="headerlink" title="卡尔曼滤波原理"></a>卡尔曼滤波原理</h1><ul><li><strong>方法</strong> ：利用状态过程中的噪声ω 和 观测噪声υ ，给予合理的权重，对状态x 进行估计</li></ul><p>详解的原文链接：<a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/">http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/</a> 对此，进行一些简单的描述，只求通俗易懂： 假如想开发了一个可以在树林里到处跑的小机器人，那么需要知道它实时所在的位置，才能导航。 可以在机器人上装GPS定位装置，精度大约为10米， 但树林里有很多沟壑和悬崖，如果机器人走错了一步，就有可能掉下悬崖，所以这远远不够。 此时还可以获取一些运动的信息: 添加里程计和惯性惯性测量单元记录运动的过程，判断出机器人的姿势和行走距离。 获取发送给电机的指令，知道机器人是否在朝一个方向移动并且没有人干预，预测在下一个状态，机器人很可能朝着相同的方向移动。 但由于传感器的精度、树林里的坑坑洼洼和自然界的风等影响，里程计和惯性测量单元实际并不能非常精确表示机器人实际姿势和行走距离，预测也不是很完美。 GPS 、里程计和惯性测量单元等传感器告诉了我们一些状态信息，我们的预测告诉了我们机器人会怎样运动，但都只是间接的，并且伴随着一些不确定和不准确性。 但是，如果使用所有对我们可用的信息，根据其本身的噪声，分配一定的权重，就能得到一个比任何依据自身估计更好的结果，这就是卡尔曼滤波的用处。    </p><h1 id="卡尔曼滤波的五个公式"><a href="#卡尔曼滤波的五个公式" class="headerlink" title="卡尔曼滤波的五个公式"></a>卡尔曼滤波的五个公式</h1><p>先了解一下卡尔曼滤波的五个公式：</p><ul><li><strong>公式1</strong>：计算预测状态值</li></ul><p>$$<br>x_{k}^\prime&#x3D;A x_{k-1} + Bu_{k-1}<br>$$</p><p>$$<br>\hat{a}<br>$$</p><p>$$<br>a^\prime<br>$$</p><ul><li><p><strong>公式2</strong>：计算预测值和真实值之间的预测误差协方差矩阵<br>$$<br>P_{k}^\prime &#x3D;A P_{k-1} A^T+Q<br>$$</p></li><li><p><strong>公式3</strong>：求得卡尔曼增益<br>$$<br>K_k &#x3D;P_{k}^\prime H^T(H P_{k}^\prime H^T+R)^{-1}<br>$$</p></li><li><p><strong>公式4</strong>：计算估计值<br>$$<br>x_k &#x3D;x_{k}^\prime+K_k(Z_k-H x_{k}^\prime)<br>$$</p></li><li><p><strong>公式5</strong>：计算估计值和真实值之间的误差协方差矩阵<br>$$<br>P_k &#x3D;(I-K_k H) P_{k}^\prime<br>$$</p></li></ul><h1 id="卡尔曼滤波的公式推导"><a href="#卡尔曼滤波的公式推导" class="headerlink" title="卡尔曼滤波的公式推导"></a>卡尔曼滤波的公式推导</h1><h2 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h2><p>$x_k: {k}$ 时刻的状态<br>$\hat{x}_{k}^\prime: k$ 时刻的预测状态 (未优化)<br>$\hat{x}_k: k$ 时刻的优化预测状态<br>$\tilde{x}_k: k$ 时刻的状态新息 (状态 - 预测状态)  </p><p>$Z_k: {k}$ 时刻的观测值<br>$\hat{Z}_{k}^\prime: {k}$ 时刻的预测观测值 (未优化)<br>$\hat{Z}_k: {k}$ 时刻的优化预测观测值<br>$\tilde{Z}_k: {k}$ 时刻的观测新息 (观测 - 预测观测)  </p><p>$A$ : 状态转移矩阵<br>$B$ ：输入控制矩阵<br>$H$ : 观测矩阵<br>$Q$ : 预测噪声协方差矩阵<br>$R$ : 观测噪声协方差矩阵<br>$P$ : 误差矩阵  </p><p>$K_k: {k}$ 时刻的卡尔曼增益 (观测权重)<br>$\omega_k: {k}$ 时刻的过程噪声<br>${v}_k: {k}$ 时刻的观测噪声<br>$u_k: {k}$ 时刻外界对系统的作用  </p><h2 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h2><h3 id="高斯分布"><a href="#高斯分布" class="headerlink" title="高斯分布"></a>高斯分布</h3><p>通过概率密度函数来定义高斯分布： </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/3-13.png" alt="3">  </p><p>高斯分布的概率密度函数是：<br>$$<br>p(y)&#x3D;\frac{1}{\sigma \sqrt{2 \pi}} e^{-\frac{(y-\mu)^2}{2 \sigma^2}}<br>$$</p><p>均值为$μ$，标准差为$σ$ 而上述的过程噪声$\omega$ 和 观测噪声$\upsilon$皆服从高斯分布。  </p><h3 id="协方差矩阵"><a href="#协方差矩阵" class="headerlink" title="协方差矩阵"></a>协方差矩阵</h3><ul><li><p><strong>方差</strong>：各个样本与样本均值的差的平方和的均值，度量一组数据的分散程度。 </p></li><li><p><strong>协方差</strong>：两个变量总体误差的期望，度量两个变量线性相关性程度。 当两个变量是相同的情况，协方差就是方差。 如果两个变量的变化趋势相反，其中一个变量大于自身的期望值时，另外一个却小于自身的期望值，那么两个变量之间的协方差就是负值。 两者之间的联系或者关系，关系越大，协方差越大。 </p></li><li><p><strong>协方差矩阵</strong>：数据集中两两变量的协方差组成，每个元素是各个向量元素之间的协方差 噪声协方差矩阵越小说明噪声的误差越小，可信度越高，其对角线上的值就是方差。 误差协方差矩阵越小说明过程噪声和量测噪声的关系越小，用比例分开过程噪声$\omega$ 和 观测噪声$\upsilon$，如果关系越小，分开的越精确。比如一堆白砂糖和盐，如果两种混合的很均匀，说它关系很大，也就越难用比例的方法将其分开。</p></li></ul><p>  </p><h2 id="更新优化的状态估计值"><a href="#更新优化的状态估计值" class="headerlink" title="更新优化的状态估计值"></a>更新优化的状态估计值</h2><p>假定k时刻的系统状态与k-1时刻有关，并且内部有噪声，则:</p><ul><li>状态方程<br>$$x_k&#x3D;Ax_{k-1}+ω_{k-1}$$</li><li>观测方程<br>$$Z_k&#x3D;Hx_k+υ_k$$</li></ul><h2 id="4-4-求优化预测状态"><a href="#4-4-求优化预测状态" class="headerlink" title="4.4. 求优化预测状态"></a>4.4. 求优化预测状态</h2><p>在无噪声情况下的预测</p><ul><li>预测状态<br>$$<br>\hat{x}<em>{k}^\prime&#x3D;A\hat{x}</em>{k-1}^\prime<br>$$</li><li>预测观测<br>$$\hat{Z}<em>{k}^\prime&#x3D;H\hat{x}</em>{k}^\prime&#x3D;HA\hat{x}_{k-1}^\prime$$</li><li>观测新息(观测-预测观测)<br>$$\hat{Z}<em>k&#x3D;Z_k-\hat{Z}</em>{k}^\prime $$</li></ul><p>观测新息反应了预测噪声$\omega$和观测噪声$\upsilon$对状态的综合影响<br>将过程噪声$ωk$ 看作一个 <strong>新息 $\times$ 比例</strong>，则  </p><ul><li>优化预测状态</li></ul><p>$$<br>\hat{x}<em>k&#x3D;A \hat{x}</em>{k-1}+K_k \tilde{Z}<em>k&#x3D;A \hat{x}</em>{k-1}+K_k(Z_k-H \hat{x}_{k}^\prime)<br>$$</p><blockquote><p>仅卡尔曼增益$K_k$为未知时  </p></blockquote><h2 id="4-5-求卡尔曼增益"><a href="#4-5-求卡尔曼增益" class="headerlink" title="4.5. 求卡尔曼增益"></a>4.5. 求卡尔曼增益</h2><p>误差协方差矩阵： </p><p>$$<br>P_k&#x3D;E[\tilde{x},\tilde{x}_{k}^{T}]<br>$$</p><p>而卡尔曼增益$K_k$应该使误差协方差矩阵$P_k$最小 </p><ul><li>状态新息(状态 - 预测状态)</li></ul><p>$$<br>\begin{aligned}<br>\hat{x}<em>k<br>&amp;&#x3D;x_k-\hat{x}<em>k\<br>&amp;&#x3D;Ax</em>{k-1}+\omega</em>{k-1}-[A\hat{x}<em>{k-1}+K_k(Z_k-H\hat{x}</em>{k}^\prime)]\<br>&amp;&#x3D;Ax_{k-1}+\omega_{k-1}-[A\hat{x}<em>{k-1}+K_k(Hx_k+\upsilon_k-HA\hat{x}</em>{k-1})]\<br>&amp;&#x3D;Ax_{k-1}+\omega_{k-1}-{(I-K_kH)A\hat{x}<em>{k-1}+K_k[H(AX</em>{k-1}+\omega_{k-1})+\upsilon_k]}\<br>&amp;&#x3D;Ax_{k-1}-(I-K_kH)A\hat{x}<em>{k-1}-K_kHAx</em>{k-1}+(I-K_kH)\omega_{k-1}-K_k\nu_k\&amp;&#x3D;(I-K_kH)Ax_{k-1}-(I-K_kH)A\hat{x}<em>{k-1}+(I-K_kH)\omega</em>{k-1}-K_k\mathrm{u}<em>k\<br>&amp;&#x3D;(I-K_kH)A(x</em>{k-1}-\hat{x}<em>{k-1})+(I-K_kH)\omega</em>{k-1}-K_k\mathrm{u}<em>k\<br>&amp;&#x3D;(I-K_kH)[A(x</em>{k-1}-\hat{x}<em>{k-1})+\omega</em>{k-1}]-K_k\mathrm{u}_k<br>\end{aligned}<br>$$<br>假设在无噪声情况下，状态新息:</p><p>$$<br>\tilde{x}<em>k&#x3D;(I-K_k H) A(x</em>{k-1}-\hat{x}<em>{k-1})&#x3D;(I-K_k H)(x_k-\hat{x}</em>{k}^\prime)<br>$$ </p><p>则误差协方差矩阵：</p><p>$$<br>P_k&#x3D;E[\tilde{x}<em>k \tilde{x}</em>{k}^T]&#x3D;E[[(I-K_k H)(x_k-\hat{x}<em>{k}^\prime)][(I-K_k H)(x_k-\hat{x}</em>{k}^\prime)]^T]<br>$$</p><p>此时，来看看预测误差协方差矩阵：<br>$$<br>{\cal P}<em>{k}^\prime&#x3D;E[{\tilde{x}}</em>{k}^\prime{\tilde{x}}<em>{k}^\prime{}^{T}\bigr]&#x3D;E[(x</em>{k}-{\hat{x}}<em>{k}^\prime)(x</em>{k}-{\hat{x}}_{k}^\prime)^{T}\bigr]<br>$$ </p><p>此时，再把误差协方差矩阵展开：<br>$$<br>\begin{aligned}<br>{P_{k}}&amp;&#x3D;(I-K_{k}H)E<a href="I-K_%7Bk%7DH">[(x_{k}-\hat{x}<em>{k}^\prime)][(x</em>{k}-\hat{x}_{k}^\prime)]^{T}</a>^{T}+K_{k}E[{\upsilon}<em>{k}\upsilon</em>{k}^{T}]{K}<em>{k}^{T}\<br>&amp;&#x3D;(I-K</em>{k}H)P_{k}^\prime(I-K_{k}H)^{T}+K_{k}RK_{k}^{T}\<br>&amp;&#x3D;(P_{k}^\prime-K_{k}HP_{k}^\prime)(I-K_{k}H)^{T}+K_{k}RK_{k}^{T}\<br>&amp;&#x3D;P_{k}^\prime-K_{k}HP_{k}^\prime-P_{k}^\primeH^{T}K_{k}^{T}+K_{k}HP_{k}^\primeH^{T}K_{k}^{T}+K_{k}RK_{k}^{T}\<br>&amp;&#x3D;P_{k}^\prime-K_{k}HP_{k}^\prime-P_{k}^\primeH^{T}K_{k}^{T}+K_{k}(HP_{k}^\primeH^{T}+R)K_{k}^{T}<br>\end{aligned}<br>$$</p><p>若使用T表示误差协方差矩阵的对角线，则   </p><p>$$<br>T[P_{k}]&#x3D;T[P_{k}^\prime]-2T[K_{k}HP_{k}^\prime]+T[K_{k}(HP_{k}^\primeH^{T}+R){K_{k}}^{T}]<br>$$</p><p>对T[Pk ]求导，就可找到最小的均方差，使T[Pk ]最小，就能得到卡尔曼增益Kk 对T[Pk ]求导： </p><p>$$<br>\frac{d(T[P_k])}{dK_k}&#x3D;-2(HP_{k}^\prime)^T+2K_k(HP_{k}^\primeH^T+R)<br>$$</p><p>令其为0，则卡尔曼增益：</p><p>$$<br>K_{k}&#x3D;P_{K}^\primeH^{T}(HP_{K}^\primeH^{T}+R)^{-1}<br>$$</p><p>其中观测矩阵H和观测噪声协方差矩阵R为常数，所以卡尔曼增益Kk与预测误差协方差矩阵Pk’ 有关  </p><h2 id="4-6-求预测误差协方差矩阵"><a href="#4-6-求预测误差协方差矩阵" class="headerlink" title="4.6. 求预测误差协方差矩阵"></a>4.6. 求预测误差协方差矩阵</h2><p>假设观测矩阵 <em>H</em> &#x3D; 1，那么卡尔曼增益： </p><p>$$<br>K_{k}&#x3D;P_{K}^\prime(P_{K}^\prime+R)^{-1}&#x3D;\frac{1}{1+\frac{R}{P_{K}^\prime}}<br>$$ </p><p>则$P_{k}^\prime$ 越大，$K_k$越大，权重重视反馈测量 则$P_{k}^\prime$ 越小，$K_k$越小，权重重视预测值   此时，来看看下一状态的预测误差协方差矩阵：</p><p>$$<br>\begin{aligned}P_{k+1}’&amp;&#x3D;E[\tilde{x}<em>{k+1}^\prime\tilde{x}</em>{k+1}^\prime\bigr]\&amp;&#x3D;E[(x_{k+1}-\hat{x}<em>{k+1}^\prime)(x</em>{k+1}-\hat{x}_{k+1}^\prime)^T\bigr]\&amp;&#x3D;E[(Ax_k+:\omega_k-A\hat{x}_k)(Ax_k+:\omega_k-A\hat{x}_k)^T\bigr]\&amp;&#x3D;E[(A(x_k-\hat{x}_k)+:\omega_k)(A(x_k-\hat{x}_k)+:\omega_k)^T\bigr]\end{aligned}<br>$$</p><p>因为状态x 和过程噪声ωk是独立的，所以再简化 </p><p>$$<br>\begin{aligned}P_{k+1}^\prime&amp;&#x3D;E[(A\tilde{x}<em>{k}+:\omega</em>{k})(A\tilde{x}<em>{k}+:\omega</em>{k})^{T}]\&amp;&#x3D;E[(A\tilde{x}<em>{k})(A\tilde{x}</em>{k})^{T}]+E[\omega_{k}\omega_{k}^{T}]\&amp;&#x3D;AP_{k}A^{T}+:Q\end{aligned}<br>$$</p><p>  其中状态转移矩阵$A$和预测噪声协方差矩阵$Q$为常数，所以预测误差协方差矩阵$P_{k}^\prime$ 与上一状态的误差协方差矩阵$P_{k-1}$有关  </p><h2 id="4-7-求误差协方差矩阵"><a href="#4-7-求误差协方差矩阵" class="headerlink" title="4.7. 求误差协方差矩阵"></a>4.7. 求误差协方差矩阵</h2><p>$$<br>\begin{aligned}<br>P_{k}&amp;&#x3D;P_{k}^\prime-K_{k}HP_{k}^\prime-P_{k}^\primeH^\primeK_{k}^\prime+K_{k}(HP_{k}^\primeH^\prime+R){K_{k}}^\prime\<br>&amp;&#x3D;P_{k}^\prime-P_{k}^\primeH^\prime(HP_{k}^\primeH^\prime+R)^{-1}HP_{k}^\prime-P_{k}^\primeH^\prime[P_{k}^\primeH^\prime(HP_{k}^\primeH^\prime+R)^{-1}]^{T}+\<br>&amp;P_{k}^\primeH^\prime[P_{k}^\primeH^\prime(HP_{k}^\primeH^\prime+R)^{-1}]^{T}\<br>&amp;&#x3D;P_{k}^\prime-P_{k}^\primeH^\prime(HP_{K}^\primeH^\prime+R)^{-1}HP_{k}^\prime\<br>&amp;&#x3D;P_{k}^\prime-K_{k}HP_{k}^\prime\<br>&amp;&#x3D;(I-K_{k}H)P_{k}^\prime<br>\end{aligned}<br>$$</p><h2 id="4-8-加入外界对系统的作用"><a href="#4-8-加入外界对系统的作用" class="headerlink" title="4.8. 加入外界对系统的作用"></a>4.8. 加入外界对系统的作用</h2><p>在加入外界对系统的作用时，可整理出卡尔曼滤波的五个公式：</p><ul><li><p>预测<br>$$<br>\begin{array}{rcl}{\hat{x}<em>{k}^\prime&#x3D;}&amp;{A\hat{x}</em>{k-1}+}&amp;{B:{u}<em>{k-1}}\{P</em>{k}^\prime&#x3D;}&amp;{AP_{k-1}A^{T}+}&amp;{Q}\\end{array}<br>$$</p></li><li><p>校正<br>$$<br>\begin{aligned}{rcl}{K_{k}&#x3D;}&amp;{P_{K}^\primeH^{T}(HP_{k}^\primeH^{T}+R)^{-1}}\{x_{k}&#x3D;}&amp;{x_{K}^\prime+K_{k}(Z_{k}-Hx_{k}^\prime)}\{P_{k}~&#x3D;}&amp;{(I-K_{k}H)P_{k}^\prime}\\end{aligned}<br>$$</p></li></ul><h2 id="5-卡尔曼滤波应用"><a href="#5-卡尔曼滤波应用" class="headerlink" title="5. 卡尔曼滤波应用"></a>5. 卡尔曼滤波应用</h2><p>用python来简单说明  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdelta_t <span class="token operator">=</span> <span class="token number">0.1</span>                               <span class="token comment"># 每秒钟采一次样</span>end_t <span class="token operator">=</span> <span class="token number">7</span>                                   <span class="token comment"># 时间长度</span>time_t <span class="token operator">=</span> end_t <span class="token operator">*</span> <span class="token number">10</span>                         <span class="token comment"># 采样次数</span>t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end_t<span class="token punctuation">,</span> delta_t<span class="token punctuation">)</span>            <span class="token comment"># 设置时间数组</span>u <span class="token operator">=</span> <span class="token number">1</span>                                       <span class="token comment"># 定义外界对系统的作用 加速度</span>x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> u <span class="token operator">*</span> t <span class="token operator">**</span> <span class="token number">2</span>                      <span class="token comment"># 实际真实位置</span>v_var <span class="token operator">=</span> <span class="token number">1</span>                                   <span class="token comment"># 测量噪声的方差</span><span class="token comment"># 创建高斯噪声，精确到小数点后两位</span>v_noise <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v_var<span class="token punctuation">,</span> time_t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                      <span class="token comment"># 定义预测优化值的初始状态</span>v <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>v_noise<span class="token punctuation">)</span>                         <span class="token comment"># 定义测量噪声</span>z <span class="token operator">=</span> x <span class="token operator">+</span> v                                   <span class="token comment"># 定义测量值（假设测量值=实际状态值+噪声）</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> delta_t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># 定义状态转移矩阵</span>B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>delta_t <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>delta_t<span class="token punctuation">]</span><span class="token punctuation">]</span>   <span class="token comment"># 定义输入控制矩阵</span>P <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment"># 定义初始状态协方差矩阵</span>Q <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 定义状态转移(预测噪声)协方差矩阵</span>H <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                          <span class="token comment"># 定义观测矩阵</span>R <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                             <span class="token comment"># 定义观测噪声协方差</span>X_mat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>time_t<span class="token punctuation">)</span>                    <span class="token comment"># 初始化记录系统预测优化值的列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>time_t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 预测</span>    X_predict <span class="token operator">=</span> A <span class="token operator">*</span> X <span class="token operator">+</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>B<span class="token punctuation">,</span> u<span class="token punctuation">)</span>        <span class="token comment"># 估算状态变量</span>    P_predict <span class="token operator">=</span> A <span class="token operator">*</span> P <span class="token operator">*</span> A<span class="token punctuation">.</span>T <span class="token operator">+</span> Q             <span class="token comment"># 估算状态误差协方差</span>    <span class="token comment"># 校正</span>    K <span class="token operator">=</span> P_predict <span class="token operator">*</span> H<span class="token punctuation">.</span>T <span class="token operator">/</span> <span class="token punctuation">(</span>H <span class="token operator">*</span> P_predict <span class="token operator">*</span> H<span class="token punctuation">.</span>T <span class="token operator">+</span> R<span class="token punctuation">)</span>     <span class="token comment"># 更新卡尔曼增益</span>    X <span class="token operator">=</span> X_predict <span class="token operator">+</span> K <span class="token operator">*</span> <span class="token punctuation">(</span>z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">-</span> H <span class="token operator">*</span> X_predict<span class="token punctuation">)</span>       <span class="token comment"># 更新预测优化值</span>    P <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> K <span class="token operator">*</span> H<span class="token punctuation">)</span> <span class="token operator">*</span> P_predict                 <span class="token comment"># 更新状态误差协方差</span>    <span class="token comment"># 记录系统的预测优化值</span>    X_mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>    <span class="token comment"># 设置正常显示中文</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'实际状态值'</span><span class="token punctuation">)</span>             <span class="token comment"># 设置曲线数值</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X_mat<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'预测优化值'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>z<span class="token punctuation">.</span>T<span class="token punctuation">,</span> <span class="token string">"r--"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'测量值'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>                               <span class="token comment"># 设置X轴的名字</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"位移"</span><span class="token punctuation">)</span>                               <span class="token comment"># 设置Y轴的名字</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"卡尔曼滤波示意图"</span><span class="token punctuation">)</span>                     <span class="token comment"># 设置标题</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment"># 设置图例</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                                      <span class="token comment"># 显示图表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  运行上面的卡尔曼滤波，得到下图：   <img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/9-5.png" alt="9">   可以看出，尽管测量值波动很大，但最终的预测优化值与实际状态值相差不大。</p><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://blog.csdn.net/qq_32618327/article/details/89669062">卡尔曼滤波的理解、推导和应用</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><p>python的代码地址<br><a href="https://github.com/JoveH-H/A-simple-explanation/blob/master/Kalman/_filtering.py">https://github.com/JoveH-H/A-simple-explanation/blob/master/Kalman\_filtering.py</a></p></li><li><p>jupyter notebook的代码地址<br><a href="https://github.com/JoveH-H/A-simple-explanation/blob/master/ipynb/Kalman/_filtering.ipynb">https://github.com/JoveH-H/A-simple-explanation/blob/master/ipynb/Kalman\_filtering.ipynb</a></p></li><li><p>卡尔曼滤波 – 从推导到应用(一)<br><a href="https://blog.csdn.net/heyijia0327/article/details/17487467#">https://blog.csdn.net/heyijia0327/article/details/17487467#</a> </p></li><li><p>卡尔曼滤波 – 从推导到应用(二)<br><a href="https://blog.csdn.net/heyijia0327/article/details/17667341">https://blog.csdn.net/heyijia0327/article/details/17667341</a> </p></li><li><p>卡尔曼滤波算法–核心公式推导导论<br><a href="https://zhuanlan.zhihu.com/p/24312995">https://zhuanlan.zhihu.com/p/24312995</a> </p></li><li><p>详解卡尔曼滤波原理<br><a href="http://baijiahao.baidu.com/s?id=1604230489177143048&amp;wfr=spider&amp;for=pc">http://baijiahao.baidu.com/s?id=1604230489177143048&amp;wfr=spider&amp;for=pc</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 卡尔曼滤波 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卡尔曼滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像高斯模糊原理</title>
      <link href="/2023/09/20/tu-xiang-gao-si-mo-hu-yuan-li/"/>
      <url>/2023/09/20/tu-xiang-gao-si-mo-hu-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1-高斯模糊介绍"><a href="#1-高斯模糊介绍" class="headerlink" title="1. 高斯模糊介绍"></a>1. 高斯模糊介绍</h1><p><a href="https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/10885810?fr=aladdin">高斯模糊</a>（英语：Gaussian Blur），也叫高斯平滑，是在Adobe Photoshop、GIMP以及Paint.NET等图像处理软件中广泛使用的处理效果，通常用它来减少图像噪声以及降低细节层次。这种模糊技术生成的图像，其视觉效果就像是经过一个_半透明屏幕_在观察图像，这与镜头焦外成像效果散景以及普通照明阴影中的效果都明显不同。高斯平滑也用于计算机视觉算法中的预先处理阶段，以增强图像在不同比例大小下的图像效果（参见尺度空间表示以及尺度空间实现）。 从数学的角度来看，图像的高斯模糊过程就是<strong>图像与正态分布做卷积</strong>。由于<a href="https://so.csdn.net/so/search?q=%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83&spm=1001.2101.3001.7020">正态分布</a>又叫作高斯分布，所以这项技术就叫作高斯模糊。图像与圆形方框模糊做卷积将会生成更加精确的焦外成像效果。由于高斯函数的傅立叶变换是另外一个高斯函数，所以高斯模糊对于图像来说就是一个低通滤波器。</p><h1 id="2-高斯模糊原理"><a href="#2-高斯模糊原理" class="headerlink" title="2. 高斯模糊原理"></a>2. 高斯模糊原理</h1><h2 id="2-1-矩阵范围的像素平均值"><a href="#2-1-矩阵范围的像素平均值" class="headerlink" title="2.1 矩阵范围的像素平均值"></a>2.1 矩阵范围的像素平均值</h2><p>“模糊”，就是将图像中每个像素值进行重置的过程，这个过程采用将每一个像素都设置成周边像素的平均值。<br><img src="https://img-blog.csdnimg.cn/20190710164929254.png#pic_center"><br>上图中，2是中间点，周边点都是1。假设周边的点对中间点的影响都是相同的，即构造的卷积算子如下：<br><img src="https://img-blog.csdnimg.cn/20190710165031905.png#pic_center"><br>然后计算求和：<br><img src="https://img-blog.csdnimg.cn/20190710165104885.png#pic_center"><br>将图中‘2’置为：<br><img src="https://img-blog.csdnimg.cn/20190710165130993.png#pic_center"><br>“中间点”取”周围点”的平均值，变成10&#x2F;9。在数值上，这是一种”平滑化”。在图形上，就相当于产生”模糊”效果，”中间点”失去细节。<br>显然，计算平均值时，取值范围越大，”模糊效果”越强烈。如下三幅图，分别表示原图，3X3和5X5的模糊效果图。<br><img src="https://img-blog.csdnimg.cn/20190710165231413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20190710165240445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20190710165251475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"><br>接下来的问题就是，既然每个点都要取周边像素的平均值，那么应该如何分配权重呢？<br>如果使用简单平均，显然不是很合理，因为图像都是连续的，越靠近的点关系越密切，越远离的点关系越疏远。因此，加权平均更合理，距离越近的点权重越大，距离越远的点权重越小。</p><h2 id="2-2-正态分布的权重"><a href="#2-2-正态分布的权重" class="headerlink" title="2.2 正态分布的权重"></a>2.2 正态分布的权重</h2><p>正态分布显然是一种可取的权重分配模式。<br>在图形上，正态分布是一种钟形曲线，越接近中心，取值越大，越远离中心，取值越小。<br>计算平均值的时候，我们只需要将”中心点”作为原点，其他点按照其在正态曲线上的位置，分配权重，就可以得到一个加权平均值。<br><strong>高斯函数</strong>：<br><img src="https://img-blog.csdnimg.cn/20190710165445985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"><br>正态分布的密度函数叫做”高斯函数”（Gaussian function）。它的一维形式是：<br><img src="https://img-blog.csdnimg.cn/20190710165500256.png#pic_center"><br>其中，μ是x的均值，σ是x的方差。因为计算平均值的时候，中心点就是原点，所以μ等于0。<br><img src="https://img-blog.csdnimg.cn/20190710165619153.png#pic_center"><br>上面的正态分布是一维的，图像都是二维的，所以我们需要二维的正态分布。<br><img src="https://img-blog.csdnimg.cn/20190710165637205.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20190710165647749.png#pic_center"><br>有了这个函数 ，就可以计算每个点的权重了。<br><strong>权重矩阵：</strong><br>假定中心点的坐标是（0,0），那么距离它最近的8个点的坐标如下：<br><img src="https://img-blog.csdnimg.cn/20190710165732243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"><br>更远的点以此类推。<br>为了计算权重矩阵，需要设定σ的值。假定σ&#x3D;1.5（σ值越大图像越平滑&#x2F;模糊），则模糊半径为1的权重矩阵如下：<br><img src="https://img-blog.csdnimg.cn/20190710165814728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"><br>这9个点的权重总和等于0.4787147，如果只计算这9个点的加权平均，还必须让它们的权重之和等于1，因此上面9个值还要分别除以0.4787147，得到最终的权重矩阵<br><img src="https://img-blog.csdnimg.cn/20190710165827157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"></p><h1 id="3-计算高斯模糊"><a href="#3-计算高斯模糊" class="headerlink" title="3. 计算高斯模糊"></a>3. 计算高斯模糊</h1><p>有了权重矩阵，就可以计算高斯模糊的值了。假设现有9个像素点，灰度值（0-255）如下：<br><img src="https://img-blog.csdnimg.cn/20190710165929224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"><br>每个点乘以自己的权重值：<br><img src="https://img-blog.csdnimg.cn/20190710165945192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjA4ODUx,size_16,color_FFFFFF,t_70#pic_center"><br>将这9个值加起来，就是中心点的高斯模糊的值。<br>对所有点重复这个过程，就得到了高斯模糊后的图像。如果原图是彩色图片，可以对RGB三个通道分别做高斯模糊。</p><p>参考文章：<a href="https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/10885810?fr=aladdin">https://baike.baidu.com/item/高斯模糊/10885810?fr=aladdin</a><br><a href="https://www.jianshu.com/p/302a895c12dd">https://www.jianshu.com/p/302a895c12dd</a><br>图像处理系列笔记： <a href="https://blog.csdn.net/qq_33208851/article/details/95335809">https://blog.csdn.net/qq_33208851&#x2F;article&#x2F;details&#x2F;95335809</a></p><p>本文转自 <a href="https://blog.csdn.net/qq_33208851/article/details/95349944">https://blog.csdn.net/qq_33208851/article/details/95349944</a>，如有侵权，请联系删除。</p>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用图像变换</title>
      <link href="/2023/09/20/chang-yong-tu-xiang-bian-huan/"/>
      <url>/2023/09/20/chang-yong-tu-xiang-bian-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="形态学变换"><a href="#形态学变换" class="headerlink" title="形态学变换"></a>形态学变换</h1><p>形态学变换是一组用于图像处理中的数学操作，用于改变图像中物体的形状、大小和结构。这些操作通常用于处理二值图像（黑白图像），用于分割图像中的物体、去除噪声、查找轮廓等，最初是为了分析和处理二值图像中的形状、结构和特征而开发的。</p><h2 id="腐蚀与膨胀"><a href="#腐蚀与膨胀" class="headerlink" title="腐蚀与膨胀"></a>腐蚀与膨胀</h2><p>与卷积操作类似(嗯… 什么是卷积…<a href="https://setosa.io/ev/image-kernels/">点我查看</a>),假设有图像A和结构元素B,结构元素B在A上面移动,其中B定义其中心为锚点，计算B覆盖下A的最大像素值用来替换锚点的像素，其中B作为结构体可以是任意形状。随着锚点在图像上的移动，结构B就可对图像上的每个像素进行处理。</p><p>膨胀操作用于扩大图像中的白色区域，即通过结构元素的移动来扩展白色像素。如果结构元素的中心覆盖了至少一个白色像素，则中心位置的像素被置为白色。膨胀操作通常用于填充空洞、连接断开的对象和扩展物体。腐蚀和膨胀是数学形态学最基本的变换。</p><p>图像膨胀主要针对的是阈值化后的图像。图像膨胀类似于“领域被扩张”，将图像中的高亮区域或白色部分进行扩增粗化，其运行结果图比原图的高亮区域更大。其原理是：将核在原始图像中进行遍历，然后将原始图像遍历到的像素点的值与自定义卷积核(全为1的二维矩阵)得值进行与运算，像素点与对应核一 一对应进行与，当卷积核对应的元素值只要有一个为1时，设置卷积核中心值的像素点为1，如果全为0，,则其值设置为0。</p><p>图像腐蚀主要针对的是阈值化后的图像。图像腐蚀类似于“领域被蚕食”，将图像中的高亮区域或白色部分进行缩减细化，其运行结果图比原图的高亮区域更小。其原理是：将核在原始图像中进行遍历，然后将原始图像遍历到的像素点的值与自定义卷积核(全为1的二维矩阵)得值进行与运算，像素点与对应核一 一对应进行与，当卷积核对应的元素值均为1时，设置卷积核中心值的像素点为1，否则其值设置为0</p><p>一头雾水，直接看图…</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/df2fe5f21358787937bf255254be8820.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6b29fcd3560f6d0db69c76561679ee41.png"></th></tr></thead><tbody><tr><td><strong>腐蚀变换</strong></td><td><strong>原图</strong></td><td><strong>膨胀变换</strong></td></tr></tbody></table><p>注：卷积核的大小为5×5。</p><p><strong>腐蚀就是使得“白色”区域变小，膨胀就是使得“白色”区域变大。</strong></p><h2 id="开运算与闭运算"><a href="#开运算与闭运算" class="headerlink" title="开运算与闭运算"></a>开运算与闭运算</h2><p>开运算是将腐蚀（Erosion）操作和膨胀（Dilation）操作依次应用于图像的操作。首先执行腐蚀操作，然后再执行膨胀操作。开运算通常用于以下情况：</p><ul><li>去除小的噪声和斑点：通过腐蚀操作可以缩小小的白色区域，然后通过膨胀操作将它们恢复到原始大小，从而去除小的噪声和斑点。</li><li>分离连接的物体：开运算可以分离连接在一起的物体，使它们变得更远离彼此。</li></ul><p>闭运算是将膨胀（Dilation）操作和腐蚀（Erosion）操作依次应用于图像的操作。首先执行膨胀操作，然后再执行腐蚀操作。闭运算通常用于以下情况：</p><ul><li>填充物体内的小孔：通过膨胀操作可以填充物体内的小孔，然后通过腐蚀操作来还原物体的大小。</li><li>连接断开的物体：闭运算可以连接断开的物体，使它们相互接触。</li></ul><p>在图像分割中，开运算可以分离相邻物体，闭运算可用于连接物体。在光学字符识别（OCR）中，开运算可用于去除文本字符之间的干扰，闭运算可用于连接字符的笔画。在医学影像中，这些操作可用于处理X射线图像或CT扫描图像中的结构。</p><p>一头雾水，直接看图…</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/28953503336881d61c9b80472ab7a96f.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png" alt="原始图像"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/60951e8e70e0276c13faa177bc76695e.png"></th></tr></thead><tbody><tr><td><strong>开运算</strong></td><td><strong>原图</strong></td><td><strong>闭运算</strong></td></tr></tbody></table><p>注：卷积核的大小为5×5。</p><p>嗯… 有啥区别…. 因为开运算和闭运算都是腐蚀和膨胀相结合的，无非是顺序不同，因此，对于上述图像的影响不大。</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0d6668004a819e172f8c6ac9ca7d8864.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8b39caf08ec08e1441b49cd645c20e63.png"></th></tr></thead><tbody><tr><td><strong>开运算</strong></td><td><strong>原图</strong></td><td><strong>闭运算</strong></td></tr></tbody></table><p><strong>开运算就是填充白色空洞，闭运算就是断开黑色连接，开运算和闭运算都基本保持图像原来的尺寸和形状。</strong></p><h2 id="形态学梯度"><a href="#形态学梯度" class="headerlink" title="形态学梯度"></a>形态学梯度</h2><p>形态学梯度通过计算图像中每个像素点的亮度变化程度来实现，从而可以突出物体的边界。形态学梯度操作通常对二值图像或灰度图像进行处理。</p><p>形态学梯度操作通常通过以下公式来计算每个像素的梯度值：</p><p>Gradient(x,y)&#x3D;Dilation(x,y)-Erosion(x,y)</p><p>Dilation(x,y) 表示对图像进行膨胀操作，Erosion(x,y) 表示对图像进行腐蚀操作。这意味着形态学梯度是膨胀图像和腐蚀图像之间的差异。这种操作突出了物体的边缘，因为边缘像素的值在膨胀和腐蚀之间产生最大的变化。形态学梯度的应用如下：</p><ul><li>边缘检测：形态学梯度可用于检测图像中的边缘，使其成为图像处理中常用的边缘检测工具。在边缘检测中，物体边界通常是感兴趣的区域，形态学梯度可以帮助找到这些边界。</li><li>物体分割：形态学梯度可以用于分割图像中的不同物体，因为它可以突出物体之间的边界。这在计算机视觉和图像分析中非常有用。</li><li>纹理分析：在纹理分析中，形态学梯度可以用于检测和描述图像中的纹理特征，从而有助于分类和识别任务。</li><li>图像增强：形态学梯度操作可以增强图像中物体的轮廓和边缘，使它们更清晰可见，这在图像改进和可视化中很有用。</li><li>医学影像处理：在医学图像中，形态学梯度可以用于检测血管、骨骼和组织的边界，从而帮助医生进行诊断。</li></ul><p>对图像进行形态学梯度计算时的效果如下：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7ffd7403a2a42acc16899afdda0b19a0.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fcbca0d7334a7df27f68aad79fcc65fd.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>形态学梯</strong></td></tr></tbody></table><p>通过上图可以看出，形态学梯度对图像的边缘检测具有明显的效果。</p><h2 id="顶帽与黑帽"><a href="#顶帽与黑帽" class="headerlink" title="顶帽与黑帽"></a>顶帽与黑帽</h2><p>顶帽和黑帽是形态学图像处理中的两种操作，它们分别用于突出图像中的亮区域和暗区域，常用于图像增强和特征提取。顶帽操作是原始图像与开运算的结果之差。开运算通常用于去除图像中的噪声或连接分散的物体，因此顶帽操作可以突出图像中的小亮区域或物体的细节。顶帽操作通常用于以下情况：</p><ul><li>亮物体检测：当亮物体与背景的亮度差异很小时，顶帽操作可以突出这些亮物体。</li><li>纹理分析：用于分析图像中的纹理和细节。</li><li>图像增强：可以增强图像中的细节，使其更清晰可见。</li></ul><p>黑帽操作是闭运算的结果与原始图像之差。闭运算通常用于填充物体内的小孔或连接物体，因此黑帽操作可以突出图像中的小暗区域或物体的细节。黑帽操作通常用于以下情况：</p><ul><li>暗物体检测：当暗物体与背景的亮度差异很小时，黑帽操作可以突出这些暗物体。</li><li>小孔填充：用于填充物体内的小孔或裂缝，以还原物体的形状。</li><li>图像增强：可以增强图像中的细节，特别是暗区域的细节。</li></ul><p>应用示例：</p><ul><li>医学影像：顶帽和黑帽操作可用于医学影像中的病变检测和血管分析。</li><li>工业检测：在制造业中，它们可用于检测产品表面上的缺陷或微小的瑕疵。</li><li>纹理分析：用于纹理分析和纹理特征提取，例如在图像分类或图像检索中。</li><li>数字图像处理：常用于数字图像处理中的各种图像增强和预处理任务。</li></ul><p>总之，顶帽和黑帽操作是形态学图像处理中的两种重要工具，可以帮助突出图像中的亮暗区域和细节，用于不同的图像分析和增强任务。选择适当的操作取决于具体的应用场景和目标。</p><p>一头雾水，直接看图…</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4bbcac92cf2200b7e9865fa07d1e73c3.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/311d90b895603171b85bc3054f80143e.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4f8310d681cc934306a65da7641bb029.png"></th></tr></thead><tbody><tr><td><strong>顶帽</strong></td><td><strong>原图</strong></td><td><strong>黑帽</strong></td></tr></tbody></table><p>结合开运算和闭运算，就可以看出顶帽和黑帽操作与之的关系，但是具体应用起来是什么样子的呢？看下图：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/aa5e50980c5e180aa26224402a463e6e.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4693bd3b37c710f59bbc5155dd0bcba2.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5e779f81df404e04a55ad2c946aed599.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>闭运算</strong></td><td><strong>黑帽</strong></td></tr></tbody></table><p>| <img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/e1040dba7d87a8279fac9a8ee3ef6b64.png"> | <strong><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/3e16fd13019d0bd17319d5190ca46760.png"></strong> | <img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d565b8b1a2af708a41f010d0b6f7e810.png"> |<br>| <strong>原图</strong>                                                | <strong>开运算</strong>                                                | <strong>顶帽</strong>                                            |</p><p><strong>顶帽操作是原始图像与开运算的结果之差。黑帽操作是闭运算的结果与原始图像之差。</strong></p><h1 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h1><p>几何变换是数字图像处理领域中的关键概念，用于改变图像的几何结构和外观，而不涉及像素值的修改。这些变换允许我们对图像进行缩放、旋转、平移、拉伸和扭曲等操作，以满足特定的需求和应用场景。几何变换在图像处理中有广泛的应用，从简单的尺寸调整到复杂的场景校正和特效添加。它们为我们提供了强大的工具，用于改善图像质量、分析图像内容以及实现各种计算机视觉任务。无论是医学影像分析、自动驾驶、视频游戏还是艺术创作，几何变换都是不可或缺的工具，为图像处理和计算机视觉领域的不断发展提供了关键支持。</p><h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><p>仿射变换是指在向量空间中进行一次线性变换(乘以一个矩阵)并加上一个平移(加上一个向量)，变换为另一个向量空间的过程。在有限维的情况下，每个仿射变换可以由一个矩阵A和一个向量b给出，它可以写作A和一个附加的列b。一个仿射变换对应于一个矩阵和一个向量的乘法，而仿射变换的复合对应于普通的矩阵乘法，只要加入一个额外的行到矩阵的底下，这一行全部是0除了最右边是一个1，而列向量的底下要加上一个1.</p><p>仿射变换描述了一种二维仿射变换的功能，它是一种二维坐标之间的线性变换，保持二维图形的“平直性”(即变换后直线还是直线，圆弧还是圆弧)和“平行性”(其实是保持二维图形间的相对位置关系不变，平行线还是平行线，而直线上的点位置顺序不变，另特别注意向量间夹角可能会发生变化)。仿射变换可以通过一系列的原子变换的复合来实现包括：平移(Translation)、缩放(Scale)、翻转(Flip)、旋转(Rotation)和错切(Shear).</p><p>事实上，仿射变换代表的是两幅图之间的关系，我们通常使用2x3矩阵来表示仿射变换如下：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/0112ba5cf3ed3070df2c9b16a0977592.png"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/593c901c84ab56cf201b071ea784d283.png"></p><p>考虑到我们要使用矩阵A和B对二维向量X&#x3D;[x,y]T做变换，所以也能表示为下列形式：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1c55f47f42310736e8d18d997a3a688f.png"></p><p>得到如下效果：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/2d9e26acd785f952e36ead506de2d417.png"></p><p>从上面解释中我们得知仿射变换表示的就是两幅图片的一种联系，关于这种联系的信息大致可以从以下两种场景获得。</p><p>a. 我们已知X和T而且我们知道他们是有联系的，接下来的工作就是求解矩阵M</p><p>b. 我们一致M和X要求得T,我们只需要应用算式T&#x3D;M.X即可。对于这种联系的信息可以用矩阵M清晰的表达(即给出明确的2x3矩阵)或者也可以用两幅图片点之间几何关系来表达。</p><p>因为矩阵M联系着两幅图片，我们以其表示两图中各三点直接的联系为例，如下:</p><p>点1,2和3(在图一中形成一个三角)与图二中三个点一一映射，仍然形成三角形，但形状已经大大改变。如果我们能通过这样两组三点求出仿射变换（你能选择自己喜欢的点），接下来我们就能把仿射变换应用到图像中所有的点。</p><p>对实际的图像进行仿射变换的效果如下：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/38c2d8927c01a06858a43fe180df10bf.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a1bdbc0eb00b913a9ec23e1a92074091.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>仿射变换</strong></td></tr></tbody></table><p><strong>仿射变换是将矩形变换成平行四边形，变换后各边依旧平行。</strong></p><h2 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h2><p>透视变换不能保证物体形状的“平行性”。仿射变换是透视变换的特殊形式。透视变换是将一个平面投影到另一个平面，简单理解就是把一张图片投影到另一张图片，求的是同一张图片到它的投影图片之间的变换。透视变换是将成像投影到一个新的视平面，也称作投影映射。如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ce8be3b8d534d31b2192bcbc583e3a81.png"></p><p>透视变换原理如下：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/645bf3d7e15e69e8a183a1be8755b91f.png"></p><p>上述公式中， (<em>u</em>,<em>v</em>) 代表原始图像坐标， (<em>x</em>,<em>y</em>) 为经过透视变换的图片坐标，其中变换矩阵为3×3 形式。进而可以得到：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/57a9929d24923ac6eb7581731ccfe3e6.png"></p><p>在原图上取4点坐标与新图对应，相当于列出方程组，解出变换矩阵。通过变换矩阵，在输入原图像坐标的情况下，可以直接求解新图平面坐标。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7c71e1a5dbcf76e3543a33c99c3171cc.png"></p><p>其中， (<em>x</em>,<em>y</em>)是原图坐标，<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c002438d0c0f30cdbb142c65c99ef72b.png" alt="" style="max-height: 1.5em;"></span>是变换后的坐标；<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/c03622f9b4a0db4e9018790e5490f206.png" alt="" style="max-height: 1.5em;"></span> 为旋转量，<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/a057b24fb85fb51287d74dba2baef71c.png" alt="" style="max-height: 1.5em;"></span>  为平移量。因为透视变换是非线性的，所以不能齐次性表示；透视变换矩阵为3×3。透视变换的方程组有8个未知数，所以要求解就需要找到4组映射点，四个点就刚好确定了一个三维空间。</p><p>利用透视变换常常进行图像的“摆正”，示例如下：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ecfb0ef920f80807ce2f9227c6aeff55.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/5a59ba2712377bcb27bd960e2a078dba.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>透视变换</strong></td></tr></tbody></table><p><strong>透视变换用于将一个二维平面上的图像从一种视角或投影方式转换为另一种视角或投影方式的方法。它的主要目的是消除或校正由于观察角度或位置变化引起的投影畸变，以便更准确地分析或呈现图像中的对象。</strong></p><h1 id="去畸变"><a href="#去畸变" class="headerlink" title="去畸变"></a>去畸变</h1><p>这里重点介绍鱼眼相机为例展开介绍。首先，鱼眼镜头为什么可以获得比普通镜头更大的视野范围呢，他们两者之间的差别在哪？</p><p>其实，我们平常接触的大多数镜头都可以近似看做针孔相机模型，该模型下，光线沿直线传播，像与物之间是相似的，或者更严格地用数学语言来说，像与物之间是经过了透视变换（Perspective Transform）。在透视变换下，直线经过变换仍是直线，曲线经过变换仍是曲线，两直线交点经过变换仍是两直线相交的点等。正因为投影变换保持了很多几何性质不变，所以我们看照片是能够与原场景联系起来的，照片与原场景之间存在某些相似的特性。那么鱼眼镜头为什么可以获得比普通镜头更大的视野范围呢，他们两者之间的差别在哪？</p><p>从某种意义上来说，相机镜头所起的作用，就是做了一个数学变换，将物空间变换为像空间，成像平面就是在像空间内切了一刀，截取了一个平面，成为拍下的照片。</p><p>但基于针孔相机模型的镜头存在一个缺陷——光线始终沿直线传播使得镜头难以捕捉位于边缘的物体。如下图所示，对于同样长度的红色箭头，越靠近边缘的经过镜头成像后就变得越长，而实际上我们底片的尺寸是有限的，所以极端接近边缘的物体普通的镜头就无法成像记录了。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/784946d7aeaf0b77e4b5e91eb85e0e78.png"></p><p>于是人们想到的水下的鱼。由于水的折射率比空气大，光线从空气进入水中，折射角比入射角更小，并且入射角越大，这个变小的程度也越大。由于这个特性，使得在水中向上看时，能一眼看到整个水面上的这个半球形空间，整个空间的影像都背扭曲、压缩到了一个半顶角约为48°的锥形内。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ab3ff1d293450f796c8a04a36468a708.png"></p><p>在这个锥形空间内部，是来自水面上的空间的光线，在这个锥形外部，是来自水面下景色的反射。也就是说，在水下向上看，在一个圈之外，只能看到水底的景色；所有水面上的景色，都被压缩在一个圈内，如下图所示。鱼眼镜头也是人们根据这种特性发明的，另外，鱼眼镜头的前镜片直径很短，且呈抛物状像前部凸出，与鱼的眼睛十分相似，“鱼眼镜头”因此而得名。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/6a0cdceaaeabedb67171931925741dac.jpeg"></p><p>鱼眼镜头一般是由十几个不同的透镜组合而成的，如下图所示，在成像的过程中，入射光线经过不同程度的折射，投影到尺寸有限的成像平面上，使得鱼眼镜头与普通镜头相比起来拥有了更大的视野范围。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/8f225713814103dc0d3d5d279921a18e.png"></p><p>在研究鱼眼相机成像时，可以将上面的镜头组简化为一个球面，如下图所示，<em>O1-XcYcZc</em>为相机坐标系，O2-xy为成像平面。现实世界有一点P,入射角θ，如果按照普通相机的针孔相机模型，入射光线PO1经过镜头之后不改变路线,P、O1、<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png" alt="" style="max-height: 1.5em;"></span>三点共线，<span style="display: inline-block; vertical-align: middle;"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/常用图像变换/561fc8fc43f1ead10dd35a66513d00a5.png" alt="" style="max-height: 1.5em;"></span>为P的像点，但是对于鱼眼相机，入射光线PO1经过镜头后会发生折射，因此P的像点为<em>p</em>，极坐标表示为（r，φ）。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/7d8730b23f213a652c7831c05825b3b7.png"></p><p>根据投影函数的不同，鱼眼相机的设计模型大致能被分为五种：透视投影（即针孔相机模型）、等积投影、等距投影、体视投影、正交投影。而实际的镜头因为各种原因并不会精确的符合投影模型，为了方便鱼眼相机的标定，一般取r关于θ泰勒展开式的前5项来近似鱼眼镜头的实际投影函数：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/fa31e394765b87121758996872f7340e.png"></p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/ea2695d35ac1024134b00751cfad39a0.png"></p><p>假设相机坐标系下有一点P(x,y,z)，点P(x,y,z)如果按照针孔相机模型投影，则不存在畸变，像点为P0(a,b)。不妨假设f&#x3D;1（最终可以求得rd 和r的比值与f无关）,可求得P0 点坐标y以及入射角θ：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/b7807a8872366727b6299499d28345f5.png"></p><p>由于畸变的存在，像点到图像中心的距离r被压缩成rd,实际的像点位置为p’(x’,y),有|Op’|&#x3D;rd,|OP0|&#x3D;r。结合等距投影函数有：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/f3a9b01ac3248215c5904b2b87d9c74f.png"></p><p>因为f&#x3D;1，θd 的一次项系数k0 可以为1，最终可以得到OpenCV中使用的鱼眼相机模型：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/a821cb9a522abf758657aeab932fd8dc.png"></p><p>由相似三角形原理：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/4543df1de58c719a6be4c04ca947624b.png"></p><p>所以就求得了畸变后点p’ 的坐标为：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/eb3e8f28d45e99d9ba53eefb2d2a8d4b.png"></p><p>最后利用相机内参将像平面的点转换到像素坐标系就得到了最终图像上的点：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/d10563806f7a6f97c687a2b74f4e4543.png"></p><p>鱼眼相机拍摄的图像去畸变后的效果如下所示：</p><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/1f0d3bb10e87bd6e364a92c8e5406a41.png"></th><th><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png"><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%B8%B8%E7%94%A8%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/06680c23f161c764dc5e05cee7011e22.png"></th></tr></thead><tbody><tr><td><strong>原图</strong></td><td><strong>去畸变图像</strong></td></tr></tbody></table><p><strong>可以看出去畸变图像的视野相比与原始图像视野范围有所减小，但物体更贴近实际尺寸。</strong></p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><ul><li><p>code</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui/highgui.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/imgproc/imgproc.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span>  </span><span class="token comment">/** * @description: 腐蚀变换 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyErode</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_ERODE<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"腐蚀变换"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"腐蚀变换.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 膨胀变换 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyDilate</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_DILATE<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"膨胀变换"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"膨胀变换.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 开运算 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyOpen</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_OPEN<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"开运算"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"开运算.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 闭运算 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyClose</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_CLOSE<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"闭运算"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"闭运算.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 顶帽 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyTopHat</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_TOPHAT<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"顶帽"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"顶帽.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 黑帽 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyBlackHat</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_BLACKHAT<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"黑帽"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"黑帽.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 形态学梯度 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyGradient</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat my_struct <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>MORPH_RECT<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十字形结构元素;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>MORPH_GRADIENT<span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"形态学梯度"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"形态学梯度.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 仿射变换 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyAffine</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> scale_x <span class="token operator">=</span> <span class="token number">0.7</span><span class="token punctuation">;</span>     <span class="token comment">// 水平缩放因子</span>    <span class="token keyword">float</span> scale_y <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span>     <span class="token comment">// 垂直缩放因子</span>    <span class="token keyword">float</span> theta <span class="token operator">=</span> CV_PI <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 旋转角度</span>    <span class="token keyword">float</span> tx <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>           <span class="token comment">// 水平平移量</span>    <span class="token keyword">float</span> ty <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>           <span class="token comment">// 垂直平移量</span>    <span class="token keyword">float</span> shear_x <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>     <span class="token comment">// X轴错切</span>    <span class="token keyword">float</span> shear_y <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>     <span class="token comment">// Y轴错切</span>    cv<span class="token double-colon punctuation">::</span>Mat warpMatrix <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> scale_x <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span>shear_y <span class="token operator">*</span> scale_y <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> tx<span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> shear_x <span class="token operator">*</span> scale_x <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> scale_y <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>    warpMatrix<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> ty<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">warpAffine</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> warpMatrix<span class="token punctuation">,</span> src_img<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"仿射变换"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"仿射变换.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 鼠标操作 自己准备结构体</span><span class="token keyword">struct</span> <span class="token class-name">ImageData</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat img<span class="token punctuation">;</span>                <span class="token comment">// 目标图像 用于点击 确定坐标</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> points<span class="token punctuation">;</span> <span class="token comment">// 存放原图的坐标 通过鼠标的点击进行存放</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//鼠标操作的回调函数:用于选择四个角的点（使用方法：从左上角开始顺时针选择四个点，选完之后回车操作）</span><span class="token keyword">void</span> <span class="token function">mouseHundle</span><span class="token punctuation">(</span><span class="token keyword">int</span> event<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 强制转换</span>    <span class="token keyword">struct</span> <span class="token class-name">ImageData</span> <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ImageData</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token comment">// 如果按下的是鼠标左键</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> cv<span class="token double-colon punctuation">::</span>EVENT_LBUTTONDOWN<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 用圆形来标记下鼠标按下左键标记的位置</span>        cv<span class="token double-colon punctuation">::</span><span class="token function">circle</span><span class="token punctuation">(</span>d<span class="token operator">-></span>img<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_AA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在图上标记,圆心为点击的位置</span>        cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">// 原窗口上进行显示标记点</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选择点%d: %d,%d...\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d<span class="token operator">-></span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 透视变换 需要使用四个点的坐标</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            d<span class="token operator">-></span>points<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把点击下来的坐标进行存储</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            cv<span class="token double-colon punctuation">::</span><span class="token function">setMouseCallback</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消鼠标回调</span>            cv<span class="token double-colon punctuation">::</span><span class="token function">destroyWindow</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @description: 透视变换 * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">MyPerspectiveTF</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat input_image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat src_img <span class="token operator">=</span> input_image<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat dst_img<span class="token punctuation">;</span>    ImageData data<span class="token punctuation">;</span>    data<span class="token punctuation">.</span>img <span class="token operator">=</span> src_img<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">setMouseCallback</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> mouseHundle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> src_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请在图像上点击四个点，然后按任意键继续...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Size dst_size <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出图像的尺寸</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> outputPoints<span class="token punctuation">;</span> <span class="token comment">// 输出图像上的对应点</span>    outputPoints<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputPoints<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>dst_size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputPoints<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>dst_size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> dst_size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputPoints<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dst_size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>outputPoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token operator">||</span> data<span class="token punctuation">.</span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"请选择4个点即可"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cv<span class="token double-colon punctuation">::</span>Mat perspectiveMatrix <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getPerspectiveTransform</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>points<span class="token punctuation">,</span> outputPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">warpPerspective</span><span class="token punctuation">(</span>src_img<span class="token punctuation">,</span> dst_img<span class="token punctuation">,</span> perspectiveMatrix<span class="token punctuation">,</span> dst_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"透视变换"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"透视变换.png"</span><span class="token punctuation">,</span> dst_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 判断参数输入是否正确</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"参数错误,请使用如下命令格式: "</span> <span class="token operator">&lt;&lt;</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"[图像路径] [图像变换类型(1,2,3,...)] "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mode <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"说明：\n[0] 说明\n[1] 图像腐蚀变换\n[2] 图像膨胀变换\n[3] 开运算\n[4] 闭运算\n[5] 顶帽\n[6] 黑帽\n[7] 形态学梯度\n[8] 仿射变换\n[9] 透视变换\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获得图像</span>    cv<span class="token double-colon punctuation">::</span>Mat img <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"原始图像"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"原始图像.png"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"图像腐蚀变换...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyErode</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"图像膨胀变换...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyDilate</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"开运算...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyOpen</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"闭运算...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyClose</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顶帽...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyTopHat</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"黑帽...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyBlackHat</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"形态学梯度...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyGradient</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"仿射变换...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyAffine</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"透视变换...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">MyPerspectiveTF</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ image_transform.cpp <span class="token parameter variable">-o</span> image_transform <span class="token parameter variable">-lopencv_core</span> <span class="token parameter variable">-lopencv_highgui</span> <span class="token parameter variable">-lopencv_imgproc</span> <span class="token parameter variable">-lopencv_imgcodecs</span> <span class="token parameter variable">-lopencv_calib3d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./image_transform 图像路径 图像变换类型<span class="token punctuation">(</span><span class="token number">1,2</span>,3,<span class="token punctuation">..</span>.<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://blog.csdn.net/qq_16137569/article/details/112398976">https://blog.csdn.net/qq_16137569/article/details/112398976</a></li><li>数字图像处理（第四版）</li></ol>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL_ES常用问答</title>
      <link href="/2023/06/21/opengl-es-chang-yong-wen-da/"/>
      <url>/2023/06/21/opengl-es-chang-yong-wen-da/</url>
      
        <content type="html"><![CDATA[<h1 id="glUseProgram什么时候使用"><a href="#glUseProgram什么时候使用" class="headerlink" title="glUseProgram什么时候使用?"></a>glUseProgram什么时候使用?</h1><p>glUseProgram是OpenGL中的一个函数，用于指定当前使用的着色器程序对象。着色器程序对象是由顶点着色器和片段着色器组成的，用于描述渲染管线中的图形处理和光栅化阶段。</p><p>glUseProgram函数的调用时机通常是在绘制场景之前。当你创建并编译好顶点着色器和片段着色器，并将它们链接为一个着色器程序对象后，你需要使用glUseProgram来告诉OpenGL在绘制时要使用这个着色器程序。</p><p>具体的步骤通常是这样的：</p><blockquote><ol><li>创建顶点着色器和片段着色器，并编译它们。</li><li>创建一个着色器程序对象，并将顶点着色器和片段着色器附加到该对象上。</li><li>链接着色器程序对象。</li><li>在每次绘制场景之前，调用glUseProgram函数，将着色器程序对象作为参数传递进去，以指定当前使用的着色器程序。</li><li>执行绘制操作，OpenGL将使用当前指定的着色器程序进行渲染。</li></ol></blockquote><p>通过glUseProgram函数，你可以在渲染过程中灵活地切换不同的着色器程序，以实现不同的渲染效果或实现特定的图形处理算法。</p><h1 id="glActiveTexture什么时候使用"><a href="#glActiveTexture什么时候使用" class="headerlink" title="glActiveTexture什么时候使用?"></a>glActiveTexture什么时候使用?</h1><p>glActiveTexture是OpenGL中的一个函数，用于指定当前活动的纹理单元。纹理单元是用于存储和处理纹理数据的硬件单元。</p><p>glActiveTexture函数的调用时机通常是在设置纹理之前。在渲染过程中，你可能会使用多个纹理，例如一张用于漫反射贴图，一张用于法线贴图等。glActiveTexture函数允许你指定当前要操作的纹理单元，以便后续的纹理相关函数能够作用于指定的单元。</p><p>具体的步骤通常是这样的：</p><ol><li>在绑定纹理之前，调用glActiveTexture函数，传递一个纹理单元的索引作为参数。常用的索引值为GL_TEXTURE0、GL_TEXTURE1等，表示不同的纹理单元。</li><li>绑定纹理对象到指定的纹理单元。使用glBindTexture函数将纹理对象与当前活动的纹理单元关联起来。例如，使用glBindTexture(GL_TEXTURE_2D, textureID)将纹理对象绑定到当前活动的纹理单元上。</li><li>设置纹理参数和上传纹理数据等操作。在glActiveTexture函数和glBindTexture函数之后，你可以执行一系列与纹理相关的操作，如设置纹理过滤方式、纹理环绕方式、上传纹理数据等。</li></ol><p>通过glActiveTexture函数，你可以在渲染过程中使用多个纹理单元，并对每个纹理单元进行独立的设置和绑定。这样可以实现更复杂的纹理映射效果，如多重纹理、立方体贴图等。</p><h1 id="怎么从缓冲区读取像素数据？"><a href="#怎么从缓冲区读取像素数据？" class="headerlink" title="怎么从缓冲区读取像素数据？"></a>怎么从缓冲区读取像素数据？</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 读取颜色缓冲区的像素数据</span>       std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span> <span class="token function">pixelData</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RGBA格式，每个像素4个字节</span>       <span class="token function">glReadPixels</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> GL_RGBA<span class="token punctuation">,</span> GL_UNSIGNED_BYTE<span class="token punctuation">,</span> pixelData<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 检查像素数据</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               <span class="token keyword">int</span> pixelIndex <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 每个像素4个字节</span>               <span class="token keyword">unsigned</span> <span class="token keyword">char</span> red <span class="token operator">=</span> pixelData<span class="token punctuation">[</span>pixelIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">unsigned</span> <span class="token keyword">char</span> green <span class="token operator">=</span> pixelData<span class="token punctuation">[</span>pixelIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">unsigned</span> <span class="token keyword">char</span> blue <span class="token operator">=</span> pixelData<span class="token punctuation">[</span>pixelIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">unsigned</span> <span class="token keyword">char</span> alpha <span class="token operator">=</span> pixelData<span class="token punctuation">[</span>pixelIndex <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">// 打印像素值</span>               <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"像素(%d, %d): R=%d, G=%d, B=%d, A=%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="怎么获取opengl-es的错误代码？"><a href="#怎么获取opengl-es的错误代码？" class="headerlink" title="怎么获取opengl es的错误代码？"></a>怎么获取opengl es的错误代码？</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">EGLint status2 <span class="token operator">=</span> <span class="token function">eglGetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>status2 <span class="token operator">!=</span> EGL_SUCCESS<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"eglSwapBuffers failed!!!, status= %d\n"</span><span class="token punctuation">,</span> status2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 帧缓冲不完整，eglSwapBuffers 执行失败&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="VAO绑定怎么使用？"><a href="#VAO绑定怎么使用？" class="headerlink" title="VAO绑定怎么使用？"></a>VAO绑定怎么使用？</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">glBindVertexArray</span><span class="token punctuation">(</span>VAO<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绑定顶点数组对象,执行VAO绑定之后其后的所有VBO配置都是这个VAO对象的一部分。具体来说，glBindVertexArray的作用是将VAO与当前上下文相关的顶点状态绑定在一起。顶点状态包括顶点属性指针、顶点缓冲对象等。当我们需要绘制时，只需绑定相应的VAO，OpenGL会自动应用之前设置的顶点状态。</p><h1 id="glDrawElements函数有什么作用？"><a href="#glDrawElements函数有什么作用？" class="headerlink" title="glDrawElements函数有什么作用？"></a>glDrawElements函数有什么作用？</h1><p>glDrawElements函数用于绘制索引化的图元，它并不会将绘制结果保存在任何地方。它的作用是根据索引数据来指定绘制顶点的顺序，并将这些顶点渲染到当前帧缓冲对象中。<br>绘制结果的保存通常发生在帧缓冲对象（Framebuffer Object, FBO）中。帧缓冲对象是一个特殊的OpenGL对象，它可以作为渲染目标来保存绘制结果。可以将帧缓冲对象与纹理或渲染缓冲对象关联，以便将绘制结果保存在纹理或渲染缓冲对象中。<br>在使用glDrawElements之前，需要先创建并绑定顶点数组对象（VAO），并将索引数据存储在索引缓冲对象（Index Buffer Object, IBO）中。然后，通过glBindVertexArray绑定VAO，使用glBindBuffer将IBO绑定到GL_ELEMENT_ARRAY_BUFFER目标，以告诉OpenGL使用IBO中的索引来绘制顶点。</p><h1 id="怎么设置纹理采样方式和纹理拉伸方式？"><a href="#怎么设置纹理采样方式和纹理拉伸方式？" class="headerlink" title="怎么设置纹理采样方式和纹理拉伸方式？"></a>怎么设置纹理采样方式和纹理拉伸方式？</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ## 设置纹理拉伸方式</span><span class="token function">glTexParameterf</span><span class="token punctuation">(</span>GL_TEXTURE_2D<span class="token punctuation">,</span> GL_TEXTURE_WRAP_S<span class="token punctuation">,</span> GL_CLAMP_TO_EDGE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置纹理 S 横轴）的拉伸方式为截取</span><span class="token function">glTexParameterf</span><span class="token punctuation">(</span>GL_TEXTURE_2D<span class="token punctuation">,</span> GL_TEXTURE_WRAP_T<span class="token punctuation">,</span> GL_CLAMP_TO_EDGE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置纹理 T 纵轴）的拉伸方式为截取</span><span class="token comment">// ## 设置纹理采样方式</span><span class="token function">glTexParameteri</span><span class="token punctuation">(</span>GL_TEXTURE_2D<span class="token punctuation">,</span> GL_TEXTURE_MIN_FILTER<span class="token punctuation">,</span> GL_LINEAR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将纹理缩小时(GL_TEXTURE_MIN_FILTER)，会进行线性插值(GL_LINEAR)来计算新的纹理像素值。</span><span class="token function">glTexParameteri</span><span class="token punctuation">(</span>GL_TEXTURE_2D<span class="token punctuation">,</span> GL_TEXTURE_MAG_FILTER<span class="token punctuation">,</span> GL_LINEAR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将纹理放大时(GL_TEXTURE_MAG_FILTER)，会进行线性插值(GL_LINEAR)来计算新的纹理像素值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在OpenGL中，纹理参数是与当前绑定的纹理对象相关联的。当你调用glTexParameterf函数设置纹理参数时，它会作用于当前绑定的纹理对象。<br>要确定glTexParameterf设置的是哪个纹理的参数，需要在调用该函数之前通过glBindTexture函数将相应的纹理对象绑定到当前纹理目标。</p><h1 id="Surfaceview和GLSurfaceview有什么区别"><a href="#Surfaceview和GLSurfaceview有什么区别" class="headerlink" title="Surfaceview和GLSurfaceview有什么区别"></a>Surfaceview和GLSurfaceview有什么区别</h1><p>SurfaceView和GLSurfaceView是Android中用于图形渲染的两个重要视图类，它们之间有以下区别：</p><ol><li><p>功能和用途：SurfaceView是用于显示普通2D图形和视频的视图，而GLSurfaceView则是专门用于显示OpenGL ES图形的视图。GLSurfaceView提供了与OpenGL ES渲染相关的功能和接口，可以更方便地进行OpenGL ES的初始化、渲染和交互操作。</p></li><li><p>渲染机制：SurfaceView使用双缓冲机制进行绘制，即在后台线程中渲染图形，并将渲染结果通过SurfaceHolder进行显示。这种机制使得SurfaceView能够在主UI线程之外进行绘制，适用于需要频繁更新的图形或视频场景。GLSurfaceView也采用了双缓冲机制，但它使用了专门的渲染线程，并提供了OpenGL ES渲染上下文的管理和控制。</p></li><li><p>对性能的要求：由于SurfaceView在单独的线程中进行渲染，因此它更适合于需要高性能渲染的场景，如视频播放、游戏等。GLSurfaceView在底层使用了OpenGL ES，因此可以更高效地进行图形渲染，并提供了更多与OpenGL ES相关的功能和特性。</p></li><li><p>交互处理：SurfaceView的UI事件处理是在主UI线程中进行的，而GLSurfaceView可以通过设置Renderer来处理与OpenGL ES相关的交互事件，如触摸事件、按键事件等。</p></li><li><p>使用SurfaceView时候需要单独开启线程进行循环渲染，而GLSurfaceView在每帧渲染之前会自动调用onDrawFrame函数，因此我们可以将渲染程序写在onDrawFrame中，无线单独开启线程。</p></li><li><p>使用SurfaceView时候需要绑定窗口并设置窗口属性，而GLSurfaceView默认绑定当前窗口，无需额外绑定。</p></li></ol><p>综上所述，SurfaceView适用于普通的2D图形和视频显示，而GLSurfaceView则专注于OpenGL ES图形渲染，并提供更高性能和更多的OpenGL ES功能。选择使用哪个类取决于你的具体需求和场景。</p>]]></content>
      
      
      <categories>
          
          <category> OpenGL ES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++对象优化</title>
      <link href="/2023/05/29/c-dui-xiang-you-hua/"/>
      <url>/2023/05/29/c-dui-xiang-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="对象使用过程中背后调用了哪些方法"><a href="#对象使用过程中背后调用了哪些方法" class="headerlink" title="对象使用过程中背后调用了哪些方法"></a>对象使用过程中背后调用了哪些方法</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ma</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(int)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"~Test()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Test</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ma</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>ma<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test (const Test &amp;t)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"operator="</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>ma <span class="token operator">=</span> t<span class="token punctuation">.</span>ma<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> ma<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 1 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test t1<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 2 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test <span class="token function">t2</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 3 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test t3 <span class="token operator">=</span> t1<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 4 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test t4 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 5 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t4 <span class="token operator">=</span> t2<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 6 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t4 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 7 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t4 <span class="token operator">=</span> <span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token number">30</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 8 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t4 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 9 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//Test *p = &amp;Test(40;)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 10 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>ref <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--- <span class="token number">1</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span>--- <span class="token number">2</span> ---Test <span class="token punctuation">(</span>const Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>--- <span class="token number">3</span> ---Test <span class="token punctuation">(</span>const Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>--- <span class="token number">4</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span>--- <span class="token number">5</span> ---<span class="token assign-left variable">operator</span><span class="token operator">=</span>--- <span class="token number">6</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token assign-left variable">operator</span><span class="token operator">=</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">7</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token assign-left variable">operator</span><span class="token operator">=</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">8</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token assign-left variable">operator</span><span class="token operator">=</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">9</span> ------ <span class="token number">10</span> ---Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ul><li>1<br>正常使用构造函数生成t1，传入参数有默认值</li><li>2<br>常见的拷贝构造</li><li>3<br>拷贝构造</li><li>4<br>C++编译器对于对象构造的优化，用临时对象生成新对象的时候，临时对象就不产生了，直接构造新对象，因此这里等价于直接调用常规构造函数，不调用拷贝构造<br>Test(20)显式生成临时对象，生存周期为所在语句<br>因此这里的Test t4 &#x3D; Test(20);等价于Test t4(20);</li><li>5<br>调用了赋值运算符重载函数</li><li>6<br>使用临时对象为已经存在的对象赋值，这时临时对象需要生成，要不无法赋值，显式生成临时对象</li><li>7<br>把30强制转换为Test，然后将int 转换为 Test(int)，这时就要看这个类有没有输入为int的构造函数，进而调用。这时临时对象需要生成，要不无法赋值，显式生成临时对象</li><li>8<br>把30强制转换为Test，然后将int 转换为 Test(int)，这时就要看这个类有没有输入为int的构造函数，进而调用。这时临时对象需要生成，要不无法赋值，隐式生成临时对象</li><li>9<br>这里的临时对象需要生成，且出了语句临时对象就会调用析构函数，因此这里说明使用指针指向临时对象是不安全的，因此这里直接运行是报错的，无法获取右值的地址</li><li>10<br>这里的临时对象需要生成，且出了语句临时对象不会调用析构函数</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ma</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mb</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(int, int)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"~Test()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>src<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ma</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>ma<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mb</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>mb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(const Test &amp;)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Test <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ma <span class="token operator">=</span> src<span class="token punctuation">.</span>ma<span class="token punctuation">;</span>mb <span class="token operator">=</span> src<span class="token punctuation">.</span>mb<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"operator = "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> ma<span class="token punctuation">;</span><span class="token keyword">int</span> mb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Test <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 3 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test <span class="token function">t2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 4 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test t3 <span class="token operator">=</span> t2<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 5 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">static</span> Test t4 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 6 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t2 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 7 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 8 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>t2 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 9 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 10 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>Test <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token keyword">new</span> Test<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 11 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// Test *p3 = &amp;Test(80,80);</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"--- 12 ---"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>p4 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> p1<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> p2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Test <span class="token function">t5</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">3</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">4</span> ---Test<span class="token punctuation">(</span>const Test <span class="token operator">&amp;</span><span class="token punctuation">)</span>--- <span class="token number">5</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">6</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>operator <span class="token operator">=</span> ~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">7</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>operator <span class="token operator">=</span> ~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">8</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>operator <span class="token operator">=</span> ~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>--- <span class="token number">9</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">10</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>--- <span class="token number">11</span> ------ <span class="token number">12</span> ---Test<span class="token punctuation">(</span>int, int<span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span>~Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h2><ul><li>5<br>使用临时构造同类型新对象的时候，临时对象被优化，类似于上文的第4项</li><li>7<br>逗号表达式的值为最后一个参数的值，即:t2 &#x3D; (Test)(50);这里将50进行了强制类型转换。编译器就会去找有没有带一个整型输入的构造函数去实现。</li><li>11<br>不能使用指针指向临时对象，临时对象使用后析构。</li><li>12<br>使用引用变量指向临时对象，相当于给临时对象起了一个别名，引用对象销毁时，临时对象才会析构。</li></ul><h1 id="函数调用过程中对象背后调用了哪些方法"><a href="#函数调用过程中对象背后调用了哪些方法" class="headerlink" title="函数调用过程中对象背后调用了哪些方法"></a>函数调用过程中对象背后调用了哪些方法</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ma</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(int)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"~Test"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ma</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>ma<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Test(const Test &amp;)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"operator="</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>ma<span class="token operator">=</span>t<span class="token punctuation">.</span>ma<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> ma<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> ma<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Test <span class="token function">GetObject</span><span class="token punctuation">(</span>Test t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Test <span class="token function">tmp</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Test t1<span class="token punctuation">;</span>Test t2<span class="token punctuation">;</span>t2<span class="token operator">=</span><span class="token function">GetObject</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span>Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span><span class="token operator">=</span>Test<span class="token punctuation">(</span>const Test <span class="token operator">&amp;</span><span class="token punctuation">)</span>Test<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token assign-left variable">operator</span><span class="token operator">=</span>~Test~Test~Test~Test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>Test(int)<br>调用默认构造函数</li><li>Test(int)<br>调用默认构造函数</li><li>Test(const Test &amp;)<br>执行<code>GetObject(t1)</code>时需要将实参t1传递给<code>GetObject(Test t)</code>函数的形参<code>t</code>,这里是不能是直接的赋值，应该是初始化，即:要默认调用构造函数(拷贝构造函数)，因此这里实际是调用了<code>Test(const Test &amp;)</code>函数。</li><li>Test(int)<br>这里是<code>GetObject(Test t)</code>函数内部调用了默认构造函数</li><li>operator&#x3D;<br>由于<code>GetObject(Test t)</code>函数内部的<code>tmp</code>变量在函数结束后就会被释放没有办法再把参数传递出去，因此这里其实也在调用构造函数，需要构造一个临时变量，使用函数重载进行值传递</li><li>~Test<br>依次执行临时对象的析构</li><li>~Test<br>依次执行临时对象的析构</li><li>~Test<br>依次执行临时对象的析构</li><li>~Test<br>依次执行临时对象的析构</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 对象优化 </tag>
            
            <tag> c++课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鱼眼相机外参标定</title>
      <link href="/2023/05/29/yu-yan-xiang-ji-wai-can-biao-ding/"/>
      <url>/2023/05/29/yu-yan-xiang-ji-wai-can-biao-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p>待整理</p><p><a href="https://zhuanlan.zhihu.com/p/603296375">AVM环视系统——鱼眼相机去畸变算法</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 外参求解</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point3f<span class="token operator">></span> object_points<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">solvePnP</span><span class="token punctuation">(</span>object_points<span class="token punctuation">,</span> image_points_undist_new<span class="token punctuation">,</span> cam_K<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cam_T<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token boolean">false</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>SOLVEPNP_ITERATIVE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: solvePnP cam_index[%d]\n"</span><span class="token punctuation">,</span> cam_index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">float</span> projection_error <span class="token operator">=</span> <span class="token function">ComputeProjectionError</span><span class="token punctuation">(</span>object_points<span class="token punctuation">,</span> image_points_undist_new<span class="token punctuation">,</span> cam_K<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cam_T<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"projection_error1: "</span> <span class="token operator">&lt;&lt;</span> projection_error <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// 定义迭代终止条件：最大迭代次数为 100，收敛阈值为 0.001</span>cv<span class="token double-colon punctuation">::</span>TermCriteria <span class="token function">termCrit</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>TermCriteria<span class="token double-colon punctuation">::</span>MAX_ITER <span class="token operator">|</span> cv<span class="token double-colon punctuation">::</span>TermCriteria<span class="token double-colon punctuation">::</span>EPS<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 L-M（Levenberg-Marquardt） 算法进行迭代优化，不断减小重投影误差</span>cv<span class="token double-colon punctuation">::</span>Mat RR <span class="token operator">=</span> cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cv<span class="token double-colon punctuation">::</span>Mat TT <span class="token operator">=</span> cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cv<span class="token double-colon punctuation">::</span><span class="token function">solvePnPRefineLM</span><span class="token punctuation">(</span>object_points<span class="token punctuation">,</span> image_points_undist_new<span class="token punctuation">,</span> cam_K<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RR<span class="token punctuation">,</span> TT<span class="token punctuation">,</span> termCrit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用虚拟视觉伺服 (Virtual Visual Servoing)方法进行迭代优化，不断减小重投影误差</span><span class="token comment">// cv::solvePnPRefineVVS(object_points, image_points_undist_new, cam_K[cam_index], cv::noArray(), RR, TT, termCrit);</span>cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span> <span class="token operator">=</span> RR<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cam_R<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span> <span class="token operator">=</span> TT<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * @description: 输入畸变图，输出去畸变图 * @param &#123;Mat&#125; &amp;img_dist * @param &#123;Mat&#125; &amp;img_undist * @return &#123;*&#125; * @author: wangshuaiyang *&#x2F;int TAvmCal::DistToUndistImage(cv::Mat img_dist, cv::Mat &amp;img_undist, int cam_index)&#123;    int ret &#x3D; 0;#if 1    &#x2F;&#x2F; 新的相机内参矩阵和图像尺寸（可选）    float scale &#x3D; 2.5;    cv::Mat new_cam_K &#x3D; cam_K[cam_index].clone();    new_cam_K.at&lt;float&gt;(0, 0) &#x3D; new_cam_K.at&lt;float&gt;(0, 0);     &#x2F;&#x2F; fx    new_cam_K.at&lt;float&gt;(1, 1) &#x3D; new_cam_K.at&lt;float&gt;(0, 0);     &#x2F;&#x2F; fy    new_cam_K.at&lt;float&gt;(0, 2) &#x3D; new_cam_K.at&lt;float&gt;(0, 0) * 5; &#x2F;&#x2F; cx    new_cam_K.at&lt;float&gt;(1, 2) &#x3D; new_cam_K.at&lt;float&gt;(0, 0) * 2; &#x2F;&#x2F; cy    cv::Size new_size &#x3D; cv::Size(img_dist.size().width * scale, img_dist.size().height * scale);    cv::fisheye::undistortImage(img_dist, img_undist, cam_K[cam_index], cam_D[cam_index], new_cam_K, new_size);    cv::resize(img_undist, img_undist, img_dist.size());#else    cv::Mat mapx;    cv::Mat mapy;    &#x2F;&#x2F; 计算矫正图    float point_u_tmp[2];    float point_d_tmp[2];    float scale &#x3D; 2.5;    int offset_x &#x3D; 1000;    int offset_y &#x3D; 300;    int w &#x3D; img_dist.cols * scale;    int h &#x3D; img_dist.rows * scale;    mapx.create(h, w, CV_32FC1);    mapy.create(h, w, CV_32FC1);    for (int col &#x3D; 0; col &lt; w; col +&#x3D; 1)    &#123;        for (int row &#x3D; 0; row &lt; h; row +&#x3D; 1)        &#123;            &#x2F;&#x2F; 归一化            std::vector&lt;cv::Point2d&gt; unDist_points(1);            std::vector&lt;cv::Point2d&gt; dist_points(1);            point_u_tmp[0] &#x3D; col - offset_x;            point_u_tmp[1] &#x3D; row - offset_y;            unDist_points[0].x &#x3D; (point_u_tmp[0] - cam_K[cam_index].at&lt;float&gt;(0, 2)) &#x2F; cam_K[cam_index].at&lt;float&gt;(0, 0);            unDist_points[0].y &#x3D; (point_u_tmp[1] - cam_K[cam_index].at&lt;float&gt;(1, 2)) &#x2F; cam_K[cam_index].at&lt;float&gt;(1, 1);            cv::fisheye::distortPoints(unDist_points, dist_points, cam_K[cam_index], cam_D[cam_index]);            mapx.at&lt;float&gt;(row, col) &#x3D; dist_points[0].x;            mapy.at&lt;float&gt;(row, col) &#x3D; dist_points[0].y;        &#125;    &#125;    cv::remap(img_dist, img_undist, mapx, mapy, cv::INTER_LINEAR);    cv::resize(img_undist, img_undist, img_dist.size());#endif#if  SHOW_DETECT_PROCESS    cv::imshow(&quot;image_remap_fish&quot;, img_undist);    cv::waitKey(0);#endif    return 0;&#125;&#x2F;** * @description: 计算重投影误差(使用均方误差，RMS) * @return &#123;*&#125; * @author: wangshuaiyang *&#x2F;float TAvmCal::ComputeProjectionError(const std::vector&lt;cv::Point3f&gt; &amp;objectPoints,                                      const std::vector&lt;cv::Point2f&gt; &amp;imagePoints,                                      const cv::Mat &amp;cameraMatrix,                                      const cv::Mat &amp;rvec,                                      const cv::Mat &amp;tvec)&#123;    &#x2F;&#x2F; 使用估计的相机位姿将世界坐标系中的三维点投影到图像平面上    std::vector&lt;cv::Point2f&gt; projectedPoints;    cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, cv::noArray(), projectedPoints);    &#x2F;&#x2F; 计算重投影误差    float RMS_Error &#x3D; 0.0;    for (size_t i &#x3D; 0; i &lt; imagePoints.size(); ++i)    &#123;        float dx &#x3D; projectedPoints[i].x - imagePoints[i].x;        float dy &#x3D; projectedPoints[i].y - imagePoints[i].y;        RMS_Error +&#x3D; (dx * dx + dy * dy);    &#125;    RMS_Error &#x2F;&#x3D; (float)imagePoints.size();    RMS_Error &#x3D; std::sqrt(RMS_Error);    &#x2F;&#x2F; 返回总的重投影误差    return RMS_Error;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 鱼眼相机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 鱼眼相机外参标定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>name</title>
      <link href="/2023/05/29/0-mo-ban/"/>
      <url>/2023/05/29/0-mo-ban/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Class </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolo-CSP瓶颈模块的变种</title>
      <link href="/2023/05/29/yolo-csp-ping-jing-mo-kuai-de-bian-chong/"/>
      <url>/2023/05/29/yolo-csp-ping-jing-mo-kuai-de-bian-chong/</url>
      
        <content type="html"><![CDATA[<p>从 YOLOv3 到 YOLOv11，Ultralytics 团队结合当时的主流结构提出了各种适用于 YOLO 的模块，涵盖了不同的创新和优化思路，从而应对不断变化的目标检测需求。这些模块在每一代 YOLO 发展中扮演了重要角色，从特征提取的方式到模型的速度优化，体现了目标检测网络的逐步演进。从这些模块的发展中，我们可以看出目标检测网络在精度、速度和特征提取能力方面的逐步改进。这篇博客我们来探讨这些模块的演变过程：Bottleneck、C3、C3k、C2f 和 C3k2，理解它们之间的联系和区别，以及它们在不同应用场景中的适用性。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/YOLO-CSP%E7%93%B6%E9%A2%88%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8F%98%E7%A7%8D/image.png" alt="alt text"></p><h1 id="标准瓶颈模块：Bottleneck"><a href="#标准瓶颈模块：Bottleneck" class="headerlink" title="标准瓶颈模块：Bottleneck"></a>标准瓶颈模块：Bottleneck</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/YOLO-CSP%E7%93%B6%E9%A2%88%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8F%98%E7%A7%8D/image-1.png" alt="alt text"></p><p><code>Bottleneck</code> 是最基础的模块，用于构建更复杂的 CSP 结构。它包含两个卷积层，能够有效地减少计算量并提取特征。这个模块还可以选择是否使用 shortcut 连接，以增强梯度传播。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bottleneck</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Standard bottleneck."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> shortcut<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initializes a standard bottleneck module with optional shortcut connection and configurable parameters."""</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        c_ <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c2 <span class="token operator">*</span> e<span class="token punctuation">)</span>  <span class="token comment"># hidden channels</span>        self<span class="token punctuation">.</span>cv1 <span class="token operator">=</span> Conv<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c_<span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cv2 <span class="token operator">=</span> Conv<span class="token punctuation">(</span>c_<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> g<span class="token operator">=</span>g<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add <span class="token operator">=</span> shortcut <span class="token keyword">and</span> c1 <span class="token operator">==</span> c2    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Applies the YOLO FPN to input data."""</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>cv2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>add <span class="token keyword">else</span> self<span class="token punctuation">.</span>cv2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Bottleneck</code> 模块通过两个卷积层来提取特征，并可以选择是否加入shortcut，使其在某些情况下具有更好的梯度传播效果。</p><h1 id="基础模块：C3"><a href="#基础模块：C3" class="headerlink" title="基础模块：C3"></a>基础模块：C3</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/YOLO-CSP%E7%93%B6%E9%A2%88%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8F%98%E7%A7%8D/image-2.png" alt="alt text"></p><p><code>C3</code> 是 CSP 瓶颈模块的一个基础版本，它的目的是通过增加特征的传递路径来提升网络的表现。<code>C3</code> 包含三个卷积层和一系列瓶颈层，能够高效提取不同层次的特征。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C3</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> shortcut<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        c_ <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c2 <span class="token operator">*</span> e<span class="token punctuation">)</span>  <span class="token comment"># hidden channels</span>        self<span class="token punctuation">.</span>cv1 <span class="token operator">=</span> Conv<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 第一个卷积层</span>        self<span class="token punctuation">.</span>cv2 <span class="token operator">=</span> Conv<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 第二个卷积层</span>        self<span class="token punctuation">.</span>cv3 <span class="token operator">=</span> Conv<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> c_<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 第三个卷积层，用于融合特征</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>Bottleneck<span class="token punctuation">(</span>c_<span class="token punctuation">,</span> c_<span class="token punctuation">,</span> shortcut<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 多个瓶颈层的组合</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cv3<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>cv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 合并特征</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>C3</code> 中，特征被分为两条路径，一条路径通过多层瓶颈层来提取复杂的特征，另一条路径直接传递输入特征。最后，通过拼接两条路径的输出，来增加模型的表达能力。</p><h1 id="可定制卷积核的-C3k"><a href="#可定制卷积核的-C3k" class="headerlink" title="可定制卷积核的 C3k"></a>可定制卷积核的 C3k</h1><p><code>C3k</code> 是 <code>C3</code> 模块的一个变体，主要改进在于它允许自定义卷积核的大小（kernel size）。这使得 <code>C3k</code> 可以更好地适应不同尺寸的图像特征，尤其是当我们需要捕捉更大范围的上下文信息时。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C3k</span><span class="token punctuation">(</span>C3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> shortcut<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> n<span class="token punctuation">,</span> shortcut<span class="token punctuation">,</span> g<span class="token punctuation">,</span> e<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>Bottleneck<span class="token punctuation">(</span>c_<span class="token punctuation">,</span> c_<span class="token punctuation">,</span> shortcut<span class="token punctuation">,</span> g<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>与基础的 <code>C3</code> 不同，<code>C3k</code> 在初始化时允许设置不同的卷积核大小 <code>k</code>，以便更灵活地应对各种不同的特征提取需求。比如，在需要捕捉更大区域信息时，我们可以设置更大的 <code>k</code> 值。当 <code>k</code> 设置为 <code>3</code> 时，<code>C3k</code> 在功能上与 <code>C3</code> 相等。</p><h1 id="加速模块：C2f"><a href="#加速模块：C2f" class="headerlink" title="加速模块：C2f"></a>加速模块：C2f</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/YOLO-CSP%E7%93%B6%E9%A2%88%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8F%98%E7%A7%8D/image-3.png" alt="alt text"></p><p><code>C2f</code> 是一个为了提升处理速度而设计的 CSP 瓶颈模块。它通过减少卷积层的数量和采用更高效的特征合并策略来提高速度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C2f</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> shortcut<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c2 <span class="token operator">*</span> e<span class="token punctuation">)</span>  <span class="token comment"># hidden channels</span>        self<span class="token punctuation">.</span>cv1 <span class="token operator">=</span> Conv<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 用于分割特征</span>        self<span class="token punctuation">.</span>cv2 <span class="token operator">=</span> Conv<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>c<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 最终融合层</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">(</span>self<span class="token punctuation">.</span>c<span class="token punctuation">,</span> self<span class="token punctuation">.</span>c<span class="token punctuation">,</span> shortcut<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 瓶颈层列表</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将特征分成两部分</span>        y<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>m<span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>m<span class="token punctuation">)</span>  <span class="token comment"># 逐步增加特征</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cv2<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 最终特征融合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>C2f</code> 中，通过减少瓶颈层的数量以及对特征的快速分割和合并，达到了加速网络的目的，非常适合在对速度要求较高的应用场景中使用。</p><h1 id="灵活组合模块：C3k2"><a href="#灵活组合模块：C3k2" class="headerlink" title="灵活组合模块：C3k2"></a>灵活组合模块：C3k2</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/YOLO-CSP%E7%93%B6%E9%A2%88%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8F%98%E7%A7%8D/image-4.png" alt="alt text"></p><p><code>C3k2</code> 结合了 <code>C2f</code> 的速度优势和 <code>C3k</code> 的灵活性。它允许在运行时选择是否使用 <code>C3k</code> 层来处理特征，提供了很高的可配置性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C3k2</span><span class="token punctuation">(</span>C2f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> c3k<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> shortcut<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> n<span class="token punctuation">,</span> shortcut<span class="token punctuation">,</span> g<span class="token punctuation">,</span> e<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span>            C3k<span class="token punctuation">(</span>self<span class="token punctuation">.</span>c<span class="token punctuation">,</span> self<span class="token punctuation">.</span>c<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> shortcut<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token keyword">if</span> c3k <span class="token keyword">else</span> Bottleneck<span class="token punctuation">(</span>self<span class="token punctuation">.</span>c<span class="token punctuation">,</span> self<span class="token punctuation">.</span>c<span class="token punctuation">,</span> shortcut<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 <code>c3k</code> 参数设置为 <code>True</code> 时，<code>C3k2</code> 将使用 <code>C3k</code> 层，能够利用不同卷积核大小的灵活性；否则，它将使用标准的瓶颈层，与 <code>C2f</code> 类似。</p><p><code>C3k2</code> 与 <code>C2f</code> 的不同之处在于，<code>C3k2</code> 通过 <code>c3k</code> 参数可以选择是否使用 <code>C3k</code> 模块中的可变卷积核大小。这使得 <code>C3k2</code> 在需要更灵活的特征提取时具备优势，例如在处理需要不同感受野的场景时，可以通过调整 <code>C3k</code> 来适应特定的特征提取需求。而 <code>C2f</code> 则保持固定的结构和速度优势，更适合对计算资源有严格限制的应用场景。</p><h1 id="C3k2-的灵活性与-C3k-和-C3-的关系"><a href="#C3k2-的灵活性与-C3k-和-C3-的关系" class="headerlink" title="C3k2 的灵活性与 C3k 和 C3 的关系"></a><code>C3k2</code> 的灵活性与 <code>C3k</code> 和 <code>C3</code> 的关系</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/YOLO-CSP%E7%93%B6%E9%A2%88%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8F%98%E7%A7%8D/image-5.png" alt="alt text"></p><p>对于 <code>C3k2</code> 模块，当 <code>c3k=True</code> 和 <code>c3k=False</code> 时，其内部模块的选择会有所不同，这影响了其与 <code>C3</code> 和 <code>C3k</code> 的关系：</p><ul><li><p>**<code>C3k2</code> 中 <code>c3k=True</code>**：</p><ul><li>在这种情况下，<code>C3k2</code> 将使用 <code>C3k</code> 模块。<code>C3k</code> 模块允许使用不同大小的卷积核，这给模型带来了灵活性，特别是在需要不同感受野来处理复杂特征的场景。</li><li>这样一来，<code>C3k2</code> 在内部使用 <code>C3k</code> 的特性，通过可配置的卷积核大小来适应不同的任务需求。</li></ul></li><li><p>**<code>C3k2</code> 中 <code>c3k=False</code>**：</p><ul><li>在这种情况下，<code>C3k2</code> 使用的模块与标准的 <code>C2f</code> 类似，即使用了固定的 <code>Bottleneck</code> 层。</li><li>在这个配置下，<code>C3k2</code> 在特性上与 <code>C2f</code> 没有区别，主要强调的是速度优化，而不是灵活性。</li></ul></li></ul><p>因此，**<code>C3k2</code> 在 <code>c3k=True</code> 和 <code>c3k=False</code> 时的区别在于是否使用了 <code>C3k</code> 模块的灵活卷积核**。当 <code>c3k=True</code> 时，<code>C3k2</code> 可以提供更灵活的卷积核大小，因此它与 <code>C3</code>、<code>C3k</code> 有区别。而当 <code>c3k=False</code> 时，<code>C3k2</code> 与 <code>C2f</code> 一致，关注的是加速特性。</p><p>总结来说，<code>C3k2</code> 在 <code>c3k=True</code> 时与 <code>C3k</code> 类似，强调灵活性，而在 <code>c3k=False</code> 时与 <code>C2f</code> 一致，强调速度和效率。这样，<code>C3k2</code> 既可以作为灵活的特征提取模块，也可以作为快速的特征融合模块，具体使用哪个取决于您的任务需求。</p><p><code>C3k2</code> 与 <code>C2f</code> 的不同之处在于，<code>C3k2</code> 通过 <code>c3k</code> 参数可以选择是否使用 <code>C3k</code> 模块中的可变卷积核大小。这使得 <code>C3k2</code> 在需要更灵活的特征提取时具备优势，例如在处理需要不同感受野的场景时，可以通过调整 <code>C3k</code> 来适应特定的特征提取需求。而 <code>C2f</code> 则保持固定的结构和速度优势，更适合对计算资源有严格限制的应用场景。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>Bottleneck</code> 是最基础的模块，用于特征提取和减少计算量。</li><li><code>C3</code> 是基础模块，包含三层卷积和多层瓶颈层，用于增强特征传递。</li><li><code>C3k</code> 在 <code>C3</code> 的基础上增加了卷积核大小的可配置性，使其更适合不同的特征提取需求。</li><li><code>C2f</code> 通过简化结构来加速处理，适合对计算速度有较高要求的场景。</li><li><code>C3k2</code> 结合了 <code>C3k</code> 和 <code>C2f</code> 的优势，提供了更高的灵活性和速度。</li></ul><p>在某些特定情况下，这些模块是等价的：</p><ul><li>当 <code>C3k</code> 的卷积核大小 <code>k</code> 设置为 <code>3</code> 时，它在功能上与 <code>C3</code> 相等。此时，<code>C3k</code> 提供了与 <code>C3</code> 相同的特征提取能力，但增加了卷积核大小的可配置性。</li><li>当 <code>C3k2</code> 的 <code>c3k</code> 参数设置为 <code>False</code> 时，<code>C3k2</code> 的功能与 <code>C2f</code> 相同。它在这种情况下只是在结构上提供了额外的灵活性，但并没有使用 <code>C3k</code> 层的优势。</li></ul><p>这些模块的设计思路各有侧重，使用时可以根据具体任务的需求来选择合适的变种。例如，在需要快速处理和灵活特征提取的情况下，可以选择 <code>C3k2</code> 模块；而在需要保持基础结构的情况下，<code>C3</code> 则是不错的选择。没有绝对的好与不好，只有适合还是不适合。</p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://blog.csdn.net/weixin_43694096/article/details/144034254">CSDN: 深入理解 CSP 瓶颈模块的变种：Bottleneck、C3、C3k、C2f 和 C3k2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
            <tag> scp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolo12文章阅读笔记</title>
      <link href="/2023/05/29/yolo12-wen-zhang-yue-du-bi-ji/"/>
      <url>/2023/05/29/yolo12-wen-zhang-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo12%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/yolo12-1752224126368-2-1752224137167-4.png" alt="yolo12"></p><h1 id="YOLOv12改进"><a href="#YOLOv12改进" class="headerlink" title="YOLOv12改进"></a>YOLOv12改进</h1><ul><li><p>首先，设计了一个简单高效的区域注意力模块（A2），该模块在保持大感受野的同时，通过极其简洁的方式降低了注意力机制的计算复杂度，从而显著提升运行速度；</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo12%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20250712141541523.png" alt="image-20250712141541523"></p></li><li><p>其次，引入残差高效层聚合网络（R-ELAN），专门解决注意力机制带来的优化难题（尤其针对大规模模型）。R-ELAN在原有ELAN 基础上进行了两项改进：</p><ul><li>采用基于块级残差设计的缩放技术，</li><li>重新设计特征聚合方法。</li></ul></li><li><p>最后，针对YOLO系统进行了架构优化升级，突破传统<strong>Transform</strong>注意力机制的局限。具体改进包括：</p><ul><li><p>引入Flash Attention算法解决注意力机制的内存访问问题；</p><blockquote><p>Flash Attention是一种优化IO访存开销的精确注意力方法，通过Tiling切片、重计算、Kernel Fusion等方式来减少高带宽内存（片上内存）和SRAM之间的内存读&#x2F;写次数。海思的NPU侧也实现了相关操作。</p></blockquote></li><li><p>移除位置编码等冗余设计以提升模型效率；</p><blockquote><p>YOLOv12 采用了类似 Transformer 的注意力机制或者相关设计，但去掉了 Transformer 里经典的“位置编码”部分，这是为了减少计算复杂度和模型冗余。</p></blockquote></li><li><p>将MLP比例从4调整为1.2平衡计算负载；</p><blockquote><p>YOLOv12 引入了 Transformer 结构，并将 MLP（即 FFN）扩展比例从传统的 4 调整为 1.2，其目的是在引入注意力机制带来更强特征建模能力的同时，控制计算复杂度，提升部署效率</p></blockquote></li><li><p>缩短堆叠模块深度便于优化,充分利用卷积运算的高效特性。</p></li></ul><blockquote><p>架构优化升级其实就是提出了A2模块</p></blockquote></li></ul><h1 id="其他YOLO的改进"><a href="#其他YOLO的改进" class="headerlink" title="其他YOLO的改进"></a>其他YOLO的改进</h1><ul><li>YOLOv4 和YOLOv5 引入CSPNet 、数据增强技术及多尺度特征提取</li><li>YOLOv6在主干网络和颈部网络中分别引入BiC和SimCSPSPPF模块，并采用锚点辅助训练技术，实现了性能的全面提升。</li><li>YOLOv7 通过引入EELAN（高效层聚合网络）优化梯度流并提供多种免费赠品，</li><li>YOLOv8 则集成了高效的C2f模块以增强特征提取能力。在近期的迭代版本中，</li><li>YOLOv9 引入了GELAN架构优化和PGI训练改进技术</li><li>YOLOv10 则通过NMSfree双分配训练策略提升效率。</li><li>YOLOv11 通过采用C3K2模块（GELAN的规范）和检测头中的轻量级深度可分离卷积，进一步降低了延迟并提升了精度。</li></ul><h1 id="注意力机制推理速度慢于卷积的原因"><a href="#注意力机制推理速度慢于卷积的原因" class="headerlink" title="注意力机制推理速度慢于卷积的原因"></a>注意力机制推理速度慢于卷积的原因</h1><p>​注意力机制虽然在捕捉全局依赖关系以及促进自然语言处理和计算机视觉等任务方面非常有效，但其速度本质上比卷积神经网络（CNN）要慢。造成这种速度差异的两个主要因素是：</p><ul><li>复杂度：自注意力操作的计算复杂度随着输入序列长度L的平方增长。具体来说，对于一个长度为L、特征维度为d的输入序列，计算注意力矩阵需要O(L²d)的操作，因为每个token都与其他token进行交互。相比之下，CNN中的卷积操作的复杂度是线性增长的，即O(kLd)，其中k为卷积核的大小，通常远小于L。因此，自注意力机制在面对大尺寸输入（如高分辨率图像或长序列）时，计算开销变得不可接受。</li><li>计算效率：第二个重要因素是，注意力计算过程中的内存访问模式较为低效。具体而言，在自注意力过程中，需要将中间计算结果（如注意力图QKT和softmax图，大小为L×L）从高速GPU内存（计算的实际位置）存储到高带宽GPU内存中，并在计算过程中读取这些数据。而前者的读写速度比后者快10倍以上，导致显著的内存访问开销，增加了总的计算时间。此外，注意力机制中的内存访问模式较为不规则，相比之下，CNN利用结构化且局部化的内存访问方式，可以有效地进行内存缓存，减少延迟。</li></ul><p>​降低基础注意力机制的计算成本，可以采用如下方法：</p><ul><li>一个简单的方法是采用线性注意力机制。该机制将原本需要二次方复杂度的计算量简化为线性复杂度。对于维度为（n，h，d）的视觉特征f（其中n表示标记数量，h为头数，d为头尺寸），线性注意力机制将计算复杂度从$2n^2hd$降低到$2nhd^2$ ，由于n大于d，从而显著减少计算开销。不过，线性注意力机制存在全局依赖性退化、稳定性问题以及分布敏感性问题等缺陷。此外，由于低秩瓶颈的存在，当应用于输入分辨率为640×640的YOLO时，其速度优势有限。</li><li>另一种有效降低复杂度的替代方案是局部注意力机制（如移位窗口、交叉注意力和轴向注意力)，如图2所示，该机制将全局注意力转换为局部注意力。然而，将特征图分割成窗口可能会引入额外开销或缩小感受野，从而影响速度和准确率。</li></ul><p>​在本研究中，提出了一种简单高效的区域注意力模块。将分辨率(H,W)的特征图分割为$l$个尺寸为$(H&#x2F;l,w$或$(H,w&#x2F;l)$的子块。这种方法消除了显式的窗口分割需求，仅需简单的重组操作即可实现更快的速度。我们通过实验将默认分割数$l$设为4，使感受野缩小至原始值的$1&#x2F;4$，但仍保持较大的感受野。采用此方法后，**注意力机制的计算成本从$2n^2hd$降低到$1&#x2F;2n^2hd$*<em>。研究表明，尽管复杂度n有所增加，但在输入分辨率固定为640时（若输入分辨率提高则n值会增大），该方案仍能有效满足YOLO系统的实时需求。有趣的是，我们发现</em>这种改进对性能的影响微乎其微，却显著提升了运行速度*。</p><h1 id="R-ELAN"><a href="#R-ELAN" class="headerlink" title="R-ELAN"></a>R-ELAN</h1><p>​高效层聚合网络（ELAN）旨在优化特征聚合机制。如图所示，该架构首先将过渡层（1×1卷积）的输出进行分割，通过多个模块处理每个分割结果后，将所有输出拼接并再次应用过渡层（1×1卷积）以实现维度对齐。但分析表明，<em>这种设计可能引发网络不稳定问题。我们认为该架构会导致梯度阻塞现象，并且缺乏从输入到输出的残差连接机制</em>。此外，我们采用注意力机制构建网络，这给优化过程带来了额外挑战。实验数据显示，即使使用Adam或AdamW优化器，L-和X模型仍存在收敛困难或运行不稳定的问题。为解决这一问题，我们提出了残差高效层聚合网络（R-ELAN）。与传统方法不同，我们在整个模块中引入了输入到输出的残差捷径通道，并采用缩放因子（默认值为0. 01)。这种设计类似于用于构建深度视觉变换器的层缩放技术。然而，对每个区域注意力机制单独应用层缩放并不能解决优化难题，反而会导致延迟增加。这表明注意力机制的引入并非收敛的唯一原因，ELAN架构本身才是关键所在，这也验证了我们R-ELAN设计的合理性。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo12%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20250712134553139.png" alt="image-20250712134553139"></p><p>​这个高效层聚合网络指的是A2C2F，其中A2也是本文的创新，取名为区域注意力模块<strong>Area attention</strong>，应该是这个英文名字中两个单词都是以字母a开头，所以叫A2吧！后面的C2F是在YOLOv8中提出的，而这个A2C2F就是将C2F中的瓶颈结构模(BottleNeck)块换为了A2，并进行了改进。</p><h1 id="实验结果分析"><a href="#实验结果分析" class="headerlink" title="实验结果分析"></a>实验结果分析</h1><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo12%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20250712140148347.png" alt="image-20250712140148347"></p><p>上表揭示了两个关键发现：</p><ul><li>对于YOLOv12-N这类小型模型，残差连接不会影响收敛性但会降低性能。对于大型模型（YOLOv12-L&#x2F;X），它们是稳定训练的必要条件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo12%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20250712140731608.png" alt="image-20250712140731608"></p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul><li>[YOLOv12论文模型解析 -CSDN](<a href="https://github.com/geiyiren/MyBlogFile1/yolo/YOLOv12%E8%AE%BA%E6%96%87%E6%A8%A1%E5%9E%8B%E8%A7%A3%E6%9E%90">https://github.com/geiyiren/MyBlogFile1/yolo/YOLOv12论文模型解析</a> .pdf)</li><li><a href="https://blog.csdn.net/pengxiang1998/article/details/148005680?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-148005680-blog-147497370.235%5Ev43%5Epc_blog_bottom_relevance_base8&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-148005680-blog-147497370.235%5Ev43%5Epc_blog_bottom_relevance_base8&utm_relevant_index=5">YOLO12的A2C2f模块解析-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
            <tag> 文章阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolo12注意力机制的实现分析</title>
      <link href="/2023/05/29/yolo12-zhu-yi-li-ji-zhi-de-shi-xian-fen-xi/"/>
      <url>/2023/05/29/yolo12-zhu-yi-li-ji-zhi-de-shi-xian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>注意力机制的实现代码如下:</p><ul><li>ultralytics&#x2F;nn&#x2F;modules&#x2F;block.py</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AAttn</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Area-attention module for YOLO models, providing efficient attention mechanisms.    This module implements an area-based attention mechanism that processes input features in a spatially-aware manner,    making it particularly effective for object detection tasks.    Attributes:        area (int): Number of areas the feature map is divided.        num_heads (int): Number of heads into which the attention mechanism is divided.        head_dim (int): Dimension of each attention head.        qkv (Conv): Convolution layer for computing query, key and value tensors.        proj (Conv): Projection convolution layer.        pe (Conv): Position encoding convolution layer.    Methods:        forward: Applies area-attention to input tensor.    Examples:        >>> attn = AAttn(dim=256, num_heads=8, area=4)        >>> x = torch.randn(1, 256, 32, 32)        >>> output = attn(x)        >>> print(output.shape)        torch.Size([1, 256, 32, 32])    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dim<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> num_heads<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> area<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize an Area-attention module for YOLO models.        Args:            dim (int): Number of hidden channels.            num_heads (int): Number of heads into which the attention mechanism is divided.            area (int): Number of areas the feature map is divided.        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>area <span class="token operator">=</span> area        self<span class="token punctuation">.</span>num_heads <span class="token operator">=</span> num_heads        self<span class="token punctuation">.</span>head_dim <span class="token operator">=</span> head_dim <span class="token operator">=</span> dim <span class="token operator">//</span> num_heads        all_head_dim <span class="token operator">=</span> head_dim <span class="token operator">*</span> self<span class="token punctuation">.</span>num_heads        self<span class="token punctuation">.</span>qkv <span class="token operator">=</span> Conv<span class="token punctuation">(</span>dim<span class="token punctuation">,</span> all_head_dim <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>proj <span class="token operator">=</span> Conv<span class="token punctuation">(</span>all_head_dim<span class="token punctuation">,</span> dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pe <span class="token operator">=</span> Conv<span class="token punctuation">(</span>all_head_dim<span class="token punctuation">,</span> dim<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> g<span class="token operator">=</span>dim<span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Process the input tensor through the area-attention.        Args:            x (torch.Tensor): Input tensor.        Returns:            (torch.Tensor): Output tensor after area-attention.        """</span>        B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape        N <span class="token operator">=</span> H <span class="token operator">*</span> W        qkv <span class="token operator">=</span> self<span class="token punctuation">.</span>qkv<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>area <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            qkv <span class="token operator">=</span> qkv<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B <span class="token operator">*</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> N <span class="token operator">//</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> C <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>            B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> _ <span class="token operator">=</span> qkv<span class="token punctuation">.</span>shape        q<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token punctuation">(</span>            qkv<span class="token punctuation">.</span>view<span class="token punctuation">(</span>B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head_dim <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>head_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head_dim<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        attn <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> @ k<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>head_dim<span class="token operator">**</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span>        attn <span class="token operator">=</span> attn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> v @ attn<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        v <span class="token operator">=</span> v<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>area <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B <span class="token operator">//</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> N <span class="token operator">*</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> C<span class="token punctuation">)</span>            v <span class="token operator">=</span> v<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B <span class="token operator">//</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> N <span class="token operator">*</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> C<span class="token punctuation">)</span>            B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> _ <span class="token operator">=</span> x<span class="token punctuation">.</span>shape        x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span>        v <span class="token operator">=</span> v<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>pe<span class="token punctuation">(</span>v<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>proj<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="qkv提取与拆分"><a href="#qkv提取与拆分" class="headerlink" title="qkv提取与拆分"></a>qkv提取与拆分</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shapeN <span class="token operator">=</span> H <span class="token operator">*</span> W qkv <span class="token operator">=</span> self<span class="token punctuation">.</span>qkv<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> self<span class="token punctuation">.</span>area <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>    qkv <span class="token operator">=</span> qkv<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B <span class="token operator">*</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> N <span class="token operator">//</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> C <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> _ <span class="token operator">=</span> qkv<span class="token punctuation">.</span>shapeq<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token punctuation">(</span>    qkv<span class="token punctuation">.</span>view<span class="token punctuation">(</span>B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head_dim <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>head_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head_dim<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>all_head_dim</p><p>这个是保证输出的维度为分支头个数的整数倍的3倍</p></li><li><p>self.qkv()</p><p>self.qkv()是一个1x1卷积，目的是将输入的张量转换为多头的qkv张量，所谓的多头注意力机制就是将输入张量进行卷积，进行维度变换。self.qkv()将一个输入张量”拆分“为多头的{q,k,v}”拼接向量“，然后再执行拆分。</p><p>经过self.qkv()后维度由[B, C, H, W]转换为[B, 3*C, H, W]</p></li><li><p>flatten(2).transpose(1, 2)</p><p>将张量的最后2个维度合并后将交换第1个通道和第2个通道。此时输出的维度为[B, H* W, 3*C]</p></li><li><p>qkv.reshape()</p><p>将 <strong>原来的图像每张切成 area 份</strong>，所以总的 batch 就变成了 <code>B × area</code></p><p>每一份区域中，包含的 token 数是 $\frac{H<em>W}{\text{area}}$，即空间被均匀划分。这里的token就是像素块，H</em>W的图像被均匀的划分为area个像素块，那就是类似下面这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo12%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/image-20250722161844082.png" alt="image-20250722161844082"></p><p>每个 token 的特征维度还是 3C（因为包含 q, k, v）,这里其实是张量的”深度“为3C</p></li><li><p>q, k, v提取</p><ul><li><p>view</p><p>qkv的维度为[B, N, num_heads * head_dim * 3]，这里将 qkv重新 reshape 成一个 4 维张量，每个位置上的 QKV 被合并在 <code>head_dim * 3</code> 上，形状变为: [B, N, num_heads, 3 * head_dim]</p></li><li><p>permute</p><p>将维度重新排列，得到[B, num_heads, 3 * head_dim, N]新维度</p></li><li><p>split</p><p>在第 2 维（即 <code>3 * head_dim</code> 这一维）上，按照每 <code>head_dim</code> 切 3 段，即：</p><ul><li>第一段：query $q$ → <code>[B, num_heads, head_dim, N]</code></li><li>第二段：key   $k$ → <code>[B, num_heads, head_dim, N]</code></li><li>第三段：value $v$ → <code>[B, num_heads, head_dim, N]</code></li></ul></li></ul></li></ul><h2 id="注意力得分计算"><a href="#注意力得分计算" class="headerlink" title="注意力得分计算"></a>注意力得分计算</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">attn <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> @ k<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>head_dim<span class="token operator">**</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>维度变化：</p><ul><li><p><code>q.transpose(-2, -1)</code> → <code>[B, num_heads, N, head_dim]</code></p></li><li><p><code>k</code> → <code>[B, num_heads, head_dim, N]</code></p></li><li><p>相乘：矩阵乘法：<br>$$<br>[B, h, N, d] \times [B, h, d, N] → [B, h, N, N]<br>$$</p></li><li><p>最终得到：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">attn<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token punctuation">[</span>B<span class="token punctuation">,</span> num_heads<span class="token punctuation">,</span> N<span class="token punctuation">,</span> N<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>每个位置 i 与所有 j 之间的相似度打分（即 attention 分数）</p></blockquote><p>为什么乘以 $\text{head_dim}^{-0.5}$？</p><ul><li>为了缩放，使得 dot product 不会太大或太小，防止 softmax 梯度消失或爆炸。</li><li>来源于原始 Transformer 论文中的 <strong>scaled dot-product attention</strong>。</li></ul><hr><h2 id="softmax-获取注意力权重"><a href="#softmax-获取注意力权重" class="headerlink" title="softmax 获取注意力权重"></a>softmax 获取注意力权重</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">attn <span class="token operator">=</span> attn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>对最后一维（即 token 维）做 softmax</li><li>每一行是该 token 对所有其他 token 的权重和为 1</li></ul><hr><h2 id="用注意力权重加权-value-向量"><a href="#用注意力权重加权-value-向量" class="headerlink" title="用注意力权重加权 value 向量"></a>用注意力权重加权 value 向量</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> v @ attn<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>维度说明：</p><ul><li><code>v.shape = [B, num_heads, head_dim, N]</code></li><li><code>attn.transpose(-2, -1).shape = [B, num_heads, N, N]</code></li></ul><p>乘法结果：<br>$$<br>[B, h, d, N] \times [B, h, N, N] → [B, h, d, N]<br>$$<br>输出的 <code>x</code> 就是每个 token 经过 weighted sum 的结果：</p><blockquote><p>每个位置 i 的新表示，是用所有 j 的 value 加权加起来的结果。</p></blockquote><hr><h2 id="还原-token-维度顺序"><a href="#还原-token-维度顺序" class="headerlink" title="还原 token 维度顺序"></a>还原 token 维度顺序</h2><pre class="line-numbers language-none"><code class="language-none">python复制编辑x &#x3D; x.permute(0, 3, 1, 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原始：<code>[B, num_heads, head_dim, N]</code></li><li>目标：<code>[B, N, num_heads, head_dim]</code></li></ul><blockquote><p>将 <code>x</code> 排列回正常的 token 顺序，为后续拼接使用。</p></blockquote><hr><h2 id="同步转换-value-的顺序（用于后面位置编码）"><a href="#同步转换-value-的顺序（用于后面位置编码）" class="headerlink" title="同步转换 value 的顺序（用于后面位置编码）"></a>同步转换 value 的顺序（用于后面位置编码）</h2><pre class="line-numbers language-none"><code class="language-none">python复制编辑v &#x3D; v.permute(0, 3, 1, 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同样地把 v 从 <code>[B, num_heads, head_dim, N]</code> 转换为 <code>[B, N, num_heads, head_dim]</code>，以便后续 reshape 成图像格式。</li></ul><hr><p>最终 <code>x</code> 和 <code>v</code> 的形状变为：</p><pre class="line-numbers language-none"><code class="language-none">python复制编辑x.shape &#x3D; [B, N, num_heads, head_dim]v.shape &#x3D; [B, N, num_heads, head_dim]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来，它们会被 reshape 回 <code>[B, C, H, W]</code> 格式，然后用于加位置编码等操作。</p><h2 id="反向-reshape-成原始-batch"><a href="#反向-reshape-成原始-batch" class="headerlink" title="反向 reshape 成原始 batch"></a>反向 reshape 成原始 batch</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B <span class="token operator">//</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> N <span class="token operator">*</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> C<span class="token punctuation">)</span>v <span class="token operator">=</span> v<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B <span class="token operator">//</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> N <span class="token operator">*</span> self<span class="token punctuation">.</span>area<span class="token punctuation">,</span> C<span class="token punctuation">)</span>B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> _ <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样操作是为了将 token 恢复回原始图像结构</p><h2 id="恢复为图像格式"><a href="#恢复为图像格式" class="headerlink" title="恢复为图像格式"></a>恢复为图像格式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span>v <span class="token operator">=</span> v<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>reshape(B, H, W, C)</code> → 空间上恢复为 2D 格式</p><p>permute(0, 3, 1, 2)<code>→ 转为常规图像格式</code>[B, C, H, W]</p><p><code>contiguous()</code> → 保证内存布局正确（防止后续错误）</p><h2 id="添加位置编码"><a href="#添加位置编码" class="headerlink" title="添加位置编码"></a>添加位置编码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>pe<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>self.pe是一个分组卷积(每个输出通道用一个自己的卷积核处理输入通道)</p><p>用 v来生成相对位置编码，代表空间感知或局部增强，然后直接做逐位置加法</p><h2 id="融合多头"><a href="#融合多头" class="headerlink" title="融合多头"></a>融合多头</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>proj<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多头注意力机制中每个 head 学习不同的子空间信息。<code>self.proj(x)</code> 是一个 1×1 卷积层，用于将多头注意力后的特征图从多头拼接的维度 (<code>all_head_dim</code>) 映射回模型原始的维度 <code>dim</code>，完成通道融合。</p><p>上述便是yolo12的区域注意力机制，该模块不改变输出张量的维度。完整的注意力机制的流程图如下所示:</p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolo12注意力机制的实现分析/deepseek_mermaid_20250722_1f42f8.png" alt="deepseek_mermaid_20250722_1f42f8" style="zoom: 33%;" />]]></content>
      
      
      <categories>
          
          <category> yolo12 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注意力机制 </tag>
            
            <tag> yolo12 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yoloV12训练与优化</title>
      <link href="/2023/05/29/yolov12-xun-lian-yu-you-hua/"/>
      <url>/2023/05/29/yolov12-xun-lian-yu-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="参数量分析"><a href="#参数量分析" class="headerlink" title="参数量分析"></a>参数量分析</h1><ul><li>pt模型<br>YOLOv12n summary (fused): 159 layers, 2,558,288 parameters, 0 gradients, 6.3 GFLOPs</li><li>onnx模型</li></ul><table><thead><tr><th>Name</th><th>Forward_MACs</th><th>FPercent</th><th>Memory</th><th>MPercent</th><th>Params</th><th>PPercent</th><th>InShape</th><th>OutShape</th></tr></thead><tbody><tr><td>Total</td><td>1,352,561,226</td><td>100%</td><td>138,042,356</td><td>100%</td><td>2,572,509</td><td>100%</td><td>1x3x288x480</td><td>1x12x2835</td></tr></tbody></table><blockquote><p>onnx 1.17.0 opset 12…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
            <tag> 训练 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yoloV1到yoloV11系统学习</title>
      <link href="/2023/05/29/yolov1-dao-yolov11-xi-tong-xue-xi/"/>
      <url>/2023/05/29/yolov1-dao-yolov11-xi-tong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>CNN常见的层包括：全连接层、卷积层、池化层、激活层等。多层感知器包含全连接层和激活层，CNN在多层感知器的基础上加入了卷积层(池化层其实也是卷积运算，用来减少数据规模的)</p><h2 id="Dense层-全连接层"><a href="#Dense层-全连接层" class="headerlink" title="Dense层(全连接层)"></a>Dense层(全连接层)</h2><p>全连接层(Fully connected dence layers)，正如其名，指的是层中的每个节点都会连接它下一层的所有节点。理论上讲，只要神经元足够多(图中绿色圈)，神经网络可以逼近任意函数。</p><p>全连接层输出尺寸的计算公式：全连接的实质就是矩阵相乘，如下图所示：输入向量X乘以权重矩阵W，加上偏置B得到输出，所以输出向量大小等于权重矩阵的行数。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-4.png" alt="alt text"><br>计算公式$Y &#x3D; WX + B$<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-5.png" alt="alt text"></p><h2 id="Conv层-卷积层"><a href="#Conv层-卷积层" class="headerlink" title="Conv层(卷积层)"></a>Conv层(卷积层)</h2><p>对于一张输入图片，大小为[W, H]，如果生成一张[X, Y]的特征图，需要WHXY个参数，这即是全连接层(Fully connected dence layers)，这个参数量实在太庞大，网络很难训练。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-6.png" alt="alt text"></p><p>卷积层的本质就是用来解决这种计算量爆炸的问题。卷积的核心思想是：</p><ul><li>局部感知域 </li><li>权值共享</li></ul><p>局部感知：局部感知的一层的神经元只连接到前一层的局部区域，不同于全连接。这样做也有神经学原理支撑：一个神经元并非接收其它所有神经元传来的刺激都产生反应，它首先会将其相邻神经元传来的刺激进行积累，到一定时候产生自己的刺激并传递给一些与它相邻的神经元。这个相邻就是局部感知的概念，对于图像识别而言，其的空间联系也是局部的像素联系较为紧密，而距离较远的像素相关性则较弱。因此，每个神经元其实没有必要对全局图像进行感知(全局连接)，只需对局部进行感知(局部连接)，然后在更高层将局部信息综合起来就得到了全局信息。下图展示了全连接与局部连接的差别：全连接的参数可以从$10^{12}$次降到$10^8$<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-7.png" alt="alt text"></p><p>权值共享：采用局部连接后，参数还是太多了，需要引入权值共享的概念，如上图的局部连接中，对于1M个神经元，每个神经元的感知野为10x10，那么参数量即为 1M * 10 * 10，如果这1M个神经元的10 * 10的参数都是相等的，那么参数量将会降为100了。其中隐含的原理是：图像的一部分统计特性与其它部分是一样的，意味着：对于图像的所有位置，可以使用相同的权重值。卷积层的计算过程：如下图(来源于网络，侵删)所示展示了:输入(1, 5, 5, 3)，意思是batch&#x3D;1，图像HeightIn &#x3D; 5， WidthIn &#x3D; 5， channel &#x3D; 3(代表RGB三颜色通道)卷积核：(2, 3, 3, 3)，意思是2个卷积核，图像HeightKernel &#x3D; 3， WidthKernel&#x3D; 3， channel &#x3D; 3(与输入channel必须相等)填充：padding &#x3D; 1步长： stride &#x3D; 2输出：(2, 3, 3)，表示2个feature map，提取2类特征。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-8.png" alt="alt text"></p><p>卷积层输出尺寸的计算公式：<br>HeightOut &#x3D; (HeightIn - HeightKernel + 2 * padding) &#x2F; stride + 1Widthout  &#x3D; (WidthIn - WidthKernel + 2 * padding) &#x2F; stride + 1</p><h2 id="Pooling层-池化层"><a href="#Pooling层-池化层" class="headerlink" title="Pooling层(池化层)"></a>Pooling层(池化层)</h2><p>池化即下采样(downsamples)，一般在卷积层后面，目的是为了减少特征图(减少网络的参数)，从而减小计算量，并且在一定程度上能控制过拟合。常见的池化层为最大值池化层(max-pooling)与平均值池化层(mean-polling)，如下图所示，其stride为2，保证两个池化区不重叠(否则为重叠池化)<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-9.png" alt="alt text"></p><p>池化层输出尺寸的计算公式：<br>HeightOut &#x3D; (HeightIn - HeightKernel + 2 * padding) &#x2F; stride + 1Widthout  &#x3D; (WidthIn - WidthKernel + 2 * padding) &#x2F; stride + 1<br>池化层的输出深度与输入的深度相同，池化对每一个深度切片进行计算。</p><h2 id="Activation层-激活层"><a href="#Activation层-激活层" class="headerlink" title="Activation层(激活层)"></a>Activation层(激活层)</h2><p>CNN中经常是一个卷积层后跟一个激活层，激活层是一个非线性层，正如神经元有一定的阈值，只有信号强度大于某个值，神经元才能被激活，将信号发射到下一个神经元。其数学可视化过程如下图所示:<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-10.png" alt="alt text"></p><p>引入激活函数是为了增加神经网络的非线性，如果不用激活函数，每一层都是上一层的线性输入，这样一来，无论神经网络有多少层，输出都是输入的线性组合，这种情况就是最原始的感知机。引入激活函数则引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。</p><p>常见的激活函数有如下几种：</p><ul><li><p>sigmoid<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-11.png" alt="alt text"></p></li><li><p>tanh<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-12.png" alt="alt text"></p></li><li><p>relu<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-13.png" alt="alt text"></p></li></ul><p>它们各自有其优缺点，现在常用的是relu，其不需要指数运算，复杂度低，且不会出现梯度饱和、消失问题，收敛速度快。</p><h2 id="Softmax层"><a href="#Softmax层" class="headerlink" title="Softmax层"></a>Softmax层</h2><p>Softmax 是用于多类分类问题的激活函数，在多类分类问题中，超过两个类的标签则需要类成员关系。是sigmoid在多分类上的推广，目的是将多分类的结果以概率的形式展现出来，对于长度为 K 的任意实向量，Softmax 可以将其压缩为长度为 K，值在(0，1)范围内，并且向量中元素的总和为 1 的实向量。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-14.png" alt="alt text"></p><hr><p>YOLO系列检测器的整体结构包括四个部分：Input、Backbone、Neck和Head。<br>Input是物体检测器的输入，包括resize和图像增强等一系列操作。<br>Backbone负责从输入图像中提取有用的特征。它通常是一个卷积神经网络(CNN)，在大规模的图像分类任务中训练，如ImageNet。骨干网在不同的尺度上捕捉层次化的特征，在较早的层中提取低层次的特征(如边缘和纹理)，在较深的层中提取高层次的特征(如物体部分和语义信息)。<br>Neck是连接Backbone和Head的一个中间部件。它聚集并细化骨干网提取的特征，通常侧重于加强不同尺度的空间和语义信息。颈部可能包括额外的卷积层、特征金字塔网络(FPN)，或其他机制，以提高特征的代表性。<br>Head是物体检测器的最后组成部分，它负责根据Backbone和Neck提供的特征进行预测。它通常由一个或多个特定任务的子网络组成，执行分类、定位。最后一个后处理步骤，如非极大值抑制(NMS)，过滤掉重叠的预测，只保留置信度最高的检测。</p><p>在以下的YOLO模型中，本文将使用Input、Backbone、Neck和Head来描述架构。</p><h1 id="YOLOv1-2015"><a href="#YOLOv1-2015" class="headerlink" title="YOLOv1(2015)"></a>YOLOv1(2015)</h1><p>论文地址：<a href="https://arxiv.org/pdf/1506.02640.pdf">https://arxiv.org/pdf/1506.02640.pdf</a></p><p>代码地址：<a href="https://github.com/AlexeyAB/darknet">https://github.com/AlexeyAB/darknet</a></p><p>You Only Look Once(YOLO)，由Ross Girshick等人发表于CVPR 2016，在那个深度学习目标检测器爆发的年代，YOLO从R-CNN系列、SSD系列、EfficientDet系列中脱颖而出，发展成为最出色的目标检测。时至今日，其他系列目标检测器早已销声匿迹，而YOLO却名声大噪，成为工业界、学术界的宠儿。<br>在YOLOv1出现之前，R-CNN系列算法在目标检测领域独占鳌头。R-CNN系列检测精度高，但是由于其网络结构是双阶段的特点，使得它的检测速度不能满足实时性，饱受诟病。为了打破这一僵局，单阶段的目标检测网络YOLO横空出世，它的检测速度非常快，每秒可以处理45帧图片，能够轻松地实现实时检测。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image.png" alt="alt text"><br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-1.png" alt="alt text"></li></ul><p>输入维度：448×448×3 (三通道448×448像素图像)<br>输出维度：7×7×30 (7×7个网格，20个类别(VOC2012数据集)+2个Box(x,y,w,h,c))</p><p>实现过程<br>YOLO 的核心思想就是把目标检测转变成一个回归问题，利用整张图作为网络的输入，仅仅经过一个神经网络，得到边界框(bounding box)的位置及其所属的类别。</p><p>1.将一幅图像分成 S×S个网格，如果某个目标的中心落在这个网格中，则这个网格就负责预测这个目标。<br>2.每个网格要预测 B 个边界框，每个边界框要预测 (x, y, w, h) 和 confidence 共5个值。<br>3.每个网格还要预测一个类别信息，记为 C 个类。<br>4.总的来说，S×S 个网格，每个网格要预测 B个边界框 ，还要预测 C 个类。网络输出就是一个 S × S × (5×B+C) 的张量。 </p><p>在实际过程中，YOLOv1把一张图片划分为了7×7个网格，并且每个网格预测2个Box，20个类别。即S&#x3D;7，B&#x3D;2，C&#x3D;20。那么网络输出的shape也就是：7×7×30。</p><ul><li><p>Input<br>网络输入：448×448×3 (三通道448×448像素图像)。其中训练是224×224，测试是448×448。</p></li><li><p>Backbone<br>GoogLeNet(24×Conv+2×FC+reshape)，添加Dropout防止过拟合；最后一层使用线性激活函数，其余层都使用ReLU激活函数。</p></li><li><p>Neck<br>无</p></li><li><p>Head<br>输出维度：7×7×30 (7×7个网格，20个类别(VOC2012数据集)+2个Box(x,y,w,h,c))</p></li></ul><p>损失由三部分组成，分别是：位置预测损失：MSE，置信度预测损失：MSE，类别预测损失：MSE。</p><ul><li>性能表现<br>数据集：PASCAL VOC 2007，GPU硬件：NvidiaGeforce GTX Titan X，YOLOv1对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20.png" alt="alt text"></li></ul><p>YOLOv2(2016)</p><p>论文地址：<a href="https://arxiv.org/pdf/1612.08242.pdf">https://arxiv.org/pdf/1612.08242.pdf</a></p><p>代码地址：<a href="https://github.com/AlexeyAB/darknet">https://github.com/AlexeyAB/darknet</a></p><p>时隔一年，YOLOv2隆重登场，在 YOLOv1 的基础上，进行了大量改进，重点解决YOLOv1召回率和定位精度方面的不足。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-2.png" alt="alt text"></li></ul><p>输入维度：416×416×3 (三通道416×416像素图像)<br>输出维度：13×13×125 (13×13个网格，5个Box(20个类别,x,y,w,h,c))</p><p>改进细节</p><ul><li><p>Input<br>网络输入：416×416×3 (三通道416×416像素图像)</p></li><li><p>Backbone<br>Darknet-19(19×Conv+5×MaxPool+AvgPool+Softmax)，整体上采用了19个卷积层，5个池化层，没有FC层，每一个卷积后都使用BN和ReLU防止过拟合(舍弃dropout)；</p></li></ul><p>速度快了近6倍。在每一层卷积后，都增加了BN进行预处理，BN 对数据进行预处理(统一格式、均衡化、去噪等)能够大大提高训练速度，提升训练效果。采用了降维的思想，把1×1的卷积置于3×3之间，用来压缩特征。</p><ul><li><p>Neck<br>提出passthrough层：把高分辨率特征拆分叠加大到低分辨率特征中，进行特征融合，有利于小目标的检测；速度方面，相比于VGG 的306.9亿次，<br>PassThrough层的整理操作流程如下：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-15.png" alt="alt text"><br>举个例子，如下图所示，原特征图是4x4x3的一个3维矩阵，采用<code>交叉取数</code>的方法，将相同的数单独形成一个2x2的三维矩阵，最终会有4个这样的矩阵，也就是前面所说的特征图长宽减半，深度增加4倍。这样就和更深的特征图保持相同的尺寸，可以进行融合，增加特征的丰富性。<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-16.png" alt="alt text"></p></li><li><p>Head<br>输出维度：13×13×125 (13×13个网格，5个Box(20个类别,x,y,w,h,c))</p></li></ul><p>损失函数由三部分组成，分别是：位置预测损失：MSE，置信度预测损失：MSE，类别预测损失：MSE。</p><p>引入了 Anchors box 机制，使用 K-means 聚类方法得到 Anchor Box 的大小，选择具有代表性的尺寸的Anchor Box进行一开始的初始化，通过提前筛选得到的具有代表性先验框Anchors，使得网络在训练时更容易收敛。</p><ul><li><ul><li>性能表现<br>数据集：PASCAL VOC 2007，GPU硬件：Nvidia Geforce GTX Titan X，YOLOv2对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-21.png" alt="alt text"></li></ul></li></ul><h1 id="YOLOv3-2018"><a href="#YOLOv3-2018" class="headerlink" title="YOLOv3(2018)"></a>YOLOv3(2018)</h1><p>论文地址：<a href="https://arxiv.org/pdf/1804.02767.pdf">https://arxiv.org/pdf/1804.02767.pdf</a></p><p>代码地址：<a href="https://github.com/AlexeyAB/darknet">https://github.com/AlexeyAB/darknet</a></p><p>在YOLOv2的基础上进行了改进，引入了一系列的变化以提高检测性能。YOLOv3的创新与改进包括：进行多尺度训练，网络输出三个尺度的feature map；设计了新的网络结构，使用FPN网络特征金字塔进行特征融合，添加了残差连接模块；在分类部分使用了Logistic来代替之前的softmax。由于他反对将YOLO用于军事和隐私窥探，2020年2月宣布停止更新YOLO。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-18.png" alt="alt text"></li></ul><p>输入维度：416×416×3 (三通道416×416像素图像)<br>输出维度：N×N×255 (N×N个网格(使用了多尺度，N取13&#x2F;26&#x2F;52)，3个Box(80个类别,x,y,w,h,c))</p><p>改进细节</p><ul><li><p>Input<br>网络输入：416×416×3 (三通道416×416像素图像)</p></li><li><p>Backbone<br>Darknet-53，Darknet-53主要由1×1和3×3的卷积层组成，每个卷积层之后包含一个批量归一化层和一个Leaky ReLU，加入这两个部分的目的是为了防止过拟合。卷积层、批量归一化层以及Leaky ReLU共同组成Darknet-53中的基本卷积单元CBL。因为在Darknet-53中共包含53个这样的CBL，所以称其为Darknet-53。</p></li><li><p>Neck<br>FPN(多尺度检测，特征融合)</p></li><li><p>Head<br>输出维度：N×N×255 (N×N个网格(使用了多尺度，N取13&#x2F;26&#x2F;52)，3个Box(80个类别,x,y,w,h,c))</p></li></ul><p>损失由三部分组成，分别是： 位置预测损失：MSE，置信度预测损失：CE，类别预测损失：CE。</p><p>多标签预测(softmax分类函数更改为logistic分类器)；</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Geforce GTX Titan X，YOLOv3对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-22.png" alt="alt text"></li></ul><h1 id="YOLOv4-2020"><a href="#YOLOv4-2020" class="headerlink" title="YOLOv4(2020)"></a>YOLOv4(2020)</h1><p>论文地址：<a href="https://arxiv.org/pdf/2004.10934.pdf">https://arxiv.org/pdf/2004.10934.pdf</a></p><p>代码地址：<a href="https://github.com/WongKinYiu/PyTorch_YOLOv4">https://github.com/WongKinYiu/PyTorch_YOLOv4</a></p><p>两年过去了，YOLO没有新版本。直到2020年4月，Alexey Bochkovskiy、Chien-Yao Wang和Hong-Yuan Mark Liao在ArXiv发布了YOLOv4。起初，不同的作者提出一个新的YOLO “官方 “版本让人感觉很奇怪；然而，YOLOv4保持了相同的YOLO理念——实时、开源、端到端和DarkNet框架——而且改进非常令人满意，社区迅速接受了这个版本作为官方的YOLOv4。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-19.png" alt="alt text"></li></ul><p>输入维度：608×608×3 (三通道608×608像素图像)<br>输出维度：N×N×255 (N×N个网格(使用了多尺度，N取19&#x2F;38&#x2F;76)，3个Box(80个类别,x,y,w,h,c))</p><ul><li><p>Input<br>resize(608×608×3)、Mosaic数据增强、SAT自对抗训练数据增强</p></li><li><p>Backbone<br>CSPDarknet53，CSP模块：更丰富的梯度组合，同时减少计算量、跨小批量标准化(CmBN)和Mish激活、DropBlock正则化(随机删除一大块神经元)、采用改进SAM注意力机制：在空间位置上添加权重；</p></li></ul><p>使用MIsh激活函数代替了原来的Leaky ReLU，SPP最初的设计目的是用来使卷积神经网络不受固定输入尺寸的限制。在YOLOv4中，作者引入SPP，是因为它显著地增加了感受野，分离出了最重要的上下文特征，</p><ul><li><p>Neck<br>SPP(通过最大池化将不同尺寸的输入图像变得尺寸一致)、PANnet(对原PANet方法进行了修改, 使用张量连接(concat)代替了原来的捷径连接(shortcut connection)。)PANet的示意图，主要包含FPN、Bottom-up path augmentation、Adaptive feature pooling、Fully-connected fusion四个部分。</p></li><li><p>Head<br>输出维度：N×N×255 (N×N个网格(使用了多尺度，N取19&#x2F;38&#x2F;76)，3个Box(80个类别,x,y,w,h,c))</p></li></ul><p>损失由三部分组成，分别是：位置预测损失：CIoU Loss，置信度预测损失：交叉熵损失，类别预测损失：交叉熵损失。</p><p>DIoU_nms</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Tesla V100，YOLOv4对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-23.png" alt="alt text"></li></ul><h1 id="YOLOv5-2020"><a href="#YOLOv5-2020" class="headerlink" title="YOLOv5(2020)"></a>YOLOv5(2020)</h1><p>论文地址：无<br>代码地址：<a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a></p><p>YOLOv5[72]是在YOLOv4之后几个月于2020年由Glenn Jocher发布。<br>YOLOv5是一个在COCO数据集上预训练的物体检测架构和模型系列，它代表了Ultralytics对未来视觉AI方法的开源研究，其中包含了经过数千小时的研究和开发而形成的经验教训和最佳实践。<br>YOLOv5是YOLO系列的一个延申，您也可以看作是基于YOLOv3、YOLOv4的改进作品。YOLOv5没有相应的论文说明，但是作者在Github上积极地开放源代码，通过对源码分析，我们也能很快地了解YOLOv5的网络架构和工作原理。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-24.png" alt="alt text"></li></ul><p>输入维度：640×640×3 (三通道640×640像素图像)<br>输出维度：N×N×255 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，3个Box(80个类别,x,y,w,h,c))</p><ul><li>Input<br>网络输入：640×640×3 (三通道640×640像素图像)</li></ul><p>YOLOv5采用了灰度填充的方式统一输入尺寸，避免了目标变形的问题。灰度填充的核心思想就是将原图的长宽等比缩放对应统一尺寸，然后对于空白部分用灰色填充。</p><ul><li><p>Backbone<br>CSPDarknet53(CSP模块，每一个卷积层后都使用BN和Leaky ReLU防止过拟合，Focus模块)；<br>Focus 结构引入了YOLOv5，用于直接处理输入的图片，通过降维和压缩输入特征图，从而减少计算量和提高感受野，同时提高目标检测的精度和模型的表达能力。</p></li><li><p>Neck<br>SPP、PAN</p></li><li><p>Head<br>输出维度：N×N×255 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，3个Box(80个类别,x,y,w,h,c))</p></li></ul><p>损失由三部分组成，分别是：位置预测损失：CIoU Loss，置信度预测损失：交叉熵损失，类别预测损失：交叉熵损失。</p><p>每次训练时，自适应的计算不同训练集中的最佳锚框值。</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Tesla V100，YOLOv5对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-25.png" alt="alt text"></li></ul><h1 id="YOLOv6-2020"><a href="#YOLOv6-2020" class="headerlink" title="YOLOv6(2020)"></a>YOLOv6(2020)</h1><p>论文地址：<a href="https://arxiv.org/pdf/2209.02976.pdf">https://arxiv.org/pdf/2209.02976.pdf</a></p><p>代码地址：<a href="https://github.com/meituan/YOLOv6">https://github.com/meituan/YOLOv6</a></p><p>YOLOv6 是美团视觉智能部研发的一款目标检测框架，致力于工业应用。本框架同时专注于检测的精度和推理效率，在工业界常用的尺寸模型中：YOLOv6-nano 在 COCO 上精度可达 35.0% AP，在 T4 上推理速度可达 1242 FPS；YOLOv6-s 在 COCO 上精度可达 43.1% AP，在 T4 上推理速度可达 520 FPS。在部署方面，YOLOv6 支持 GPU(TensorRT)、CPU(OPENVINO)、ARM(MNN、TNN、NCNN)等不同平台的部署，极大地简化工程部署时的适配工作。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-26.png" alt="alt text"></li></ul><p>输入维度：640×640×3 (三通道640×640像素图像)<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p><ul><li><p>Input<br>网络输入：640×640×3 (三通道640×640像素图像)</p></li><li><p>Backbone<br>EfficientRep Backbone 和 Rep-PAN Neck，其主要贡献点在于：<br>引入了 RepVGG style 结构。<br>基于硬件感知思想重新设计了 Backbone 和 Neck。 RepVGG Style 结构是一种在训练时具有多分支拓扑，而在实际部署时可以等效融合为单个 3x3 卷积的一种可重参数化的结构(融合过程如下图所示)。通过融合成的 3x3 卷积结构，可以有效利用计算密集型硬件计算能力(比如 GPU)，同时也可获得 GPU&#x2F;CPU 上已经高度优化的 NVIDIA cuDNN 和 Intel MKL 编译框架的帮助。 </p></li><li><p>Neck<br>将原始的 SPPF 优化设计为更加高效的 SimSPPF。</p></li></ul><p>Rep-PAN 基于 PAN拓扑方式，用 RepBlock 替换了 YOLOv5 中使用的 CSP-Block，</p><ul><li>Head<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</li></ul><p>损失由三部分组成，分别是：位置预测损失：SIoU Loss，置信度预测损失：交叉熵损失，类别预测损失：交叉熵损失。</p><p>DIoU_Nms、Efficient Decoupled Head、SimOTA标签分配策略；<br>采用 Hybrid Channels 策略重新设计了一个更高效的解耦头结构，在维持精度的同时降低了延时，缓解了解耦头中 3x3 卷积带来的额外延时开销。</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Tesla T4，YOLOv6对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-27.png" alt="alt text"></li></ul><p>YOLOv7(2022)</p><p>论文地址：<a href="https://arxiv.org/pdf/2207.02696.pdf">https://arxiv.org/pdf/2207.02696.pdf</a></p><p>代码地址：<a href="https://github.com/WongKinYiu/yolov7">https://github.com/WongKinYiu/yolov7</a></p><p>当时，在5 FPS到160 FPS的范围内，它的速度和准确度超过了所有已知的物体检测器。</p><ul><li><p>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-28.png" alt="alt text"></p></li><li><p>Input<br>网络输入：640×640×3 (三通道640×640像素图像)<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p></li><li><p>Backbone<br>Darknet-53(CSP模块替换了ELAN模块；下采样变成MP2层；每一个卷积层后都使用BN和SiLU防止过拟合)；<br>ELAN 由多个 CBS 构成，其输入输出特征大小保持不变，通道数在开始的两个 CBS 会有变化， 后面的几个输入通道都是和输出通道保持一致的，经过最后一个 CBS 输出为需要的通道。</p></li><li><p>Neck<br>SPP、PAN<br>将 YOLOV5 中的 CSP 模块换成了 ELAN-H 模块， 同时下采样变为了 MP2 层。</p></li><li><p>Head<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p></li></ul><p>损失由三部分组成，分别是：位置预测损失：SIoU Loss，置信度预测损失：交叉熵损失，类别预测损失：交叉熵损失。</p><p>CIoU_Loss、DIoU_Nms、SimOTA标签分配策略、带辅助头的训练(通过增加训练成本，提升精度，同时不影响推理的时间)；<br>经过 RepConv 调整通道数，最后使用 1x1 卷积去预测 objectness、class 和 bbox 三部分。RepConv 在训练和推理是有一定的区别。训练时有三个分支的相加输出，部署时会将分支的参数重参数化到主分支上。</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Tesla V100，YOLOv7对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-29.png" alt="alt text"></li></ul><h1 id="YOLOv8-2023"><a href="#YOLOv8-2023" class="headerlink" title="YOLOv8(2023)"></a>YOLOv8(2023)</h1><p>论文地址：<br>代码地址：<a href="https://github.com/ultralytics/ultralytics">https://github.com/ultralytics/ultralytics</a></p><p>YOLOv8继承自YOLOv5，在速度和准确性方面具有无与伦比的性能。其流线型设计使其适用于各种应用，并可轻松适应从边缘设备到云 API 等不同硬件平台。使其成为各种物体检测与跟踪、实例分割、图像分类和姿态估计任务的绝佳选择。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-30.png" alt="alt text"></li></ul><p>网络输入：640×640×3 (三通道640×640像素图像)<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p><ul><li><p>Input<br>网络输入：640×640×3 (三通道640×640像素图像)</p></li><li><p>Backbone<br>Darknet-53(C3模块换成了C2F模块)</p></li><li><p>Neck<br>SPP、PAN</p></li><li><p>Head<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p></li></ul><p>损失由三部分组成，分别是：位置预测损失：DFL + CIoU Loss，置信度预测损失：交叉熵损失，类别预测损失：VFL Loss。</p><p>DIOU_Nms、使用了Task-Aligned Assigner匹配方式。、Decoupled Head；</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Tesla A100，YOLOv8对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-31.png" alt="alt text"></li></ul><h1 id="YOLOv9-2024"><a href="#YOLOv9-2024" class="headerlink" title="YOLOv9(2024)"></a>YOLOv9(2024)</h1><p>论文地址：<a href="https://arxiv.org/pdf/2402.13616.pdf">https://arxiv.org/pdf/2402.13616.pdf</a></p><p>代码地址：<a href="https://github.com/WongKinYiu/yolov9">https://github.com/WongKinYiu/yolov9</a></p><p>距离YOLOv8发布仅1年的时间，v9诞生了！v9继承自v7，主要贡献包括：可编程梯度信息(PGI)+广义高效层聚合网络(GELAN)。与YOLOv8相比，其出色的设计使深度模型的参数数量减少了49%，计算量减少了43%，但在MS COCO数据集上仍有0.6%的AP改进。 无论是轻量级还是大型模型，它都完胜，一举成为目标检测领域新SOTA。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-32.png" alt="alt text"></li></ul><p>网络输入：640×640×3 (三通道640×640像素图像)<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p><ul><li><p>Input<br>网络输入：640×640×3 (三通道640×640像素图像)</p></li><li><p>Backbone<br>YOLOv7的辅助训练头Aux-&gt;PGI(CBLinear,CBFuse)<br>ELAN-&gt;GELAN<br>PGI 的推理过程仅使用了主分支，因此不需要额外的推理成本；</p></li></ul><p>辅助可逆分支是为了处理神经网络加深带来的问题， 网络加深会造成信息瓶颈，导致损失函数无法生成可靠的梯度；</p><ul><li>Neck</li><li>Head<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</li></ul><p>损失由三部分组成，分别是：位置预测损失：DFL + CIoU Loss，置信度预测损失：交叉熵损失，类别预测损失：交叉熵损失。</p><p>DIOU_Nms、TAL标签分配策略、Decoupled Head；锚框：Anchor Free</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Tesla A100，YOLOv9对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-33.png" alt="alt text"></li></ul><h1 id="YOLOv10-2024"><a href="#YOLOv10-2024" class="headerlink" title="YOLOv10(2024)"></a>YOLOv10(2024)</h1><p>论文地址：<a href="https://arxiv.org/abs/2405.14458.pdf">https://arxiv.org/abs/2405.14458.pdf</a></p><p>代码地址：<a href="https://github.com/THU-MIG/yolov10">https://github.com/THU-MIG/yolov10</a></p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-34.png" alt="alt text"></li></ul><p>网络输入：640×640×3 (三通道640×640像素图像)<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p><ul><li><p>Input<br>网络输入：416×416×3 (三通道416×416像素图像)<br>网络输出：300x6(300个Box(x1,y1,x2,y2,score,class))</p></li><li><p>Backbone<br>CIB采用廉价的深度卷积进行空间混合，并采用成本效益高的点卷积进行通道混合。</p></li><li><p>Neck<br>PSA模块首先通过1×1卷积将特征均匀地划分为两部分。然后，只有一部分进入由多头自注意力模块(MHSA)和前馈网络(FFN)组成的NPSA块。最后，两部分特征被连接并通过1×1卷积融合</p></li><li><p>Head<br>损失由三部分组成，分别是：位置预测损失：DFL + CIoU Loss，置信度预测损失：交叉熵损失，类别预测损失：交叉熵损失。</p></li></ul><p>无NMS训练的一致双重分配</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Tesla A100，YOLOv10对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-35.png" alt="alt text"></li></ul><h1 id="YOLOv11-2024"><a href="#YOLOv11-2024" class="headerlink" title="YOLOv11(2024)"></a>YOLOv11(2024)</h1><p>论文地址：<br>代码地址：<a href="https://github.com/ultralytics/ultralytics">https://github.com/ultralytics/ultralytics</a></p><p>YOLOv11继承自YOLOv8，在YOLOv8基础上进行了改进，使同等精度下参数量降低20%，在速度和准确性方面具有无与伦比的性能。其流线型设计使其适用于各种应用，并可轻松适应从边缘设备到云 API 等不同硬件平台。使其成为各种物体检测与跟踪、实例分割、图像分类和姿态估计任务的绝佳选择。</p><ul><li>网络结构<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-36.png" alt="alt text"></li></ul><p>网络输入：640×640×3 (三通道640×640像素图像)<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p><ul><li><p>Input<br>网络输入：640×640×3 (三通道640×640像素图像)</p></li><li><p>Backbone<br>Darknet-53(C2F模块换成了C3k2模块)<br>C3k2，继承自类C2f，其中通过c3k设置False或者Ture来决定选择使用C3k还是Bottle- Neck</p></li><li><p>Neck<br>SPPF、PAN<br>C2PSA 模块是一个自定义神经网络层，带有注意力机制，用于增强特征提取和处理。借鉴V10 PSA结构，实现了C2PSA和C2fPSA，最终选择了基于C2的C2PSA。</p></li><li><p>Head<br>输出维度：N×N×85 (N×N个网格(使用了多尺度，N取20&#x2F;40&#x2F;80)，1个Box(80个类别,x,y,w,h,c))</p></li></ul><p>损失由三部分组成，分别是：位置预测损失：DFL + CIoU Loss，置信度预测损失：交叉熵损失，类别预测损失：VFL Loss。</p><p>分类检测头引入了DWConv(更加轻量级，为后续二次创新提供了改进点)</p><ul><li>性能表现<br>数据集：COCO，GPU硬件：Nvidia Tesla T4，YOLOv11对比同时期算法性能指标：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-37.png" alt="alt text"><br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yoloV1%E5%88%B0yoloV11%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-38.png" alt="alt text"></li></ul>]]></content>
      
      
      <categories>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5模型精度评估方法</title>
      <link href="/2023/05/29/yolov5-mo-xing-jing-du-ping-gu-fang-fa/"/>
      <url>/2023/05/29/yolov5-mo-xing-jing-du-ping-gu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="指标评估-重要的一些定义"><a href="#指标评估-重要的一些定义" class="headerlink" title="指标评估(重要的一些定义)"></a>指标评估(重要的一些定义)</h1><h2 id="📚-IOU"><a href="#📚-IOU" class="headerlink" title="📚 IOU"></a>📚 IOU</h2><p>(IOU) (<em>Intersection Over Union</em>) 基于<em>Jaccard</em>索引，用于评估两个边界框之间的重叠程度。它需要一个真实回归框 (a ground truth bounding box) (B_{gt}) 和一个预测回归框(a predicted bounding box) (B_{p}) 计算得到。通过应用 IOU 我们能够判断出预测结果是有效(True Positive) 或者 无效(False Positive)</p><p>(IOU) 也称重叠度 表示计算预测回归框和真实回归框的交并比,计算公式如下:</p><p>(large{IOU&#x3D;dfrac{arealeft( B_pcap B_{g t}right) }{arealeft( B_pcup B_{g t}right) } })</p><p>其中: (B_p:预测回归框)， (B_{g t}:真实回归框)</p><p>下图可视化了真实回归框（绿色）和 预测回归框（红色）之间的IOU。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolov5%E6%A8%A1%E5%9E%8B%E7%B2%BE%E5%BA%A6%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95/image.png"></p><p>图1.1 ; (IOU) 的计算。绿色: (B_{g t}) ， 红色:(B_{p})</p><h2 id="TP-amp-FP-amp-FN-amp-TN"><a href="#TP-amp-FP-amp-FN-amp-TN" class="headerlink" title="TP&amp;FP&amp;FN&amp;TN"></a>TP&amp;FP&amp;FN&amp;TN</h2><table><thead><tr><th></th><th>Positive</th><th>Negative</th></tr></thead><tbody><tr><td>True</td><td>TP</td><td>TN</td></tr><tr><td>False</td><td>FP</td><td>FN</td></tr></tbody></table><p>指标的一些基本概念：</p><ul><li>TP（True Postives）： 分类器把正例正确的分类-预测为正例。(IOU &gt;&#x3D; <em>阈值</em>)</li><li>FN（False Negatives）：分类器把正例错误的分类-预测为负例。(IOU &lt; <em>阈值</em>)</li><li>FP（False Postives）：分类器把负例错误的分类-预测为正例</li><li>TN（True Negatives）：分类器把负例正确的分类-预测为负例（<em>yolov5中没有应用到</em>）</li></ul><p>yolov5中没有应用TN的原因: TN代表的是所有可能的未正确检测到的边界框。然而在yolo在目标检测任务中，每个网格会生成很多的预测边界框，有许多的预测边界框是没有相应的真实标签框，导致未正确检测到的边界框数量远远大于正确检测到的边界框，这就是为什么不使用TN的原因。</p><p>threshold: depending on the metric, it is usually set to 50%, 75% or 95%.</p><h2 id="Precision"><a href="#Precision" class="headerlink" title="Precision"></a>Precision</h2><p>Precision 定义：模型识别相关目标的能力。分类正确的样本在所有样本中的数量比例，公式如下:</p><p>(Precision &#x3D;dfrac{TP}{TP+FP}&#x3D;dfrac{TP}{all  detections})</p><h2 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a>Recall</h2><p>Recall 定义：是模型找到真实回归框(<em>即标签标注的框</em>)的能力。计算公式如下：</p><p>(Recall &#x3D; dfrac{TP}{TP+FN}&#x3D;dfrac{TP}{all  ground  truths})</p><h2 id="mAP"><a href="#mAP" class="headerlink" title="mAP"></a>mAP</h2><p>多标签图像分类任务中图片的标签不止一个，因此评价不能用普通单标签图像分类的标准，即mean accuracy，该任务采用的是和信息检索中类似的方法—mAP，虽然其字面意思和mean average precision看起来差不多，但是计算方法要繁琐得多,mAP 会统计所有 Confidence 值下的 PR值，而实际使用时，<strong>会设定一个 Confidence 阈值，低于该阈值的目标会被丢弃，这部分目标在统计 mAP 时也会有一定的贡献</strong>。</p><p><a href="https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E5%BA%A6/7908802?fr=aladdin">Confidence</a> (置信度):在统计学中，一个概率样本的置信区间（Confidence interval）是对这个样本的某个总体参数的区间估计。置信区间展现的是这个参数的真实值有一定概率落在测量结果的周围的程度。置信区间给出的是被测量参数测量值的可信程度范围，即前面所要求的“一定概率”。这个概率也被称为置信水平。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/yolov5%E6%A8%A1%E5%9E%8B%E7%B2%BE%E5%BA%A6%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95/image-1.png"> (红色曲线代表,人为的方式将PR曲线变成单调递减，使得计算面积更容易。)</p><ul><li><p>AP（Average Percision）：AP为平均精度，指的是所有图片内的具体某一类的PR曲线下的面积(横轴为Recall，纵轴为Precision)。</p></li><li><p>AP衡量的是对一个类检测好坏，mAP就是对多个类的检测好坏。在多类多目标检测中，计算出每个类别的AP后，再除于类别总数，即所有类别AP的平均值，比如有两类，类A的AP值是0.5，类B的AP值是0.2，那么 (mAP)=（0.5+0.2）&#x2F;2&#x3D;0.35。</p></li><li><p>MAP: <strong>是指所有图片内的所有类别的AP的平均值</strong>,map越高代表模型预测精度值越高。</p></li><li><p>(<a href="mailto:&#109;&#65;&#80;&#x40;&#x30;&#x2e;&#x35;">&#109;&#65;&#80;&#x40;&#x30;&#x2e;&#x35;</a>) ：(mAP)是用(Precision)和(Recall)作为两轴作图后围成的面积，(m)表示平均，@后面的数表示判定正负样本的 (IOU) 阈值，其中 @0.5表示IOU阈值取0.5。</p></li><li><p>(<a href="mailto:&#109;&#65;&#80;&#64;&#48;&#x2e;&#53;">&#109;&#65;&#80;&#64;&#48;&#x2e;&#53;</a>:0.95)：只以 (IOU&#x3D;0.5) 的阀值的时候不一定就是好的模型，可能仅仅在0.5阀值表现的很好，在0.6,0.7…阀值表现的很差，为了更好地评估整体模型的准确度，因此计算一个模型在各个IOU值的AP(mAP)取平均值。</p></li></ul><p>方法是：计算每个分类的AP，求和再平均，得到的就是mAP,它是直接把mAP当成AP，然后再把IOU值大于0.5的 (AP(mAP)) ，以0.05的增量,到0.95，也就是以 ((0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95)) (IOU值) 的 (AP(mAP)) 的平均值当成 (AP(at IoU&#x3D;.50:.05:.95)) ，通过(IOU增量) 的方式得到 (<a href="mailto:&#109;&#x41;&#80;&#x40;&#48;&#46;&#x35;">&#109;&#x41;&#80;&#x40;&#48;&#46;&#x35;</a>:0.95) 结果。</p><h1 id="目标检测中的mAP计算"><a href="#目标检测中的mAP计算" class="headerlink" title="目标检测中的mAP计算"></a>目标检测中的mAP计算</h1><h2 id="yolov5计算IOU源码解析"><a href="#yolov5计算IOU源码解析" class="headerlink" title="yolov5计算IOU源码解析"></a>yolov5计算IOU源码解析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算两框的特定iou (DIou, DIou, CIou) </span><span class="token keyword">def</span> <span class="token function">bbox_iou</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span> box2<span class="token punctuation">,</span> xywh<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> GIoU<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> DIoU<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> CIoU<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e-7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Returns Intersection over Union (IoU) of box1(1,4) to box2(n,4)</span>    <span class="token comment"># Get the coordinates of bounding boxes 下面条件语句作用是:进行坐标转换从而获取yolo格式边界框的坐标</span>    <span class="token keyword">if</span> xywh<span class="token punctuation">:</span>  <span class="token comment"># transform from xywh to xyxy</span>        <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> w1<span class="token punctuation">,</span> h1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> h2<span class="token punctuation">)</span> <span class="token operator">=</span> box1<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> box2<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        w1_<span class="token punctuation">,</span> h1_<span class="token punctuation">,</span> w2_<span class="token punctuation">,</span> h2_ <span class="token operator">=</span> w1 <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> h1 <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> w2 <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> h2 <span class="token operator">/</span> <span class="token number">2</span>        b1_x1<span class="token punctuation">,</span> b1_x2<span class="token punctuation">,</span> b1_y1<span class="token punctuation">,</span> b1_y2 <span class="token operator">=</span> x1 <span class="token operator">-</span> w1_<span class="token punctuation">,</span> x1 <span class="token operator">+</span> w1_<span class="token punctuation">,</span> y1 <span class="token operator">-</span> h1_<span class="token punctuation">,</span> y1 <span class="token operator">+</span> h1_        b2_x1<span class="token punctuation">,</span> b2_x2<span class="token punctuation">,</span> b2_y1<span class="token punctuation">,</span> b2_y2 <span class="token operator">=</span> x2 <span class="token operator">-</span> w2_<span class="token punctuation">,</span> x2 <span class="token operator">+</span> w2_<span class="token punctuation">,</span> y2 <span class="token operator">-</span> h2_<span class="token punctuation">,</span> y2 <span class="token operator">+</span> h2_    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># x1, y1, x2, y2 = box1</span>        b1_x1<span class="token punctuation">,</span> b1_y1<span class="token punctuation">,</span> b1_x2<span class="token punctuation">,</span> b1_y2 <span class="token operator">=</span> box1<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        b2_x1<span class="token punctuation">,</span> b2_y1<span class="token punctuation">,</span> b2_x2<span class="token punctuation">,</span> b2_y2 <span class="token operator">=</span> box2<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        w1<span class="token punctuation">,</span> h1 <span class="token operator">=</span> b1_x2 <span class="token operator">-</span> b1_x1<span class="token punctuation">,</span> b1_y2 <span class="token operator">-</span> b1_y1        w2<span class="token punctuation">,</span> h2 <span class="token operator">=</span> b2_x2 <span class="token operator">-</span> b2_x1<span class="token punctuation">,</span> b2_y2 <span class="token operator">-</span> b2_y1    <span class="token comment"># Intersection area 获取两个框相交的面积。</span>    <span class="token triple-quoted-string string">"""    left_line = max(b1_x1, b2_x1)    reft_line = min(b1_x2, b2_x2)    top_line = max(b1_y1, b2_y1)    bottom_line = min(b1_y2, b2_y2)    intersect = (reight_line - left_line) * (bottom_line - top_line)    """</span>    inter <span class="token operator">=</span> <span class="token punctuation">(</span>flow<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>b1_x2<span class="token punctuation">,</span> b2_x2<span class="token punctuation">)</span> <span class="token operator">-</span> flow<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>b1_x1<span class="token punctuation">,</span> b2_x1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> \            <span class="token punctuation">(</span>flow<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>b1_y2<span class="token punctuation">,</span> b2_y2<span class="token punctuation">)</span> <span class="token operator">-</span> flow<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>b1_y1<span class="token punctuation">,</span> b2_y1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># Union Area  两个框并到面积</span>    union <span class="token operator">=</span> w1 <span class="token operator">*</span> h1 <span class="token operator">+</span> w2 <span class="token operator">*</span> h2 <span class="token operator">-</span> inter <span class="token operator">+</span> eps    <span class="token comment"># IoU </span>    iou <span class="token operator">=</span> inter <span class="token operator">/</span> union    <span class="token keyword">if</span> CIoU <span class="token keyword">or</span> DIoU <span class="token keyword">or</span> GIoU<span class="token punctuation">:</span>        cw <span class="token operator">=</span> flow<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>b1_x2<span class="token punctuation">,</span> b2_x2<span class="token punctuation">)</span> <span class="token operator">-</span> flow<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>b1_x1<span class="token punctuation">,</span> b2_x1<span class="token punctuation">)</span>  <span class="token comment"># convex (smallest enclosing box) width</span>        ch <span class="token operator">=</span> flow<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>b1_y2<span class="token punctuation">,</span> b2_y2<span class="token punctuation">)</span> <span class="token operator">-</span> flow<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>b1_y1<span class="token punctuation">,</span> b2_y1<span class="token punctuation">)</span>  <span class="token comment"># convex height</span>        <span class="token keyword">if</span> CIoU <span class="token keyword">or</span> DIoU<span class="token punctuation">:</span>  <span class="token comment"># Distance or Complete IoU https://arxiv.org/abs/1911.08287v1</span>            c2 <span class="token operator">=</span> cw <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> ch <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> eps  <span class="token comment"># convex diagonal squared</span>            rho2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b2_x1 <span class="token operator">+</span> b2_x2 <span class="token operator">-</span> b1_x1 <span class="token operator">-</span> b1_x2<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b2_y1 <span class="token operator">+</span> b2_y2 <span class="token operator">-</span> b1_y1 <span class="token operator">-</span> b1_y2<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>  <span class="token comment"># center dist ** 2</span>            <span class="token keyword">if</span> CIoU<span class="token punctuation">:</span>  <span class="token comment"># https://github.com/Zzh-tju/DIoU-SSD-pytorch/blob/master/utils/box/box_utils.py#L47</span>                v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>pi <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> flow<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>flow<span class="token punctuation">.</span>atan<span class="token punctuation">(</span>w2 <span class="token operator">/</span> <span class="token punctuation">(</span>h2 <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> flow<span class="token punctuation">.</span>atan<span class="token punctuation">(</span>w1 <span class="token operator">/</span> <span class="token punctuation">(</span>h1 <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">with</span> flow<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    alpha <span class="token operator">=</span> v <span class="token operator">/</span> <span class="token punctuation">(</span>v <span class="token operator">-</span> iou <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> iou <span class="token operator">-</span> <span class="token punctuation">(</span>rho2 <span class="token operator">/</span> c2 <span class="token operator">+</span> v <span class="token operator">*</span> alpha<span class="token punctuation">)</span>  <span class="token comment"># CIoU</span>            <span class="token keyword">return</span> iou <span class="token operator">-</span> rho2 <span class="token operator">/</span> c2  <span class="token comment"># DIoU</span>        c_area <span class="token operator">=</span> cw <span class="token operator">*</span> ch <span class="token operator">+</span> eps  <span class="token comment"># convex area</span>        <span class="token keyword">return</span> iou <span class="token operator">-</span> <span class="token punctuation">(</span>c_area <span class="token operator">-</span> union<span class="token punctuation">)</span> <span class="token operator">/</span> c_area  <span class="token comment"># GIoU https://arxiv.org/pdf/1902.09630.pdf</span>    <span class="token keyword">return</span> iou  <span class="token comment"># IoU</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="yolov5计算AP源码逐行解析"><a href="#yolov5计算AP源码逐行解析" class="headerlink" title="yolov5计算AP源码逐行解析"></a>yolov5计算AP源码逐行解析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 根据PR曲线计算AP </span><span class="token keyword">def</span> <span class="token function">compute_ap</span><span class="token punctuation">(</span>recall<span class="token punctuation">,</span> precision<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" Compute the average precision, given the recall and precision curves    # Arguments        recall:    The recall curve (list)        precision: The precision curve (list)    # Returns        Average precision, precision curve, recall curve    """</span>    <span class="token comment"># Append sentinel values to beginning and end 将开区间给补上，补成闭合的区间。</span>    mrec <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> recall<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     mpre <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> precision<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Compute the precision envelope </span>    <span class="token triple-quoted-string string">"""    人为的把PR曲线变成单调递减的,例如:    np.maximum(accumulate(np.array([21, 23, 18, 19, 20, 13, 12, 11]) ) => np.array([23, 23, 20, 20, 20, 13, 12, 11])    """</span>    mpre <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>np<span class="token punctuation">.</span>maximum<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>mpre<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Integrate area under curve</span>    method <span class="token operator">=</span> <span class="token string">'interp'</span>  <span class="token comment"># methods: 'continuous', 'interp'</span>    <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'interp'</span><span class="token punctuation">:</span> <span class="token comment"># 默认采用 interpolated-precision 曲线，</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span>  <span class="token comment"># 101-point interp (COCO)</span>        ap <span class="token operator">=</span> np<span class="token punctuation">.</span>trapz<span class="token punctuation">(</span>np<span class="token punctuation">.</span>interp<span class="token punctuation">(</span>x<span class="token punctuation">,</span> mrec<span class="token punctuation">,</span> mpre<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment"># integrate</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 'continuous'</span>        i <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>mrec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">!=</span> mrec<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># points where x axis (recall) changes</span>        ap <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mrec<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> mrec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> mpre<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># area under curve</span>    <span class="token keyword">return</span> ap<span class="token punctuation">,</span> mpre<span class="token punctuation">,</span> mrec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="https://github.com/rafaelpadilla/Object-Detection-Metrics">https://github.com/rafaelpadilla/Object-Detection-Metrics</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> yolov5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolov5 </tag>
            
            <tag> 模型精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5模型结构简化实例</title>
      <link href="/2023/05/29/yolov5-mo-xing-jie-gou-jian-hua-shi-li/"/>
      <url>/2023/05/29/yolov5-mo-xing-jie-gou-jian-hua-shi-li/</url>
      
        <content type="html"><![CDATA[<p>在实际使用yolov5s时，为了提升推理速度，HQ项目中进行了一定的简化操作，具体情况如下。</p><h1 id="官方配置文件-VS-HQ配置文件"><a href="#官方配置文件-VS-HQ配置文件" class="headerlink" title="官方配置文件 VS  HQ配置文件"></a>官方配置文件 <em>VS</em>  HQ配置文件</h1><h2 id="官方yolov5s-v6-0版本的网络结构配置"><a href="#官方yolov5s-v6-0版本的网络结构配置" class="headerlink" title="官方yolov5s-v6.0版本的网络结构配置"></a>官方yolov5s-v6.0版本的网络结构配置</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># YOLOv5 🚀 by Ultralytics, GPL-3.0 license</span><span class="token comment"># Parameters</span><span class="token key atrule">nc</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token comment"># number of classes</span><span class="token key atrule">depth_multiple</span><span class="token punctuation">:</span> <span class="token number">0.33</span>  <span class="token comment"># model depth multiple</span><span class="token key atrule">width_multiple</span><span class="token punctuation">:</span> <span class="token number">0.50</span>  <span class="token comment"># layer channel multiple</span><span class="token key atrule">anchors</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span>  <span class="token comment"># P3/8</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">]</span>  <span class="token comment"># P4/16</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span><span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">373</span><span class="token punctuation">,</span><span class="token number">326</span><span class="token punctuation">]</span>  <span class="token comment"># P5/32</span><span class="token comment"># YOLOv5 v6.0 backbone</span><span class="token key atrule">backbone</span><span class="token punctuation">:</span>  <span class="token comment"># [from, number, module, args]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 0-P1/2</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 1-P2/4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 3-P3/8</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 5-P4/16</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 7-P5/32</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SPPF<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 9</span>  <span class="token punctuation">]</span><span class="token comment"># YOLOv5 v6.0 head</span><span class="token key atrule">head</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nn.Upsample<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'nearest'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat backbone P4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 13</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nn.Upsample<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'nearest'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat backbone P3</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 17 (P3/8-small)</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat head P4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 20 (P4/16-medium)</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat head P5</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 23 (P5/32-large)</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Detect<span class="token punctuation">,</span> <span class="token punctuation">[</span>nc<span class="token punctuation">,</span> anchors<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># Detect(P3, P4, P5)</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HQ项目中实际使用的网络结构配置"><a href="#HQ项目中实际使用的网络结构配置" class="headerlink" title="HQ项目中实际使用的网络结构配置"></a>HQ项目中实际使用的网络结构配置</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># YOLOv5 🚀 by Ultralytics, GPL-3.0 license</span><span class="token comment"># Parameters</span><span class="token key atrule">nc</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token comment"># number of classes</span><span class="token key atrule">depth_multiple</span><span class="token punctuation">:</span> <span class="token number">0.33</span>  <span class="token comment"># model depth multiple</span><span class="token key atrule">width_multiple</span><span class="token punctuation">:</span> <span class="token number">0.50</span>  <span class="token comment"># layer channel multiple</span><span class="token key atrule">anchors</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>  <span class="token comment"># P3/8</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span>  <span class="token comment"># P4/16</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">]</span>  <span class="token comment"># P5/32</span><span class="token comment"># YOLOv5 v6.0 backbone</span><span class="token key atrule">backbone</span><span class="token punctuation">:</span>  <span class="token comment"># [from, number, module, args]</span>  <span class="token comment"># [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 0-P1/2</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 1-P2/4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 3-P3/8</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 5-P4/16</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 7-P5/32</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SPPF<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 9</span>  <span class="token punctuation">]</span><span class="token comment"># YOLOv5 v6.0 head</span><span class="token key atrule">head</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nn.Upsample<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'nearest'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat backbone P4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 13</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nn.Upsample<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'nearest'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat backbone P3</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 17 (P3/8-small)</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat head P4</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 20 (P4/16-medium)</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Conv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># cat head P5</span>   <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> C3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 23 (P5/32-large)</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Detect<span class="token punctuation">,</span> <span class="token punctuation">[</span>nc<span class="token punctuation">,</span> anchors<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># Detect(P3, P4, P5)</span>  <span class="token punctuation">]</span>  <span class="token comment"># 相比与原始的yolov5s网络结构的修改点：</span>  <span class="token comment"># - backbone中的C3结构使用Conv代替</span>  <span class="token comment"># - head中使用了C3结构,但是没有使用add,C3此时等价与两个卷积级联</span>  <span class="token comment"># - 卷积层的激活函数有SiLU函数改为了ReLU函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="backbone中的C3结构使用Conv代替"><a href="#backbone中的C3结构使用Conv代替" class="headerlink" title="backbone中的C3结构使用Conv代替"></a>backbone中的C3结构使用Conv代替</h2><h2 id="head中使用了C3结构-但是没有使用add-C3此时等价与两个卷积级联"><a href="#head中使用了C3结构-但是没有使用add-C3此时等价与两个卷积级联" class="headerlink" title="head中使用了C3结构,但是没有使用add,C3此时等价与两个卷积级联"></a>head中使用了C3结构,但是没有使用add,C3此时等价与两个卷积级联</h2><h2 id="卷积层的激活函数有SiLU函数改为了ReLU函数"><a href="#卷积层的激活函数有SiLU函数改为了ReLU函数" class="headerlink" title="卷积层的激活函数有SiLU函数改为了ReLU函数"></a>卷积层的激活函数有SiLU函数改为了ReLU函数</h2>]]></content>
      
      
      <categories>
          
          <category> yolov5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> yolov5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习基础知识</title>
      <link href="/2023/05/29/shen-du-xue-xi-ji-chu-zhi-shi/"/>
      <url>/2023/05/29/shen-du-xue-xi-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="ROI-Pooling"><a href="#ROI-Pooling" class="headerlink" title="ROI Pooling"></a>ROI Pooling</h1><h2 id="什么是ROI？"><a href="#什么是ROI？" class="headerlink" title="什么是ROI？"></a>什么是ROI？</h2><p>ROI是 Region of interest 的简写，指的是 Faster R-CNN 结构中，经过 RPN 层后，产生的 proposal 对应的 box 框。</p><p>ROI Pooling 顾名思义，是 pooling 层的一种，而且是针对 ROIs 的 pooling。整个 ROI 的过程，就是将这些 proposal 抠出来的过程，得到大小统一的 feature map。</p><h2 id="ROI-Pooling-的输入"><a href="#ROI-Pooling-的输入" class="headerlink" title="ROI Pooling 的输入"></a>ROI Pooling 的输入</h2><p>ROI Pooling 该层有两个输入：</p><ol><li>从具有多个卷积核池化的深度网络中获得的固定大小的feature maps；</li><li>一个表示所有 ROI 的 N*5 的矩阵，其中N表示ROI的数目。一列表示图像index，其余四列表示其余的左上角和右下角坐标；</li></ol><h2 id="ROI-Pooling-的输出"><a href="#ROI-Pooling-的输出" class="headerlink" title="ROI Pooling 的输出"></a>ROI Pooling 的输出</h2><p>输出是 batch 个 vector，其中 batch 的值等于 roi 的个数，vector的大小为 channel ∗ w ∗ h；ROI Pooling 的过程就是将一个个大小不同的 box 矩形框，都映射成大小为 w ∗ h 的矩形框。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image.png"><br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-1.png"></p><p>如图所示，我们先把 roi 中的坐标映射到 feature map 上，映射规则比较简单，就是把各个坐标除以输入图片与 feature map 的大小的比值，得到了 feature map 上的 box 坐标后，我们使用 pooling 得到输出；由于输入的图片大小不一，所以这里我们使用的 spp pooling（空间金字塔池化），spp pooling 在 pooling 的过程中需要计算 pooling 后的结果对应的像素点反映射到 feature map 上所占的范围，然后在那个范围中进行取 max 或者取 average。理解起来有点绕，看后面，你会豁然开朗。</p><h2 id="ROI-pooling具体操作如下"><a href="#ROI-pooling具体操作如下" class="headerlink" title="ROI pooling具体操作如下"></a>ROI pooling具体操作如下</h2><ol><li>根据输入image，将 ROI 映射到 feature map 对应位置；</li><li>将映射后的区域划分为相同大小的 sections（sections数量与输出的维度相同）；</li><li>对每个 sections 进行 max pooling 操作；</li></ol><p>这样我们就可以从不同大小的方框得到固定大小的相应的 feature maps。值得一提的是，输出的 feature maps 的大小不取决于 ROI 和卷积 feature maps 大小。ROI pooling 最大的好处就在于极大地提高了处理速度。</p><h2 id="ROI-pooling-example"><a href="#ROI-pooling-example" class="headerlink" title="ROI pooling example"></a>ROI pooling example</h2><p>我们有一个 8∗8 大小的 feature map，一个ROI，以及输出大小为2∗2.</p><p>输入的固定大小的feature map<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-2.png"></p><p>region proposal 投影之后位置（左上角，右下角坐标）： (0,3)，(7,8)。 </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-3.png"></p><p>将其划分为（2<em>2）个 sections（因为输出大小为2</em>2），我们可以得到：  </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-4.png"></p><p>对每个section做max pooling，可以得到：  </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-5.png"></p><p>整体过程如下：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/f95107258e128dac79e9bec44cb09941.gif">  </p><p>说明：在此案例中 region proposals 是 5<em>7 大小的，在 pooling 之后需要得到 2</em>2 的，所以在 5<em>7 的特征图划分成 2</em>2 的时候不是等分的，行是 5&#x2F;2，第一行得到2，剩下的那一行是3，列是7&#x2F;2，第一列得到3，剩下那一列是4。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2023/05/19/dan-li-mo-shi/"/>
      <url>/2023/05/19/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul><li>当存在一个或多个变量仅初始化一次，却被多个文件多次使用的情况下考虑单例模式</li><li>可实现一次初始化，多文件多次使用</li><li>例如 ：相机的内参和外参一般只初始化一次，然后直接使用。</li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h1 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h1><h3 id="ParametersInit-h"><a href="#ParametersInit-h" class="headerlink" title="ParametersInit.h"></a>ParametersInit.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__PARAMETERS_INIT_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__PARAMETERS_INIT_H__</span></span><span class="token comment">// for thread-safe singleton</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">ParametersInit</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> ParametersInit <span class="token operator">*</span>m_instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> pthread_once_t _once<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_test<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token comment">/* args */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用pthread_once保证init()只调用一次</span>    <span class="token keyword">static</span> ParametersInit <span class="token operator">*</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">camParametersInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> in_test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ParametersInit-cpp"><a href="#ParametersInit-cpp" class="headerlink" title="ParametersInit.cpp"></a>ParametersInit.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../inc/ParametersInit.h"</span></span><span class="token comment">// 静态成员函数必须初始化后使用</span>pthread_once_t ParametersInit<span class="token double-colon punctuation">::</span>_once <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ParametersInit <span class="token operator">*</span>ParametersInit<span class="token double-colon punctuation">::</span>m_instance<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token comment">/* args */</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_instance<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ParametersInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ParametersInit <span class="token operator">*</span><span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">pthread_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_once<span class="token punctuation">,</span> ParametersInit<span class="token double-colon punctuation">::</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">camParametersInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> in_test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_test <span class="token operator">=</span> in_test<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> m_test<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="init-cpp"><a href="#init-cpp" class="headerlink" title="init.cpp"></a>init.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ParametersInit.h"</span></span>ParametersInit <span class="token operator">*</span>m_Instance <span class="token operator">=</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m_Instance<span class="token operator">-></span><span class="token function">camParametersInit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="use1-cpp"><a href="#use1-cpp" class="headerlink" title="use1.cpp"></a>use1.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ParametersInit.h"</span></span>ParametersInit <span class="token operator">*</span>m_Instance <span class="token operator">=</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里可以直接使用init.cpp初始化的参数ParametersInit::m_test</span><span class="token keyword">int</span> m_test <span class="token operator">=</span> m_Instance<span class="token operator">-></span><span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m_test=100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考网站: <a href="https://blog.csdn.net/CoderAldrich/article/details/83114881">https://blog.csdn.net/CoderAldrich/article/details/83114881</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多线程常用案例</title>
      <link href="/2023/05/10/c-duo-xian-cheng-chang-yong-an-li/"/>
      <url>/2023/05/10/c-duo-xian-cheng-chang-yong-an-li/</url>
      
        <content type="html"><![CDATA[<h1 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h1><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p>使用C++11 std库中的线程和条件变量实现notify_one的一个简单例子。在这个例子中，我们有一个线程向一个队列中添加元素，另一个线程从队列中删除元素。线程通过条件变量进行同步。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span>std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> queue<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>mutex mtx<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>condition_variable cv<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟生产</span>        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Produced: "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        cv<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知消费者</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>        cv<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待直到队列不为空</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Consumed: "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t2</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，生产者线程在每次添加一个元素到队列后都会调用notify_one()来通知消费者线程。消费者线程在wait()函数中等待，直到收到通知并且队列不为空才会继续执行。</p><p>需要注意的是，虽然在上述代码中我们的消费者线程是一个无限循环，但在实际的程序中，你需要有一种机制来结束这个线程。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能指针的使用</title>
      <link href="/2023/05/10/zhi-neng-zhi-zhen-de-shi-yong/"/>
      <url>/2023/05/10/zhi-neng-zhi-zhen-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在 C++ 中，智能指针是一种对象，它处理内存管理的问题，使程序员更加专注于业务逻辑而不是内存管理。C++ 标准库中提供了几种类型的智能指针，包括：</p><ul><li><p><code>std::unique_ptr</code>: 它代表独占所有权的概念。一个 <code>std::unique_ptr</code> 对象在任何时间都拥有它所指向的对象。当 <code>std::unique_ptr</code> 被销毁（例如，当离开其作用域时），它所指向的对象也会被销毁（即调用其析构函数）。</p></li><li><p><code>std::shared_ptr</code>: 它代表共享所有权的概念。多个 <code>std::shared_ptr</code> 对象可以拥有同一个对象。当最后一个拥有该对象的 <code>std::shared_ptr</code> 被销毁时，它所指向的对象也会被销毁。</p></li><li><p><code>std::weak_ptr</code>: 它是为了配合 <code>std::shared_ptr</code> 而存在的，它提供了一种方式访问 <code>std::shared_ptr</code> 所管理的对象，但是不增加引用计数。这对于解决 <code>std::shared_ptr</code> 循环引用的问题（即，两个 <code>std::shared_ptr</code> 相互引用，导致它们都不会被销毁）是很有用的。</p></li></ul><p>智能指针的使用可以极大地简化内存管理，避免内存泄漏和其他与生命周期管理相关的错误。然而，它们并不能解决所有的内存管理问题，仍然需要程序员小心谨慎地设计他们的代码。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="std-unique-ptr示例"><a href="#std-unique-ptr示例" class="headerlink" title="std::unique_ptr示例"></a><code>std::unique_ptr</code>示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::~Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::bar\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> Foo <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(const Foo&amp;)\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token keyword">new</span> Foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p1 独占 Foo</span>    p1<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> <span class="token function">p2</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 现在 p2 独占 Foo</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 现在 p1 独占 Foo</span>    <span class="token punctuation">&#125;</span>    p1<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>    <span class="token comment">// Foo 的析构器在这里被调用，因为 p1 被销毁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="std-shared-ptr示例"><a href="#std-shared-ptr示例" class="headerlink" title="std::shared_ptr示例"></a><code>std::shared_ptr</code>示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::~Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::bar\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Foo<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里，我们不再需要使用 new。std::make_shared 是一个更安全，更高效的方式来分配共享对象。</span>        p1<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        p2<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>        <span class="token comment">// Foo 的实例仍未被删除，因为 p1 和 p2 都还在作用域内</span>    <span class="token punctuation">&#125;</span>        p1<span class="token operator">-></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Foo::bar"</span>        <span class="token comment">// Foo 的析构器在这里被调用，因为 p1 离开了作用域</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="std-weak-ptr示例"><a href="#std-weak-ptr示例" class="headerlink" title="std::weak_ptr示例"></a><code>std::weak_ptr</code>示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo::~Foo\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>weak_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> weak<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> shared <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Foo<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weak <span class="token operator">=</span> shared<span class="token punctuation">;</span>        <span class="token comment">// 在 shared 存在的时候，我们可以使用 weak 来获取一个新的 shared_ptr 实例</span>        <span class="token keyword">auto</span> p <span class="token operator">=</span> weak<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Object has not been deleted\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这里，shared 被销毁，因此 Foo 被删除</span>    <span class="token comment">// 因为 Foo 已经被删除，所以我们不能再从 weak 中获取一个 shared_ptr</span>    <span class="token keyword">auto</span> p <span class="token operator">=</span> weak<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Object has been deleted\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p>智能指针的 reset 方法是用于释放智能指针当前拥有的对象，并可能接管新的对象。</p><p>以下是 std::unique_ptr 和 std::shared_ptr 的 reset 方法的使用：</p><ul><li><code>std::unique_ptr</code> 的 <code>reset</code> 方法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">" constructed.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">" destructed.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p 现在指向一个新的 Foo 对象</span>    p<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p 释放旧的 Foo 对象并指向一个新的 Foo 对象</span>    <span class="token comment">// 在这一步，"Foo 1 destructed." 被打印到控制台</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>std::shared_ptr</code> 的 <code>reset</code> 方法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">" constructed.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Foo "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">" destructed.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Foo<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p1 现在指向一个新的 Foo 对象</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>  <span class="token comment">// p2 也指向同一个 Foo 对象</span>    p1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p1 释放旧的 Foo 对象并指向一个新的 Foo 对象</span>    <span class="token comment">// 但是，"Foo 1 destructed." 并未被打印到控制台，因为 p2 仍然拥有它</span>    p2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p2 释放它的 Foo 对象</span>    <span class="token comment">// 在这一步，"Foo 1 destructed." 被打印到控制台</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 智能指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的封装与函数绑定用法解析</title>
      <link href="/2023/05/10/lei-de-feng-zhuang-yu-han-shu-bang-ding-yong-fa-jie-xi/"/>
      <url>/2023/05/10/lei-de-feng-zhuang-yu-han-shu-bang-ding-yong-fa-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h1><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><p>src&#x2F;adas_proc&#x2F;adas_app&#x2F;adas_app.cpp —&gt; 629行</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> AdasProcWrapper <span class="token operator">=</span> ac<span class="token double-colon punctuation">::</span>ObjWrapper<span class="token operator">&lt;</span>ac<span class="token double-colon punctuation">::</span>AdasProcInterface<span class="token punctuation">,</span> HAC_CreateAdasProc<span class="token punctuation">,</span> HAC_DestroyAdasProc<span class="token operator">></span><span class="token punctuation">;</span>AdasProcWrapper                        adas_proc_<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>AdasProcWrapper</code> 是一个类型别名（using 声明），用于定义 <code>adas_proc_</code>对象。它是由 <code>ac::ObjWrapper</code> 模板类实例化而来。  </li><li><code>ac::ObjWrapper</code> 是一个模板类，接受三个模板参数：<code>ac::AdasProcInterface、HAC_CreateAdasProc 和 HAC_DestroyAdasProc</code>。</li></ul><p>ObjWrapper模板类的定义如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * @brief 一个简单的wrapper */</span><span class="token keyword">using</span> ObjCreateType  <span class="token operator">=</span> <span class="token function">HAC_Handle</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">using</span> ObjDestroyType <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>HAC_Handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> ObjCreateType Create<span class="token punctuation">,</span> ObjDestroyType Destroy<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">ObjWrapper</span> <span class="token keyword">final</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ObjWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>config<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        obj_ <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">Create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token function">StringException</span><span class="token punctuation">(</span><span class="token function">StringFormatWithPrefix</span><span class="token punctuation">(</span><span class="token string">"error: Create obj failed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ObjWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">ObjWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>HAC_Handle<span class="token operator">></span></span></span><span class="token punctuation">(</span>obj_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    T <span class="token operator">*</span><span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token function">StringException</span><span class="token punctuation">(</span><span class="token function">StringFormatWithPrefix</span><span class="token punctuation">(</span><span class="token string">"error: obj is nullptr."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> obj_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    T <span class="token operator">*</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>config<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> obj <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">Create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token function">StringException</span><span class="token punctuation">(</span><span class="token function">StringFormatWithPrefix</span><span class="token punctuation">(</span><span class="token string">"error: Create obj failed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>HAC_Handle<span class="token operator">></span></span></span><span class="token punctuation">(</span>obj_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj_ <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ObjWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> ObjWrapper <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    ObjWrapper<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> ObjWrapper <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    T <span class="token operator">*</span>obj_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由模板类的定义可知，该模板类有三个模板参数：</p><ul><li><code>typename T</code>：这是一个类型参数，用于指定被包装的对象的类型。</li><li><code>ObjCreateType Create</code>：这是一个函数指针类型，用于指定创建对象的函数。</li><li><code>ObjDestroyType Destroy</code>：这是一个函数指针类型，用于指定销毁对象的函数。</li></ul><p>因此，<code>AdasProcWrapper</code> 类型的 <code>adas_proc_</code> 对象是一个使用 <code>ac::ObjWrapper</code> 封装的 ADAS 处理实例。这个封装提供了一种方便的方式来创建和销毁 ADAS 处理实例，并提供了 ADAS 处理接口的访问。<code>adas_proc_</code>为封装类<code>ac::ObjWrapper</code>实例化后的对象。</p><h2 id="封装类的使用1"><a href="#封装类的使用1" class="headerlink" title="封装类的使用1"></a>封装类的使用1</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">adas_proc_<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>json_config_str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>封装类对象adas_proc_调用了模板类<code>ac::ObjWrapper</code>中的<code>Reset</code>函数，该函数调用了模板类创建时传入的参数2：<code>HAC_CreateAdasProc</code>,该参数是一个函数指针类型，用于指定创建对象的函数。该函数的定义如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * @brief 创造对象 * @param config json字符串，参考，assets目录下的配置文件,会从中读取各种配置信息， *               包括摄像头信息，模型文件路径,以及其他配置信息等等 * @note 当句柄不为NULL时候，最后一定要调用HAC_DestroyAdasProc进行销毁， *       如果为NULL，调用或者不调用HAC_DestroyAdasProc都可以。 * @return HAC_Handle 句柄,需要判断返回值是否是NULL */</span><span class="token keyword">extern</span> <span class="token string">"C"</span> HQ_FLAG_DLL_API HAC_Handle <span class="token function">HAC_CreateAdasProc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>config<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>HAC_Handle<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> ac<span class="token double-colon punctuation">::</span><span class="token function">AdasProcImpl</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="封装类的使用2"><a href="#封装类的使用2" class="headerlink" title="封装类的使用2"></a>封装类的使用2</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">adas_proc_<span class="token operator">-></span><span class="token function">SetAdasInfoEvent</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Impl<span class="token double-colon punctuation">::</span>OnAdasInfo<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_1<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_2<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，<code>SetAdasInfoEvent</code>函数的定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">AdasProcImpl</span><span class="token double-colon punctuation">::</span><span class="token function">SetAdasInfoEvent</span><span class="token punctuation">(</span><span class="token keyword">const</span> AdasInfoEvent <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    on_adas_info_ <span class="token operator">=</span> event<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>OnAdasInfo</code>函数的定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">OnAdasInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> tickcount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里就有点绕了，模板类中并没有SetAdasInfoEvent函数，这里怎么能使用呢？其实这个函数的定义在<code>ac::AdasProcInterface</code>类中，由于在模板类中重载了<code>-&gt;</code>运算符，因此<code>adas_proc_-&gt;SetAdasInfoEvent</code>中的<code>-&gt;</code>是被重载后的运算符，<code>adas_proc_-&gt;</code>等同于<code>adas_proc_.obj_</code>,故<code>adas_proc_-&gt;SetAdasInfoEvent</code>等同于<code>adas_proc_.obj_.SetAdasInfoEvent</code>。</p><p>这里封装类重载了<code>-&gt;</code>运算符，因此看起来封装后的类可以直接访问模板参数1指向类<code>ac::AdasProcInterface</code>的成员函数。</p><p>到此为止，可以基本了解封装类的定义和使用示例。</p><h1 id="函数的绑定"><a href="#函数的绑定" class="headerlink" title="函数的绑定"></a>函数的绑定</h1><p>紧接上文，在调用<code>SetAdasInfoEvent</code>函数时使用了<code>std::bind</code>进行了函数的绑定。<code>std::bind</code> 是 C++ 标准库中的一个函数模板，它允许你创建一个函数对象，将参数绑定到可调用对象上。它位于 <code>&lt;functional&gt;</code> 头文件中，用于泛化函数调用。</p><p>std::bind 函数可以将一个可调用对象和一些参数绑定在一起，生成一个新的函数对象。这个新的函数对象可以延迟执行或者在需要时进行调用，而且可以自定义绑定的参数。</p><p>因此,这里是将<code>Impl::OnAdasInfo</code>与其参数进行绑定后生成一个新的可调用对象，同时将其作为函数<code>SetAdasInfoEvent</code>的参数传递给<code>on_adas_info_</code>,也就是说<code>on_adas_info_=std::bind(&amp;Impl::OnAdasInfo, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3)</code>。这样<code>on_adas_info_</code>就可以在使用时传递参数并执行<code>OnAdasInfo</code>函数。</p><p><code>on_adas_info_</code>的调用场景如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">AdasProcImpl</span><span class="token double-colon punctuation">::</span><span class="token function">OnAlarmInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> tickcount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 设置输出信息到buffer中</span>    <span class="token comment">// 把决策模块会掉出来的内容添加到out_buffer_中，然后回调到外面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>on_adas_info_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">decltype</span><span class="token punctuation">(</span>out_buffer_<span class="token punctuation">)</span>  tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>                        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lck</span><span class="token punctuation">(</span>buf_mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 把buffer中内容放入out_buffer中</span>            <span class="token keyword">const</span> <span class="token keyword">auto</span> out_buffer_length <span class="token operator">=</span> out_buffer_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out_buffer_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>out_buffer_length <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>out_buffer_<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> out_buffer_length<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> out_buffer_<span class="token punctuation">;</span>            out_buffer_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">on_adas_info_</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tickcount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此为止，可以基本了解函数绑定的定义和使用示例。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类的封装 </tag>
            
            <tag> 函数绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++接口定义</title>
      <link href="/2023/05/10/c-jie-kou-ding-yi/"/>
      <url>/2023/05/10/c-jie-kou-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要定义接口类"><a href="#为什么要定义接口类" class="headerlink" title="为什么要定义接口类?"></a>为什么要定义接口类?</h1><p>在软件开发这个行业中，一个较大的软件项目，一般由几个小组共同开发完成，为了将小组之间的影响降低到最低，定义好接口软件成为双方关注的焦点，对于要求在短时间开发完成的接口更是如此。那么如何才能定义好的接口呢? 第一，接口名字和实际的功能相符合；第二、接口要对数据进行封装，不允许客户直接操作接口之下的数据，尤其是使用new和delete在堆上操作内存数据。因为客户很容易由于操作不当造成错误，误以为是设计的接口有问题。</p><h1 id="两种常见的接口定义方法？"><a href="#两种常见的接口定义方法？" class="headerlink" title="两种常见的接口定义方法？"></a>两种常见的接口定义方法？</h1><p>c++中实现对接口与实现进行分离有两种方法，一种是将对象的实现细目隐藏于指针背后，简单的说就是将其分成两个类，一个类只提供接口，另一个负责实现该接口，这种设计手法常称为Pimpl Idiom(pointer to implementation)。<br>另一种方法就是将接口定义为抽象类，接口全被定义为纯虚函数的形式（纯虚函数没有具体的实现方法），派生类的成员函数负责实现这些接口。这种设计手法称为对象接口（Object Interface）。千万不要忘记把抽象接口类的析构函数定义为virtual函数，可能会造成内存泄漏。</p><h1 id="“对象接口”方式"><a href="#“对象接口”方式" class="headerlink" title="“对象接口”方式"></a>“对象接口”方式</h1><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><h3 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义?"></a>如何定义?</h3><p>首先给接口类下了定义：接口类应该是只提供方法声明，而自身不提供方法定义的抽象类。接口类自身不能实例化，接口类的方法定义&#x2F;实现只能由接口类的子类来完成。</p><p>而对于C++，其接口类一般具有以下特征：</p><ul><li>1.最好不要有成员变量，但可以有静态常量（static const或enum）</li><li>2.要有纯虚接口方法</li><li>3.要有虚析构函数，并提供默认实现</li><li>4.不要声明构造函数</li></ul><p>如下就是一个最简单的例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Testable</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> START <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// #1</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> STOP <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// #2： 接口方法</span>     <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Testable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// #3： 从C++11开始可以： virtual ~Testable() = default;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>#1.</code><br>如果成员变量，尤其是可变的成员变量，定义在接口中，等于是把实现细节暴露出来了，不符合接口定义的要求，所以一般不在接口中定义可变的成员变量。<br>而常量可以定义在接口中，因为有时接口需要返回状态，而这些状态可以定义成常量放在接口中。</p><p><code>#2.</code><br>由于不能让接口类自身能够实例化，并且需要子类必须实现接口暴露的方法，所以接口方法都要声明成纯虚函数。<br>声明成纯虚函数意味着接口类自身不需要提供方法的定义，方法的定义需要由接口类的子类提供，并且接口类自身也因此变成了抽象类而不能被实例化。</p><p><code>#3.</code><br>a). 在使用接口类的指针访问接口类的子类的实例时，当对接口类的指针做delete时，如果接口类的析构函数不是虚析构函数的话，将只会调用接口类的析构函数，接口类的子类的析构函数将不会被调用，内存泄露将会产生，所以接口类的析构函数必须定义成虚析构函数。<br>b). 如果接口类的析构函数不提供默认实现，即如果接口类的析构函数是纯虚析构函数的话，接口类的子类将被迫必须提供析构函数的实现，这样对接口类的子类不友好。<br>c). 在C++11中也可以用：  virtual ~Testable() &#x3D; default; 替代 virtual ~Testable() {};</p><p><code>#4.</code><br>不要显式定义任何的构造函数，但也不要在接口中加入如下代码来禁止生成构造函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Testable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token function">Testable</span><span class="token punctuation">(</span><span class="token keyword">const</span> Testable<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为C++的调用机制要求子类的构造函数调用时一定会先调用父类的构造函数，如果禁止生成构造函数，代码编译时会报错。如果程序员不显式的提供构造函数，编译器也会隐式的加上构造函数的，虽然这些构造函数对于接口类来说实际没有什么意义。</p><p>C++中如何定义标识接口（marker interface）类?<br>标识接口是没有任何方法和属性的接口。这种接口在java中出现的较多，比如：java.io.Serializable、java.rmi.Remote、java.util.EventListener、java.util.RandomAccess</p><p>实现代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Testable</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Testable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// #5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>#5.</code><br>只要对纯虚析构函数提供一个默认实现就可以了。这种对纯虚函数提供实现的写法看似很奇怪，但C++的确是支持的。</p><h3 id="如何正确的使用接口类"><a href="#如何正确的使用接口类" class="headerlink" title="如何正确的使用接口类"></a>如何正确的使用接口类</h3><p>提供接口与实现<br>首先，声明一个接口：</p><ul><li><code>circle.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle.h</span><span class="token comment">// 圆的接口类</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 接口方法：面积</span><span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过继承的方式实现这个接口：</p><ul><li><code>circle_impl.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle_impl.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle.h"</span></span> <span class="token comment">// 圆的具体实现类</span><span class="token keyword">class</span> <span class="token class-name">CircleImpl</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Circle</span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">CircleImpl</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>circle_impl.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle_impl.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle_impl.h"</span></span> <span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token class-name">CircleImpl</span><span class="token double-colon punctuation">::</span><span class="token function">CircleImpl</span><span class="token punctuation">(</span><span class="token keyword">double</span> _radius<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">radius</span><span class="token punctuation">(</span>_radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">double</span> <span class="token class-name">CircleImpl</span><span class="token double-colon punctuation">::</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，通过管理类创建接口派生类的实例，或者销毁接口派生类的实例：</p><ul><li><code>circle_manager.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle_manager.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle.h"</span></span> <span class="token comment">// 圆的创建工厂类</span><span class="token keyword">class</span> <span class="token class-name">CircleManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> Circle<span class="token operator">*</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 创建circle实例</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>Circle<span class="token operator">*</span> circlePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 销毁circle实例</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>circle_manager.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// circle_manager.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle_manager.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle_impl.h"</span></span> Circle<span class="token operator">*</span> <span class="token class-name">CircleManager</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Circle<span class="token operator">*</span> circlePtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CircleImpl</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> circlePtr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token class-name">CircleManager</span><span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span>Circle<span class="token operator">*</span> circlePtr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> circlePtr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码目录结构</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proj-+     <span class="token operator">|</span>-inc-+     <span class="token operator">|</span>     <span class="token operator">|</span>-circle.h     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_manager.h     <span class="token operator">|</span>     <span class="token operator">|</span>-src-+           <span class="token operator">|</span>-circle_impl.h           <span class="token operator">|</span>-circle_impl.cpp           <span class="token operator">|</span>-circle_manager.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中inc目录用于存放Circle接口类和Circle管理类的声明，src目录中存放Circle实现类CircleImpl的声明和定义、Circle管理类CircleManager的定义。</p><p>然后，可以将以上代码编译成静态库circle.lib，并和inc目录中的头文件一起提供给外部调用：</p><blockquote><ul><li><code>如何使用静态库？</code><br>外部使用者编译时，需要做如下配置：</li></ul><ul><li><p>1 把inc目录添加到“附加包含目录”中。</p></li><li><p>2 “附加依赖项”中添加circle.lib。</p></li><li><p>3 把circle.lib所在目录的路径添加到“附加库目录”中。</p></li></ul></blockquote><p>外部使用者的代码如下：</p><ul><li><code>main.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle_manager.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"circle.h"</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Circle<span class="token operator">*</span> circlePtr <span class="token operator">=</span> <span class="token class-name">CircleManager</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> circlePtr<span class="token operator">-></span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token class-name">CircleManager</span><span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span>circlePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码只提供给外部circle的接口，circle的实现完全被隐藏了起来，外部将无从知晓，外部使用者只能通过circle管理类生成circle的派生类的实例。外部使用者得到circle派生类的实例后，除了能调用接口暴露的方法area()外，其它什么也做不了，这样就完全达到了使用接口的最终目标。</p><p><code>如何编译成动态库？</code><br>首先，添加一个新的头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// dll_export.h </span><span class="token comment">// if windows .dll </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WINDLL </span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DLL_API_EXPORTS </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DLL_API</span> <span class="token expression"><span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DLL_API</span> <span class="token expression"><span class="token function">__declspec</span><span class="token punctuation">(</span>dllimport<span class="token punctuation">)</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span> <span class="token comment">// else if Linux or macOS .so </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DLL_API</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加此头文件后，代码可以在windows、Linux下都可编译生成动态库，只需在编译时设置不同参数就行了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">windows： /D <span class="token string">"DLL_API_EXPORTS"</span> /D <span class="token string">"_WINDLL"</span>Linux： 不用配置额外参数circle.h和circle_manager.h也要做相应改动：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译完成后将生成”circle.lib“和”circle.dll“文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proj-+     <span class="token operator">|</span>-inc-+     <span class="token operator">|</span>     <span class="token operator">|</span>-circle.h     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_manager.h     <span class="token operator">|</span>     <span class="token operator">|</span>-src-+     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_impl.h     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_impl.cpp     <span class="token operator">|</span>     <span class="token operator">|</span>-circle_manager.cpp     <span class="token operator">|</span>     <span class="token operator">|</span>-bin-+           <span class="token operator">|</span>-circle.lib           <span class="token operator">|</span>-circlr.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>如何使用动态库？</code><br>外部使用者编译时，需要做如下配置：</p><ul><li><p>1 代码中添加#pragma comment(lib,”circle.lib”)， 这里是circle.lib，不是circle.dll。</p></li><li><p>2 把inc目录添加到“附加包含目录”中。</p></li><li><p>3 附加依赖项”中添加circle.lib，这里也是circle.lib，不是circle.dll。</p></li><li><p>4 把bin目录所在路径添加到”附加库目录“中。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里有几点需要说明一下：</p><p>1、为什么CircleManager类即在提供创建实例的方法又要提供销毁实例的方法？</p><p>由于编译器的实现方式不同，dll的堆空间可能跟调用方的堆空间不同，它可能是由dll自己单独管理的，所以从dll中创建的实例，最好还是在dll中销毁。</p><p>2、对动态库的调用本文是通过隐式调用的方式完成的，对动态库的调用也可以使用显式调用的方式，但由于windows和Linux在使用显式调用时的API是不同的，不好提供统一的代码，所以本文没有举例，以后有机会再单独行文介绍。</p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><ul><li><code>Animal.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">virtual</span> string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> Animal<span class="token operator">*</span> <span class="token function">creat</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>RealAnimal.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Animal.h"</span></span> <span class="token keyword">class</span> <span class="token class-name">RealAnimal</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">RealAnimal</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">RealAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">friend</span> Animal<span class="token operator">*</span> <span class="token function">creat</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    string<span class="token operator">&amp;</span> mName<span class="token punctuation">;</span>    <span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>RealAnimal.cpp</code><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"RealAnimal.h"</span></span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">RealAnimal</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">mName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">mAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">RealAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> string<span class="token operator">&amp;</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">RealAnimal</span><span class="token double-colon punctuation">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Animal<span class="token operator">*</span> <span class="token function">creat</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">RealAnimal</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>如前面所说，Animal* creat(string&amp; name, int age)确实只是实例化一个RealAnimal对象，返回的却是Animal接口对象，所以必须将类Animal 的析构函数声明为虚函数，不然会造成内存泄漏。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>对象接口的形式就是定义一个接口类，类内函数为纯虚函数(继承者必须实现)，放在一个接口头文件中，对外开放；然后定义一个实现上述接口的类，这个类继承了接口类，必须对类内的函数进行实现。这个外部只能看到接口头文件中内容，可以使用接口中定义的方法，但是无法修改和访问方法实现的细节。</p><h1 id="“指针实现”方式"><a href="#“指针实现”方式" class="headerlink" title="“指针实现”方式"></a>“指针实现”方式</h1><h2 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h2><ul><li><code>personImpl.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">PersonImpl</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">PersonImpl</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">PersonImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    string<span class="token operator">&amp;</span> mName<span class="token punctuation">;</span>    <span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>personImpl.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"personImpl.h"</span></span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">PersonImpl</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">mName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">PersonImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> string<span class="token operator">&amp;</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">PersonImpl</span><span class="token double-colon punctuation">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>person.h</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">PersonImpl</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>     PersonImpl <span class="token operator">*</span> <span class="token function">getImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    PersonImpl <span class="token operator">*</span>mPersonImpl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>person.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"person.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"personImpl.h"</span></span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">Person</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">mPersonImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">PersonImpl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"construct Person"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> mPersonImpl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"deconstruct Person"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> string<span class="token operator">&amp;</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mPersonImpl<span class="token operator">-></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">setName</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mPersonImpl<span class="token operator">-></span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mPersonImpl<span class="token operator">-></span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mPersonImpl<span class="token operator">-></span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> PersonImpl<span class="token operator">*</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span> <span class="token function">getImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mPersonImpl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>main.cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"person.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"personImpl.h"</span></span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        string str<span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>    Person <span class="token function">person</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     PersonImpl <span class="token operator">*</span>personImp <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     string name <span class="token operator">=</span> personImp<span class="token operator">-></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span>personImp<span class="token operator">-></span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h2><ul><li><p><code>adas_app.h</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">AdasApp</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">// json字符串</span>    <span class="token function">AdasApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">AdasApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">class</span> <span class="token class-name">Impl</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Impl<span class="token operator">></span> impl_<span class="token comment">/* = nullptr*/</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>adas_app.cpp</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">AdasApp</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">Impl</span> <span class="token keyword">final</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">/**     * @brief 解析得到前向目标     */</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>ac<span class="token double-colon punctuation">::</span>ObstacleInfo<span class="token operator">></span> <span class="token function">DecodeObjects</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> size<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>具体实现<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @brief 解析得到车道线     */</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>ac<span class="token double-colon punctuation">::</span>CurveInfo<span class="token operator">></span> <span class="token function">DecodeCurves</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> size<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>具体实现<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Impl</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>config<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>具体实现<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">DecodeObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DecodeCurves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token operator">~</span><span class="token function">Impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>具体实现<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token function">AdasApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>config<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">impl_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Impl</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">AdasApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>main.cpp</code></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   AdasApp <span class="token function">obj</span><span class="token punctuation">(</span>ac<span class="token double-colon punctuation">::</span><span class="token function">LoadTextFile</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子使用了智能指针实现adad的实现类<code>class Impl;</code> <code>std::unique_ptr&lt;Impl&gt; impl_/* = nullptr*/;</code>在adas_app.h中看不到真正的实现，但实际声明了一个智能指针<code>impl_</code>，在adas_app.cpp中将该指针指针指向了一个new对象<code>impl_(new Impl(config)</code>，并将其new对象的构造函数<code>Impl&#123;&#125;</code>进行了真正的实现。</p><hr><blockquote><p>版权声明：本文为CSDN博主「netyeaxi」的原创文章，遵循CC4.0BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/netyeaxi/article/details/80887646">https://blog.csdn.net/netyeaxi/article/details/80887646</a><br>原文链接：<a href="https://blog.csdn.net/netyeaxi/article/details/80724557">https://blog.csdn.net/netyeaxi/article/details/80724557</a><br>原文链接：<a href="https://blog.csdn.net/qq_20853741/article/details/121244189">https://blog.csdn.net/qq_20853741/article/details/121244189</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 接口定义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓OpenGL渲染画面闪烁原因分析</title>
      <link href="/2023/03/16/an-zhuo-opengl-xuan-ran-hua-mian-shan-shuo-yuan-yin-fen-xi/"/>
      <url>/2023/03/16/an-zhuo-opengl-xuan-ran-hua-mian-shan-shuo-yuan-yin-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>1.硬件接触不良<br>2.opengl双缓存未开启<br>3.opengl双缓存开启但离屏数据为更新<br>4.相机数据被覆盖<br>4.1相机数据格式不对<br>4.2申请内存与访问内存越界问题</p>]]></content>
      
      
      <categories>
          
          <category> 待整理android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> opengl </tag>
            
            <tag> 画面闪烁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用指南</title>
      <link href="/2023/02/28/git-shi-yong-zhi-nan/"/>
      <url>/2023/02/28/git-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="git-config-设置用户名称和邮件地址"><a href="#git-config-设置用户名称和邮件地址" class="headerlink" title="git config 设置用户名称和邮件地址"></a><code>git config</code> 设置用户名称和邮件地址</h2><ul><li>设置用户名称<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"goto456"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>设置邮件地址<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"goto456@126.com"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>列出当前Git所有的配置信息<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="git-init-初始化本地仓库"><a href="#git-init-初始化本地仓库" class="headerlink" title="git init 初始化本地仓库"></a><code>git init</code> 初始化本地仓库</h2><p>获取一个 Git 仓库有两种方法：<br>1.本地初始化一个仓库<br>2.从远程克隆一个仓库到本地<br>对于第1种方式，如果想对本地现有的一个项目用 Git 来管理，可以直接进入该项目的目录下执行如下命令，就可以将其初始化成一个 Git 仓库了。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="git-clone-克隆远程仓库到本地"><a href="#git-clone-克隆远程仓库到本地" class="headerlink" title="git clone 克隆远程仓库到本地"></a><code>git clone</code> 克隆远程仓库到本地</h2><ul><li>通过ssh方式克隆<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:goto456/leetcode.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>通过https方式克隆<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/goto456/leetcode.git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>https方式：不管是谁，只要拿到该项目的 url 可以随便 clone，但是在 push 到远程的时候需要验证用户名和密码；<br>ssh方式：需要现将你电脑的SSH key（SSH公钥）添加到GitHub（或者其他代码托管网站）上，这样在 clone 项目和 push 项目到远程时都不需要输入用户名和密码。</p></blockquote></li></ul><h1 id="git将本地仓库的全部历史记录都提交到指定远程仓库"><a href="#git将本地仓库的全部历史记录都提交到指定远程仓库" class="headerlink" title="git将本地仓库的全部历史记录都提交到指定远程仓库"></a>git将本地仓库的全部历史记录都提交到指定远程仓库</h1><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git%E6%95%99%E7%A8%8B.pdf">参考文档</a><br><a href="https://git-scm.com/book/zh/v2">Pro Git 第二版</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的lambda表达式使用方法</title>
      <link href="/2023/02/14/c-de-lambda-biao-da-shi-shi-yong-fang-fa/"/>
      <url>/2023/02/14/c-de-lambda-biao-da-shi-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数参数传递 </tag>
            
            <tag> lambda表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义鱼眼图像去畸变</title>
      <link href="/2023/02/14/zi-ding-yi-yu-yan-tu-xiang-qu-ji-bian/"/>
      <url>/2023/02/14/zi-ding-yi-yu-yan-tu-xiang-qu-ji-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="畸变图像-转换为-去畸变图像"><a href="#畸变图像-转换为-去畸变图像" class="headerlink" title="畸变图像 转换为 去畸变图像"></a>畸变图像 转换为 去畸变图像</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">undistortImage</span><span class="token punctuation">(</span>    InputArray distorted<span class="token punctuation">,</span>            <span class="token comment">// 输入的畸变图像</span>    OutputArray undistorted<span class="token punctuation">,</span>         <span class="token comment">// 输出的去畸变图像</span>    InputArray K<span class="token punctuation">,</span>                    <span class="token comment">// 相机内参矩阵(3x3)</span>    InputArray D<span class="token punctuation">,</span>                    <span class="token comment">// 相机畸变系数</span>    InputArray Knew <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 新的相机内参矩阵(3x3)</span>    <span class="token keyword">const</span> Size<span class="token operator">&amp;</span> new_size <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 新的去畸变图像尺寸</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>new_size</code>一般设置为空，默认输出去畸变图像和畸变图像的尺寸相同。</li><li><code>Knew </code>为新的相机内参矩阵，影响者去畸变之后图像的范围，参数有：<code>fx</code>、<code>fy</code>、<code>cx</code>、<code>cy</code>。<ul><li><code>fx</code>为水平方向的焦距，值越大，水平方向显示图像范围越大。</li><li><code>fy</code>为垂直方向的焦距，值越大，垂直方向显示图像范围越大。</li><li><code>cx</code>主点坐标的x值，值越大，显示图像范围整体越偏左</li><li><code>cy</code>主点坐标的y值，值越大，显示图像范围整体越偏下<blockquote><p><code>cx</code>、<code>cy</code>一般和原应相机的参数一样，这样去畸变后的图像和畸变图像的中心可以对齐；<code>fx</code>、<code>fy</code>需要根据去畸变图像的视野需求进行调整，一般在原相机的参数的基础上进行缩放。</p></blockquote></li></ul></li><li>效果展示<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%B1%BC%E7%9C%BC%E5%9B%BE%E5%83%8F%E5%8E%BB%E7%95%B8%E5%8F%98/0.0-0.0.png" alt="原始畸变图像"><style>th, td {  text-align: center; /* 设置表头和单元格中的文本居中 */}</style><table><colgroup>  <col style="width: 20%;">  <col style="width: 20%;">  <col style="width: 60%;"></colgroup><tr>  <th>fx缩小倍数</th>  <th>fy缩小倍数</th>  <th>去畸变图像</th></tr><tr>  <td>1.0</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/1.0-1.0.png""></td></tr><tr>  <td>1.3</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/1.3-1.0.png""></td></tr><tr>  <td>1.5</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/1.5-1.0.png""></td></tr><tr>  <td>3.0</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/3.0-1.0.png""></td></tr><tr>  <td>5.0</td>  <td>1.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/5.0-1.0.png""></td></tr><tr>  <td>5.0</td>  <td>1.5</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/5.0-1.5.png""></td></tr><tr>  <td>5.0</td>  <td>3.0</td>  <td><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/自定义鱼眼图像去畸变/5.0-3.0.png""></td></tr></table></li></ul><h1 id="畸变点-转换为-去畸变点"><a href="#畸变点-转换为-去畸变点" class="headerlink" title="畸变点 转换为 去畸变点"></a>畸变点 转换为 去畸变点</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">undistortPoints</span><span class="token punctuation">(</span>    InputArray distorted<span class="token punctuation">,</span>          <span class="token comment">// 输入的畸变坐标点</span>    OutputArray undistorted<span class="token punctuation">,</span>      <span class="token comment">// 输出的去畸变坐标点</span>    InputArray K<span class="token punctuation">,</span>                  <span class="token comment">// 相机内参矩阵(3x3)</span>    InputArray D<span class="token punctuation">,</span>                  <span class="token comment">// 畸变参数向量</span>    InputArray R <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 旋转矩阵(3x3)，通常是单位矩阵</span>    InputArray P <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">noArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 投影矩阵(3x3)或新相机内参矩阵Knew(3x3)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个函数可以直接向畸变图像上的点转换为去畸变图像上的点，也可以利用<code>R</code>,<code>P</code>矩阵将畸变图像上的点转换为世界坐标系中。</p></blockquote><p><strong>注意</strong>：这里转换为去畸变图像上的点时，不支持图像缩放，仅支持新的内参矩阵，因此图像在去畸变时，一般不改变图像的大小，保证点去畸变时可以与之对应。</p><h1 id="去畸变点-转换为-畸变点"><a href="#去畸变点-转换为-畸变点" class="headerlink" title="去畸变点 转换为 畸变点"></a>去畸变点 转换为 畸变点</h1><p>没有直接的函数将畸变点转换为去畸变点，但是可以利用map映射函数获得映射点来进行转换。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">initUndistortRectifyMap</span><span class="token punctuation">(</span>    InputArray K<span class="token punctuation">,</span>              <span class="token comment">// 相机内参矩阵 (3x3)</span>    InputArray D<span class="token punctuation">,</span>              <span class="token comment">// 畸变参数向量</span>    InputArray R<span class="token punctuation">,</span>              <span class="token comment">// 旋转矩阵 (3x3)</span>    InputArray P<span class="token punctuation">,</span>              <span class="token comment">// 新相机矩阵 (3x3)</span>    <span class="token keyword">const</span> Size<span class="token operator">&amp;</span> size<span class="token punctuation">,</span>          <span class="token comment">// 输出映射的图像尺寸</span>    <span class="token keyword">int</span> m1type<span class="token punctuation">,</span>                <span class="token comment">// 映射矩阵的数据类型 (例如：CV_32FC1)</span>    OutputArray map1<span class="token punctuation">,</span>          <span class="token comment">// 输出的第一个映射</span>    OutputArray map2           <span class="token comment">// 输出的第二个映射</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>map1</code>、<code>map2</code>为映射矩阵，类型为<code>cv::Mat</code>,尺寸为<code>size</code>，也就是说这个<code>Mat</code>的尺寸就是去畸变图像的尺寸，每个位置存储的值为对应畸变图像上点的<code>x</code>值或者<code>y</code>值。这样我们就可以访问这个<code>Mat</code>中每个像素值，进而得到去畸变点对应的畸变点坐标。</p><blockquote><p>众所周知，map映射时存储的映射关系一般为相反的</p></blockquote><ul><li>使用方法<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 初始化映射表</span>cv<span class="token double-colon punctuation">::</span>Mat map_x<span class="token punctuation">,</span> map_y<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> image_points_dist<span class="token punctuation">,</span> image_points_undist_new<span class="token punctuation">;</span>cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">initUndistortRectifyMap</span><span class="token punctuation">(</span>cam_K<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cam_D<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">)</span><span class="token punctuation">,</span> cam_K_new<span class="token punctuation">[</span>cam_index<span class="token punctuation">]</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span>CAMERA_WIDTH<span class="token punctuation">,</span> CAMERA_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> map_x<span class="token punctuation">,</span> map_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> point <span class="token operator">:</span> image_points_undist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Point2f point_undist <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span>                                           point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    image_points_dist<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">Point2f</span><span class="token punctuation">(</span>map_x<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>point_undist<span class="token punctuation">)</span><span class="token punctuation">,</span> map_y<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>point_undist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意</strong>: 这里的输出映射的图像尺寸需要为畸变图像的原始尺寸<code>cv::Size(CAMERA_WIDTH, CAMERA_HEIGHT)</code>,旋转矩阵应该为单位矩阵，新相机矩阵与去畸变时的设置保持一直即可。</p><h1 id="代码-undist-cpp"><a href="#代码-undist-cpp" class="headerlink" title="代码: undist.cpp"></a>代码: <code>undist.cpp</code></h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui/highgui.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/imgproc/imgproc.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNDIST_SCALE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * @description: 输入畸变图，输出去畸变图 * @param &#123;Mat&#125; &amp;img_dist * @param &#123;Mat&#125; &amp;img_undist * @return &#123;*&#125; * @author: wangshuaiyang */</span><span class="token keyword">int</span> <span class="token function">DistToUndistImage</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat img_dist<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>Mat <span class="token operator">&amp;</span>img_undist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat cam_K <span class="token operator">=</span> <span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Mat_</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">319.307046915</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">319.715597621</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat cam_D <span class="token operator">=</span> <span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Mat_</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0.07218855</span><span class="token punctuation">,</span> <span class="token number">0.02228145</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.015075182</span><span class="token punctuation">,</span> <span class="token number">0.002351672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新的相机内参矩阵和图像尺寸（可选）</span>    cv<span class="token double-colon punctuation">::</span>Mat cam_K_new <span class="token operator">=</span> cam_K<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5.0</span><span class="token punctuation">;</span>     <span class="token comment">// fx</span>    cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1.5</span><span class="token punctuation">;</span>     <span class="token comment">// fy</span>    cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cx</span>    cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> cam_K_new<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cy</span>    cv<span class="token double-colon punctuation">::</span>fisheye<span class="token double-colon punctuation">::</span><span class="token function">undistortImage</span><span class="token punctuation">(</span>img_dist<span class="token punctuation">,</span> img_undist<span class="token punctuation">,</span> cam_K<span class="token punctuation">,</span> cam_D<span class="token punctuation">,</span> cam_K_new<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>img_undist<span class="token punctuation">,</span> img_undist<span class="token punctuation">,</span> img_dist<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"image_remap_fish"</span><span class="token punctuation">,</span> img_undist<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv<span class="token double-colon punctuation">::</span>Mat img <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"picture_back.png"</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat undist_img<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">DistToUndistImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> undist_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编译</li><li><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ undist.cpp <span class="token parameter variable">-o</span> undist <span class="token parameter variable">-lopencv_core</span> <span class="token parameter variable">-lopencv_highgui</span> <span class="token parameter variable">-lopencv_imgproc</span> <span class="token parameter variable">-lopencv_imgcodecs</span> <span class="token parameter variable">-lopencv_calib3d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码规范</title>
      <link href="/2023/02/14/bian-ma-gui-fan/"/>
      <url>/2023/02/14/bian-ma-gui-fan/</url>
      
        <content type="html"><![CDATA[<h1 id="C-编码规范"><a href="#C-编码规范" class="headerlink" title="C++编码规范"></a>C++编码规范</h1><p>&#x2F;&#x2F; 文件: 单词小写, 单词之间使用下划线</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"a.h"</span></span><span class="token comment">// 命名空间: 小写字母</span><span class="token keyword">namespace</span> mynamespace <span class="token punctuation">&#123;</span><span class="token comment">// 常量: k开头, 每个单词首字母大写</span><span class="token keyword">const</span> <span class="token keyword">int</span> kDaysInAWeek <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">// 类型定义</span><span class="token keyword">typedef</span> hash_map<span class="token operator">&lt;</span>TUrlTableProperties <span class="token operator">*</span><span class="token punctuation">,</span> string<span class="token operator">></span> TPropertiesMap<span class="token punctuation">;</span><span class="token keyword">using</span> PropertiesMap <span class="token operator">=</span> hash_map<span class="token operator">&lt;</span>TUrlTableProperties <span class="token operator">*</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">// 全局变量、局部变量: 单词小写, 单词之间使用下划线</span><span class="token keyword">int</span> my_name<span class="token punctuation">;</span><span class="token comment">// 类: T开头, 每个单词首字母大写</span><span class="token keyword">class</span> <span class="token class-name">TMyClass</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// 结构体: T开头, 每个单词首字母大写</span><span class="token keyword">struct</span> <span class="token class-name">TMyStruct</span> <span class="token punctuation">&#123;</span><span class="token comment">// 普通变量: 单词小写, 单词之间使用下划线</span><span class="token keyword">int</span> my_name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 函数: 每个单词首字母大写, 函数名首字母大写</span><span class="token function">MyExcitingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 类成员变量: 单词小写, 单词之间使用下划线, 最后以下划线结束</span><span class="token keyword">int</span> my_name_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%2B%2B%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C++编码规范</a></p><blockquote><p>C++编码规范.pdf的升级版本</p></blockquote><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%2B%2B%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83C1.pdf">C++编码规范.pdf的升级版本</a></p><h1 id="C编码规范"><a href="#C编码规范" class="headerlink" title="C编码规范"></a>C编码规范</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/%E5%B5%8C%E5%85%A5%E5%BC%8FC%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C编码规范</a></p><h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/Java%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.pdf">C#编码规范</a></p><h1 id="C-编码规范-1"><a href="#C-编码规范-1" class="headerlink" title="C#编码规范"></a>C#编码规范</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/C%E4%BA%95%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83C1.pdf">C#编码规范</a></p><h1 id="google编程风格指南"><a href="#google编程风格指南" class="headerlink" title="google编程风格指南"></a>google编程风格指南</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/google%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97.pdf">google编程风格指南</a></p><h1 id="移动机器人开发代码规范说明书"><a href="#移动机器人开发代码规范说明书" class="headerlink" title="移动机器人开发代码规范说明书"></a>移动机器人开发代码规范说明书</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">移动机器人开发代码规范说明书</a></p>]]></content>
      
      
      <categories>
          
          <category> 编码规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> java </tag>
            
            <tag> C </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity和SurfaceView的生命周期</title>
      <link href="/2023/02/10/activity-he-surfaceview-de-sheng-ming-zhou-qi/"/>
      <url>/2023/02/10/activity-he-surfaceview-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<p>当用户浏览、退出和返回到您的应用时，您应用中的 Activity 实例会在其生命周期的不同状态间转换。Activity 类会提供许多回调，这些回调会让 Activity 知晓某个状态已经更改：系统正在创建、停止或恢复某个 Activity，或者正在销毁该 Activity 所在的进程。</p><p>在生命周期回调方法中，您可以声明用户离开和再次进入 Activity 时 Activity 的行为方式。例如，如果您正构建流媒体视频播放器，当用户切换至另一应用时，您可能要暂停视频或终止网络连接。当用户返回时，您可以重新连接网络并允许用户从同一位置继续播放视频。换言之，每个回调都支持您执行适合给定状态变更的特定作业。在合适的时间执行正确的作业，并妥善处理转换，这将提升应用的稳健性和性能。例如，良好的生命周期回调实现有助于防止应用出现以下问题：</p><ul><li>当用户在使用应用时接听来电，或切换至另一应用时崩溃。</li><li>当用户未主动使用它时，消耗宝贵的系统资源。</li><li>当用户离开应用并在稍后返回时，丢失用户的进度。</li><li>当屏幕在横向和纵向之间旋转时，崩溃或丢失用户的进度。</li></ul><h1 id="Activity-生命周期概念"><a href="#Activity-生命周期概念" class="headerlink" title="Activity 生命周期概念"></a>Activity 生命周期概念</h1><p>为了在 Activity 生命周期的各个阶段之间导航转换，Activity 类提供六个核心回调：onCreate()、onStart()、onResume()、onPause()、onStop() 和 onDestroy()。当 Activity 进入新状态时，系统会调用其中每个回调。</p><p>下图是对此范例的直观展现。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_surfaceView.png">  </p><p>当用户开始离开 Activity 时，系统会调用方法来销毁该 Activity。在某些情况下，此销毁只是部分销毁；Activity 仍然驻留在内存中（例如当用户切换至另一应用时），并且仍然可以返回到前台。如果用户返回到该 Activity，Activity 会从用户离开时的位置继续运行。除了少数例外，应用在后台运行时会受到限制，无法启动 Activity。</p><p>系统终止给定进程及其中 Activity 的可能性取决于当时 Activity 的状态。Activity 状态和从内存中弹出 会更详细地介绍状态与弹出漏洞之间的关系。</p><p>根据 Activity 的复杂程度，您可能不需要实现所有生命周期方法。但是，请务必了解每个方法，并实现能够确保应用按用户预期方式运行的方法，这非常重要。</p><blockquote><p>具体细节参考：<a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java">https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java</a></p></blockquote><h1 id="Activity和SurfaceView的生命周期"><a href="#Activity和SurfaceView的生命周期" class="headerlink" title="Activity和SurfaceView的生命周期"></a>Activity和SurfaceView的生命周期</h1><ul><li><p>程序打开<br>Activity 调用顺序:<code>onCreate()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceCreated()</code>-&gt;<code>surfaceChanged()</code>  </p></li><li><p>程序关闭（按 BACK 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code>-&gt;<code>onDestory()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p></li><li><p>程序切到后台（按 HOME 键）<br>Activity 调用顺序:<code>onPause()</code>-&gt;<code>onStop()</code><br>SurfaceView 调用顺序: <code>surfaceDestroyed()</code>  </p></li><li><p>程序切到前台<br>Activity 调用顺序: <code>onRestart()</code>-&gt;<code>onStart()</code>-&gt;<code>onResume()</code><br>SurfaceView 调用顺序: <code>surfaceChanged()</code>-&gt;<code>surfaceCreated()</code>  </p></li><li><p>屏幕锁定（挂断键或锁定屏幕）<br>Activity 调用顺序: <code>onPause()</code><br>SurfaceView 什么方法都不调用  </p></li><li><p>屏幕解锁<br>Activity 调用顺序:<code>onResume()</code><br>SurfaceView 什么方法都不调用</p></li></ul><blockquote><p>总结SurfaceView在页面可见或者不可见时触发  </p></blockquote><p>示例图如下所示:  </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/Activity%E5%92%8CSurfaceView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity_lifecycle.png"></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> activity </tag>
            
            <tag> surfaceView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装opencv与opencv_contrib</title>
      <link href="/2023/01/31/ubuntu-an-zhuang-opencv-yu-opencv-contrib/"/>
      <url>/2023/01/31/ubuntu-an-zhuang-opencv-yu-opencv-contrib/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cmake <span class="token function">git</span> libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential qt5-default ccache libv4l-dev libavresample-dev  libgphoto2-dev libopenblas-base libopenblas-dev doxygen  openjdk-8-jdk pylint libvtk6-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> pkg-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="下载源文件"><a href="#下载源文件" class="headerlink" title="下载源文件"></a>下载源文件</h2><p><a href="https://github.com/opencv/opencv">opencv</a><br><a href="https://github.com/opencv/opencv_contrib">opencv_contrib</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> opencv-x.x.x.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> opencv_contrib-x.x.x.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="将opencv-contrib移动到opencv目录下，同时在该目录下新建一个文件夹build"><a href="#将opencv-contrib移动到opencv目录下，同时在该目录下新建一个文件夹build" class="headerlink" title="将opencv_contrib移动到opencv目录下，同时在该目录下新建一个文件夹build"></a>将opencv_contrib移动到opencv目录下，同时在该目录下新建一个文件夹build</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> opencv_contrib-x.x.x opencv-x.x.x  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> opencv-x.x.x<span class="token function">mkdir</span> build                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="现在进入到opencv-x-x-x目录下，查看文件结构"><a href="#现在进入到opencv-x-x-x目录下，查看文件结构" class="headerlink" title="现在进入到opencv-x.x.x目录下，查看文件结构"></a>现在进入到opencv-x.x.x目录下，查看文件结构</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">3rdpartycmakedataLICENSEplatformsappsCMakeLists.txtdocmodulesREADME.mdbuildCONTRIBUTING.mdincludepencv_contrib-x.x.xsamples<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进入build目录，并且执行cmake生成makefile文件"><a href="#进入build目录，并且执行cmake生成makefile文件" class="headerlink" title="进入build目录，并且执行cmake生成makefile文件"></a>进入build目录，并且执行cmake生成makefile文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> build  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>Release <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local <span class="token parameter variable">-D</span> <span class="token assign-left variable">OPENCV_EXTRA_MODULES_PATH</span><span class="token operator">=</span>/home/files/opencv-x.x.x/opencv_contrib-x.x.x/modules/ <span class="token punctuation">..</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：OPENCV_EXTRA_MODULES_PATH就是你 opencv_contrib-3.3.1下面的modules目录，请按照自己的实际目录修改地址。<br>接下来就是漫长的等待了…<br>生成完毕提示：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--   Install path:                  /usr/local-- --   cvconfig.h is in:              /home/files/opencv-x.x.x/build-- ------------------------------------------------------------------- -- Configuring <span class="token keyword">done</span>-- Generating <span class="token keyword">done</span>-- Build files have been written to: /home/files/opencv-x.x.x/build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在cmake成功之后，就可以在build文件下make了"><a href="#在cmake成功之后，就可以在build文件下make了" class="headerlink" title="在cmake成功之后，就可以在build文件下make了"></a>在cmake成功之后，就可以在build文件下make了</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来就是更漫长的等待 … 具体时间因人而异</p><h2 id="链接库共享"><a href="#链接库共享" class="headerlink" title="链接库共享"></a>链接库共享</h2><p>编译安装完毕之后，为了让你的链接库被系统共享，让编译器发现，需要执行管理命令ldconfig：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig <span class="token parameter variable">-v</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="bug解决"><a href="#bug解决" class="headerlink" title="bug解决"></a>bug解决</h1><h2 id="解决编译opencv时，卡在IPPICV"><a href="#解决编译opencv时，卡在IPPICV" class="headerlink" title="解决编译opencv时，卡在IPPICV"></a>解决编译opencv时，卡在IPPICV</h2><h3 id="手动下载缺少文件"><a href="#手动下载缺少文件" class="headerlink" title="手动下载缺少文件"></a>手动下载缺少文件</h3><p><a href="https://github.com/geiyiren/MyBlog/blob/main/source/_posts/ubuntu%E5%AE%89%E8%A3%85opencv%E4%B8%8Eopencv_contrib/.cache/ippicv/7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz">ippicv_2020_lnx_intel64_20191018_general.tgz</a></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit opencv-x.x.x/3rdparty/ippicv.cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到<code>&quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/$&#123;IPPICV_COMMIT&#125;/ippicv/&quot;</code></p><p>将其改为ippicv_2020_lnx_intel64_20191018_general.tgz保存的目录。比如：<code>&quot;file:///home/downloads/&quot;</code>,格式为<code>&quot;file://路径&quot;</code><br>最后重新执行编译命令即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题"><a href="#终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题" class="headerlink" title="终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题"></a>终极方法：解决编译opencv时，卡在IPPICV、boostdesc、vgg等文件下载问题</h2><p>卡在这里的原因是因为在cmake编译的时候没有下载成功，这里使用手动下载与替换进行补救</p><h2 id="手动下载缺少文件-1"><a href="#手动下载缺少文件-1" class="headerlink" title="手动下载缺少文件"></a>手动下载缺少文件</h2><p><a href="https://pan.baidu.com/s/1OrfTdsNczKlNvJPg_gD0VA?pwd=1633">百度网盘:ubuntu安装opencv与opencv_contrib</a></p><h2 id="替换本地文件"><a href="#替换本地文件" class="headerlink" title="替换本地文件"></a>替换本地文件</h2><p>在<code>opencv源文件目录</code>下找到隐藏文件夹<code>.cache</code>，然后分别替换其中的文件。注意下载的文件中每个对应文件的开头字符串为临时校验码，需要以自己本次安装时生成的校验码为准。例如<code>7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz</code>中<code>7421de0095c7a39162ae13a6098782f9</code>为安装校验码，这个在替换文件时候需要改为本次安装自动生成的校验码。</p><h2 id="cache文件目录"><a href="#cache文件目录" class="headerlink" title=".cache文件目录"></a>.cache文件目录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.cache├── data│   └── 7505c44ca4eb54b4ab1e4777cb96ac05-face_landmark_model.dat├── ippicv│   └── 7421de0095c7a39162ae13a6098782f9-ippicv_2020_lnx_intel64_20191018_general.tgz└── xfeatures2d    ├── boostdesc    │   ├── 0ae0675534aa318d9668f2a179c2a052-boostdesc_lbgm.i    │   ├── 0ea90e7a8f3f7876d450e4149c97c74f-boostdesc_bgm.i    │   ├── 202e1b3e9fec871b04da31f7f016679f-boostdesc_binboost_064.i    │   ├── 232c966b13651bd0e46a1497b0852191-boostdesc_bgm_bi.i    │   ├── 324426a24fa56ad9c5b8e3e0b3e5303e-boostdesc_bgm_hd.i    │   ├── 98ea99d399965c03d555cef3ea502a0b-boostdesc_binboost_128.i    │   └── e6dcfa9f647779eb1ce446a8d759b6ea-boostdesc_binboost_256.i    └── vgg        ├── 151805e03568c9f490a5e3a872777b75-vgg_generated_120.i        ├── 7126a5d9a8884ebca5aea5d63d677225-vgg_generated_64.i        ├── 7cd47228edec52b6d82f46511af325c5-vgg_generated_80.i        └── e8d0dcd54d1bcfdc29203d011a797179-vgg_generated_48.i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_39936818/article/details/104951448">一次性解决opencv源码安装文件下载问题：ippicv_2017u3_lnx, face_landmark_model.dat, tiny-dnn</a><br><a href="https://blog.csdn.net/weixin_45846977/article/details/112396739">ubuntu安装opencv问题解决——缺少boostdesc_bgm.i文件</a></p>]]></content>
      
      
      <categories>
          
          <category> 待整理opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> opencv </tag>
            
            <tag> opencv_contrib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客常用模板</title>
      <link href="/2023/01/31/xie-bo-ke-chang-yong-mo-ban/"/>
      <url>/2023/01/31/xie-bo-ke-chang-yong-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="插入思维导图"><a href="#插入思维导图" class="headerlink" title="插入思维导图"></a>插入思维导图</h1><p>基于百度脑图的开源库 kityminder 很不错，实现了markdown文档中使用思维导图的方法。使用 Hexo 的 pullquote 将思维导图的内容包裹起来，mindmap 是思维导图渲染的标志，尺寸有三种规格：mindmap-sm、mindmap-md 和 mindmap-lg。<br>思维导图的内容和层级关系通过无序列表表示，支持基本的文字和超链接。举个例子，撰写文章时在需要的位置添加如下内容:  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% pullquote mindmap mindmap-md %&#125;<span class="token list punctuation">-</span> <span class="token url">[<span class="token content">在 Hexo 中使用思维导图</span>](<span class="token url">https://hunterx.xyz/use-mindmap-in-hexo.html</span>)</span>  <span class="token list punctuation">-</span> 前言  <span class="token list punctuation">-</span> 操作指南    <span class="token list punctuation">-</span> 准备需要的文件    <span class="token list punctuation">-</span> 为主题添加 CSS/JS 文件  <span class="token list punctuation">-</span> 使用方法&#123;% endpullquote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><blockquote class="pullquote mindmap mindmap-md"><ul><li><a href="https://hunterx.xyz/use-mindmap-in-hexo.html">在 Hexo 中使用思维导图</a><ul><li>前言</li><li>操作指南<ul><li>准备需要的文件</li><li>为主题添加 CSS&#x2F;JS 文件</li></ul></li><li>使用方法</li></ul></li></ul></blockquote><h1 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://cdn.jsdelivr.net/gh/用户名/仓库名称/仓库下的图像路径)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如：</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/车辆动态辅助轨迹线生成方法8.png)  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="插入pdf"><a href="#插入pdf" class="headerlink" title="插入pdf"></a>插入pdf</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>仓库路径<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>仓库下pdf路径<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000px<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例如：</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/geiyiren/MyBlogFile1/blob/pdf/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>git%E6%95%99%E7%A8%8B.pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000px<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述方法适用用私人github仓库中的pdf文件；如果插入其他链接直达的pdf文档，可以使用：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% pdf PDF直达链接 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc申请内存访问时容易出现的访问越界问题</title>
      <link href="/2022/12/15/malloc-shen-qing-nei-cun-fang-wen-shi-rong-yi-chu-xian-de-fang-wen-yue-jie-wen-ti/"/>
      <url>/2022/12/15/malloc-shen-qing-nei-cun-fang-wen-shi-rong-yi-chu-xian-de-fang-wen-yue-jie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="malloc相关"><a href="#malloc相关" class="headerlink" title="malloc相关"></a>malloc相关</h1><h2 id="malloc申请内存访问bug"><a href="#malloc申请内存访问bug" class="headerlink" title="malloc申请内存访问bug"></a>malloc申请内存访问bug</h2><ul><li>在访问malloc申请的内存时，如果访问越界时不会提示错误，而是继续操作错误的内存块，这一类的错误较为隐秘。</li><li>例如：在构建图像变换的map映射表时，申请存放map映射关系的内存块的大小并不是输出图像对应的大小，而是输出图像大小的2倍，因此此时存储的是像素位置(x,y)的映射关系。  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//构建4路YUV鱼眼图像去畸变映射关系</span><span class="token keyword">void</span> <span class="token function">dist2undist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> point_u_tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> point_d_tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> sf <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> img_out_height <span class="token operator">=</span> <span class="token number">720</span> <span class="token operator">*</span> img_out_h_scale<span class="token punctuation">;</span>    <span class="token keyword">int</span> img_out_width <span class="token operator">=</span> <span class="token number">1280</span> <span class="token operator">*</span> img_out_w_scale<span class="token punctuation">;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"dist2undist begin !,img_out size(%d,%d)"</span><span class="token punctuation">,</span> img_out_height<span class="token punctuation">,</span> img_out_width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里就是bug所在</span>        undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>undistView_width <span class="token operator">*</span> undistView_height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"undist_map malloc failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> img_out_height<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> img_out_width<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                point_u_tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">/</span> img_out_w_scale<span class="token punctuation">;</span>                point_u_tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">/</span> img_out_h_scale<span class="token punctuation">;</span>                <span class="token function">LDC_UndistToDistExt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ldc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> point_u_tmp<span class="token punctuation">,</span> point_d_tmp<span class="token punctuation">,</span> sf<span class="token punctuation">)</span><span class="token punctuation">;</span>                undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> point_d_tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_w_scale<span class="token punctuation">;</span>                undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> point_d_tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_h_scale<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">int</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j <span class="token operator">+</span> img_out_width <span class="token operator">*</span> img_out_height<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>point_d_tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_w_scale <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>                    undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j <span class="token operator">+</span> img_out_width <span class="token operator">*</span> img_out_height<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>point_d_tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_h_scale <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">720</span> <span class="token operator">*</span> img_in_h_scale<span class="token punctuation">;</span>                    undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j <span class="token operator">+</span> img_out_width <span class="token operator">*</span> img_out_height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>point_d_tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_w_scale <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> img_out_width <span class="token operator">+</span> j <span class="token operator">+</span> img_out_width <span class="token operator">*</span> img_out_height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>point_d_tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_in_h_scale <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">720</span> <span class="token operator">*</span> img_in_h_scale<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>如果 #18 行中申请内存为:<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">undist_map<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>undistView_width <span class="token operator">*</span> undistView_height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>那么，后面构建map映射关系时并不会出现越界访问提示，甚至后面如果不再申请内存块的情况下，继续越界访问undist_map中的内容也不会报错；但是，如果后面继续申请内存块来使用的时候，后续的内存块可能就会和undist_map内存冲突。</li></ul><hr><p><font color=Red><strong>总结</strong></font><br>使用malloc申请内存并访问时，注意访问是否越界，且访问越界不报错。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> malloc </tag>
            
            <tag> 内存访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android弹窗界面设置方法</title>
      <link href="/2022/12/14/android-dan-chuang-jie-mian-she-zhi-fang-fa/"/>
      <url>/2022/12/14/android-dan-chuang-jie-mian-she-zhi-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h1><p>点击主界面的一个按钮，然后跳转另一个设置界面，进行参数设置，包括：参数输入、开关按钮、保存、退出等功能。界面的布局采用表格布局，平均分布各个行列。示例代码如下所示。</p><h1 id="MainActivity-java示例"><a href="#MainActivity-java示例" class="headerlink" title="MainActivity.java示例"></a>MainActivity.java示例</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 主界面按钮定义</span><span class="token keyword">private</span> <span class="token class-name">ImageButton</span> mImage_set_btn<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 主界面按钮事件</span><span class="token comment">// R.id.image_set_btn为主界面按钮ID</span>mImage_set_btn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ImageButton</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>image_set_btn<span class="token punctuation">)</span><span class="token punctuation">;</span>mImage_set_btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">LayoutInflater</span> layoutInflater <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span><span class="token punctuation">)</span><span class="token function">getBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token constant">LAYOUT_INFLATER_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//R.id.avm_parm_view为跳转界面ID（android:id="@+id/avm_parm_view"）</span><span class="token class-name">View</span> popupView <span class="token operator">=</span> layoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_avm_parm<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ViewGroup</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>avm_parm_view<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PopupWindow</span><span class="token punctuation">(</span>popupView<span class="token punctuation">,</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">MATCH_PARENT</span><span class="token punctuation">,</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">MATCH_PARENT</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">setTouchable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">setOutsideTouchable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BitmapDrawable</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Bitmap</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">showAsDropDown</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//------ 获取输入控件的输入内容 ------</span><span class="token comment">//车长</span>editText_car_length <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> mPopupWindow_register<span class="token punctuation">.</span><span class="token function">getContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>EditText_car_length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//车宽</span>editText_car_width <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> mPopupWindow_register<span class="token punctuation">.</span><span class="token function">getContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>EditText_car_width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前悬</span>editText_suspension_front <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> mPopupWindow_register<span class="token punctuation">.</span><span class="token function">getContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>EditText_suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后悬</span>editText_suspension_back <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> mPopupWindow_register<span class="token punctuation">.</span><span class="token function">getContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>EditText_suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存按钮</span>delok_btn <span class="token operator">=</span> popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>avm_parameter_save<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回按钮</span>delcancel_btn <span class="token operator">=</span> popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>avm_parameter_return<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//车道线开关</span>mTrajectory_Switch<span class="token operator">=</span>popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>TrajectoryLine_Switch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BSD开关</span>mBSD_Switch<span class="token operator">=</span>popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>BSD_Switch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//亮度均衡开关</span>mBE_Switch<span class="token operator">=</span>popupView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>BE_Switch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取默认开关参数</span>carParameter carParm_history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">carParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>carParm_history<span class="token operator">=</span>avmSetParm<span class="token punctuation">.</span><span class="token function">readJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//------ 设置输入控件的显示历史数据 ------</span>editText_car_length<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editText_car_width<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editText_suspension_front<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editText_suspension_back<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>on_TrajectoryLine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>mTrajectory_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>mTrajectory_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>on_BSD<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>mBSD_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>mBSD_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>carParm_history<span class="token punctuation">.</span>on_Bright<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>mBE_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>mBE_Switch<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//------ 设置保存按钮触发事件 ------</span>delok_btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> car_length <span class="token operator">=</span> editText_car_length<span class="token punctuation">.</span><span class="token function">getEditableText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> car_width <span class="token operator">=</span> editText_car_width<span class="token punctuation">.</span><span class="token function">getEditableText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> suspension_front <span class="token operator">=</span> editText_suspension_front<span class="token punctuation">.</span><span class="token function">getEditableText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> suspension_back <span class="token operator">=</span> editText_suspension_back<span class="token punctuation">.</span><span class="token function">getEditableText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>carParameter carParm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">carParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"filename_avm_set_json"</span><span class="token punctuation">,</span><span class="token string">"filename_avm_set_json"</span><span class="token operator">+</span>avmSetParm<span class="token punctuation">.</span>jsonFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>car_length<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>car_width<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>on_BSD<span class="token operator">=</span>mView<span class="token punctuation">.</span>mBSDViewID<span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>on_Bright<span class="token operator">=</span>mView<span class="token punctuation">.</span>mBrightID<span class="token punctuation">;</span>carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token operator">=</span>mView<span class="token punctuation">.</span>mTrajectoryLineViewID<span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"car_length"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"car_width"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"suspension_front"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"suspension_back"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on_BSD"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_BSD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on_Bright"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_Bright<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"on_TrajectoryLine"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>avmSetParm<span class="token punctuation">.</span><span class="token function">writeJson</span><span class="token punctuation">(</span>carParm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//------ 设置按钮触发事件 ------</span><span class="token comment">//车道线</span>mTrajectory_Switch<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">CompoundButton</span> buttonView<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buttonView<span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mTrajectoryLineViewID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mTrajectoryLineViewID<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mView<span class="token punctuation">.</span><span class="token function">avmTrajectoryLineView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BSD</span>mBSD_Switch<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">CompoundButton</span> buttonView<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buttonView<span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mBSDViewID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">avmStartBSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mBSDViewID<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">avmStopBSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mView<span class="token punctuation">.</span><span class="token function">avmBSDView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//亮度均衡</span>mBE_Switch<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">CompoundButton</span> buttonView<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buttonView<span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mBrightID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>mView<span class="token punctuation">.</span>mBrightID<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mView<span class="token punctuation">.</span><span class="token function">avmBrightView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回</span>delcancel_btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mPopupWindow_register<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="主界面xml文件"><a href="#主界面xml文件" class="headerlink" title="主界面xml文件"></a>主界面xml文件</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.drawerlayout.widget.DrawerLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/drawer_layout<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/layout_root<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/black<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tv_no_camera<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/no_camera_info<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFF0000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>36sp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gone<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@layout/settings_layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.drawerlayout.widget.DrawerLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SurfaceView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/surface_view<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_set_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>420dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_set<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_3d_360_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_360_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_front_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_front_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_back_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_back_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--       android:visibility="gone" /> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_left_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>240dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_left_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_right_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_right_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_narrow_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>360dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_narrow_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageButton</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/image_3d_normal_btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom|left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/btn_bg_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/icon_3d_normal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FrameLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跳转界面xml文件"><a href="#跳转界面xml文件" class="headerlink" title="跳转界面xml文件"></a>跳转界面xml文件</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/avm_parm_view<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>    <span class="token comment">&lt;!-- 表格1 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#2B2B2B<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>stretchColumns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1,3<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_car_width<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  车辆宽度:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/EditText_car_width<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CCCFD1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>毫米/mm<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>selectAllOnFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_suspension_front<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  车前悬挂:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/EditText_suspension_front<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CCCFD1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>毫米/mm<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>selectAllOnFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 分割线 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_car_length<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  车辆长度:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/EditText_car_length<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CCCFD1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>毫米/mm<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>selectAllOnFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_suspension_back<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  车后悬挂:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/EditText_suspension_back<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CCCFD1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>毫米/mm<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>selectAllOnFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 分割线 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_BE_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  亮度均衡:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/BE_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_BSD_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  BSD开关:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/BSD_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 分割线 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Text_TrajectoryLine_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  动态辅助线:  <span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/color_ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/TrajectoryLine_Switch<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/avm_parameter_save<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保存<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/avm_parameter_return<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>返回<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 安卓弹窗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI中成员变量和方法的相互访问</title>
      <link href="/2022/12/14/jni-zhong-cheng-yuan-bian-liang-he-fang-fa-de-xiang-hu-fang-wen/"/>
      <url>/2022/12/14/jni-zhong-cheng-yuan-bian-liang-he-fang-fa-de-xiang-hu-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JNI"><a href="#什么是JNI" class="headerlink" title="什么是JNI"></a>什么是JNI</h1><p>说明：JNI 是 Java Native Interface 的缩写，它提供了若干的API实现了Java和其他语言的通信（主要是C&amp;C++，但是它并不妨碍你使用其他编程语言，只要调用约定受支持就可以了）。从Java1.1开始，JNI 标准成为 java 平台的一部分，它允许 Java 代码和其他语言写的代码进行交互。总的来说，JNI 就是一个允许Java语言和其他编程语言（主要是C&#x2F;C++）通信的接口。</p><p>原因：C&#x2F;C++ 是系统级的编程语言，可以用来开发任何和系统相关的程序和类库，效率也很高。而 Java 本身编写底层的应用比较难以实现，使用 JNI 可以调用现有的本地库，极大地灵活了 Java 的开发。</p><ul><li><p>缺点：</p><ul><li><p>1、使用java与本地已编译的代码交互，通常会丧失平台可移植性。</p></li><li><p>2、程序不再是绝对安全的，本地代码的不当使用可能导致整个程序崩溃。</p></li></ul></li></ul><p>注：对于上面所说的java使用了JNI 接口会丧失平台的可移植性解释如下</p><p>JNI 提供出来一个功能接口，但是这个功能是使用本地语言进行实现的，通常是C或者C++。</p><p>以 linux 系统和 window 系统的 printf 函数为例，虽然这两个系统都提供了这个打印函数，并且名字也一样，但是在实现上可能会有各自的不同点。同时在 window 下的动态库为 dll 文件，linux 下的动态库为 so 文件。</p><p>所以我原本在 linux 下可以正常使用的一套 JNI 功能，一旦需要转移到 windows 上执行的时候就需要重新编译实现接口的动态库。虽然 java 是跨平台的，但是使用 jni 调用的本地方法却是与平台相依赖的，会在进行编译的过程中会出现这样或者那样的兼容性问题，一般不能直接拿来即用。</p><ul><li>实现JNI的基本步骤<ul><li>编写带有 native 声明的方法的java类。</li><li>使用 javah + 类名生成扩展名为.h的头文件。</li><li>使用 C&#x2F;C++ 实现本地方法。</li><li>将 C&#x2F;C++ 编写的文件生成动态链接库。</li><li>在 java 类中引用该动态链接库并完成调用。</li><li>注：可以先写 java 的调用，也可以先写 C&#x2F;C++ 的实现，只要两边约定好接口的名称，参数，返回值等信息即可。</li></ul></li></ul><h1 id="涉及数据类型对照表"><a href="#涉及数据类型对照表" class="headerlink" title="涉及数据类型对照表"></a>涉及数据类型对照表</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/JNI%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE/1.png"> </p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/JNI%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE/2.png"> </p><h1 id="java访问C-的变量"><a href="#java访问C-的变量" class="headerlink" title="java访问C++的变量"></a><code>java</code>访问<code>C++</code>的变量</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">JNIEXPORT jint JNICALL<span class="token function">Java_com_fibocom_multicamera_AvmSurfaceViewNative_nativeGetViewInfo</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>                                                                                    jclass type<span class="token punctuation">,</span>                                                                                    jint cmd<span class="token punctuation">,</span>                                                                                    jobject output<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jclass objectClass <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetObjectClass</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通过GetFieldID方法得到这个对象的dist属性</span>    jfieldID m3DBtnOn <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"m3DBtnOn"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID viewID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"viewID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID wheelViewID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"wheelViewID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID trajectoryLineViewID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"trajectoryLineViewID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID bsdViewID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"bsdViewID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID brightID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"brightID"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//</span>    jfieldID dist_l <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"dist_l"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID dist_r <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"dist_r"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID upon <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"upon"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID angle <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"angle"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID viewPointX <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"viewPointX"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jfieldID viewPointY <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetFieldID</span><span class="token punctuation">(</span>objectClass<span class="token punctuation">,</span> <span class="token string">"viewPointY"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ParametersInit <span class="token operator">*</span>m_Instance <span class="token operator">=</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    avmmanager<span class="token double-colon punctuation">::</span>TAvmViewTag m_view_info<span class="token punctuation">;</span>    m_Instance<span class="token operator">-></span><span class="token function">getViewInfo</span><span class="token punctuation">(</span>m_view_info<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> m3DBtnOn<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>m3DBtnOn<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> viewID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>viewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> wheelViewID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>wheelViewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> trajectoryLineViewID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>trajectoryLineViewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> bsdViewID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>bsdViewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetIntField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> brightID<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>brightID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> dist_l<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>dist_l<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> dist_r<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>dist_r<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> upon<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>upon<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> angle<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> viewPointX<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>viewPointX<span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-></span><span class="token function">SetFloatField</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> viewPointY<span class="token punctuation">,</span> m_view_info<span class="token punctuation">.</span>viewPointY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C-访问java的变量"><a href="#C-访问java的变量" class="headerlink" title="C++访问java的变量"></a><code>C++</code>访问<code>java</code>的变量</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">JNIEXPORT jint JNICALL<span class="token function">Java_com_fibocom_multicamera_AvmSurfaceViewNative_nativeBSDInfo</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>                                                                jobject obj<span class="token punctuation">,</span>                                                                 jobjectArray objectArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jint ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 获取数组的长度</span>    jsize length <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetArrayLength</span><span class="token punctuation">(</span>objectArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// XXX:数据长度永远为7，目前测试暂时支取第一个结果</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length<span class="token punctuation">)</span>        length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 获取Person类的Class对象</span>    jclass class_Rect <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"com/fibocom/aidl/Rect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>class_Rect <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====FindClass success===== \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 3. 获取Person的sayHello方法字段</span>    jmethodID getX1 <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getX1"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getX1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getX2 <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getX2"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getX2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getY1 <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getY1"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getY1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getY2 <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getY2"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getY2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getCamID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getCamID"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getCamID <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    jmethodID getTimestamp <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>class_Rect<span class="token punctuation">,</span> <span class="token string">"getTimestamp"</span><span class="token punctuation">,</span> <span class="token string">"()J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(A)B---A为输入参数，B为输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getTimestamp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 4. 循环调用每个方法</span>    jint aaa<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    avmmanager<span class="token double-colon punctuation">::</span>TBsdBox <span class="token operator">*</span>avm_bsd <span class="token operator">=</span> <span class="token keyword">new</span> avmmanager<span class="token double-colon punctuation">::</span>TBsdBox<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取引用类型数组的对象</span>        jobject element <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">GetObjectArrayElement</span><span class="token punctuation">(</span>objectArray<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断数组元素是否是Person类对象</span>        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== [%d] ===== \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// 调用Person对象的sayHello()方法</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getX1<span class="token punctuation">)</span><span class="token punctuation">;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getX2<span class="token punctuation">)</span><span class="token punctuation">;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getY1<span class="token punctuation">)</span><span class="token punctuation">;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getY2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> camID <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallIntMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getCamID<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"CallIntMethod %d \n"</span><span class="token punctuation">,</span> camID<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>camID<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"nativeBSDInfo cam_index %d \n"</span><span class="token punctuation">,</span> camID<span class="token punctuation">)</span><span class="token punctuation">;</span>                avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index <span class="token operator">=</span> camID<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">CallLongMethod</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> getTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> length<span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== X1[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== X2[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== Y1[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== Y2[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== id[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cam_index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== timestamp[%d] %ld  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"====nativeBSDInfo==== size[%d] %d  \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> avm_bsd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">EventSystem</span><span class="token double-colon punctuation">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">SendEvent</span><span class="token punctuation">(</span><span class="token string">"avm_get_bsd_info"</span><span class="token punctuation">,</span> avm_bsd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr_event<span class="token punctuation">)</span>                                       <span class="token punctuation">&#123;</span>        Event <span class="token operator">*</span>event <span class="token operator">=</span> <span class="token punctuation">(</span>Event <span class="token operator">*</span><span class="token punctuation">)</span> ptr_event<span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span><span class="token punctuation">)</span> event<span class="token operator">-></span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> buf<span class="token punctuation">;</span>        <span class="token keyword">delete</span> event<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> jni </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json文件读写</title>
      <link href="/2022/12/14/json-wen-jian-du-xie/"/>
      <url>/2022/12/14/json-wen-jian-du-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="java读写Json文件"><a href="#java读写Json文件" class="headerlink" title="java读写Json文件"></a>java读写Json文件</h1><h2 id="json格式介绍"><a href="#json格式介绍" class="headerlink" title="json格式介绍"></a>json格式介绍</h2><p>json与xml相比, 对数据的描述性比XML较差,但是数据体积小,传递速度更快.  </p><p>json数据的书写格式是”名称:值对”,比如:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"Name"</span> <span class="token operator">:</span> <span class="token string">"John"</span>                        <span class="token comment">//name为名称,值对为"john"字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值对类型共分为:  </p><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号[]中）</li><li>对象（在花括号{}中）</li><li>null<br>当然数组也可以包含多对象:  <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"employees"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token property">"Name"</span><span class="token operator">:</span><span class="token string">"John"</span> <span class="token punctuation">,</span> <span class="token property">"Age"</span><span class="token operator">:</span><span class="token number">19</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token property">"Name"</span><span class="token operator">:</span><span class="token string">"Anna"</span> <span class="token punctuation">,</span> <span class="token property">"Age"</span><span class="token operator">:</span><span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token property">"Name"</span><span class="token operator">:</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token property">"Age"</span><span class="token operator">:</span><span class="token number">23</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>表示”employees”对象中有3个对象数组(每个对象数组表示一条员工信息),其中并列的数据都必须用逗号”,”隔开.</li></ul><h2 id="json文件读写示例"><a href="#json文件读写示例" class="headerlink" title="json文件读写示例"></a>json文件读写示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fibocom<span class="token punctuation">.</span>multicamera</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONArray</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStreamWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> carParameter  <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> on_TrajectoryLine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> on_BSD<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> on_Bright<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> scale_size<span class="token punctuation">;</span> <span class="token comment">// 缩放</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> car_length<span class="token punctuation">;</span><span class="token comment">//车辆长度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> car_width<span class="token punctuation">;</span><span class="token comment">//车辆宽度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> suspension_front<span class="token punctuation">;</span><span class="token comment">//前悬挂</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> suspension_back<span class="token punctuation">;</span><span class="token comment">//后悬挂</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AvmSetParm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> jsonFileName<span class="token punctuation">;</span>    <span class="token keyword">public</span> carParameter <span class="token function">readJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            carParameter carParm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">carParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">InputStreamReader</span> input <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>jsonFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> text <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//1.构造一个json对象</span>            <span class="token class-name">JSONObject</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span>            <span class="token comment">//获取数组</span>            <span class="token class-name">JSONArray</span> dataArr <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getJSONArray</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JSONObject</span> carParameterObj <span class="token operator">=</span>dataArr<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JSONObject</span> carParameter<span class="token operator">=</span>carParameterObj<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"carParameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>car_length<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"car_length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>car_width<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"car_width"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>suspension_front<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"suspension_front"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>suspension_back<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"suspension_back"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>scale_size<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"scale_size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>on_Bright<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"BE_Switch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>on_BSD<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"BSD_Switch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token operator">=</span>carParameter<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"TrajectoryLine_Switch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"car_length:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"car_width:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"suspension_front:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"suspension_back:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span><span class="token string">"scale_size:"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>scale_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> carParm<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeJson</span><span class="token punctuation">(</span>carParameter carParm<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">InputStreamReader</span> input <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>jsonFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.构造一个json对象</span>        <span class="token class-name">JSONObject</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//过滤读出的utf-8前三个标签字节,从&#123;开始读取</span>        <span class="token comment">//获取数组</span>        <span class="token class-name">JSONArray</span> data <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getJSONArray</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> carParameterObj <span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> carParameter<span class="token operator">=</span>carParameterObj<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"carParameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"car_length"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"car_width"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"suspension_front"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"suspension_back"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"BE_Switch"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>on_Bright<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"BSD_Switch"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>on_BSD<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"TrajectoryLine_Switch"</span><span class="token punctuation">,</span>carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"car_length"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"car_width"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>car_width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"suspension_front"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_front<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"suspension_back"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>suspension_back<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"BE_Switch"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_Bright<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"BSD_Switch"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_BSD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AvmSetParm"</span><span class="token punctuation">,</span> <span class="token string">"TrajectoryLine_Switch"</span><span class="token operator">+</span>carParm<span class="token punctuation">.</span>on_TrajectoryLine<span class="token punctuation">)</span><span class="token punctuation">;</span>        carParameterObj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"carParameter"</span><span class="token punctuation">,</span>carParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>carParameterObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>jsonFileName<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空缓冲区，强制输出数据</span>        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭输出流</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="c-读写Json文件"><a href="#c-读写Json文件" class="headerlink" title="c++读写Json文件"></a>c++读写Json文件</h1><ul><li><p>模板函数定义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * @brief 从文本中加载json * @tparam R json类型 * @tparam T 自动推断的字符串类型 * @param config json字符串 * @return R */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">inline</span> R <span class="token function">LoadJsonFromText</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// static_assert(JsonHasParse&lt;R>::value,</span>    <span class="token comment">//               "error: the type must has static method [parse].");</span>    <span class="token comment">// nlohmann json</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token double-colon punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief 通用类型 * @tparam R * @tparam T * @tparam U * @param config * @param key * @param val * @return R */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">></span><span class="token keyword">inline</span> R <span class="token function">OptionalContain</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>config<span class="token punctuation">,</span> <span class="token keyword">const</span> U <span class="token operator">&amp;</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> R <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> JsonGenericType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> config<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">"json.hpp"</span></span><span class="token keyword">using</span> nlohmann<span class="token double-colon punctuation">::</span>json<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string config<span class="token operator">=</span> <span class="token string">"example.jsonc"</span><span class="token punctuation">;</span><span class="token keyword">auto</span> json_config <span class="token operator">=</span> <span class="token generic-function"><span class="token function">LoadJsonFromText</span><span class="token generic class-name"><span class="token operator">&lt;</span>json<span class="token operator">></span></span></span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>vs_config <span class="token operator">=</span> json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> width  <span class="token operator">=</span> vs_config<span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> height <span class="token operator">=</span> vs_config<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> width1  <span class="token operator">=</span> json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> height1 <span class="token operator">=</span> json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span>json_config<span class="token punctuation">[</span><span class="token string">"video_source"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span><span class="token comment">// 将jsonc文件转换为string</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>json_config_str <span class="token operator">=</span> json_config<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>fake_config <span class="token operator">=</span> vs_config<span class="token punctuation">[</span><span class="token string">"fake"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">auto</span> fake_enable <span class="token operator">=</span> ac<span class="token double-colon punctuation">::</span><span class="token function">OptionalContain</span><span class="token punctuation">(</span>fake_config<span class="token punctuation">,</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>json.hpp</code><br><img src="https://github.com/geiyiren/MyBlogFile1/blob/other/json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/json.hpp" alt="json.hpp"></p></li><li><p><code>example.jsonc</code></p><pre class="line-numbers language-jsonc" data-language="jsonc"><code class="language-jsonc">&#123;    &#x2F;&#x2F; 当前配置文件的版本，此版本用于兼容性处理    &quot;version&quot;: &quot;1.0.0.0&quot;,    &quot;camera_id&quot;: &quot;camera_1&quot;,    &quot;video_source&quot;: &#123;        &quot;width&quot; : 1280,                        &#x2F;&#x2F; 需要设置为平台相应的分辨率        &quot;height&quot;: 720,        &quot;format&quot;: &quot;kRGB888&quot;,                  &#x2F;&#x2F; 内部自行生成, 这里实际上无效        &quot;device&quot;: &quot;&#x2F;dev&#x2F;video0&quot;,        &quot;fps&quot;   : 20,        &quot;connect&quot;: true,                      &#x2F;&#x2F; true：把回调的图像送入算法； false：不给算法送入图像。                                              &#x2F;&#x2F; 这个选项对假视频源依然有效        &quot;fake&quot;: &#123;            &quot;enable&quot;: false,                  &#x2F;&#x2F; true表示启用假视频源            &quot;img&quot;: &quot;assets&#x2F;ssd_test_img.jpg&quot;, &#x2F;&#x2F; 使用这张图片来冒充，注意仅支持jpg格式图片，且最好是720或1080P图像            &quot;out_fmt&quot;: &quot;kYUV422SP&quot;            &#x2F;&#x2F; 假视频源的输出格式（模拟输出的视频格式）        &#125;    &#125;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>参考连接： <a href="https://cloud.tencent.com/developer/article/1556944">https://cloud.tencent.com/developer/article/1556944</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> json文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车辆动态辅助轨迹线生成方法</title>
      <link href="/2022/12/14/che-liang-dong-tai-fu-zhu-gui-ji-xian-sheng-cheng-fang-fa/"/>
      <url>/2022/12/14/che-liang-dong-tai-fu-zhu-gui-ji-xian-sheng-cheng-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="汽车动力学原理"><a href="#汽车动力学原理" class="headerlink" title="汽车动力学原理"></a>汽车动力学原理</h1><p>在研究辅助泊车时，第一要研究一下汽车在运动的时候的轨迹，要建立一个汽车在泊车时的运动学模型来作为后面研究的理论基础。车辆在泊车的过程中有一个特点即它是低速行驶的，这时<strong>车轮在滚动过程中不会发生侧方向的滑动</strong>，由于汽车在缓慢行驶的过程中不会有侧向力，这时系统的约束条件是允许车轮发生滚动和侧转，但不会有滑动的发生，由此建立了车辆的运动学模型。下面是倒车的时候汽车的运动学模型：</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/Vehicle_dynamics_model.png"> </p><p>其中：(x_{f},y_{f})为汽车前轴中心点的坐标；(x_{r},y_{r})为汽车的后轴中心点的坐标；v指前轴中心点的速度；l_{m}为轴距；h_{r}为后轮距；φ为前轴中心的转向角；θ为汽车的航向角，指汽车的中心轴与参考方向上的夹角。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/1.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/2.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/3.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/4.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/5.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/6.png"> </p><p>总结：</p><ul><li>轨迹和速度没有关系</li><li>车辆的两个后轮是沿着圆在运动的</li><li><strong>汽车在低速行驶且不考虑有侧滑的情况下，汽车的车身上每一点的运动轨迹都是指向同样的一个圆心的圆，并且只和汽车的转向角有关系，和汽车的车速没有关系</strong></li></ul><h2 id="阿克曼转弯几何原理"><a href="#阿克曼转弯几何原理" class="headerlink" title="阿克曼转弯几何原理"></a>阿克曼转弯几何原理</h2><ul><li><p>示意图：<br><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/Ackerman_turning_geometry.png"></p></li><li><p>讲解视频：<a href="https://www.youtube.com/watch?v=8AimxDPWKcM">https://www.youtube.com/watch?v=8AimxDPWKcM</a></p></li></ul><h1 id="参考专利"><a href="#参考专利" class="headerlink" title="参考专利"></a>参考专利</h1><p><a href="https://github.com/geiyiren/MyBlogFile1/blob/pdf/%E8%BD%A6%E8%BE%86%E5%8A%A8%E6%80%81%E8%BE%85%E5%8A%A9%E8%BD%A8%E8%BF%B9%E7%BA%BF%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/%E4%B9%98%E7%94%A8%E8%BD%A6%E5%8A%A8%E6%80%81%E5%80%92%E8%BD%A6%E8%BE%85%E5%8A%A9%E7%BA%BF%E8%AE%BE%E8%AE%A1.pdf">参考专利</a></p>]]></content>
      
      
      <categories>
          
          <category> 辅助驾驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 360环视 </tag>
            
            <tag> 辅助驾驶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2022/12/12/linux-chang-yong-ming-ling/"/>
      <url>/2022/12/12/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> 位置 <span class="token parameter variable">-name</span> <span class="token string">'名称'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查看与转换YUV图像："><a href="#查看与转换YUV图像：" class="headerlink" title="查看与转换YUV图像："></a>查看与转换YUV图像：</h1><ul><li>YUV查看<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffplay <span class="token parameter variable">-pixel_format</span> nv12 <span class="token parameter variable">-f</span> rawvideo <span class="token parameter variable">-video_size</span> 240x576 stitch_view.yuv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>YUV转PNG<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-pix_fmt</span> nv12 <span class="token parameter variable">-video_size</span> 1280x720 <span class="token parameter variable">-i</span> src_1.yuv <span class="token parameter variable">-y</span> src_1.jpgffmpeg <span class="token parameter variable">-s</span> <span class="token number">1280</span>*720 <span class="token parameter variable">-i</span> front0.bmp <span class="token parameter variable">-pix_fmt</span> nv12 front0.yuv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="ubuntu终端查看历史命令"><a href="#ubuntu终端查看历史命令" class="headerlink" title="ubuntu终端查看历史命令"></a>ubuntu终端查看历史命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> some_command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查看cup限制"><a href="#查看cup限制" class="headerlink" title="查看cup限制"></a>查看cup限制</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> limit <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="强制关闭窗口"><a href="#强制关闭窗口" class="headerlink" title="强制关闭窗口"></a>强制关闭窗口</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xkill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>然后移动鼠标点击需要关闭的窗口即可</li></ul><h1 id="本地gitlab库添加远程库信任"><a href="#本地gitlab库添加远程库信任" class="headerlink" title="本地gitlab库添加远程库信任"></a>本地gitlab库添加远程库信任</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--add</span> safe.directory /media/geiyiren/MyCode/AVM/avm_2d/master/avm_cpu_algo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="保存yuv-buf图像"><a href="#保存yuv-buf图像" class="headerlink" title="保存yuv buf图像"></a>保存yuv buf图像</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FILE <span class="token operator">*</span>fp_dump <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"bsd_1.yuv"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fp_dump <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fp_dump open fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fp_dump cam  yuv open success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>size_t bytes_write <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>p_yuv_buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> width <span class="token operator">*</span> height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp_dump<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_write <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"write raw_stream fail !!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp_dump<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="批量将jpg转换为yuv"><a href="#批量将jpg转换为yuv" class="headerlink" title="批量将jpg转换为yuv"></a>批量将jpg转换为yuv</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> $folder<span class="token variable">)</span></span><span class="token assign-left variable">yuv</span><span class="token operator">=</span><span class="token string">"yuv"</span><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$files</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;file<span class="token operator">:</span>0<span class="token operator">:</span>13&#125;</span>  <span class="token assign-left variable">file_name</span><span class="token operator">=</span><span class="token variable">$&#123;file<span class="token operator">:</span>0<span class="token operator">:</span>13&#125;</span>  <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable">$file_name</span><span class="token variable">$yuv</span>  ffmpeg <span class="token parameter variable">-i</span> <span class="token variable">$file</span> <span class="token parameter variable">-s</span> <span class="token number">1280</span>*720 <span class="token parameter variable">-pix_fmt</span> nv12 <span class="token variable">$str</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="abd-常用命令"><a href="#abd-常用命令" class="headerlink" title="abd 常用命令"></a>abd 常用命令</h1><h2 id="打开调试端口"><a href="#打开调试端口" class="headerlink" title="打开调试端口"></a>打开调试端口</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb tcpip <span class="token number">5555</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb connect <span class="token number">10.10</span>.200.140<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进入远程终端"><a href="#进入远程终端" class="headerlink" title="进入远程终端"></a>进入远程终端</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb kill-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb start-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重新挂载"><a href="#重新挂载" class="headerlink" title="重新挂载"></a>重新挂载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb remount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安卓录制屏幕"><a href="#安卓录制屏幕" class="headerlink" title="安卓录制屏幕"></a>安卓录制屏幕</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell screenrecord  --time-limit <span class="token number">12</span> /sdcard/name.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="安卓设备开启USB"><a href="#安卓设备开启USB" class="headerlink" title="安卓设备开启USB"></a>安卓设备开启USB</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setprop persist.otg.mode device<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程登录后使用上述命令</li></ul><h1 id="远程为安卓设备安装软件"><a href="#远程为安卓设备安装软件" class="headerlink" title="远程为安卓设备安装软件"></a>远程为安卓设备安装软件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb <span class="token function">install</span> Launcher3.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在本地执行上述命令</li></ul><h1 id="查看当前文件下所有文件大小"><a href="#查看当前文件下所有文件大小" class="headerlink" title="查看当前文件下所有文件大小"></a>查看当前文件下所有文件大小</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#以M为单位查看当前文件下所有文件的大小，包含隐藏文件</span><span class="token function">du</span> <span class="token parameter variable">-sm</span> .<span class="token punctuation">[</span><span class="token operator">!</span>.<span class="token punctuation">]</span>* * <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-hr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="查看磁盘剩余空间"><a href="#查看磁盘剩余空间" class="headerlink" title="查看磁盘剩余空间"></a>查看磁盘剩余空间</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-hl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="github访问加速"><a href="#github访问加速" class="headerlink" title="github访问加速"></a>github访问加速</h1><h2 id="查询IP"><a href="#查询IP" class="headerlink" title="查询IP"></a>查询IP</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github.global.ssl.fastly.net 网站IP</span><span class="token function">nslookup</span> github.global.ssl.fastly.net<span class="token comment">#github.com 网站IP</span><span class="token function">nslookup</span> github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更改host文件"><a href="#更改host文件" class="headerlink" title="更改host文件"></a>更改host文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将上述查询到的IP复制到对应位置</li></ul><h2 id="更新host文件"><a href="#更新host文件" class="headerlink" title="更新host文件"></a>更新host文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /etc/init.d/network-manager restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="ssh相关"><a href="#ssh相关" class="headerlink" title="ssh相关"></a>ssh相关</h1><h2 id="主机A免密登录主机B"><a href="#主机A免密登录主机B" class="headerlink" title="主机A免密登录主机B"></a>主机A免密登录主机B</h2><p>在主机A执行如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id 主机B的用户名@主机B的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="YUV图像转换"><a href="#YUV图像转换" class="headerlink" title="YUV图像转换"></a>YUV图像转换</h2><ul><li><p>安装ffmpeg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ffmpeg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>yuv查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffplay <span class="token parameter variable">-pixel_format</span> nv12 <span class="token parameter variable">-f</span> rawvideo <span class="token parameter variable">-video_size</span> 1920x1080 test.yuv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>jpg –&gt; yuv</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-i</span> front0.jpg <span class="token parameter variable">-s</span> <span class="token number">1280</span>*720 <span class="token parameter variable">-pix_fmt</span> nv12 front0.yuv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>yuv –&gt; jpg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-pix_fmt</span> nv12 <span class="token parameter variable">-video_size</span> 1280x800 <span class="token parameter variable">-i</span> src_1.yuv <span class="token parameter variable">-y</span> src_1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="性能分析常用命令"><a href="#性能分析常用命令" class="headerlink" title="性能分析常用命令"></a>性能分析常用命令</h1><ul><li>查看各个分区存储使用情况<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看IO使用情况<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> sysstatiostat <span class="token parameter variable">-x</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="git-新建仓库推送"><a href="#git-新建仓库推送" class="headerlink" title="git 新建仓库推送"></a>git 新建仓库推送</h1><ul><li><p>Git 全局设置</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;王帅炀&quot;git config --global user.email &quot;wangshuaiyang@hopechart.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建一个新仓库</p><pre class="line-numbers language-none"><code class="language-none">git clone git@172.20.1.10:wangshuaiyang&#x2F;test.gitcd testtouch README.mdgit add README.mdgit commit -m &quot;add README&quot;git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>推送现有文件夹</p><pre class="line-numbers language-none"><code class="language-none">cd existing_foldergit initgit remote add origin git@172.20.1.10:wangshuaiyang&#x2F;test.gitgit add .git commit -m &quot;Initial commit&quot;git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>推送现有的 Git 仓库</p><pre class="line-numbers language-none"><code class="language-none">cd existing_repogit remote rename origin old-origingit remote add origin git@172.20.1.10:wangshuaiyang&#x2F;test.gitgit push -u origin --allgit push -u origin --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++变量命名常用缩写表</title>
      <link href="/2022/12/12/c-bian-liang-ming-ming-chang-yong-suo-xie-biao/"/>
      <url>/2022/12/12/c-bian-liang-ming-ming-chang-yong-suo-xie-biao/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">全 称</th><th align="center">缩 写</th></tr></thead><tbody><tr><td align="center">Address</td><td align="center">addr</td></tr><tr><td align="center">Administrator</td><td align="center">adm</td></tr><tr><td align="center">average</td><td align="center">avg</td></tr><tr><td align="center">Application</td><td align="center">app</td></tr><tr><td align="center">Argument</td><td align="center">arg</td></tr><tr><td align="center">Database</td><td align="center">DB</td></tr><tr><td align="center">assemble</td><td align="center">asm</td></tr><tr><td align="center">Bitmap</td><td align="center">bmp</td></tr><tr><td align="center">back</td><td align="center">bk</td></tr><tr><td align="center">asynchronization</td><td align="center">asyn</td></tr><tr><td align="center">Button</td><td align="center">btn</td></tr><tr><td align="center">Buffer</td><td align="center">buf</td></tr><tr><td align="center">Calculate</td><td align="center">calc</td></tr><tr><td align="center">Character</td><td align="center">char</td></tr><tr><td align="center">Change</td><td align="center">chg</td></tr><tr><td align="center">Click</td><td align="center">clk</td></tr><tr><td align="center">color</td><td align="center">clr</td></tr><tr><td align="center">Command</td><td align="center">cmd</td></tr><tr><td align="center">Compare</td><td align="center">cmp</td></tr><tr><td align="center">Column</td><td align="center">col</td></tr><tr><td align="center">coordinates</td><td align="center">coord</td></tr><tr><td align="center">copy</td><td align="center">cpy</td></tr><tr><td align="center">Control</td><td align="center">ctl &#x2F; ctrl</td></tr><tr><td align="center">Current</td><td align="center">cur</td></tr><tr><td align="center">Cylinder</td><td align="center">cyl</td></tr><tr><td align="center">Debug</td><td align="center">dbg</td></tr><tr><td align="center">Double</td><td align="center">dbl</td></tr><tr><td align="center">Decrease</td><td align="center">dec</td></tr><tr><td align="center">default</td><td align="center">def</td></tr><tr><td align="center">Delete</td><td align="center">del</td></tr><tr><td align="center">Destination</td><td align="center">dest &#x2F; dst</td></tr><tr><td align="center">Device</td><td align="center">dev</td></tr><tr><td align="center">dictionary</td><td align="center">dict</td></tr><tr><td align="center">different</td><td align="center">diff</td></tr><tr><td align="center">directory</td><td align="center">dir</td></tr><tr><td align="center">Display</td><td align="center">disp</td></tr><tr><td align="center">Divide</td><td align="center">div</td></tr><tr><td align="center">Dialog</td><td align="center">dlg</td></tr><tr><td align="center">Document</td><td align="center">doc</td></tr><tr><td align="center">Driver</td><td align="center">drv</td></tr><tr><td align="center">Dynamic</td><td align="center">dyna</td></tr><tr><td align="center">Environment</td><td align="center">env</td></tr><tr><td align="center">error</td><td align="center">err</td></tr><tr><td align="center">Extend</td><td align="center">ex&#x2F;ext</td></tr><tr><td align="center">execute</td><td align="center">exec</td></tr><tr><td align="center">flag</td><td align="center">flg</td></tr><tr><td align="center">Frame</td><td align="center">frm</td></tr><tr><td align="center">Function</td><td align="center">func &#x2F; fn</td></tr><tr><td align="center">group</td><td align="center">grp</td></tr><tr><td align="center">Horizontal</td><td align="center">horz</td></tr><tr><td align="center">Index</td><td align="center">idx &#x2F; ndx</td></tr><tr><td align="center">Image</td><td align="center">img</td></tr><tr><td align="center">Implement</td><td align="center">Impl</td></tr><tr><td align="center">Increase</td><td align="center">inc</td></tr><tr><td align="center">Information</td><td align="center">info</td></tr><tr><td align="center">Initial&#x2F;Initialize&#x2F;Initialization</td><td align="center">init</td></tr><tr><td align="center">Insert</td><td align="center">ins</td></tr><tr><td align="center">Instance</td><td align="center">inst</td></tr><tr><td align="center">Interrupt</td><td align="center">INT &#x2F; intr</td></tr><tr><td align="center">Length</td><td align="center">len</td></tr><tr><td align="center">Library</td><td align="center">lib</td></tr><tr><td align="center">Link</td><td align="center">lnk</td></tr><tr><td align="center">logical</td><td align="center">log</td></tr><tr><td align="center">List</td><td align="center">lst</td></tr><tr><td align="center">maximum</td><td align="center">max</td></tr><tr><td align="center">Memory</td><td align="center">mem</td></tr><tr><td align="center">Manage &#x2F; Manager</td><td align="center">mgr &#x2F; man</td></tr><tr><td align="center">middle</td><td align="center">mid</td></tr><tr><td align="center">minimum</td><td align="center">min</td></tr><tr><td align="center">Message</td><td align="center">msg</td></tr><tr><td align="center">Multiply</td><td align="center">mul</td></tr><tr><td align="center">Number</td><td align="center">num</td></tr><tr><td align="center">Object</td><td align="center">obj</td></tr><tr><td align="center">Offset</td><td align="center">ofs</td></tr><tr><td align="center">Origin &#x2F; Original</td><td align="center">org</td></tr><tr><td align="center">Parameter</td><td align="center">param</td></tr><tr><td align="center">picture</td><td align="center">pic</td></tr><tr><td align="center">package</td><td align="center">pkg</td></tr><tr><td align="center">Point</td><td align="center">pnt &#x2F; pt</td></tr><tr><td align="center">Position</td><td align="center">pos</td></tr><tr><td align="center">previous</td><td align="center">pre &#x2F; prev</td></tr><tr><td align="center">program</td><td align="center">prg</td></tr><tr><td align="center">Print</td><td align="center">prn</td></tr><tr><td align="center">Process &#x2F; Procedure</td><td align="center">proc</td></tr><tr><td align="center">Properties</td><td align="center">prop</td></tr><tr><td align="center">Password</td><td align="center">psw</td></tr><tr><td align="center">Pointer</td><td align="center">ptr</td></tr><tr><td align="center">Public</td><td align="center">pub</td></tr><tr><td align="center">rect</td><td align="center">rc</td></tr><tr><td align="center">Reference</td><td align="center">ref</td></tr><tr><td align="center">Register</td><td align="center">reg</td></tr><tr><td align="center">request</td><td align="center">req</td></tr><tr><td align="center">Resource</td><td align="center">res</td></tr><tr><td align="center">return</td><td align="center">ret</td></tr><tr><td align="center">region</td><td align="center">rgn</td></tr><tr><td align="center">screen</td><td align="center">scr</td></tr><tr><td align="center">Second</td><td align="center">sec</td></tr><tr><td align="center">Segment</td><td align="center">seg</td></tr><tr><td align="center">Select</td><td align="center">sel</td></tr><tr><td align="center">Source</td><td align="center">src</td></tr><tr><td align="center">Standard</td><td align="center">std</td></tr><tr><td align="center">Storage</td><td align="center">stg</td></tr><tr><td align="center">Stream</td><td align="center">stm</td></tr><tr><td align="center">String</td><td align="center">str</td></tr><tr><td align="center">Subtract</td><td align="center">sub</td></tr><tr><td align="center">summation</td><td align="center">sum</td></tr><tr><td align="center">Server</td><td align="center">svr</td></tr><tr><td align="center">Synchronization</td><td align="center">sync</td></tr><tr><td align="center">System</td><td align="center">sys</td></tr><tr><td align="center">Table</td><td align="center">tbl</td></tr><tr><td align="center">Temporary</td><td align="center">temp &#x2F; tmp</td></tr><tr><td align="center">translate&#x2F;transation&#x2F;transparent</td><td align="center">tran &#x2F; trans</td></tr><tr><td align="center">Test</td><td align="center">tst</td></tr><tr><td align="center">text</td><td align="center">txt</td></tr><tr><td align="center">Unknown</td><td align="center">unk</td></tr><tr><td align="center">Update</td><td align="center">upd</td></tr><tr><td align="center">Upgrade</td><td align="center">upg</td></tr><tr><td align="center">Utility</td><td align="center">util</td></tr><tr><td align="center">Variable</td><td align="center">var</td></tr><tr><td align="center">Version</td><td align="center">ver</td></tr><tr><td align="center">Vertical</td><td align="center">vert</td></tr><tr><td align="center">Virus</td><td align="center">vir</td></tr><tr><td align="center">Window</td><td align="center">wnd</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 变量命名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 16.04 LTS下安装docker并创建深度学习环境</title>
      <link href="/2022/11/23/ubuntu16-04-lts-xia-an-zhuang-docker-bing-chuang-jian-shen-du-xue-xi-huan-jing/"/>
      <url>/2022/11/23/ubuntu16-04-lts-xia-an-zhuang-docker-bing-chuang-jian-shen-du-xue-xi-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h2><p>ubuntu下安装docker的官方教程：<a href="https://docs.docker.com/engine/install/ubuntu/">点我查看</a></p><p>ubuntu下安装参考教程：<a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu">点我查看</a></p><h3 id="1-1卸载旧版本"><a href="#1-1卸载旧版本" class="headerlink" title="1.1卸载旧版本"></a>1.1卸载旧版本</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt-get remove docker docker-engine docker.io containerd runc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2使用apt安装"><a href="#1-2使用apt安装" class="headerlink" title="1.2使用apt安装"></a>1.2使用apt安装</h3><p>官网提供多种安装方式，这里使用apt安装</p><p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg \    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加docker密匙：</p><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg# 官方密匙curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们需要向 <code>sources.list</code> 中添加 Docker 软件源：</p><pre class="line-numbers language-none"><code class="language-none">echo \  &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \  $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null# 官方源echo \   &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \   $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上命令会添加稳定版本的 Docker APT 镜像源，如果需要测试版本的 Docker 请将 stable 改为 test。</p><p>安装docker:</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3配置阿里云镜像加速器"><a href="#1-3配置阿里云镜像加速器" class="headerlink" title="1.3配置阿里云镜像加速器"></a>1.3配置阿里云镜像加速器</h3><p>参考网址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">点我查看</a></p><p>需要个人注册阿里云账号并开启容器镜像服务，该服务免费。</p><p>然后查看镜像加速地址，例如我的镜像加速地址为：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：这里需要是自己的镜像加速器，否则没有权限访问。</p><p>执行如下命令配置docker：</p><pre class="line-numbers language-none"><code class="language-none"># 生成配置文件docker-machine ssh default# 设置加速器地址：# sed -i &quot;s|EXTRA_ARGS&#x3D;&#39;|EXTRA_ARGS&#x3D;&#39;--registry-mirror&#x3D;自己的镜像加速地址|g&quot; &#x2F;var&#x2F;lib&#x2F;boot2docker&#x2F;profilesed -i &quot;s|EXTRA_ARGS&#x3D;&#39;|EXTRA_ARGS&#x3D;&#39;--registry-mirror&#x3D;https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com|g&quot; &#x2F;var&#x2F;lib&#x2F;boot2docker&#x2F;profile# 退出dockerexit# 重启docker-machine restart default# 查看docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看docker信息后，可以发现 Registory mirrors 项的内容为刚刚设置的阿里云镜像地址。</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;znrurdgu.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-安装-nvidia-docker"><a href="#2-安装-nvidia-docker" class="headerlink" title="2.安装 nvidia-docker"></a>2.安装 nvidia-docker</h2><p>docker 默认是不支持在容器内 GPU 加速的，NVIDIA 官方做了个工具箱来支持容器内 GPU 加速运算，这大大方便了深度学习开发者。</p><p>官方教程：<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installing-on-ubuntu-and-debian">点我查看</a></p><p>参考教程：<a href="https://blog.csdn.net/zhouchen1998/article/details/110679750">点我查看</a></p><p>依次执行如下命令即可：</p><pre class="line-numbers language-none"><code class="language-none">distribution&#x3D;$(. &#x2F;etc&#x2F;os-release;echo $ID$VERSION_ID) \   &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add - \   &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$distribution&#x2F;nvidia-docker.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.listcurl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-container-runtime&#x2F;experimental&#x2F;$distribution&#x2F;nvidia-container-runtime.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-container-runtime.listsudo apt-get updatesudo apt-get install -y nvidia-docker2sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-拉取cuda、cudnn的镜像"><a href="#3-拉取cuda、cudnn的镜像" class="headerlink" title="3.拉取cuda、cudnn的镜像"></a>3.拉取cuda、cudnn的镜像</h2><p>docker hub地址：<a href="https://hub.docker.com/r/nvidia/cuda">点我查看</a></p><p>官网给出多个版本可供拉取，这里使用cuda:10.0-cudnn7-devel-ubuntu16.04</p><pre class="line-numbers language-none"><code class="language-none">docker pull nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-新建容器"><a href="#4-新建容器" class="headerlink" title="4.新建容器"></a>4.新建容器</h2><p>容器与镜像的关系好比：镜像为C++中的类，而容器为镜像的实例话，这里基于拉去的cuda:10.0-cudnn7-devel-ubuntu16.04镜像创建一个新的容器并进入容器中：</p><pre class="line-numbers language-none"><code class="language-none">docker container run --name pytorch1.1-gpu -it --gpus all  nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：</p><ul><li>docker container run：容器启动命令，同时会新建一个容器，因此该命令是在新建容器时使用</li><li>–name ：后的参数为新建容器的名称</li><li>-it：其实是 -i -t 的缩写，该参数使得容器具备交互性并与终端进行连接，将shell切换至终端</li><li>–gpu all：表示允许容器使用宿主机的所有GPU</li><li>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：创建新的容器所基于的镜像名称</li><li>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</li></ul><p>以该命令创建并进入容器后，该容器就具有了nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04镜像的配置，相当于实现了“实例话”</p><p>退出该容器后，可以使用以下命令进行查看：</p><ul><li>查看正在运行的容器：</li></ul><pre class="line-numbers language-none"><code class="language-none">docker container ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看容器运行历史：</li></ul><pre class="line-numbers language-none"><code class="language-none">docker container ls -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以看到刚才运行的容器pytorch1.1-gpu的信息。</p><h3 id="4-1-重启容器"><a href="#4-1-重启容器" class="headerlink" title="4.1.重启容器"></a>4.1.重启容器</h3><p>docker container start + 容器名或容器ID，启动一个已经完成创建并停止运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container start pytorch1.1-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker container exec   命令用于进入正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container exec -it pytorch1.1-gpu &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2停止容器"><a href="#4-2停止容器" class="headerlink" title="4.2停止容器"></a>4.2停止容器</h3><p>docker container stop   用于停止正在运行的容器：</p><pre class="line-numbers language-none"><code class="language-none">docker container stop pytorch1.1-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3删除容器"><a href="#4-3删除容器" class="headerlink" title="4.3删除容器"></a>4.3删除容器</h3><pre class="line-numbers language-none"><code class="language-none">docker container rm  待删除的容器命令或ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：删除容器之前需要停止容器，避免报错。</p><h2 id="5-安装常用工具"><a href="#5-安装常用工具" class="headerlink" title="5.安装常用工具"></a>5.安装常用工具</h2><pre class="line-numbers language-none"><code class="language-none"># 安装gitapt-get install git -y# 安装vimapt install vim# 安装cmakeapt install cmake# 安装updatedbapt-get install mlocate# 安装wgetapt-get install wget# 安装curlapt-get install curl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-在容器中安装python"><a href="#6-在容器中安装python" class="headerlink" title="6.在容器中安装python"></a>6.在容器中安装python</h2><p>新建的容器默认没有python或pip、vim等工具，除非新建容器时将这些包一并装入，因此需要手动安装一些需要的包。新的容器中 apt-get 或 apt 命令是可以使用的：</p><p>参考网站：<a href="https://www.digitalocean.com/community/questions/unable-to-install-pyhton-3-7-version-on-ubuntu-16-04-error-couldn-t-find-any-package-by-regex-python3-7">点我查看</a></p><pre class="line-numbers language-none"><code class="language-none">#更新源apt update#安装python依赖apt install software-properties-common#添加源add-apt-repository ppa:deadsnakes&#x2F;ppa#更新源apt update#安装pythonapt install python3.7#查看python版本python --version 或 python -Vpython3 --version 或 python3 -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装完python3.7可能需要修改默认python指向才能正常使用python3.7：</p><p>参考网站：<a href="https://blog.csdn.net/qq_33188180/article/details/109723636">点我查看</a></p><p>查看默认python指向：</p><pre class="line-numbers language-none"><code class="language-none">ls -l &#x2F;usr&#x2F;bin | grep python <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除原有python软连接：</p><pre class="line-numbers language-none"><code class="language-none">rm &#x2F;usr&#x2F;bin&#x2F;python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立python到新的软链接python3.7：</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;usr&#x2F;bin&#x2F;python3.7  &#x2F;usr&#x2F;bin&#x2F;python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-在容器中安装pip"><a href="#7-在容器中安装pip" class="headerlink" title="7.在容器中安装pip"></a>7.在容器中安装pip</h2><p>这里也有个小坑！如果你写的是python3-pip 执行安装后，如果系统自带了python3.5，其实pip这时是装在了python3.5环境下了！！正确的指定方式，应该把小版本号也加上！</p><pre class="line-numbers language-none"><code class="language-none">apt-get install python3.7-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是执行上述命令可能会报错，如果报错需要安装下面的方法添加pip安装源：</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py -o get-pip.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于上面已经将python指向了python3，因此下面直接使用python安装即可，否者要使用python3安装：</p><pre class="line-numbers language-none"><code class="language-none">python get-pip.py --force-reinstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看pip位置：</p><pre class="line-numbers language-none"><code class="language-none">which pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在安装后显示安装在：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip</p><p>建立pip软链接：</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip &#x2F;usr&#x2F;bin&#x2F;pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：第一个地址  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip  为  which pip  的显示地址</p><p>查看pip版本：</p><pre class="line-numbers language-none"><code class="language-none">pip -V 或 pip --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我的显示位置为：pip 20.3.4 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages&#x2F;pip (python 3.7)</p><p>至此，python将指向python3.7，pip将指向python 3.7的pip 20.3.4，实现python和pip的版本对应，且目标容器内二者都是唯一存在，不需要再使用python3和pip3调用python3的对应版本，这样使用pip安装的包将默认存放在  &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;dist-packages  中。</p><h2 id="8-安装PyTorch"><a href="#8-安装PyTorch" class="headerlink" title="8.安装PyTorch"></a>8.安装PyTorch</h2><p>最新版本安装方法：<a href="https://pytorch.org/get-started/locally/">点我查看</a></p><p>历史版本安装方法：<a href="https://pytorch.org/get-started/previous-versions/">点我查看</a></p><pre class="line-numbers language-none"><code class="language-none">pip install torch&#x3D;&#x3D;1.1.0 torchvision&#x3D;&#x3D;0.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-安装eigen3"><a href="#9-安装eigen3" class="headerlink" title="9.安装eigen3"></a>9.安装eigen3</h2><p>参考网址：<a href="https://blog.csdn.net/xiangxianghehe/article/details/81236299?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control">点我查看</a></p><h3 id="9-1安装依赖"><a href="#9-1安装依赖" class="headerlink" title="9.1安装依赖"></a>9.1安装依赖</h3><pre class="line-numbers language-none"><code class="language-none">apt-get install libopenblas-devapt-get install --no-install-recommends libboost1.58-all-devapt-get install libx11-devapt-get install libgl1-mesa-dev apt-get install libglu1-mesa-dev apt-get install freeglut3-devapt-get install doxygenwget https:&#x2F;&#x2F;nchc.dl.sourceforge.net&#x2F;project&#x2F;glew&#x2F;glew&#x2F;2.1.0&#x2F;glew-2.1.0.tgz --no-check-certificatetar -xzvf glew-2.1.0.tgzcd glew-2.1.0&#x2F;make make installldconfig -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2安装Eigen3-3-5"><a href="#9-2安装Eigen3-3-5" class="headerlink" title="9.2安装Eigen3.3.5"></a>9.2安装Eigen3.3.5</h3><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;eigenteam&#x2F;eigen-git-mirror&#x2F;archive&#x2F;3.3.5.tar.gztar -xzvf 3.3.5.tar.gz mv eigen-git-mirror-3.3.5&#x2F; eigen-3.3.5&#x2F;cd eigen-3.3.5&#x2F;mkdir buildcd buildcmake ..makemake install ldconfig -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3测试"><a href="#9-3测试" class="headerlink" title="9.3测试"></a>9.3测试</h3><p>在容器中创建测试文件夹：</p><pre class="line-numbers language-none"><code class="language-none">mkdir install_test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在宿主机上创建如下文件：</p><ul><li>CMakeLists.txt</li></ul><pre class="line-numbers language-none"><code class="language-none">cmake_minimum_required( VERSION 2.8 )project(useEigen)set( CMAKE_BUILD_TYPE &quot;Release&quot; )set( CMAKE_CXX_FLAGS &quot;-O3&quot; )set( CMAKE_CXX_FLAGS &quot;-std&#x3D;c++11&quot;)# 添加Eigen头文件include_directories( &quot;&#x2F;usr&#x2F;local&#x2F;include&#x2F;eigen3&quot; )add_executable(useEigen  main.cpp)find_package(Eigen3 REQUIRED)target_link_libraries($&#123;PROJECT_NAME&#125;  $&#123;EIGEN3_LIBS&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main.cpp</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;vector&gt;#include &lt;Eigen&#x2F;Core&gt;#include &lt;Eigen&#x2F;Dense&gt;#include &lt;Eigen&#x2F;Geometry&gt;#include &lt;Eigen&#x2F;StdVector&gt;using namespace std;int main()&#123;    &#x2F;&#x2F;1.rotation vector to  rotation matrix    Eigen::AngleAxisd rotationVector(M_PI&#x2F;4,Eigen::Vector3d(0,0,1));    Eigen::Matrix3d rotationMatrix&#x3D;Eigen::Matrix3d::Identity();    rotationMatrix&#x3D;rotationVector.toRotationMatrix();    cout&lt;&lt;&quot;rotationMatrix \n&quot;&lt;&lt;rotationMatrix&lt;&lt;endl;    &#x2F;&#x2F;2.rotation vector to quaterniond    Eigen::Quaterniond q&#x3D;Eigen::Quaterniond( rotationVector );    cout&lt;&lt;&quot;rotation quaternion \n&quot;&lt;&lt;q.coeffs()&lt;&lt;endl;    &#x2F;&#x2F;3.rotaion vector to eulerAngles    Eigen::Vector3d eulerAngle&#x3D;rotationVector.matrix().eulerAngles(0,1,2);    cout&lt;&lt;&quot;eulerAngle roll pitch yaw\n&quot;&lt;&lt;180*eulerAngle&#x2F;M_PI&lt;&lt;endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将宿主机上的两个文件拷贝至容器中的install_test里进行测试：</p><pre class="line-numbers language-none"><code class="language-none">docker cp CMakeLists.txt pytorch1.1-gpu:&#x2F;home&#x2F;eigen-3.3.5&#x2F;install_testdocker cp main.cpp  pytorch1.1-gpu:&#x2F;home&#x2F;eigen-3.3.5&#x2F;install_test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">cd install_testcmake  .make.&#x2F;useEigen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若显示结果如下，则说明测试成功。</p><pre class="line-numbers language-none"><code class="language-none">rotationMatrix  0.707107 -0.707107         0 0.707107  0.707107         0        0         0         1rotation quaternion        0       00.382683 0.92388eulerAngle roll pitch yaw-0 045<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-安装tensorflow"><a href="#10-安装tensorflow" class="headerlink" title="10.安装tensorflow"></a>10.安装tensorflow</h2><ul><li>tensorflow与cuda的版本对应关系</li></ul><p><img src="https://i.loli.net/2021/05/21/PEoKmlhbcXisCWt.png"></p><p>安装命令：</p><pre class="line-numbers language-none"><code class="language-none">pip install tensorflow-gpu&#x3D;&#x3D;2.0 -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple --trusted-host pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> docker </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16-04-LTS：anaconda3安装</title>
      <link href="/2022/11/23/ubuntu16-04-lts-anaconda3-an-zhuang/"/>
      <url>/2022/11/23/ubuntu16-04-lts-anaconda3-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载清华源镜像文件"><a href="#1-下载清华源镜像文件" class="headerlink" title="1. 下载清华源镜像文件"></a>1. 下载清华源镜像文件</h1><p>网址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><p>版本：建议安装Anaconda3-5.2.0-Linux-x86_64.sh</p><h1 id="2-进入下载目录执行以下命令进行安装"><a href="#2-进入下载目录执行以下命令进行安装" class="headerlink" title="2. 进入下载目录执行以下命令进行安装"></a>2. 进入下载目录执行以下命令进行安装</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bash Anaconda3<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>Linux<span class="token operator">-</span>x86_64<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/05/16/9curYTMUWmveogb.png"></p><ul><li>一路按回车至底部，出现提示：是否接受安装协议时：回复yes:</li></ul><p><img src="https://i.loli.net/2021/05/16/JU2iRojd3vH4fsY.png"></p><ul><li>默认的路径为&#x2F;home&#x2F;username&#x2F;anaconda3，默认的话直接按ENTER即可，等待安装过程完成即可。</li></ul><p><img src="https://i.loli.net/2021/05/16/iVDa14zUNREPYKs.png"></p><ul><li>询问是否将Anaconda3加入到环境变量中，选：yes</li></ul><p><img src="https://i.loli.net/2021/05/16/DBj5P8VMTzgYu2s.png"></p><ul><li>默认的话直接按ENTER即可，等待安装过程完成即可。</li></ul><h1 id="3-检查是否安装成功"><a href="#3-检查是否安装成功" class="headerlink" title="3.检查是否安装成功"></a>3.检查是否安装成功</h1><p>  使用以下命令可以查看已经存在的conda虚拟环境</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">conda env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  使用以下命令可以查看conda的路径是否添加成功</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">sudo gedit <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  使其立即生效，在终端执行：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">source <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <strong>4.进入任意一个创建的虚拟环境里面检查python</strong></p><p>  在虚拟环境中输入以下命令：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  会出现类似以下含有anaconda的字样：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Python <span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">5</span> <span class="token operator">|</span>Anaconda<span class="token punctuation">,</span> Inc<span class="token punctuation">.</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> Apr <span class="token number">29</span> <span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">56</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">7.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">]</span> on linuxType <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token operator">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  如果没有出现以下字样，说明系统的python版本需要指定，使用以下命令：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">sudo gedit <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  在bashrc中添加一行：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">alias python<span class="token operator">=</span>python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  (注意这里的python3是和安装的anaconda3对应的默认pyrhon对应的，可以在conda虚拟环境中的base环境中查看对应的python版本)</p><p>  然后激活bashrc</p>  <pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  这样就可以使用conda创建的虚拟环境对应的python。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16-04手动安装英伟达显卡驱动</title>
      <link href="/2022/11/23/ubuntu16-04-shou-dong-an-zhuang-ying-wei-da-xian-qia-qu-dong/"/>
      <url>/2022/11/23/ubuntu16-04-shou-dong-an-zhuang-ying-wei-da-xian-qia-qu-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-屏蔽开源驱动"><a href="#1-屏蔽开源驱动" class="headerlink" title="1.屏蔽开源驱动"></a>1.屏蔽开源驱动</h2><p>屏蔽开源驱动nouveau安装过程会询问是否屏蔽，手动屏蔽也有多种操作方式，可以使用如下方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit /etc/modprobe.d/blacklist.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后添加内容到最底段，要回车另起一行。添加的内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blacklist nouveau options nouveau <span class="token assign-left variable">modeset</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存再终端更新内核命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-initramfs <span class="token parameter variable">-u</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会出现如下警告，忽略即可：</p><img src="https://i.loli.net/2021/06/22/lkPBpOvA3MIsfXq.png" style="zoom:50%;" /><h2 id="2-下载驱动"><a href="#2-下载驱动" class="headerlink" title="2.下载驱动"></a>2.下载驱动</h2><p>然后，重启电脑。下载NVIDIA的驱动形如：NVIDIA-Linux-x86_64-384.run 下载网址为：<a href="https://www.geforce.cn/drivers%E3%80%82">https://www.geforce.cn/drivers。</a></p><p>在win10下的设备管理器中可以查看显卡的型号。型号为：NVIDIA GeForce GTX 1050 Ti电脑类型为：笔记本</p><p>所以手动搜索驱动程序时，应该这样选择：</p><p><img src="https://i.loli.net/2021/06/22/S69TiRpgEc3ydPk.png"></p><p>选择第一个驱动版本一般可以安装成功的，但不同电脑可能结果不同，安装失败的话还需要更换版本尝试安装。</p><p>下好的”.run”文件放在home ，目录下，最好将文件名称该为简单点的。</p><h2 id="3-进入root的命令行模型"><a href="#3-进入root的命令行模型" class="headerlink" title="3.进入root的命令行模型"></a>3.进入root的命令行模型</h2><p>安装驱动重启电脑，进入ubuntu高级模式，然后选择下图中的 root 选项：</p><img src="https://i.loli.net/2021/06/22/rnKMFl81T4giEUf.png" style="zoom:50%;" /><p>然后按”回车”：</p><img src="https://i.loli.net/2021/06/22/I1ZeWDCaTcEx5X2.png" style="zoom:50%;" /><h2 id="4-安装驱动"><a href="#4-安装驱动" class="headerlink" title="4.安装驱动"></a>4.安装驱动</h2><p>然后，按”回车”，进入系统目录。安装驱动程序，执行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭当前图形环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> lightdm stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为之前的后缀为”.run”的驱动文件放在home目录下，所以， 到驱动所在文件夹后 执行如下命令修改权限并运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> a+x NVIDIA-Linux-x86_64-xxx.run <span class="token function">sudo</span> <span class="token function">sh</span> NVIDIA-Linux-x86_64-xxx.run -no-opengl-files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后剩余步骤均为默认即可，直接回车执行下一步。</p><ul><li>提示”dkms”安装时，需要安装。</li><li>会提示有”32”字样，选择”OK”继续即可。</li></ul><p>最后重新启动图形环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> lightdm start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-查看是否安装成功"><a href="#5-查看是否安装成功" class="headerlink" title="5.查看是否安装成功"></a>5.查看是否安装成功</h2><p>检查安装是否成功并重启电脑，正常进入系统。</p><p>如果出现循环输入登录密码但是无法登录成功的情况，则为驱动版本和自己的电脑不匹配，需要下载其他显卡驱动版本尝试。</p><p>进一步检查，打开终端输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现如下所示信息，即为安装成功:</p><img src="https://i.loli.net/2021/06/22/gZB9FKjSl2T8wGV.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 显卡驱动安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10与ubuntu16-04-LTS双系统安装教程</title>
      <link href="/2022/11/23/win10-yu-ubuntu16-04-lts-shuang-xi-tong-an-zhuang-jiao-cheng/"/>
      <url>/2022/11/23/win10-yu-ubuntu16-04-lts-shuang-xi-tong-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建空闲分区"><a href="#1-创建空闲分区" class="headerlink" title="1.创建空闲分区"></a>1.创建空闲分区</h2><p>在win系统下，在”此电脑”→右键”管理“→“磁盘管理”→右键一个不用的磁盘并”格式化“→”删除卷“，分出一个状态为“未分配”的磁盘用于安装ubuntu16.04 LTS</p><h2 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2.开始安装"></a>2.开始安装</h2><p>插入具有ubuntu16.04 LTS系统的U盘开始安装系统</p><ul><li>选择系统语言，可以是中文或英文。如需要安装tensflow的话建议安装英文版本</li><li>选择安装类型为其它选项</li></ul><img src="https://i.loli.net/2021/06/22/9FEvKkQmATYq7Ip.jpg" style="zoom: 67%;" /><h2 id="3-双击空闲盘进行分区"><a href="#3-双击空闲盘进行分区" class="headerlink" title="3.双击空闲盘进行分区"></a>3.双击空闲盘进行分区</h2><h3 id="3-1-x2F-boot分区"><a href="#3-1-x2F-boot分区" class="headerlink" title="3.1   &#x2F;boot分区"></a>3.1   &#x2F;boot分区</h3><p>&#x2F;boot：这个就是实现你双系统的原因了，这个就是用于启动 ubuntu 的目录，里面会有系统的引导，这个文件其实只有几十兆，但是我们建议将其划分为 200M 文件格式为 ext4，这个分区必不可少，否则后果你懂得！</p><h3 id="3-2-swap分区"><a href="#3-2-swap分区" class="headerlink" title="3.2   swap分区"></a>3.2   swap分区</h3><p>swap:这个是 Linux 也就是 ubuntu 的交换区目录，这个一般的大小为内存的 2 倍左右， 主要是用来在电脑内存不足的情况下，系统会调用这片区域，来运行程序，我们可以将其分为 4G， 这个把ext4换成交换空间，英文swap</p><h3 id="3-3-x2F-分区"><a href="#3-3-x2F-分区" class="headerlink" title="3.3    &#x2F;分区"></a>3.3    &#x2F;分区</h3><p>&#x2F;:这是 linux 也就是 ubuntu 的根目录就一个反斜杠表示，相当于windows的C盘， 我们将其分为 10G，文件格式为 ext4，条件允许可以大一点，可以20G，毕竟ubuntu装软件默认是装在这里的，大一点可能会省去后面隐藏的麻烦。</p><h3 id="3-4-x2F-home分区"><a href="#3-4-x2F-home分区" class="headerlink" title="3.4   &#x2F;home分区"></a>3.4   &#x2F;home分区</h3><p>&#x2F;home:这是 ubuntu 的“其他盘”， 这个也可以说是我们的个人目录，相当于windows的其他盘，所以为了让我们自己的目录大一点，剩下的全分给它，文件格式为 ext4</p><img src="https://i.loli.net/2021/06/22/IZixlEy6FC8vRKn.png" style="zoom: 67%;" /><p>以上两步新建分区后的类似效果：</p><img src="https://i.loli.net/2021/06/22/KxGUtJWhYPMRS3p.png" style="zoom:67%;" /><h2 id="4-选择安装启动引导的设备"><a href="#4-选择安装启动引导的设备" class="headerlink" title="4.选择安装启动引导的设备"></a>4.选择安装启动引导的设备</h2><p>安装启动引导的设备：windows boot manager</p><img src="https://i.loli.net/2021/06/22/v2JbClS7IwjU46a.png" style="zoom:50%;" /><h2 id="5-自动安装"><a href="#5-自动安装" class="headerlink" title="5.自动安装"></a>5.自动安装</h2><img src="https://i.loli.net/2021/06/22/oMECN25eyXsIAKS.jpg" style="zoom: 50%;" /><img src="https://i.loli.net/2021/06/22/T7CP1BcVWb9wxIR.jpg" style="zoom:50%;" /><p>安装完成后可能显示画面模糊，这是因为没有安装显卡驱动，可以按照教程”Ubuntu16.04手动安装英伟达显卡驱动”安装即可</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手眼标定-Ros-Kinetic-Realsense-D435-AUBOi5-Ubuntu-16-04</title>
      <link href="/2022/11/23/shou-yan-biao-ding-ros-kinetic-realsense-d435-auboi5-ubuntu-16-04/"/>
      <url>/2022/11/23/shou-yan-biao-ding-ros-kinetic-realsense-d435-auboi5-ubuntu-16-04/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装AUBOi5的Moveit功能包"><a href="#1-安装AUBOi5的Moveit功能包" class="headerlink" title="1.安装AUBOi5的Moveit功能包"></a>1.安装AUBOi5的Moveit功能包</h2><h3 id="1-1环境配置"><a href="#1-1环境配置" class="headerlink" title="1.1环境配置"></a>1.1环境配置</h3><p>下载Move-it package</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载moveit_visual_tools</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit-visual-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载industrial_core package</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-industrial-core<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2建立ROS工作空间"><a href="#1-2建立ROS工作空间" class="headerlink" title="1.2建立ROS工作空间"></a>1.2建立ROS工作空间</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /opt/ros/kinetic/setup.bash<span class="token comment"># catkin_ws为工作空间名称</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/catkin_ws/src<span class="token builtin class-name">cd</span> ~/catkin_ws/catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-在-x2F-catkin-ws-x2F-src-目录中下载Moveit功能包，并编译"><a href="#1-2-在-x2F-catkin-ws-x2F-src-目录中下载Moveit功能包，并编译" class="headerlink" title="1.2 在  ~&#x2F;catkin_ws&#x2F;src  目录中下载Moveit功能包，并编译"></a>1.2 在  ~&#x2F;catkin_ws&#x2F;src  目录中下载Moveit功能包，并编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone https://github.com/lg609/aubo_robot.git<span class="token builtin class-name">cd</span> ~/catkin_ws/catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释：如果提示下列错误，则说明在安装Ros的时候没有安装Ros-moveit功能包：</p><p><img src="https://i.loli.net/2021/05/28/jShBMoz9apcKVXE.png"></p><p>解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-moveit*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：参考网址：<a href="https://github.com/tahsinkose/hector-moveit/issues/4">点我查看</a></p><h2 id="2-安装Realsense-D435相机驱动与功能包"><a href="#2-安装Realsense-D435相机驱动与功能包" class="headerlink" title="2.安装Realsense D435相机驱动与功能包"></a>2.安装Realsense D435相机驱动与功能包</h2><h3 id="2-1驱动安装"><a href="#2-1驱动安装" class="headerlink" title="2.1驱动安装"></a>2.1驱动安装</h3><p>官方安装教程：<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">点我查看</a></p><p>参考教程：<a href="https://zhuanlan.zhihu.com/p/93127918">点我查看</a></p><p>注册公匙：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE <span class="token operator">||</span> <span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加服务器至存储列表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb https://librealsense.intel.com/Debian/apt-repo xenial main"</span> <span class="token parameter variable">-u</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装所需库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dkms<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装功能包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> librealsense2-dbg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动连接界面，进行测试，若可以看到相机图像则证明驱动安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">realsense-viewer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2功能包安装"><a href="#2-2功能包安装" class="headerlink" title="2.2功能包安装"></a>2.2功能包安装</h3><p>创建工作空间：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/catkin_ws/src <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ~/catkin_ws/src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载源码，并检查依赖:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token number">2.2</span>.7 https://github.com/IntelRealSense/realsense-ros.git <span class="token builtin class-name">cd</span> realsense-ros/realsense2_camera <span class="token function">git</span> checkout <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> tag <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-V</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-P</span> <span class="token string">"^\d+\.\d+\.\d+"</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-1</span><span class="token variable">`</span></span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-ddynamic-reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_wscatkin_make <span class="token parameter variable">-DCATKIN_ENABLE_TESTING</span><span class="token operator">=</span>False <span class="token parameter variable">-DCMAKE_BUILD_TYPE</span><span class="token operator">=</span>Release catkin_make <span class="token function">install</span> <span class="token builtin class-name">echo</span> <span class="token string">"source ~/catkin_ws/devel/setup.bash"</span> <span class="token operator">>></span> ~/.bashrc <span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，启动相机节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch realsense2_camera rs_camera.launch<span class="token comment"># 查看发布的话题</span>rostopic list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-安装ros-kinetic-visp依赖包"><a href="#3-安装ros-kinetic-visp依赖包" class="headerlink" title="3.安装ros-kinetic-visp依赖包"></a>3.安装ros-kinetic-visp依赖包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-kinetic-visp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-安装aruco-ros二维码检测功能包"><a href="#4-安装aruco-ros二维码检测功能包" class="headerlink" title="4.安装aruco_ros二维码检测功能包"></a>4.安装aruco_ros二维码检测功能包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone <span class="token parameter variable">-b</span> kinetic-devel https://github.com/pal-robotics/aruco_ros.git<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-安装visp-hand2eye-calibration"><a href="#5-安装visp-hand2eye-calibration" class="headerlink" title="5.安装visp_hand2eye_calibration"></a>5.安装visp_hand2eye_calibration</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone <span class="token parameter variable">-b</span> kinetic-devel https://github.com/lagadic/vision_visp.git<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make <span class="token parameter variable">--pkg</span> visp_hand2eye_calibration<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-安装easy-handeye手眼标定功能包"><a href="#6-安装easy-handeye手眼标定功能包" class="headerlink" title="6.安装easy_handeye手眼标定功能包"></a>6.安装easy_handeye手眼标定功能包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span class="token function">git</span> clone https://github.com/IFL-CAMP/easy_handeye<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-标定方法"><a href="#7-标定方法" class="headerlink" title="7.标定方法"></a>7.标定方法</h2><h3 id="7-1眼在手上-eye-in-hand标定方法"><a href="#7-1眼在手上-eye-in-hand标定方法" class="headerlink" title="7.1眼在手上 eye-in-hand标定方法"></a>7.1眼在手上 eye-in-hand标定方法</h3><h4 id="7-1-1修改launch文件"><a href="#7-1-1修改launch文件" class="headerlink" title="7.1.1修改launch文件"></a>7.1.1修改launch文件</h4><p>标定过程需启动 ur5 机械臂的相关节点，realsense 节点，aruco 节点，easy_handeye 节点，可以写一个 launch 文件同时启动上述节点，也可以分别启动。easy_handeye 包中给出了用一个 launch 文件实现的示例，在如下的目录中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch/ur5_kinect_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以在此基础上进行修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 launch 文件拷贝到 easy_handeye 功能包的 launch 目录中，顺便改个名字</span><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch<span class="token function">cp</span> ur5_kinect_calibration.launch ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_in_hand_calibration.launchgedit  ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_in_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改 launch 文件如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aubo_i5_kinect_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 169.254.3.20为AUBOi5机械臂的IP地址,根据实际情况修改 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_ip<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The IP address of the UR5 robot<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>169.254.3.20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_size<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Size of the ArUco marker used, in meters<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_id<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The ID of the ArUco marker used<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 1. start the Realsense435 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find realsense2_camera)/launch/rs_camera.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 2. start ArUco --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aruco_tracker<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aruco_ros<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>single<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera_info<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/color/camera_info<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/image<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/color/image_raw<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_is_rectified<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_size<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg marker_size)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_id<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg marker_id)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reference_frame<span class="token punctuation">"</span></span>    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_frame<span class="token punctuation">"</span></span>       <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>marker_frame<span class="token punctuation">"</span></span>       <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_marker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 3. start the robot --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find aubo_i5_moveit_config)/launch/moveit_planning_execution.launch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 4. start easy_handeye --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find easy_handeye)/launch/calibrate.launch<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- true：相机安装在机械臂末端 false: 相机安装在机械臂外--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- tracking_base_frame 为相机坐标系 camera_color_frame --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_color_frame<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_marker_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_marker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- robot_base_frame 为机器人基座坐标系 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- robot_effector_frame 为工具坐标系，即：与相机相连的关节名称 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrist3_Link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>freehand_robot_movement<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_velocity_scaling<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_acceleration_scaling<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>move_group<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manipulator_i5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2启动-launch-文件，开始标定"><a href="#7-1-2启动-launch-文件，开始标定" class="headerlink" title="7.1.2启动 launch 文件，开始标定"></a>7.1.2启动 launch 文件，开始标定</h4><p>启动 launch 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch easy_handeye eye_to_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功运行后，会同时打开三个界面：</p><img src="https://i.loli.net/2021/05/28/4Xmzb3hFrnd5R7c.jpg" alt="界面1" style="zoom:50%;" /><img src="https://i.loli.net/2021/05/28/Av7F6K9Gu8pfZs3.jpg"  alt="界面2" style="zoom: 67%;" /><p><img src="https://i.loli.net/2021/05/28/2ydewHu76InBqfs.jpg" alt="界面3"></p><p>在界面 2 中，点击菜单栏(菜单栏在屏幕左上角)的 Plugins -&gt; Visulization -&gt; Image View，选择 &#x2F;aruco_tracker&#x2F;result 话题，界面会如下所示：</p><img src="https://i.loli.net/2021/05/28/YTKPw46HouZGpk9.jpg" style="zoom: 50%;" /><h4 id="7-1-3标定步骤"><a href="#7-1-3标定步骤" class="headerlink" title="7.1.3标定步骤"></a>7.1.3标定步骤</h4><ol><li>手动调节机械臂，使 aruco 二维码移动至相机视野中心处附近，作为 home config。在界面 3 中，点击 check starting pose，若检查成功，界面会出现： 0&#x2F;17，ready to start</li><li>界面 3 中依次点击 Next Pose，Plan，Execute，机械臂会移动至新的位置，若二维码在相机视野范围内，且能检测成功，则进行下一步</li><li>界面 2 中点击 Take Sample，若 Samples 对话框中出现有效信息，说明第一个点标定成功</li><li>重复执行步骤 2 和步骤 3，直至 17 个点全部标定完毕</li><li>界面 2 中点击 Compute，则 Result 对话框中会出现结果</li><li>界面 2 中 Save，会将结果保存为一个 YAML 文件，路径为 <code>~/.ros/easy_handeye</code></li></ol><p><img src="https://i.loli.net/2021/05/28/gV9AWphbyU5mFlP.jpg"></p><h3 id="7-2眼在手外-eye-to-hand标定方法"><a href="#7-2眼在手外-eye-to-hand标定方法" class="headerlink" title="7.2眼在手外 eye-to-hand标定方法"></a>7.2眼在手外 eye-to-hand标定方法</h3><p>方法与“眼在手上”基本相同，需要修改一下 launch 文件，注意两个 launch 文件不要重名。</p><p>唯一修改的地方是 easy_handeye 功能包 calibrate.launch 文件中 “eye_on_hand” 参数改成 true，如下所示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 launch 文件拷贝到 easy_handeye 功能包的 launch 目录中，顺便改个名字</span><span class="token builtin class-name">cd</span> ~/catkin_ws/src/easy_handeye/docs/example_launch<span class="token function">cp</span> ur5_kinect_calibration.launch ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_to_hand_calibration.launchgedit  ~/catkin_ws/src/easy_handeye/easy_handeye/launch/eye_to_hand_calibration.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-将标定结果发送至TF树"><a href="#8-将标定结果发送至TF树" class="headerlink" title="8.将标定结果发送至TF树"></a>8.将标定结果发送至TF树</h2><p>easy_handeye 功能包提供了 publish.launch 文件，可以将标定好的 TF 发布出去</p><h3 id="8-1眼在手上eye-in-hand"><a href="#8-1眼在手上eye-in-hand" class="headerlink" title="8.1眼在手上eye-in-hand"></a>8.1眼在手上eye-in-hand</h3><p>修改publish.launch 文件,要修改 “namespace_prefix” 参数，与眼在手上标定 launch 文件中的 “namespace_prefix” 一致，这样才能找到标定好的 YAML 文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye-on-hand instead of eye-on-base<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ur5_realsense_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_hand<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_base<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--it is possible to override the link names saved in the yaml file in case of name clashes, for example--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--publish hand-eye calibration--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_effector_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg tracking_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg inverse)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(anon handeye_publisher)<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>easy_handeye<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish.py<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2眼在手外-eye-to-hand"><a href="#8-2眼在手外-eye-to-hand" class="headerlink" title="8.2眼在手外 eye-to-hand"></a>8.2眼在手外 eye-to-hand</h3><p>修改 “namespace_prefix” 外（同上），还要将 “eye_on_hand” 参数设为false</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">doc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye-on-hand instead of eye-on-base<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace_prefix<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ur5_realsense_handeyecalibration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_hand<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace_prefix)_eye_on_base<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--it is possible to override the link names saved in the yaml file in case of name clashes, for example--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--publish hand-eye calibration--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg namespace)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye_on_hand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg eye_on_hand)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_effector_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg robot_effector_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tracking_base_frame<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg tracking_base_frame)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inverse<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg inverse)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(anon handeye_publisher)<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>easy_handeye<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish.py<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9.测试"></a>9.测试</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启 publish.luanch 文件，以眼在手上为例</span>roslaunch easy_handeye publish.launch<span class="token comment"># 查看 TF（改成自己的工具坐标系与相机坐标系）</span>rosrun tf tf_echo /tool0_controller /camera_color_frame<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/05/28/BgCzvN85MxAsUJV.jpg"></p><p>注意：这里四元数的顺序是 [qx, qy, qz, qw]</p>]]></content>
      
      
      <categories>
          
          <category> 机器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手眼标定 </tag>
            
            <tag> AUBOi5 </tag>
            
            <tag> Realsense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm使用ssh连接服务器中的docker容器</title>
      <link href="/2022/11/23/pycharm-shi-yong-ssh-lian-jie-fu-wu-qi-zhong-de-docker-rong-qi/"/>
      <url>/2022/11/23/pycharm-shi-yong-ssh-lian-jie-fu-wu-qi-zhong-de-docker-rong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-拉取cuda、cudnn的docker镜像"><a href="#1-拉取cuda、cudnn的docker镜像" class="headerlink" title="1.拉取cuda、cudnn的docker镜像"></a>1.拉取cuda、cudnn的docker镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-新建并启动交互式容器"><a href="#2-新建并启动交互式容器" class="headerlink" title="2.新建并启动交互式容器"></a>2.新建并启动交互式容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> tensorflow1.2.1-gpu <span class="token parameter variable">-v</span> /home/docker_share/:/home/ <span class="token parameter variable">-p</span> <span class="token number">2201</span>:22 <span class="token parameter variable">--gpus</span> all nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：</p><p>–name ：设置新容器的名称为tensorflow1.2.1-gpu</p><p>-v ：设置文件映射，将宿主机的文件&#x2F;home&#x2F;docker_share&#x2F;映射到该容器的&#x2F;home&#x2F;目录下</p><p>-p ：设置容器的端口与宿主机的端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></p><p>–gpus all 许容器使用所有GPU</p><p>nvidia&#x2F;cuda:10.0-cudnn7-devel-ubuntu16.04：容器的依赖镜像</p><p>&#x2F;bin&#x2F;bash：指定在容器内部运行的进程，该进程是通过docker container run命令来通知容器运行的</p><p>注释：</p><p>为了构建有序且规范的端口映射关系，这里设置一个默认规则用于设置容器的端口与宿主机的端口映射：主机端口固定，容器端口以主机端口为起始位依次排开</p><pre class="line-numbers language-none"><code class="language-none">容器端口主机端口220122220222<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-进入容器后修改容器的root密码"><a href="#3-进入容器后修改容器的root密码" class="headerlink" title="3.进入容器后修改容器的root密码"></a>3.进入容器后修改容器的root密码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置用户名为root,密码为passwd(将其该为自己想要的密码)</span><span class="token builtin class-name">echo</span> <span class="token string">'root:passwd'</span> <span class="token operator">|</span> chpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-安装openssh-server并启动"><a href="#4-安装openssh-server并启动" class="headerlink" title="4.安装openssh-server并启动"></a>4.安装openssh-server并启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新源</span><span class="token function">apt-get</span> update<span class="token comment">#或</span><span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update<span class="token comment"># 安装openssh-server</span><span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span class="token comment"># 启动之前需手动创建/var/run/sshd，不然启动sshd的时候会报错</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/run/sshd<span class="token comment"># sshd以守护进程运行</span>/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span class="token comment"># 安装netstat，查看sshd是否监听22端口</span><span class="token function">apt-get</span> <span class="token function">install</span> net-tools<span class="token function">netstat</span> <span class="token parameter variable">-apn</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span class="token comment"># 显示如下</span><span class="token comment"># root@a78aa2e72670:/# netstat -apn | grep ssh</span><span class="token comment"># tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1266/sshd</span><span class="token comment"># tcp6       0      0 :::22                   :::*                    LISTEN      1266/sshd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-ssh登录设置"><a href="#5-ssh登录设置" class="headerlink" title="5.ssh登录设置"></a>5.ssh登录设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成ssh key</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token comment"># 然后提示的设置用默认设置，一直回车即可</span><span class="token comment"># 修改sshd-config允许root登陆</span><span class="token function">vim</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查下面的命令是否被注释，会后面的参数是否为yes，若没有该命令需要在文件尾部新增该命令以允许root用户使用ssh登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PermitRootLogin <span class="token function">yes</span> <span class="token comment"># 约在28行：将PermitRootLogin prohibit-password改为PermitRootLogin yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改完sshd-config之后需要重启sshd服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找到sshd的进程pid</span><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span class="token comment"># 杀掉sshd的进程pid</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> sshd的进程pid号<span class="token comment"># 重启</span>/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span class="token comment"># 再次查看</span><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a78aa2e72670:/<span class="token comment"># ps -aux | grep ssh</span>root      <span class="token number">1266</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5468</span> pts/0    S    01:14   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root      <span class="token number">1301</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">932</span> pts/0    S+   01:18   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span>root@a78aa2e72670:/<span class="token comment"># kill -9 1266</span>root@a78aa2e72670:/<span class="token comment"># /usr/sbin/sshd -D &amp;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">1302</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   Killed                  /usr/sbin/sshd <span class="token parameter variable">-D</span>root@a78aa2e72670:/<span class="token comment"># ps -aux | grep ssh</span>root      <span class="token number">1302</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5756</span> pts/0    S    01:19   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root      <span class="token number">1304</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">944</span> pts/0    S+   01:19   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-退出容器，但不要停止容器，并进行连接测试"><a href="#6-退出容器，但不要停止容器，并进行连接测试" class="headerlink" title="6.退出容器，但不要停止容器，并进行连接测试"></a>6.退出容器，但不要停止容器，并进行连接测试</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在主机登录，需要输入的root密码为前面设置的root密码</span><span class="token function">ssh</span> root@localhost <span class="token parameter variable">-p</span> <span class="token number">8080</span> <span class="token comment"># 8080为刚开始创建容器时候设置的主机端口映射，与容器的22端口形成映射</span><span class="token comment"># 在其他机器上可以使用以下命令登陆，假设宿主机ip为10.12.11.xx</span><span class="token function">ssh</span> root@10.12.11.xx <span class="token parameter variable">-p</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果提示：ssh_exchange_identification: read: Connection reset by peer</p><p>则：可能是容器的 sshd服务未开启，再次进入容器重启sshd服务即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@dc627a3adc4d:/<span class="token comment"># ps -aux | grep ssh</span>root        <span class="token number">32</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">932</span> pts/1    S+   03:43   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span>root@dc627a3adc4d:/<span class="token comment"># /usr/sbin/sshd -D &amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">33</span>root@dc627a3adc4d:/<span class="token comment"># ps -aux | grep ssh</span>root        <span class="token number">33</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">65512</span>  <span class="token number">5420</span> pts/1    S    03:43   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>root        <span class="token number">35</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">11284</span>   <span class="token number">936</span> pts/1    S+   03:43   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释：配置完成后可以将容器保存为镜像</p><p>docker commit -a “提交的镜像作者名称” -m “提交时的说明文字” 容器ID或容器名称  保存镜像名称:标签</p><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@dc627a3adc4d:/<span class="token comment"># docker commit -a "runoob.com" -m "my apache" a404c6c174a2  mymysql:v1</span>root@dc627a3adc4d:/<span class="token comment"># docker images mymysql:v1</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmymysql             v1                  37af1236adef        <span class="token number">15</span> seconds ago      <span class="token number">329</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-配置pycharm并连接docker容器"><a href="#7-配置pycharm并连接docker容器" class="headerlink" title="7.配置pycharm并连接docker容器"></a>7.配置pycharm并连接docker容器</h2><p>参考网址：<a href="https://blog.csdn.net/Thanours/article/details/109265315">点我查看</a></p><p>在 Tools &gt;&gt;&gt; Deployment &gt;&gt;&gt; Configuration选项中新建 SFTP 连接：</p><p><img src="https://i.loli.net/2021/05/21/YMm8PE6Hd9ySQ2h.png"></p><img src="https://i.loli.net/2021/05/21/z4dMrhtOH8xvZCR.png"/><p><img src="https://i.loli.net/2021/06/10/TYq9sIE2aRfdyGC.png"></p><ul><li>路径映射(本地程序文件目录与docker文件目录的映射)：</li></ul><p><img src="https://i.loli.net/2021/05/21/yigpdXIMG5QTaLw.png"></p><ul><li>同步本地代码数据到docker容器中：</li></ul><p><img src="https://i.loli.net/2021/05/21/mQJGDp1xaB6EjO9.png"></p><ul><li>上传完代码数据后， 需要选择设置python编译器：</li></ul><p><img src="https://i.loli.net/2021/05/21/htdvCb2qlnOas1Y.png"></p><p><img src="https://i.loli.net/2021/05/21/O3yU6kINc9AT8ea.png"></p><p><img src="https://i.loli.net/2021/05/21/bH5aVPAMXDIz42j.png"></p><p><img src="https://i.loli.net/2021/06/10/BH7mE9diJMrcWCp.png"></p><ul><li>设置好python解释器就可以run代码了：</li></ul><p><img src="https://i.loli.net/2021/05/21/jDGmP8npQtaFCY7.png"></p><p>这里要注意一下，代码所要的运行环境还需要在docker容器安装配置好，比如我这里需要pytorch环境以及python代码运行所需的依赖库都已经在docker容器中通过pip安装好了。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> Pycharm </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数参数传递之引用与指针</title>
      <link href="/2022/11/12/han-shu-can-shu-chuan-di-zhi-yin-yong-yu-zhi-zhen/"/>
      <url>/2022/11/12/han-shu-can-shu-chuan-di-zhi-yin-yong-yu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p><strong>形参是实参的拷贝</strong>，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参-&gt;形参），参数的值只能传入，不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递。</p><h2 id="指针传递"><a href="#指针传递" class="headerlink" title="指针传递"></a>指针传递</h2><p><strong>形参为指向实参地址的指针</strong>，当对形参的指向操作时，就相当于对实参本身进行的操作</p><h2 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h2><p><strong>形参相当于是实参的“别名”</strong>，对形参的操作其实就是对实参的操作，在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p><p>引用引入了对象的一个同义词。定义引用的表示方法与定义指针相似，只是用“&amp;”代替了“*”。例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Point <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Point <span class="token operator">&amp;</span>pt2<span class="token operator">=</span>pt1<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义了pt2为pt1的引用。通过这样的定义，pt1和pt2表示同一对象。需要特别强调的是引用并不产生对象的副本，仅仅是对象的同义词。因此，当下面的语句执行后：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pt1<span class="token punctuation">.</span>offset（<span class="token number">2</span>，<span class="token number">2</span>）；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pt1和pt2都具有（12，12）的值。<br>引用必须在定义时马上被初始化，因为它必须是某个东西的同义词。你不能先定义一个引用后才<br>初始化它。例如下面语句是非法的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Point <span class="token operator">&amp;</span>pt3；pt3<span class="token operator">=</span>pt1；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="引用传递和指针传递的区别与联系"><a href="#引用传递和指针传递的区别与联系" class="headerlink" title="引用传递和指针传递的区别与联系"></a>引用传递和指针传递的区别与联系</h1><h2 id="引用的规则"><a href="#引用的规则" class="headerlink" title="引用的规则"></a>引用的规则</h2><ul><li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。 </li><li>不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）。 </li><li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li></ul><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>-都是地址的概念：指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li><p>指针是一个实体，而引用仅是个别名；</p></li><li><p>引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p></li><li><p>引用没有const，指针有const，const的指针不可变；（具体指没有int&amp; const a这种形式，而const int&amp; a是有 的， 前者指引用本身即别名不可以改变，这是当然的，所以不需要这种形式，后者指引用所指的值不可以改变）</p></li><li><p>引用不能为空，指针可以为空；</p></li><li><p>“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p></li><li><p>指针和引用的自增(++)运算意义不一样；</p></li><li><p>引用是类型安全的，而指针不是 (引用比指针多了类型检查</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从概念上讲，<strong>指针从本质上讲就是存放变量地址的一个变量</strong>，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p><p>而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p><p>在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</p><p>指针传递参数本质上是值传递的方式，它所传递的是一个地址值。<em>值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（这里是在说实参指针本身的地址值不会变）</em></p><p>而在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时<strong>存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量</strong>。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p><p><strong>引用传递和指针传递是不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针传递的参数，如果改变被调函数中的指针地址，它将影响不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量，那就得使用指向指针的指针，或者指针引用。</strong></p><p>为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p><p>程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为<strong>指针变量的地址值</strong>，指针变量中的值为其指向变量的地址；而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改.</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>使用引用传递参数和使用指针传递参数都可传递变量的地址，但对于int,float等占用内存较少，其作为函数参数时一般使用引用传递参数；而对于结构体而言一般采用指针传递结构体变量的地址。</p><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="传递可变参数"><a href="#传递可变参数" class="headerlink" title="传递可变参数"></a>传递可变参数</h2><p>传统的c中，函数在调用时参数是通过值来传递的，这就是说函数的参数不具备返回值的能力。所以在传统的c中，如果需要函数的参数具有返回值的能力，往往是通过指针来实现的。比如，实现两整数变量值交换的c程序如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用引用机制后，以上程序的c++版本为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span>a<span class="token punctuation">;</span>    a<span class="token operator">=</span>b<span class="token punctuation">;</span>    b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用该函数的c++方法为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">swap_int<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>c++自动把x,y的地址作为参数传递给swap_int函数。</p><h2 id="给函数传递大型对象"><a href="#给函数传递大型对象" class="headerlink" title="给函数传递大型对象"></a>给函数传递大型对象</h2><p>当大型对象被传递给函数时，使用引用参数可使参数传递效率得到提高，因为引用并不产生对象的副本，也就是参数传递时，对象无须复制。下面的例子定义了一个有限整数集合的类：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> maxCard<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>Class Set<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> elems<span class="token punctuation">[</span>maxCard<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 集和中的元素，maxCard 表示集合中元素个数的最大值。</span>    <span class="token keyword">int</span> card<span class="token punctuation">;</span> <span class="token comment">// 集合中元素的个数。</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>card<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//构造函数</span>    <span class="token keyword">friend</span> Set <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Set <span class="token punctuation">,</span>Set <span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//重载运算符号*，用于计算集合的交集 用对象作为传值参数</span>    <span class="token comment">// friend Set operator * (Set &amp; ,Set &amp; ) 重载运算符号*，用于计算集合的交集 用对象的引用作为传值参数</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先考虑集合交集的实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Set <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span> Set Set1<span class="token punctuation">,</span>Set Set2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Set res<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Set1<span class="token punctuation">.</span>card<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">></span>Set2<span class="token punctuation">.</span>card<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Set1<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>Set2<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>res<span class="token punctuation">.</span>card<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>Set1<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于重载运算符不能对指针单独操作，我们必须把运算数声明为 Set 类型而不是 Set * 。每次使用*做交集运算时，整个集合都被复制，这样效率很低。我们可以用引用来避免这种情况。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Set <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span> Set <span class="token operator">&amp;</span>Set1<span class="token punctuation">,</span>Set <span class="token operator">&amp;</span>Set2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     Set res<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Set1<span class="token punctuation">.</span>card<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">></span>Set2<span class="token punctuation">.</span>card<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Set1<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>Set2<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>res<span class="token punctuation">.</span>card<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>Set1<span class="token punctuation">.</span>elems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用返回值"><a href="#引用返回值" class="headerlink" title="引用返回值"></a>引用返回值</h2><p>如果一个函数返回了引用，那么该函数的调用也可以被赋值。这里有一函数，它拥有两个引用参数并返回一个双精度数的引用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token operator">&amp;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>d1<span class="token punctuation">,</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>d2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> d1<span class="token operator">></span>d2<span class="token operator">?</span>d1<span class="token operator">:</span>d2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于max()函数返回一个对双精度数的引用，那么我们就可以用max() 来对其中较大的双精度数加1：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+=</span><span class="token number">1.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在函数的使用过程中，我们都明白传指针和传引用会使实参的值发生改变。那么能够通过传指针改变指针所指向的地址吗？<br>在解决这个问题之前，也许我们应该先了解指针非常容易混淆的三个属性：</p><ul><li>指针变量地址（&amp;p）</li><li>指针变量指向的地址（p，存储数据的地址）</li><li>指针变量指向的地址的值（*p）</li></ul><p>当我们将指针变量与其它变量比较之后就会发现，指针变量同其它变量是相似的，只是多了最后一种操作。比如一个int类型的变量,<code>int x=5;</code>,<code>&amp;x</code>取出存储<code>5</code>这个数据的地址，同样，<code>&amp;p</code>也是存储指针的地址，<code>p</code>就是这个地址里面保存的值，也就是指向的地址。只是与其它变量不同的是，它除了这两种操作之外，还有一个解引用操作符<code>*p</code>去获取指针变量指向的地址里面保存的值。</p><h2 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//试图改变p指向的地址</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//指针变量指向一个int类型的地址</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">"value:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token string">"value:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token function">make</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token string">"value:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：我们这里虽然使用的是传指针，但是却不是直接改变指针变量指向的地址的值，却是想通过改变指针变量指向的地址来修改它的值，显然这样失败了。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/no.png"></p><p>如果我们希望在函数里面修改指针变量存储的地址而不是它的值，这个时候就需要指针引用了。类似于普通变量传入变量引用，我们也传入一个指针引用，在函数里面，你可以将pp认为和p都是这个指针变量（&amp;p&#x3D;&#x3D;&amp;pp），不似传入指针参数的时候形参和实参的变量（&amp;p！&#x3D;&amp;pp）地址不一样。此时我们操作pp的值就是更改了p的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">&amp;</span>pp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//改变p指向的地址</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：当我们修改传入参数为指针的引用的时候就可以修改指针变量所指向的地址了，可以看见，传入指针引用可以修改指针变量的值（p）和指向的值（*p）。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes.png"></p><h2 id="二级指针-1"><a href="#二级指针-1" class="headerlink" title="二级指针"></a>二级指针</h2><p>指向指针的指针变量称为二级指针。<br>如果pp是一个二级指针，那么有如下属性：</p><ul><li>二级指针的地址（&amp;pp）</li><li>二级指针的地址保存的地址（pp）</li><li>二级指针的地址保存的地址，该地址里面保存的地址（*pp）</li><li>二级指针的地址保存的地址，该地址里面保存的地址里面的数据（**pp）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/kuangtu.png"> </p><p>除了上面传入指针引用改变一级指针指向的地址以外，我们还可以通过传入一个二级指针去修改它对应的一级指针指向的地址，同样达到了修改指针变量的效果。二级指针的指向的地址存储的值就是一级指针指向的地址。对一级指针变量解引用得到的是指针指向的地址存储的数据，二级指针变量解引用得到的也是该二级指针指向的地址存储的地址值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> <span class="token operator">*</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>pp<span class="token operator">=</span>p<span class="token punctuation">;</span> <span class="token comment">//二级指针的解引用被赋值需要得到一个一级指针变量，上图中二级指针的示意图中*pp=p</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token operator">=</span><span class="token operator">&amp;</span>q<span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>pp<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>pp<span class="token operator">&lt;&lt;</span><span class="token string">"    "</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>q<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span>q<span class="token operator">&lt;&lt;</span><span class="token string">"       value:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>q<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token function">make</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"address:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>pp<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>pp<span class="token operator">&lt;&lt;</span><span class="token string">"    "</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>q<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span>q<span class="token operator">&lt;&lt;</span><span class="token string">"       value:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>q<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：通过对二级指针的解引用赋值成功修改了一级指针指向的地址。如果仅仅在make函数里面对**pp&#x3D;66;操作，那么所有的地址不会改变，仅仅会改变值为66。</p><p><img src="https://cdn.jsdelivr.net/gh/geiyiren/MyBlogImage1/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B9%8B%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/yes2.png"></p><h1 id="各种类型的函数参数传递"><a href="#各种类型的函数参数传递" class="headerlink" title="各种类型的函数参数传递"></a>各种类型的函数参数传递</h1><h2 id="声明-h"><a href="#声明-h" class="headerlink" title="声明.h"></a>声明.h</h2><pre class="line-numbers language-C" data-language="C"><div class="caption"><span>++</span></div><code class="language-C">&#x2F;&#x2F; 结构体数组   (in_ldc)void getLdc(TLensDistortionCorrection (&amp;in_ldc)[NUM_CAMERAS]);&#x2F;&#x2F; cv::Mat  (in_MatK)void getMatK(cv::Mat *in_MatK);&#x2F;&#x2F; 内存块(map)  (in_BEMap)void getBEMap(unsigned short *&amp;in_BEMap);&#x2F;&#x2F; cv::Rect数组 (in_BESetRoi)void getBESetRoi(cv::Rect *in_BESetRoi);&#x2F;&#x2F; cv::Mat 数组 (in_wide_angle_map)void getWideAngleMap(float **in_wide_angle_map);&#x2F;&#x2F; 整数 (in_wide_angle_width,in_wide_angle_height)void getWideAngleSize(int &amp;in_wide_angle_width, int &amp;in_wide_angle_height);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义-cpp"><a href="#定义-cpp" class="headerlink" title="定义.cpp"></a>定义.cpp</h2><ul><li><p>结构体数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> distCenterX<span class="token punctuation">;</span>    <span class="token keyword">float</span> distCenterY<span class="token punctuation">;</span>    <span class="token keyword">float</span> distFocalLength<span class="token punctuation">;</span>    <span class="token keyword">float</span> distFocalLengthInv<span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>lut_d2u<span class="token punctuation">;</span>    <span class="token keyword">int32_t</span> lut_d2u_indMax<span class="token punctuation">;</span>    <span class="token keyword">float</span> lut_d2u_step<span class="token punctuation">;</span>    <span class="token keyword">float</span> lut_d2u_stepInv<span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>lut_u2d<span class="token punctuation">;</span>    <span class="token keyword">int32_t</span> lut_u2d_indMax<span class="token punctuation">;</span>    <span class="token keyword">float</span> lut_u2d_step<span class="token punctuation">;</span>    <span class="token keyword">float</span> lut_u2d_stepInv<span class="token punctuation">;</span>    <span class="token keyword">bool</span> if_get_matrix <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat intrinsics <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Scalar</span><span class="token double-colon punctuation">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span>Mat distortionCoeff <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> CV_32FC1<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token class-name">Scalar</span><span class="token double-colon punctuation">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> TLensDistortionCorrection<span class="token punctuation">;</span>TLensDistortionCorrection TLdc<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">getLdc</span><span class="token punctuation">(</span><span class="token function">TLensDistortionCorrection</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>in_ldc<span class="token punctuation">)</span><span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        in_ldc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TLdc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>map</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>BEMap <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>BEMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token operator">*</span> BEGetRoiSize <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getBEMap</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token operator">&amp;</span>in_BEMap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    in_BEMap <span class="token operator">=</span> BEMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// cv::Rect</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rect_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rect_index <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> rect_index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BESetRoi<span class="token punctuation">[</span>rect_index<span class="token punctuation">]</span> <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Rect</span><span class="token punctuation">(</span>BE_set_roi<span class="token punctuation">[</span>rect_index <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> BE_set_roi<span class="token punctuation">[</span>rect_index <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                        BE_set_roi<span class="token punctuation">[</span>rect_index <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> BE_set_roi<span class="token punctuation">[</span>rect_index <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getBESetRoi</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Rect <span class="token operator">*</span>in_BESetRoi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        in_BESetRoi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> BESetRoi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cv::Mat []</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token operator">*</span>wideAngleViewMap<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    wideAngleViewMap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>wideAngle_width <span class="token operator">*</span> wideAngle_height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">getWideAngleMap</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token operator">*</span>in_wide_angle_map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_CAMERAS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wideAngleViewMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            in_wide_angle_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> wideAngleViewMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"getWideAngleMap failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>int</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> wideAngle_width <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span> <span class="token comment">//广角视图的尺寸，需要为偶数</span><span class="token keyword">int</span> wideAngle_height <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">ParametersInit</span><span class="token double-colon punctuation">::</span><span class="token function">getWideAngleSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>in_wide_angle_width<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>in_wide_angle_height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    in_wide_angle_width <span class="token operator">=</span> wideAngle_width<span class="token punctuation">;</span>    in_wide_angle_height <span class="token operator">=</span> wideAngle_height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="使用-cpp"><a href="#使用-cpp" class="headerlink" title="使用.cpp"></a>使用.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// </span>TLensDistortionCorrection m_ldc<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">getLdc</span><span class="token punctuation">(</span>my_avm_bsd<span class="token punctuation">.</span>m_ldc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span>cv<span class="token double-colon punctuation">::</span>Mat m_MatK<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">getMatK</span><span class="token punctuation">(</span>my_avm_bsd<span class="token punctuation">.</span>m_MatK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>BE_Map<span class="token punctuation">;</span><span class="token function">getBEMap</span><span class="token punctuation">(</span>my_BB_YUV<span class="token punctuation">.</span>BE_Map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span>cv<span class="token double-colon punctuation">::</span>Rect BE_SetRoi<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">getBESetRoi</span><span class="token punctuation">(</span>my_BB_YUV<span class="token punctuation">.</span>BE_SetRoi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">float</span> <span class="token operator">*</span>wide_angle_map<span class="token punctuation">[</span>NUM_CAMERAS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">getWideAngleMap</span><span class="token punctuation">(</span>g_avm_set<span class="token operator">-></span>wide_angle_map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">int</span> m_wideAngle_width<span class="token punctuation">;</span><span class="token keyword">int</span> m_wideAngle_height<span class="token punctuation">;</span><span class="token function">getWideAngleSize</span><span class="token punctuation">(</span>g_avm_set<span class="token operator">-></span>m_wideAngle_width<span class="token punctuation">,</span> g_avm_set<span class="token operator">-></span>m_wideAngle_height<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul><li><a href="https://www.pudn.com/news/62615ba10e75e420124071b2.html">C++中引用传递与指针传递区别（进一步整理）</a> </li><li><a href="https://blog.csdn.net/qq_32483145/article/details/52901230">二级指针和指针引用函数传参（C++）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数参数传递 </tag>
            
            <tag> 引用与指针 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
